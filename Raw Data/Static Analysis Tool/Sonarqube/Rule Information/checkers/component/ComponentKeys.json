{
  "name": "ComponentKeys",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 58,
  "branches": 7,
  "apis": 12,
  "test": [
    {
      "description": "create_key_from_module_key_path_and_branch",
      "expected-problems": null,
      "expected-linenumbers": 5,
      "code": "  public void create_key_from_module_key_path_and_branch() {\n\n    assertThat(ComponentKeys.createKey(\"module_key\", \"file\", \"origin/master\")).isEqualTo(\"module_key:origin/master:file\");\n\n    assertThat(ComponentKeys.createKey(\"module_key\", \"file\", null)).isEqualTo(\"module_key:file\");\n\n    assertThat(ComponentKeys.createKey(\"module_key\", null, null)).isEqualTo(\"module_key\");\n\n  }"
    },
    {
      "description": "valid_project_key",
      "expected-problems": null,
      "expected-linenumbers": 4,
      "code": "  public void valid_project_key() {\n\n    assertThat(ComponentKeys.isValidProjectKey(\"abc\")).isTrue();\n\n    assertThat(ComponentKeys.isValidProjectKey(\"ab_12\")).isTrue();\n\n  }"
    },
    {
      "description": "invalid_project_key",
      "expected-problems": null,
      "expected-linenumbers": 10,
      "code": "  public void invalid_project_key() {\n\n    assertThat(ComponentKeys.isValidProjectKey(\"0123\")).isFalse();\n\n\n\n    assertThat(ComponentKeys.isValidProjectKey(\"ab/12\")).isFalse();\n\n    assertThat(ComponentKeys.isValidProjectKey(\"코드품질\")).isFalse();\n\n\n\n    assertThat(ComponentKeys.isValidProjectKey(\"\")).isFalse();\n\n    assertThat(ComponentKeys.isValidProjectKey(\" \")).isFalse();\n\n    assertThat(ComponentKeys.isValidProjectKey(\"ab 12\")).isFalse();\n\n    assertThat(ComponentKeys.isValidProjectKey(\" ab\")).isFalse();\n\n    assertThat(ComponentKeys.isValidProjectKey(\"ab \")).isFalse();\n\n  }"
    },
    {
      "description": "checkProjectKey_with_correct_keys",
      "expected-problems": null,
      "expected-linenumbers": 4,
      "code": "  public void checkProjectKey_with_correct_keys() {\n\n    ComponentKeys.checkProjectKey(\"abc\");\n\n    ComponentKeys.checkProjectKey(\"a-b_1.:2\");\n\n  }"
    },
    {
      "description": "checkProjectKey_fail_if_key_is_empty",
      "expected-problems": null,
      "expected-linenumbers": 4,
      "code": "  public void checkProjectKey_fail_if_key_is_empty() {\n\n    assertThatThrownBy(() -> ComponentKeys.checkProjectKey(\"\"))\n\n      .isInstanceOf(IllegalArgumentException.class);\n\n  }"
    },
    {
      "description": "checkProjectKey_fail_if_space",
      "expected-problems": null,
      "expected-linenumbers": 4,
      "code": "  public void checkProjectKey_fail_if_space() {\n\n    assertThatThrownBy(() -> ComponentKeys.checkProjectKey(\"ab 12\"))\n\n      .isInstanceOf(IllegalArgumentException.class);\n\n  }"
    },
    {
      "description": "checkProjectKey_fail_if_only_digit",
      "expected-problems": null,
      "expected-linenumbers": 5,
      "code": "  public void checkProjectKey_fail_if_only_digit() {\n\n    assertThatThrownBy(() -> ComponentKeys.checkProjectKey(\"0123\"))\n\n      .isInstanceOf(IllegalArgumentException.class)\n\n      .hasMessage(\"Malformed key for '0123'. Allowed characters are alphanumeric, '-', '_', '.' and ':', with at least one non-digit.\");\n\n  }"
    },
    {
      "description": "checkProjectKey_fail_if_special_characters_not_allowed",
      "expected-problems": null,
      "expected-linenumbers": 4,
      "code": "  public void checkProjectKey_fail_if_special_characters_not_allowed() {\n\n    assertThatThrownBy(() -> ComponentKeys.checkProjectKey(\"0123\"))\n\n      .isInstanceOf(IllegalArgumentException.class);\n\n  }"
    }
  ]
}