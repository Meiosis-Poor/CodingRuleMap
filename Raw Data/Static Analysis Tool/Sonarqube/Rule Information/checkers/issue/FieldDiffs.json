{
  "name": "FieldDiffs",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 238,
  "branches": 25,
  "apis": 66,
  "test": [
    {
      "description": "diffs_should_be_empty_by_default",
      "expected-problems": null,
      "expected-linenumbers": 3,
      "code": "  public void diffs_should_be_empty_by_default() {\n\n    assertThat(diffs.diffs()).isEmpty();\n\n  }"
    },
    {
      "description": "test_diff",
      "expected-problems": null,
      "expected-linenumbers": 11,
      "code": "  public void test_diff() {\n\n    diffs.setDiff(\"severity\", \"BLOCKER\", \"INFO\");\n\n    diffs.setDiff(\"resolution\", \"OPEN\", \"FIXED\");\n\n\n\n    assertThat(diffs.diffs()).hasSize(2);\n\n\n\n    FieldDiffs.Diff diff = diffs.diffs().get(\"severity\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"BLOCKER\");\n\n    assertThat(diff.newValue()).isEqualTo(\"INFO\");\n\n\n\n    diff = diffs.diffs().get(\"resolution\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"OPEN\");\n\n    assertThat(diff.newValue()).isEqualTo(\"FIXED\");\n\n  }"
    },
    {
      "description": "diff_with_long_values",
      "expected-problems": null,
      "expected-linenumbers": 6,
      "code": "  public void diff_with_long_values() {\n\n    diffs.setDiff(\"technicalDebt\", 50L, \"100\");\n\n\n\n    FieldDiffs.Diff diff = diffs.diffs().get(\"technicalDebt\");\n\n    assertThat(diff.oldValueLong()).isEqualTo(50L);\n\n    assertThat(diff.newValueLong()).isEqualTo(100L);\n\n  }"
    },
    {
      "description": "diff_with_empty_long_values",
      "expected-problems": null,
      "expected-linenumbers": 6,
      "code": "  public void diff_with_empty_long_values() {\n\n    diffs.setDiff(\"technicalDebt\", null, \"\");\n\n\n\n    FieldDiffs.Diff diff = diffs.diffs().get(\"technicalDebt\");\n\n    assertThat(diff.oldValueLong()).isNull();\n\n    assertThat(diff.newValueLong()).isNull();\n\n  }"
    },
    {
      "description": "diff_with_assignee",
      "expected-problems": null,
      "expected-linenumbers": 6,
      "code": "  public void diff_with_assignee() {\n\n    diffs.setDiff(\"assignee\", \"oldAssignee\", NAME_WITH_RESERVED_CHARS);\n\n\n\n    FieldDiffs.Diff diff = diffs.diffs().get(\"assignee\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"oldAssignee\");\n\n    assertThat(diff.newValue()).isEqualTo(NAME_WITH_RESERVED_CHARS);\n\n  }"
    },
    {
      "description": "get",
      "expected-problems": null,
      "expected-linenumbers": 6,
      "code": "  public void get() {\n\n    diffs.setDiff(\"severity\", \"BLOCKER\", \"INFO\");\n\n\n\n    FieldDiffs.Diff diff = diffs.get(\"severity\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"BLOCKER\");\n\n    assertThat(diff.newValue()).isEqualTo(\"INFO\");\n\n  }"
    },
    {
      "description": "get_with_assignee",
      "expected-problems": null,
      "expected-linenumbers": 6,
      "code": "  public void get_with_assignee() {\n\n    diffs.setDiff(\"assignee\", \"oldAssignee\", NAME_WITH_RESERVED_CHARS);\n\n\n\n    FieldDiffs.Diff diff = diffs.get(\"assignee\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"oldAssignee\");\n\n    assertThat(diff.newValue()).isEqualTo(NAME_WITH_RESERVED_CHARS);\n\n  }"
    },
    {
      "description": "test_diff_by_key",
      "expected-problems": null,
      "expected-linenumbers": 11,
      "code": "  public void test_diff_by_key() {\n\n    diffs.setDiff(\"severity\", \"BLOCKER\", \"INFO\");\n\n    diffs.setDiff(\"resolution\", \"OPEN\", \"FIXED\");\n\n\n\n    assertThat(diffs.diffs()).hasSize(2);\n\n\n\n    FieldDiffs.Diff diff = diffs.diffs().get(\"severity\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"BLOCKER\");\n\n    assertThat(diff.newValue()).isEqualTo(\"INFO\");\n\n\n\n    diff = diffs.diffs().get(\"resolution\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"OPEN\");\n\n    assertThat(diff.newValue()).isEqualTo(\"FIXED\");\n\n  }"
    },
    {
      "description": "should_keep_old_value",
      "expected-problems": null,
      "expected-linenumbers": 7,
      "code": "  public void should_keep_old_value() {\n\n    diffs.setDiff(\"severity\", \"BLOCKER\", \"INFO\");\n\n    diffs.setDiff(\"severity\", null, \"MAJOR\");\n\n    FieldDiffs.Diff diff = diffs.diffs().get(\"severity\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"BLOCKER\");\n\n    assertThat(diff.newValue()).isEqualTo(\"MAJOR\");\n\n  }"
    },
    {
      "description": "test_toString",
      "expected-problems": null,
      "expected-linenumbers": 7,
      "code": "  public void test_toString() {\n\n    diffs.setWebhookSource(\"github\");\n\n    diffs.setExternalUser(\"toto\");\n\n    diffs.setDiff(\"severity\", \"BLOCKER\", \"INFO\");\n\n    diffs.setDiff(\"resolution\", \"OPEN\", \"FIXED\");\n\n\n\n    assertThat(diffs).hasToString(\"webhookSource=github,externalUser=toto,severity=BLOCKER|INFO,resolution=OPEN|FIXED\");\n\n  }"
    },
    {
      "description": "test_toEncodedString",
      "expected-problems": null,
      "expected-linenumbers": 5,
      "code": "  public void test_toEncodedString() {\n\n    diffs.setDiff(\"assignee\", \"oldAssignee\", NAME_WITH_RESERVED_CHARS);\n\n    diffs.setDiff(\"resolution\", \"OPEN\", \"FIXED\");\n\n\n\n    assertThat(diffs.toEncodedString()).isEqualTo(\"assignee=oldAssignee|\" + ENCODED_NAME_WITH_RESERVED_CHARS + \",resolution=OPEN|FIXED\");\n\n  }"
    },
    {
      "description": "test_toString_with_null_values",
      "expected-problems": null,
      "expected-linenumbers": 5,
      "code": "  public void test_toString_with_null_values() {\n\n    diffs.setDiff(\"severity\", null, \"INFO\");\n\n    diffs.setDiff(\"assignee\", \"user1\", null);\n\n\n\n    assertThat(diffs).hasToString(\"severity=INFO,assignee=user1|\");\n\n  }"
    },
    {
      "description": "test_parse",
      "expected-problems": null,
      "expected-linenumbers": 21,
      "code": "  public void test_parse() {\n\n    diffs = FieldDiffs.parse(\"severity=BLOCKER|INFO,webhookSource=github,resolution=OPEN|FIXED,donut=|new,gambas=miam,acme=old|,externalUser=charlie\");\n\n    assertThat(diffs.diffs()).hasSize(5);\n\n\n\n    assertThat(diffs.webhookSource()).contains(\"github\");\n\n    assertThat(diffs.externalUser()).contains(\"charlie\");\n\n\n\n    FieldDiffs.Diff diff = diffs.diffs().get(\"severity\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"BLOCKER\");\n\n    assertThat(diff.newValue()).isEqualTo(\"INFO\");\n\n\n\n    diff = diffs.diffs().get(\"resolution\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"OPEN\");\n\n    assertThat(diff.newValue()).isEqualTo(\"FIXED\");\n\n\n\n    diff = diffs.diffs().get(\"donut\");\n\n    assertThat(diff.oldValue()).isNull();\n\n    assertThat(diff.newValue()).isEqualTo(\"new\");\n\n\n\n    diff = diffs.diffs().get(\"gambas\");\n\n    assertThat(diff.oldValue()).isNull();\n\n    assertThat(diff.newValue()).isEqualTo(\"miam\");\n\n\n\n    diff = diffs.diffs().get(\"acme\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"old\");\n\n    assertThat(diff.newValue()).isNull();\n\n  }"
    },
    {
      "description": "test_parse_encoded_assignee",
      "expected-problems": null,
      "expected-linenumbers": 10,
      "code": "  public void test_parse_encoded_assignee() {\n\n    diffs = FieldDiffs.parse(\"severity=BLOCKER|INFO,assignee=oldValue|\" + ENCODED_NAME_WITH_RESERVED_CHARS);\n\n    assertThat(diffs.diffs()).hasSize(2);\n\n\n\n    FieldDiffs.Diff diff = diffs.diffs().get(\"severity\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"BLOCKER\");\n\n    assertThat(diff.newValue()).isEqualTo(\"INFO\");\n\n\n\n    diff = diffs.diffs().get(\"assignee\");\n\n    assertThat(diff.oldValue()).isEqualTo(\"oldValue\");\n\n    assertThat(diff.newValue()).isEqualTo(NAME_WITH_RESERVED_CHARS);\n\n  }"
    },
    {
      "description": "test_parse_empty_values",
      "expected-problems": null,
      "expected-linenumbers": 12,
      "code": "  public void test_parse_empty_values() {\n\n    diffs = FieldDiffs.parse(\"severity=INFO,resolution=,webhookSource=,externalUser=\");\n\n\n\n    assertThat(diffs.externalUser()).isEmpty();\n\n    assertThat(diffs.webhookSource()).isEmpty();\n\n    assertThat(diffs.diffs()).hasSize(2);\n\n\n\n    FieldDiffs.Diff diff = diffs.diffs().get(\"severity\");\n\n    assertThat(diff.oldValue()).isNull();\n\n    assertThat(diff.newValue()).isEqualTo(\"INFO\");\n\n\n\n    diff = diffs.diffs().get(\"resolution\");\n\n    assertThat(diff.oldValue()).isNull();\n\n    assertThat(diff.newValue()).isNull();\n\n  }"
    },
    {
      "description": "test_parse_null",
      "expected-problems": null,
      "expected-linenumbers": 4,
      "code": "  public void test_parse_null() {\n\n    diffs = FieldDiffs.parse(null);\n\n    assertThat(diffs.diffs()).isEmpty();\n\n  }"
    },
    {
      "description": "test_parse_empty",
      "expected-problems": null,
      "expected-linenumbers": 4,
      "code": "  public void test_parse_empty() {\n\n    diffs = FieldDiffs.parse(\"\");\n\n    assertThat(diffs.diffs()).isEmpty();\n\n  }"
    }
  ]
}