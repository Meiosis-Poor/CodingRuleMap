{
  "name": "Tracker",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 55,
  "branches": 1,
  "apis": 19,
  "test": [
    {
      "description": "similar_issues_except_rule_do_not_match",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void similar_issues_except_rule_do_not_match() {\n\n    FakeInput baseInput = new FakeInput(\"H1\");\n\n    baseInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"msg\");\n\n\n\n    FakeInput rawInput = new FakeInput(\"H1\");\n\n    Issue raw = rawInput.createIssueOnLine(1, RULE_UNUSED_LOCAL_VARIABLE, \"msg\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw)).isNull();\n\n  }"
    },
    {
      "description": "line_hash_has_greater_priority_than_line",
      "expected-problems": null,
      "expected-linenumbers": 11,
      "code": "  public void line_hash_has_greater_priority_than_line() {\n\n    FakeInput baseInput = new FakeInput(\"H1\", \"H2\", \"H3\");\n\n    Issue base1 = baseInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"msg\");\n\n    Issue base2 = baseInput.createIssueOnLine(3, RULE_SYSTEM_PRINT, \"msg\");\n\n\n\n    FakeInput rawInput = new FakeInput(\"a\", \"b\", \"H1\", \"H2\", \"H3\");\n\n    Issue raw1 = rawInput.createIssueOnLine(3, RULE_SYSTEM_PRINT, \"msg\");\n\n    Issue raw2 = rawInput.createIssueOnLine(5, RULE_SYSTEM_PRINT, \"msg\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw1)).isSameAs(base1);\n\n    assertThat(tracking.baseFor(raw2)).isSameAs(base2);\n\n  }"
    },
    {
      "description": "no_lines_and_different_messages_match",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void no_lines_and_different_messages_match() {\n\n    FakeInput baseInput = new FakeInput(\"H1\", \"H2\", \"H3\");\n\n    Issue base = baseInput.createIssue(RULE_SYSTEM_PRINT, \"msg1\");\n\n\n\n    FakeInput rawInput = new FakeInput(\"H10\", \"H11\", \"H12\");\n\n    Issue raw = rawInput.createIssue(RULE_SYSTEM_PRINT, \"msg2\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw)).isSameAs(base);\n\n  }"
    },
    {
      "description": "similar_issues_except_message_match",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void similar_issues_except_message_match() {\n\n    FakeInput baseInput = new FakeInput(\"H1\");\n\n    Issue base = baseInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"msg1\");\n\n\n\n    FakeInput rawInput = new FakeInput(\"H1\");\n\n    Issue raw = rawInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"msg2\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw)).isSameAs(base);\n\n  }"
    },
    {
      "description": "similar_issues_if_trimmed_messages_match",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void similar_issues_if_trimmed_messages_match() {\n\n    FakeInput baseInput = new FakeInput(\"H1\");\n\n    Issue base = baseInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"   message  \");\n\n\n\n    FakeInput rawInput = new FakeInput(\"H2\");\n\n    Issue raw = rawInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"message\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw)).isSameAs(base);\n\n  }"
    },
    {
      "description": "similar_issues_except_line_hash_match",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void similar_issues_except_line_hash_match() {\n\n    FakeInput baseInput = new FakeInput(\"H1\");\n\n    Issue base = baseInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"msg\");\n\n\n\n    FakeInput rawInput = new FakeInput(\"H2\");\n\n    Issue raw = rawInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"msg\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw)).isSameAs(base);\n\n  }"
    },
    {
      "description": "similar_issues_except_line_match",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void similar_issues_except_line_match() {\n\n    FakeInput baseInput = new FakeInput(\"H1\", \"H2\");\n\n    Issue base = baseInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"msg\");\n\n\n\n    FakeInput rawInput = new FakeInput(\"H2\", \"H1\");\n\n    Issue raw = rawInput.createIssueOnLine(2, RULE_SYSTEM_PRINT, \"msg\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw)).isSameAs(base);\n\n  }"
    },
    {
      "description": "only_same_line_hash_match_match",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void only_same_line_hash_match_match() {\n\n    FakeInput baseInput = new FakeInput(\"H1\", \"H2\");\n\n    Issue base = baseInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"msg\");\n\n\n\n    FakeInput rawInput = new FakeInput(\"H3\", \"H4\", \"H1\");\n\n    Issue raw = rawInput.createIssueOnLine(3, RULE_SYSTEM_PRINT, \"other message\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw)).isSameAs(base);\n\n  }"
    },
    {
      "description": "do_not_fail_if_base_issue_without_line",
      "expected-problems": null,
      "expected-linenumbers": 9,
      "code": "  public void do_not_fail_if_base_issue_without_line() {\n\n    FakeInput baseInput = new FakeInput(\"H1\", \"H2\");\n\n    Issue base = baseInput.createIssueOnLine(1, RULE_SYSTEM_PRINT, \"msg1\");\n\n\n\n    FakeInput rawInput = new FakeInput(\"H3\", \"H4\", \"H5\");\n\n    Issue raw = rawInput.createIssue(RULE_UNUSED_LOCAL_VARIABLE, \"msg2\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw)).isNull();\n\n    assertThat(tracking.getUnmatchedBases()).containsOnly(base);\n\n  }"
    },
    {
      "description": "do_not_fail_if_raw_issue_without_line",
      "expected-problems": null,
      "expected-linenumbers": 9,
      "code": "  public void do_not_fail_if_raw_issue_without_line() {\n\n    FakeInput baseInput = new FakeInput(\"H1\", \"H2\");\n\n    Issue base = baseInput.createIssue(RULE_SYSTEM_PRINT, \"msg1\");\n\n\n\n    FakeInput rawInput = new FakeInput(\"H3\", \"H4\", \"H5\");\n\n    Issue raw = rawInput.createIssueOnLine(1, RULE_UNUSED_LOCAL_VARIABLE, \"msg2\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw)).isNull();\n\n    assertThat(tracking.getUnmatchedBases()).containsOnly(base);\n\n  }"
    },
    {
      "description": "do_not_fail_if_message_is_null",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void do_not_fail_if_message_is_null() {\n\n    FakeInput baseInput = new FakeInput(\"H1\", \"H2\");\n\n    Issue base = baseInput.createIssueOnLine(1, RULE_UNUSED_LOCAL_VARIABLE, null);\n\n\n\n    FakeInput rawInput = new FakeInput(\"H1\", \"H2\");\n\n    Issue raw = rawInput.createIssueOnLine(1, RULE_UNUSED_LOCAL_VARIABLE, null);\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw)).isNotNull();\n\n  }"
    },
    {
      "description": "do_not_fail_if_raw_line_does_not_exist",
      "expected-problems": null,
      "expected-linenumbers": 6,
      "code": "  public void do_not_fail_if_raw_line_does_not_exist() {\n\n    FakeInput baseInput = new FakeInput();\n\n    FakeInput rawInput = new FakeInput(\"H1\").addIssue(new Issue(200, \"H200\", RULE_SYSTEM_PRINT, \"msg\", org.sonar.api.issue.Issue.STATUS_OPEN, new Date()));\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n\n\n    assertThat(tracking.getUnmatchedRaws()).hasSize(1);\n\n  }"
    },
    {
      "description": "recognize_blocks_1",
      "expected-problems": null,
      "expected-linenumbers": 50,
      "code": "  public void recognize_blocks_1() {\n\n    FakeInput baseInput = FakeInput.createForSourceLines(\n\n      \"package example1;\",\n\n      \"\",\n\n      \"public class Toto {\",\n\n      \"\",\n\n      \"    public void doSomething() {\",\n\n      \"        // doSomething\",\n\n      \"        }\",\n\n      \"\",\n\n      \"    public void doSomethingElse() {\",\n\n      \"        // doSomethingElse\",\n\n      \"        }\",\n\n      \"}\");\n\n    Issue base1 = baseInput.createIssueOnLine(7, RULE_SYSTEM_PRINT, \"Indentation\");\n\n    Issue base2 = baseInput.createIssueOnLine(11, RULE_SYSTEM_PRINT, \"Indentation\");\n\n\n\n    FakeInput rawInput = FakeInput.createForSourceLines(\n\n      \"package example1;\",\n\n      \"\",\n\n      \"public class Toto {\",\n\n      \"\",\n\n      \"    public Toto(){}\",\n\n      \"\",\n\n      \"    public void doSomethingNew() {\",\n\n      \"        // doSomethingNew\",\n\n      \"        }\",\n\n      \"\",\n\n      \"    public void doSomethingElseNew() {\",\n\n      \"        // doSomethingElseNew\",\n\n      \"        }\",\n\n      \"\",\n\n      \"    public void doSomething() {\",\n\n      \"        // doSomething\",\n\n      \"        }\",\n\n      \"\",\n\n      \"    public void doSomethingElse() {\",\n\n      \"        // doSomethingElse\",\n\n      \"        }\",\n\n      \"}\");\n\n    Issue raw1 = rawInput.createIssueOnLine(9, RULE_SYSTEM_PRINT, \"Indentation\");\n\n    Issue raw2 = rawInput.createIssueOnLine(13, RULE_SYSTEM_PRINT, \"Indentation\");\n\n    Issue raw3 = rawInput.createIssueOnLine(17, RULE_SYSTEM_PRINT, \"Indentation\");\n\n    Issue raw4 = rawInput.createIssueOnLine(21, RULE_SYSTEM_PRINT, \"Indentation\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw1)).isNull();\n\n    assertThat(tracking.baseFor(raw2)).isNull();\n\n    assertThat(tracking.baseFor(raw3)).isSameAs(base1);\n\n    assertThat(tracking.baseFor(raw4)).isSameAs(base2);\n\n    assertThat(tracking.getUnmatchedBases()).isEmpty();\n\n  }"
    },
    {
      "description": "no_match_if_only_same_rulekey",
      "expected-problems": null,
      "expected-linenumbers": 45,
      "code": "  public void no_match_if_only_same_rulekey() {\n\n    FakeInput baseInput = FakeInput.createForSourceLines(\n\n      \"package aa;\",\n\n      \"\",\n\n      \"/**\",\n\n      \" * Hello world\",\n\n      \" *\",\n\n      \" */\",\n\n      \"public class App {\",\n\n      \"\",\n\n      \"    public static void main(String[] args) {\",\n\n      \"\",\n\n      \"        int magicNumber = 42;\",\n\n      \"\",\n\n      \"        String s = new String(\\\"Very long line that does not meet our maximum 120 character line length criteria and should be wrapped to avoid SonarQube issues.\\\");\\r\\n\"\n\n        +\n\n        \"    }\",\n\n      \"}\");\n\n    Issue base1 = baseInput.createIssueOnLine(11, RuleKey.of(\"java\", \"S109\"), \"Assign this magic number 42 to a well-named constant, and use the constant instead.\");\n\n    Issue base2 = baseInput.createIssueOnLine(13, RuleKey.of(\"java\", \"S00103\"), \"Split this 163 characters long line (which is greater than 120 authorized).\");\n\n\n\n    FakeInput rawInput = FakeInput.createForSourceLines(\n\n      \"package aa;\",\n\n      \"\",\n\n      \"/**\",\n\n      \" * Hello world\",\n\n      \" *\",\n\n      \" */\",\n\n      \"public class App {\",\n\n      \"\",\n\n      \"    public static void main(String[] args) {\",\n\n      \"        \",\n\n      \"        System.out.println(\\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus....\\\");\",\n\n      \"        \",\n\n      \"        int a = 0;\",\n\n      \"        \",\n\n      \"        int x = a + 123;\",\n\n      \"    }\",\n\n      \"}\");\n\n    Issue raw1 = rawInput.createIssueOnLine(11, RuleKey.of(\"java\", \"S00103\"), \"Split this 139 characters long line (which is greater than 120 authorized).\");\n\n    Issue raw2 = rawInput.createIssueOnLine(15, RuleKey.of(\"java\", \"S109\"), \"Assign this magic number 123 to a well-named constant, and use the constant instead.\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw1)).isNull();\n\n    assertThat(tracking.baseFor(raw2)).isNull();\n\n    assertThat(tracking.getUnmatchedBases()).hasSize(2);\n\n  }"
    },
    {
      "description": "recognize_blocks_2",
      "expected-problems": null,
      "expected-linenumbers": 35,
      "code": "  public void recognize_blocks_2() {\n\n    FakeInput baseInput = FakeInput.createForSourceLines(\n\n      \"package example2;\",\n\n      \"\",\n\n      \"public class Toto {\",\n\n      \"  void method1() {\",\n\n      \"    System.out.println(\\\"toto\\\");\",\n\n      \"  }\",\n\n      \"}\");\n\n    Issue base1 = baseInput.createIssueOnLine(5, RULE_SYSTEM_PRINT, \"SystemPrintln\");\n\n\n\n    FakeInput rawInput = FakeInput.createForSourceLines(\n\n      \"package example2;\",\n\n      \"\",\n\n      \"public class Toto {\",\n\n      \"\",\n\n      \"  void method2() {\",\n\n      \"    System.out.println(\\\"toto\\\");\",\n\n      \"  }\",\n\n      \"\",\n\n      \"  void method1() {\",\n\n      \"    System.out.println(\\\"toto\\\");\",\n\n      \"  }\",\n\n      \"\",\n\n      \"  void method3() {\",\n\n      \"    System.out.println(\\\"toto\\\");\",\n\n      \"  }\",\n\n      \"}\");\n\n    Issue raw1 = rawInput.createIssueOnLine(6, RULE_SYSTEM_PRINT, \"SystemPrintln\");\n\n    Issue raw2 = rawInput.createIssueOnLine(10, RULE_SYSTEM_PRINT, \"SystemPrintln\");\n\n    Issue raw3 = rawInput.createIssueOnLine(14, RULE_SYSTEM_PRINT, \"SystemPrintln\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.baseFor(raw1)).isNull();\n\n    assertThat(tracking.baseFor(raw2)).isSameAs(base1);\n\n    assertThat(tracking.baseFor(raw3)).isNull();\n\n  }"
    },
    {
      "description": "recognize_blocks_3",
      "expected-problems": null,
      "expected-linenumbers": 53,
      "code": "  public void recognize_blocks_3() {\n\n    FakeInput baseInput = FakeInput.createForSourceLines(\n\n      \"package sample;\",\n\n      \"\",\n\n      \"public class Sample {\",\n\n      \"\\t\",\n\n      \"\\tpublic Sample(int i) {\",\n\n      \"\\t\\tint j = i+1;\", // UnusedLocalVariable\n\n      \"\\t}\",\n\n      \"\",\n\n      \"\\tpublic boolean avoidUtilityClass() {\", // NotDesignedForExtension\n\n      \"\\t\\treturn true;\",\n\n      \"\\t}\",\n\n      \"\",\n\n      \"\\tprivate String myMethod() {\", // UnusedPrivateMethod\n\n      \"\\t\\treturn \\\"hello\\\";\",\n\n      \"\\t}\",\n\n      \"}\");\n\n    Issue base1 = baseInput.createIssueOnLine(6, RULE_UNUSED_LOCAL_VARIABLE, \"Avoid unused local variables such as 'j'.\");\n\n    Issue base2 = baseInput.createIssueOnLine(13, RULE_UNUSED_PRIVATE_METHOD, \"Avoid unused private methods such as 'myMethod()'.\");\n\n    Issue base3 = baseInput.createIssueOnLine(9, RULE_NOT_DESIGNED_FOR_EXTENSION,\n\n      \"Method 'avoidUtilityClass' is not designed for extension - needs to be abstract, final or empty.\");\n\n\n\n    FakeInput rawInput = FakeInput.createForSourceLines(\n\n      \"package sample;\",\n\n      \"\",\n\n      \"public class Sample {\",\n\n      \"\",\n\n      \"\\tpublic Sample(int i) {\",\n\n      \"\\t\\tint j = i+1;\", // UnusedLocalVariable is still there\n\n      \"\\t}\",\n\n      \"\\t\",\n\n      \"\\tpublic boolean avoidUtilityClass() {\", // NotDesignedForExtension is still there\n\n      \"\\t\\treturn true;\",\n\n      \"\\t}\",\n\n      \"\\t\",\n\n      \"\\tprivate String myMethod() {\", // issue UnusedPrivateMethod is fixed because it's called at line 18\n\n      \"\\t\\treturn \\\"hello\\\";\",\n\n      \"\\t}\",\n\n      \"\",\n\n      \"  public void newIssue() {\",\n\n      \"    String msg = myMethod();\", // new issue UnusedLocalVariable\n\n      \"  }\",\n\n      \"}\");\n\n\n\n    Issue newRaw = rawInput.createIssueOnLine(18, RULE_UNUSED_LOCAL_VARIABLE, \"Avoid unused local variables such as 'msg'.\");\n\n    Issue rawSameAsBase1 = rawInput.createIssueOnLine(6, RULE_UNUSED_LOCAL_VARIABLE, \"Avoid unused local variables such as 'j'.\");\n\n    Issue rawSameAsBase3 = rawInput.createIssueOnLine(9, RULE_NOT_DESIGNED_FOR_EXTENSION,\n\n      \"Method 'avoidUtilityClass' is not designed for extension - needs to be abstract, final or empty.\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n\n\n    assertThat(tracking.baseFor(newRaw)).isNull();\n\n    assertThat(tracking.baseFor(rawSameAsBase1)).isSameAs(base1);\n\n    assertThat(tracking.baseFor(rawSameAsBase3)).isSameAs(base3);\n\n    assertThat(tracking.getUnmatchedBases()).containsOnly(base2);\n\n  }"
    },
    {
      "description": "match_only_one_issue_when_multiple_blocks_match_the_same_block",
      "expected-problems": null,
      "expected-linenumbers": 120,
      "code": "  public void match_only_one_issue_when_multiple_blocks_match_the_same_block() {\n\n    FakeInput baseInput = FakeInput.createForSourceLines(\n\n      \"public class Toto {\",\n\n      \"  private final Deque<Set<DataItem>> one = new ArrayDeque<Set<DataItem>>();\",\n\n      \"  private final Deque<Set<DataItem>> two = new ArrayDeque<Set<DataItem>>();\",\n\n      \"  private final Deque<Integer> three = new ArrayDeque<Integer>();\",\n\n      \"  private final Deque<Set<Set<DataItem>>> four = new ArrayDeque<Set<DataItem>>();\");\n\n    Issue base1 = baseInput.createIssueOnLine(2, RULE_USE_DIAMOND, \"Use diamond\");\n\n    baseInput.createIssueOnLine(3, RULE_USE_DIAMOND, \"Use diamond\");\n\n    baseInput.createIssueOnLine(4, RULE_USE_DIAMOND, \"Use diamond\");\n\n    baseInput.createIssueOnLine(5, RULE_USE_DIAMOND, \"Use diamond\");\n\n\n\n    FakeInput rawInput = FakeInput.createForSourceLines(\n\n      \"public class Toto {\",\n\n      \"  // move all lines\",\n\n      \"  private final Deque<Set<DataItem>> one = new ArrayDeque<Set<DataItem>>();\",\n\n      \"  private final Deque<Set<DataItem>> two = new ArrayDeque<>();\",\n\n      \"  private final Deque<Integer> three = new ArrayDeque<>();\",\n\n      \"  private final Deque<Set<Set<DataItem>>> four = new ArrayDeque<>();\");\n\n    Issue raw1 = rawInput.createIssueOnLine(3, RULE_USE_DIAMOND, \"Use diamond\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.getUnmatchedBases()).hasSize(3);\n\n    assertThat(tracking.baseFor(raw1)).isEqualTo(base1);\n\n  }\n\n\n\n  @Test\n\n  public void match_issues_with_same_rule_key_on_project_level() {\n\n    FakeInput baseInput = new FakeInput();\n\n    Issue base1 = baseInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc] Missing package-info.java in package.\");\n\n    Issue base2 = baseInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc/def] Missing package-info.java in package.\");\n\n\n\n    FakeInput rawInput = new FakeInput();\n\n    Issue raw1 = rawInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc/def] Missing package-info.java in package.\");\n\n    Issue raw2 = rawInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc] Missing package-info.java in package.\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.getUnmatchedBases()).isEmpty();\n\n    assertThat(tracking.baseFor(raw1)).isEqualTo(base2);\n\n    assertThat(tracking.baseFor(raw2)).isEqualTo(base1);\n\n  }\n\n\n\n  private static class Issue implements Trackable {\n\n    private final RuleKey ruleKey;\n\n    private final Integer line;\n\n    private final String message, lineHash;\n\n    private final String status;\n\n    private final Date updateDate;\n\n\n\n    Issue(@Nullable Integer line, String lineHash, RuleKey ruleKey, @Nullable String message, String status, Date updateDate) {\n\n      this.line = line;\n\n      this.lineHash = lineHash;\n\n      this.ruleKey = ruleKey;\n\n      this.status = status;\n\n      this.updateDate = updateDate;\n\n      this.message = trim(message);\n\n    }\n\n\n\n    @Override\n\n    public Integer getLine() {\n\n      return line;\n\n    }\n\n\n\n    @CheckForNull\n\n    @Override\n\n    public String getMessage() {\n\n      return message;\n\n    }\n\n\n\n    @Override\n\n    public String getLineHash() {\n\n      return lineHash;\n\n    }\n\n\n\n    @Override\n\n    public RuleKey getRuleKey() {\n\n      return ruleKey;\n\n    }\n\n\n\n    @Override\n\n    public String getStatus() {\n\n      return status;\n\n    }\n\n\n\n    @Override\n\n    public Date getUpdateDate() {\n\n      return updateDate;\n\n    }\n\n  }\n\n\n\n  private static class FakeInput implements Input<Issue> {\n\n    private final List<Issue> issues = new ArrayList<>();\n\n    private final List<String> lineHashes;\n\n\n\n    FakeInput(String... lineHashes) {\n\n      this.lineHashes = asList(lineHashes);\n\n    }\n\n\n\n    static FakeInput createForSourceLines(String... lines) {\n\n      String[] hashes = new String[lines.length];\n\n      for (int i = 0; i < lines.length; i++) {\n\n        hashes[i] = DigestUtils.md5Hex(lines[i].replaceAll(\"[\\t ]\", \"\"));\n\n      }\n\n      return new FakeInput(hashes);\n\n    }\n\n\n\n    Issue createIssueOnLine(int line, RuleKey ruleKey, String message) {\n\n      Issue issue = new Issue(line, lineHashes.get(line - 1), ruleKey, message, org.sonar.api.issue.Issue.STATUS_OPEN, new Date());\n\n      issues.add(issue);\n\n      return issue;\n\n    }\n\n\n\n    /**\n\n     * No line (line 0)\n\n     */\n\n    Issue createIssue(RuleKey ruleKey, @Nullable String message) {\n\n      Issue issue = new Issue(null, \"\", ruleKey, message, org.sonar.api.issue.Issue.STATUS_OPEN, new Date());\n\n      issues.add(issue);\n\n      return issue;\n\n    }\n\n\n\n    FakeInput addIssue(Issue issue) {\n\n      this.issues.add(issue);\n\n      return this;\n\n    }\n\n\n\n    @Override\n\n    public LineHashSequence getLineHashSequence() {\n\n      return new LineHashSequence(lineHashes);\n\n    }\n\n\n\n    @Override\n\n    public BlockHashSequence getBlockHashSequence() {\n\n      return new BlockHashSequence(getLineHashSequence(), 2);\n\n    }\n\n\n\n    @Override\n\n    public Collection<Issue> getIssues() {\n\n      return issues;\n\n    }\n\n  }\n\n}"
    },
    {
      "description": "match_issues_with_same_rule_key_on_project_level",
      "expected-problems": null,
      "expected-linenumbers": 12,
      "code": "  public void match_issues_with_same_rule_key_on_project_level() {\n\n    FakeInput baseInput = new FakeInput();\n\n    Issue base1 = baseInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc] Missing package-info.java in package.\");\n\n    Issue base2 = baseInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc/def] Missing package-info.java in package.\");\n\n\n\n    FakeInput rawInput = new FakeInput();\n\n    Issue raw1 = rawInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc/def] Missing package-info.java in package.\");\n\n    Issue raw2 = rawInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc] Missing package-info.java in package.\");\n\n\n\n    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);\n\n    assertThat(tracking.getUnmatchedBases()).isEmpty();\n\n    assertThat(tracking.baseFor(raw1)).isEqualTo(base2);\n\n    assertThat(tracking.baseFor(raw2)).isEqualTo(base1);\n\n  }"
    }
  ]
}