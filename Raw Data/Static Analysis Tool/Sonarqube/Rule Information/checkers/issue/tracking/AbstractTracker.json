{
  "name": "AbstractTracker",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 169,
  "branches": 11,
  "apis": 61,
  "test": [
    {
      "description": "lineAndLineHashKey",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void lineAndLineHashKey() {\n\n    Comparator comparator = new Comparator(LineAndLineHashKey::new);\n\n    comparator.sameEqualsAndHashcode(base, same);\n\n    comparator.sameEqualsAndHashcode(base, diffMessage);\n\n    comparator.differentEquals(base, diffRule);\n\n    comparator.differentEquals(base, diffLineHash);\n\n    comparator.differentEquals(base, diffLine);\n\n  }"
    },
    {
      "description": "lineAndLineHashAndMessage",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void lineAndLineHashAndMessage() {\n\n    Comparator comparator = new Comparator(LineAndLineHashAndMessage::new);\n\n    comparator.sameEqualsAndHashcode(base, same);\n\n    comparator.differentEquals(base, diffMessage);\n\n    comparator.differentEquals(base, diffRule);\n\n    comparator.differentEquals(base, diffLineHash);\n\n    comparator.differentEquals(base, diffLine);\n\n  }"
    },
    {
      "description": "lineHashAndMessageKey",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void lineHashAndMessageKey() {\n\n    Comparator comparator = new Comparator(LineHashAndMessageKey::new);\n\n    comparator.sameEqualsAndHashcode(base, same);\n\n    comparator.sameEqualsAndHashcode(base, diffLine);\n\n    comparator.differentEquals(base, diffMessage);\n\n    comparator.differentEquals(base, diffRule);\n\n    comparator.differentEquals(base, diffLineHash);\n\n  }"
    },
    {
      "description": "lineAndMessageKey",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void lineAndMessageKey() {\n\n    Comparator comparator = new Comparator(LineAndMessageKey::new);\n\n    comparator.sameEqualsAndHashcode(base, same);\n\n    comparator.sameEqualsAndHashcode(base, diffLineHash);\n\n    comparator.differentEquals(base, diffMessage);\n\n    comparator.differentEquals(base, diffRule);\n\n    comparator.differentEquals(base, diffLine);\n\n  }"
    },
    {
      "description": "lineHashKey",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void lineHashKey() {\n\n    Comparator comparator = new Comparator(LineHashKey::new);\n\n    comparator.sameEqualsAndHashcode(base, same);\n\n    comparator.sameEqualsAndHashcode(base, diffLine);\n\n    comparator.sameEqualsAndHashcode(base, diffMessage);\n\n    comparator.differentEquals(base, diffRule);\n\n    comparator.differentEquals(base, diffLineHash);\n\n  }"
    }
  ]
}