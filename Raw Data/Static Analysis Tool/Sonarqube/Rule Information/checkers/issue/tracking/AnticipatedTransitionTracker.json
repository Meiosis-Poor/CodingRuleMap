{
  "name": "AnticipatedTransitionTracker",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 17,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "givenIssuesAndAnticipatedTransitions_trackerShouldReturnTheExpectedMatching",
      "expected-problems": null,
      "expected-linenumbers": 16,
      "code": "  public void givenIssuesAndAnticipatedTransitions_trackerShouldReturnTheExpectedMatching() {\n\n\n\n    List<DefaultIssue> issues = getIssues();\n\n    List<AnticipatedTransition> anticipatedTransitions = getAnticipatedTransitions();\n\n\n\n    Tracking<DefaultIssue, AnticipatedTransition> tracking = underTest.track(issues, anticipatedTransitions);\n\n\n\n    var matchedRaws = tracking.getMatchedRaws();\n\n    var unmatchedRaws = tracking.getUnmatchedRaws().collect(Collectors.toList());\n\n\n\n    assertThat(matchedRaws).hasSize(5);\n\n    assertThat(unmatchedRaws).hasSize(2);\n\n\n\n    assertThat(matchedRaws.keySet()).containsExactlyInAnyOrder(issues.get(0), issues.get(1), issues.get(2), issues.get(3), issues.get(4));\n\n    assertThat(unmatchedRaws).containsExactlyInAnyOrder(issues.get(5), issues.get(6));\n\n\n\n    assertThat(matchedRaws).containsEntry(issues.get(0), anticipatedTransitions.get(1))\n\n      .containsEntry(issues.get(1), anticipatedTransitions.get(0))\n\n      .containsEntry(issues.get(2), anticipatedTransitions.get(3))\n\n      .containsEntry(issues.get(3), anticipatedTransitions.get(2))\n\n      .containsEntry(issues.get(4), anticipatedTransitions.get(6));\n\n  }"
    }
  ]
}