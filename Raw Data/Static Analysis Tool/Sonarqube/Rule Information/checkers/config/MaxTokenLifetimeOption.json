{
  "name": "MaxTokenLifetimeOption",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 31,
  "branches": 0,
  "apis": 7,
  "test": [
    {
      "description": "all_options_present",
      "expected-problems": null,
      "expected-linenumbers": 3,
      "code": "  public void all_options_present() {\n\n    assertThat(MaxTokenLifetimeOption.values()).hasSize(4);\n\n  }"
    },
    {
      "description": "when_get_by_name_then_the_enum_value_is_returned",
      "expected-problems": null,
      "expected-linenumbers": 6,
      "code": "  public void when_get_by_name_then_the_enum_value_is_returned() {\n\n    assertThat(MaxTokenLifetimeOption.get(\"30 days\")).isEqualTo(THIRTY_DAYS);\n\n    assertThat(MaxTokenLifetimeOption.get(\"90 days\")).isEqualTo(NINETY_DAYS);\n\n    assertThat(MaxTokenLifetimeOption.get(\"1 year\")).isEqualTo(ONE_YEAR);\n\n    assertThat(MaxTokenLifetimeOption.get(\"No expiration\")).isEqualTo(NO_EXPIRATION);\n\n  }"
    },
    {
      "description": "when_get_by_name_nonexistant_then_exception_is_thrown",
      "expected-problems": null,
      "expected-linenumbers": 5,
      "code": "  public void when_get_by_name_nonexistant_then_exception_is_thrown() {\n\n    assertThatExceptionOfType(IllegalArgumentException.class)\n\n      .isThrownBy(() -> MaxTokenLifetimeOption.get(\"wrong lifetime\"))\n\n      .withMessage(\"No token expiration interval with name \\\"wrong lifetime\\\" found.\");\n\n  }"
    },
    {
      "description": "lifetime_options_days",
      "expected-problems": null,
      "expected-linenumbers": 6,
      "code": "  public void lifetime_options_days() {\n\n    assertThat(THIRTY_DAYS.getDays()).hasValue(30);\n\n    assertThat(NINETY_DAYS.getDays()).hasValue(90);\n\n    assertThat(ONE_YEAR.getDays()).hasValue(365);\n\n    assertThat(NO_EXPIRATION.getDays()).isEmpty();\n\n  }"
    }
  ]
}