{
  "name": "ListContainer",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 70,
  "branches": 5,
  "apis": 4,
  "test": [
    {
      "description": "register_beans",
      "expected-problems": null,
      "expected-linenumbers": 9,
      "code": "  public void register_beans() {\n\n    ListContainer container = new ListContainer();\n\n    container.add(\n\n      A.class,\n\n      new VirtualModule(),\n\n      Arrays.asList(C.class, D.class)\n\n    );\n\n    assertThat(container.getAddedObjects()).contains(A.class, B.class, C.class, D.class);\n\n  }"
    },
    {
      "description": "addExtension_register_beans",
      "expected-problems": null,
      "expected-linenumbers": 7,
      "code": "  public void addExtension_register_beans() {\n\n    ListContainer container = new ListContainer();\n\n    container\n\n      .addExtension(\"A\", A.class)\n\n      .addExtension(\"B\", B.class);\n\n    assertThat(container.getAddedObjects()).contains(A.class, B.class);\n\n  }"
    },
    {
      "description": "declareExtension_does_nothing",
      "expected-problems": null,
      "expected-linenumbers": 6,
      "code": "  public void declareExtension_does_nothing() {\n\n    ListContainer container = new ListContainer();\n\n    assertThatNoException().isThrownBy(() -> container\n\n      .declareExtension(\"A\", A.class)\n\n      .declareExtension(mock(PluginInfo.class), B.class));\n\n  }"
    },
    {
      "description": "unsupported_method_should_throw_exception",
      "expected-problems": null,
      "expected-linenumbers": 8,
      "code": "  public void unsupported_method_should_throw_exception() {\n\n    ListContainer container = new ListContainer();\n\n    container.add(A.class);\n\n    assertThatThrownBy(() -> container.getComponentByType(A.class)).isInstanceOf(UnsupportedOperationException.class);\n\n    assertThatThrownBy(() -> container.getOptionalComponentByType(A.class)).isInstanceOf(UnsupportedOperationException.class);\n\n    assertThatThrownBy(() -> container.getComponentsByType(A.class)).isInstanceOf(UnsupportedOperationException.class);\n\n    assertThatThrownBy(container::getParent).isInstanceOf(UnsupportedOperationException.class);\n\n  }"
    },
    {
      "description": "addWebApiV2ConfigurationClass_whenClassIsAdded_isReturnedByGetWebApiV2ConfigurationClasses",
      "expected-problems": null,
      "expected-linenumbers": 5,
      "code": "  public void addWebApiV2ConfigurationClass_whenClassIsAdded_isReturnedByGetWebApiV2ConfigurationClasses() {\n\n    ListContainer container = new ListContainer();\n\n    container.addWebApiV2ConfigurationClass(org.sonar.core.test.Test.class);\n\n    assertThat(container.getWebApiV2ConfigurationClasses()).containsOnly(org.sonar.core.test.Test.class);\n\n  }"
    }
  ]
}