{
  "name": "LineRange",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 16,
  "branches": 0,
  "apis": 2,
  "test": [
    {
      "description": "should_throw_ISE_if_range_is_invalid",
      "expected-problems": null,
      "expected-linenumbers": 5,
      "code": "  public void should_throw_ISE_if_range_is_invalid() {\n\n    assertThatThrownBy(() -> new LineRange(2, 1))\n\n      .isInstanceOf(IllegalArgumentException.class)\n\n      .hasMessage(\"Line range is not valid: 1 must be greater or equal than 2\");\n\n  }"
    },
    {
      "description": "should_throw_ISE_if_startOffset_is_invalid",
      "expected-problems": null,
      "expected-linenumbers": 5,
      "code": "  public void should_throw_ISE_if_startOffset_is_invalid() {\n\n    assertThatThrownBy(() -> new LineRange(-1, 1))\n\n      .isInstanceOf(IllegalArgumentException.class)\n\n      .hasMessage(\"Start offset not valid: -1\");\n\n  }"
    },
    {
      "description": "check_getters",
      "expected-problems": null,
      "expected-linenumbers": 5,
      "code": "  public void check_getters() {\n\n    LineRange range = new LineRange(1, 2);\n\n    assertThat(range.startOffset()).isOne();\n\n    assertThat(range.endOffset()).isEqualTo(2);\n\n  }"
    }
  ]
}