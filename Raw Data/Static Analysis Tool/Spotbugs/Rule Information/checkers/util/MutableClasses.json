{
  "name": "MutableClasses",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 280,
  "branches": 32,
  "apis": 35,
  "test": [
    {
      "description": "testKnownMutable",
      "expected-problems": null,
      "expected-linenumbers": [
        26,
        29
      ],
      "code": "@Test\n    void testKnownMutable() {\n        Assertions.assertTrue(MutableClasses.mutableSignature(\"Ljava/util/Date;\"));\n    }"
    },
    {
      "description": "testKnownImmutablePackage",
      "expected-problems": null,
      "expected-linenumbers": [
        31,
        34
      ],
      "code": "@Test\n    void testKnownImmutablePackage() {\n        Assertions.assertFalse(MutableClasses.mutableSignature(\"Ljava/time/LocalTime;\"));\n    }"
    },
    {
      "description": "testKnownImmutable",
      "expected-problems": null,
      "expected-linenumbers": [
        36,
        40
      ],
      "code": "@Test\n    void testKnownImmutable() {\n        Assertions.assertFalse(MutableClasses.mutableSignature(\"Ljava/lang/String;\"));\n        Assertions.assertFalse(MutableClasses.mutableSignature(\"Ljava/util/regex/Pattern;\"));\n    }"
    },
    {
      "description": "testLocale",
      "expected-problems": null,
      "expected-linenumbers": [
        42,
        45
      ],
      "code": "@Test\n    void testLocale() {\n        Assertions.assertFalse(MutableClasses.mutableSignature(\"Ljava/util/Locale;\"));\n    }"
    },
    {
      "description": "testArray",
      "expected-problems": null,
      "expected-linenumbers": [
        47,
        50
      ],
      "code": "@Test\n    void testArray() {\n        Assertions.assertTrue(MutableClasses.mutableSignature(\"[I\"));\n    }"
    },
    {
      "description": "testAnnotatedImmutable",
      "expected-problems": null,
      "expected-linenumbers": [
        52,
        55
      ],
      "code": "@Test\n    void testAnnotatedImmutable() {\n        Assertions.assertFalse(MutableClasses.mutableSignature(\"Ledu/umd/cs/findbugs/util/Annotated;\"));\n    }"
    },
    {
      "description": "testMutable",
      "expected-problems": null,
      "expected-linenumbers": [
        73,
        76
      ],
      "code": "@Test\n    void testMutable() {\n        Assertions.assertTrue(MutableClasses.mutableSignature(\"Ledu/umd/cs/findbugs/util/MutableClassesTest$Mutable;\"));\n    }"
    },
    {
      "description": "testImmutable",
      "expected-problems": null,
      "expected-linenumbers": [
        103,
        106
      ],
      "code": "@Test\n    void testImmutable() {\n        Assertions.assertFalse(MutableClasses.mutableSignature(\"Ledu/umd/cs/findbugs/util/MutableClassesTest$Immutable;\"));\n    }"
    },
    {
      "description": "testImmutableValuedBased",
      "expected-problems": null,
      "expected-linenumbers": [
        109,
        115
      ],
      "code": "@Test\n    @DisabledOnJre({ JRE.JAVA_8, JRE.JAVA_11 })\n    void testImmutableValuedBased() {\n        // Annotated with @jdk.internal.ValueBased and has \"setValue\", which should normally trip detection\n        System.out.println(\"starting.....\");\n        Assertions.assertFalse(MutableClasses.mutableSignature(\"Ljava/util/KeyValueHolder;\"));\n    }"
    },
    {
      "description": "testEnumsAreImmutable",
      "expected-problems": null,
      "expected-linenumbers": [
        130,
        133
      ],
      "code": "@Test\n    void testEnumsAreImmutable() {\n        Assertions.assertFalse(MutableClasses.mutableSignature(\"Ledu/umd/cs/findbugs/util/MutableClassesTest$ImmutableTestEnum;\"));\n    }"
    },
    {
      "description": "testErrorProneImmutable",
      "expected-problems": null,
      "expected-linenumbers": [
        144,
        150
      ],
      "code": "@Test\n    void testErrorProneImmutable() {\n        Assertions.assertFalse(MutableClasses.mutableSignature(\n                \"Ledu/umd/cs/findbugs/util/MutableClassesTest$ErrorProneImmutable;\"));\n        Assertions.assertFalse(MutableClasses.mutableSignature(\n                \"Ledu/umd/cs/findbugs/util/MutableClassesTest$ErrorProneImmutableSubclass;\"));\n    }"
    }
  ]
}