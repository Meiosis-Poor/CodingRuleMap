{
  "name": "ClassName",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 385,
  "branches": 47,
  "apis": 76,
  "test": [
    {
      "description": "testExtractPackagePrefix",
      "expected-problems": null,
      "expected-linenumbers": [
        35,
        42
      ],
      "code": "@Test\n    void testExtractPackagePrefix() {\n        assertEquals(\"\", ClassName.extractPackagePrefix(\"org.apache.ant.subpkg.sub2\", 0));\n        assertEquals(\"org\", ClassName.extractPackagePrefix(\"org\", 1));\n        assertEquals(\"org.apache.ant\", ClassName.extractPackagePrefix(\"org.apache.ant.subpkg.sub2\", 3));\n        assertEquals(\"org.apache.ant.subpkg.sub2\", ClassName.extractPackagePrefix(\"org.apache.ant.subpkg.sub2\", 5));\n        assertEquals(\"org.apache.ant.subpkg.sub2\", ClassName.extractPackagePrefix(\"org.apache.ant.subpkg.sub2\", 6));\n    }"
    },
    {
      "description": "testExtractClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        44,
        51
      ],
      "code": "@Test\n    void testExtractClassName() {\n        assertEquals(\"java/lang/Integer\", ClassName.extractClassName(\"Ljava/lang/Integer;\"));\n        assertEquals(\"java/lang/Integer\", ClassName.extractClassName(\"[Ljava/lang/Integer;\"));\n        assertEquals(\"java/lang/Integer\", ClassName.extractClassName(\"[[Ljava/lang/Integer;\"));\n        assertEquals(\"java/lang/Integer\", ClassName.extractClassName(\"[[[Ljava/lang/Integer;\"));\n        assertEquals(\"java/lang/Integer\", ClassName.extractClassName(\"java/lang/Integer\"));\n    }"
    },
    {
      "description": "testGetPrimitiveType",
      "expected-problems": null,
      "expected-linenumbers": [
        53,
        65
      ],
      "code": "@Test\n    void testGetPrimitiveType() {\n        assertEquals(\"I\", ClassName.getPrimitiveType(\"java/lang/Integer\"));\n        assertEquals(\"F\", ClassName.getPrimitiveType(\"java/lang/Float\"));\n        assertEquals(\"D\", ClassName.getPrimitiveType(\"java/lang/Double\"));\n        assertEquals(\"J\", ClassName.getPrimitiveType(\"java/lang/Long\"));\n        assertEquals(\"B\", ClassName.getPrimitiveType(\"java/lang/Byte\"));\n        assertEquals(\"C\", ClassName.getPrimitiveType(\"java/lang/Character\"));\n        assertEquals(\"S\", ClassName.getPrimitiveType(\"java/lang/Short\"));\n        assertEquals(\"Z\", ClassName.getPrimitiveType(\"java/lang/Boolean\"));\n        assertNull(ClassName.getPrimitiveType(\"java/lang/String\"));\n        assertNull(ClassName.getPrimitiveType(\"java/util/HashMap\"));\n    }"
    },
    {
      "description": "testExtractClassNameBad",
      "expected-problems": null,
      "expected-linenumbers": [
        67,
        72
      ],
      "code": "@Test\n    void testExtractClassNameBad() {\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            ClassName.extractClassName(\"L[Ljava/lang/Integer;\");\n        });\n    }"
    },
    {
      "description": "testMatchedPrefix",
      "expected-problems": null,
      "expected-linenumbers": [
        74,
        100
      ],
      "code": "@Test\n    void testMatchedPrefix() {\n        List<String[]> negativeCases = Arrays.asList(\n                new String[] { \"foobar\" },\n                new String[] { \"\" },\n                new String[] { \"testObject\" });\n\n        for (String[] searchString : negativeCases) {\n            Assertions.assertFalse(ClassName.matchedPrefixes(searchString, \"com.test.TestClass\"),\n                    \"com.text.TestClass should not be matched by \" + Arrays.toString(searchString));\n        }\n\n        List<String[]> positiveCases = Arrays.asList(\n                new String[] {},\n                null,\n                new String[] { \"TestClass\" },\n                new String[] { \"testclass\" },\n                new String[] { \"testclass\" },\n                new String[] { \"testClass\" },\n                new String[] { \"tetGlass\" },\n                new String[] { \"bastClass\" });\n\n        for (String[] searchString : positiveCases) {\n            assertTrue(ClassName.matchedPrefixes(searchString, \"com.test.TestClass\"),\n                    \"com.text.TestClass should be matched by \" + Arrays.toString(searchString));\n        }\n    }"
    },
    {
      "description": "testSimpleBinaryClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        102,
        105
      ],
      "code": "@Test\n    void testSimpleBinaryClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"com/bla/Parent\"));\n    }"
    },
    {
      "description": "testSimpleDottedClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        107,
        110
      ],
      "code": "@Test\n    void testSimpleDottedClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"com.bla.Parent\"));\n    }"
    },
    {
      "description": "testInnerClassBinaryClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        112,
        115
      ],
      "code": "@Test\n    void testInnerClassBinaryClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"com/bla/Parent$Child\"));\n    }"
    },
    {
      "description": "testInnerClassDottedClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        117,
        120
      ],
      "code": "@Test\n    void testInnerClassDottedClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"com.bla.Parent$Child\"));\n    }"
    },
    {
      "description": "testJavaStyleAnonymousInnerClassBinaryClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        122,
        125
      ],
      "code": "@Test\n    void testJavaStyleAnonymousInnerClassBinaryClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"com/bla/Parent$Child$1\"));\n    }"
    },
    {
      "description": "testJavaStyleAnonymousInnerClassDottedClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        127,
        130
      ],
      "code": "@Test\n    void testJavaStyleAnonymousInnerClassDottedClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"com.bla.Parent$Child$1\"));\n    }"
    },
    {
      "description": "testKotlinStyleAnonymousInnerClassBinaryClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        132,
        135
      ],
      "code": "@Test\n    void testKotlinStyleAnonymousInnerClassBinaryClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"com/bla/Parent$function$variable$1\"));\n    }"
    },
    {
      "description": "testKotlinStyleAnonymousInnerClassDottedClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        137,
        140
      ],
      "code": "@Test\n    void testKotlinStyleAnonymousInnerClassDottedClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"com.bla.Parent$function$variable$1\"));\n    }"
    },
    {
      "description": "testBinaryClassNameContainingAllowedSpecialCharactersIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        142,
        145
      ],
      "code": "@Test\n    void testBinaryClassNameContainingAllowedSpecialCharactersIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"com/bla/Parent$function!@#%^&*,?{}]()$variable$1\"));\n    }"
    },
    {
      "description": "testDottedClassNameContainingAllowedSpecialCharactersIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        147,
        150
      ],
      "code": "@Test\n    void testDottedClassNameContainingAllowedSpecialCharactersIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"com.bla.Parent$function!@#%^&*,?{}]()$variable$1\"));\n    }"
    },
    {
      "description": "testFieldDescriptorClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        152,
        155
      ],
      "code": "@Test\n    void testFieldDescriptorClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"Lcom/bla/Parent;\"));\n    }"
    },
    {
      "description": "testFieldDescriptorOneDimensionalArrayClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        157,
        160
      ],
      "code": "@Test\n    void testFieldDescriptorOneDimensionalArrayClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"[Lcom/bla/Parent;\"));\n    }"
    },
    {
      "description": "testFieldDescriptorOneDimensionalPrimitiveArrayClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        162,
        165
      ],
      "code": "@Test\n    void testFieldDescriptorOneDimensionalPrimitiveArrayClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"[I\"));\n    }"
    },
    {
      "description": "testFieldDescriptorTwoDimensionalArrayClassNameIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        167,
        170
      ],
      "code": "@Test\n    void testFieldDescriptorTwoDimensionalArrayClassNameIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"[[Lcom/bla/Parent;\"));\n    }"
    },
    {
      "description": "testFieldDescriptorClassNameContainingAllowedSpecialCharactersIsValidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        172,
        175
      ],
      "code": "@Test\n    void testFieldDescriptorClassNameContainingAllowedSpecialCharactersIsValidClassName() {\n        assertTrue(ClassName.isValidClassName(\"[[Lcom/bla/Parent$function!@#%^&*,?{}]()$variable$1;\"));\n    }"
    },
    {
      "description": "testFieldDescriptorClassNameContainingDotsIsInvalidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        177,
        180
      ],
      "code": "@Test\n    void testFieldDescriptorClassNameContainingDotsIsInvalidClassName() {\n        assertFalse(ClassName.isValidClassName(\"Lcom.bla.Parent;\"));\n    }"
    },
    {
      "description": "testClassNameContainingBothSlashesAndDotsIsInvalidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        182,
        185
      ],
      "code": "@Test\n    void testClassNameContainingBothSlashesAndDotsIsInvalidClassName() {\n        assertFalse(ClassName.isValidClassName(\"com.bla/Parent\"));\n    }"
    },
    {
      "description": "testBinaryClassNameContainingDisallowedSpecialCharactersIsInvalidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        187,
        192
      ],
      "code": "@Test\n    void testBinaryClassNameContainingDisallowedSpecialCharactersIsInvalidClassName() {\n        assertFalse(ClassName.isValidClassName(\"com/bla/Parent$function$variable$1;\"));\n        assertFalse(ClassName.isValidClassName(\"com/bla/Parent$function;$variable$1\"));\n        assertFalse(ClassName.isValidClassName(\"com/bla/Parent$function[$variable$1\"));\n    }"
    },
    {
      "description": "testEmptyStringIsInvalidClassName",
      "expected-problems": null,
      "expected-linenumbers": [
        194,
        197
      ],
      "code": "@Test\n    void testEmptyStringIsInvalidClassName() {\n        assertFalse(ClassName.isValidClassName((\"\")));\n    }"
    }
  ]
}