{
  "name": "Strings",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 305,
  "branches": 28,
  "apis": 48,
  "test": [
    {
      "description": "testEscapeXml",
      "expected-problems": null,
      "expected-linenumbers": [
        52,
        62
      ],
      "code": "@Test\n    void testEscapeXml() {\n        assert (escapedStrings.length == unescapedStrings.length);\n        for (int i = 0; i < unescapedStrings.length; i++) {\n            if (unescapedStrings[i] == null) {\n                assert (Strings.escapeXml(unescapedStrings[i]) == null);\n            } else {\n                Assertions.assertEquals(escapedStrings[i], Strings.escapeXml(unescapedStrings[i]));\n            }\n        }\n    }"
    },
    {
      "description": "testUnescapeXml",
      "expected-problems": null,
      "expected-linenumbers": [
        64,
        74
      ],
      "code": "@Test\n    void testUnescapeXml() {\n        assert (escapedStrings.length == unescapedStrings.length);\n        for (int i = 0; i < escapedStrings.length; i++) {\n            if (escapedStrings[i] == null) {\n                assert (Strings.unescapeXml(escapedStrings[i]) == null);\n            } else {\n                assert (Strings.unescapeXml(escapedStrings[i]).compareTo(unescapedStrings[i]) == 0);\n            }\n        }\n    }"
    },
    {
      "description": "testEscapeLFCRBackSlash",
      "expected-problems": null,
      "expected-linenumbers": [
        80,
        86
      ],
      "code": "@Test\n    void testEscapeLFCRBackSlash() {\n        checkEscapeLFCRBackSlash(\"abc\", \"abc\");\n        checkEscapeLFCRBackSlash(\"\\\\n\", \"\\n\");\n        checkEscapeLFCRBackSlash(\"\\\\r\", \"\\r\");\n        checkEscapeLFCRBackSlash(\"\\\\\\\\a\\\\r\", \"\\\\a\\r\");\n    }"
    }
  ]
}