{
  "name": "NotMatcher",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 78,
  "branches": 6,
  "apis": 15,
  "test": [
    {
      "description": "invertsResultsFromWrappedMatcher_doesntMatchWhenWrappedDoesMatch",
      "expected-problems": null,
      "expected-linenumbers": [
        44,
        51
      ],
      "code": "@Test\n    void invertsResultsFromWrappedMatcher_doesntMatchWhenWrappedDoesMatch() {\n        Matcher wrappedMatcher = new TestMatcher(true);\n        NotMatcher notMatcher = new NotMatcher();\n        notMatcher.addChild(wrappedMatcher);\n\n        assertFalse(notMatcher.match(bug));\n    }"
    },
    {
      "description": "invertsResultsFromWrappedMatcher_doesMatchWhenWrappedDoesnt",
      "expected-problems": null,
      "expected-linenumbers": [
        53,
        60
      ],
      "code": "@Test\n    void invertsResultsFromWrappedMatcher_doesMatchWhenWrappedDoesnt() {\n        Matcher wrappedMatcher = new TestMatcher(false);\n        NotMatcher notMatcher = new NotMatcher();\n        notMatcher.addChild(wrappedMatcher);\n\n        assertTrue(notMatcher.match(bug));\n    }"
    },
    {
      "description": "writeXMLOutputAddsNotTagsAroundWrappedMatchersOutput",
      "expected-problems": null,
      "expected-linenumbers": [
        62,
        74
      ],
      "code": "@Test\n    void writeXMLOutputAddsNotTagsAroundWrappedMatchersOutput() throws Exception {\n        Matcher wrappedMatcher = new TestMatcher(true);\n        NotMatcher notMatcher = new NotMatcher();\n        notMatcher.addChild(wrappedMatcher);\n\n        String xmlOutputCreated = writeXMLAndGetStringOutput(notMatcher);\n\n        assertTrue(containsString(\"<Not>\").matches(xmlOutputCreated));\n        assertTrue(containsString(\"<TestMatch>\").matches(xmlOutputCreated));\n        assertTrue(containsString(\"</TestMatch>\").matches(xmlOutputCreated));\n        assertTrue(containsString(\"</Not>\").matches(xmlOutputCreated));\n    }"
    },
    {
      "description": "canReturnChildMatcher",
      "expected-problems": null,
      "expected-linenumbers": [
        76,
        83
      ],
      "code": "@Test\n    void canReturnChildMatcher() {\n        Matcher wrappedMatcher = new TestMatcher(true);\n        NotMatcher notMatcher = new NotMatcher();\n        notMatcher.addChild(wrappedMatcher);\n\n        assertSame(wrappedMatcher, notMatcher.originalMatcher(), \"Should return child matcher.\");\n    }"
    },
    {
      "description": "throwsExceptionWhenTryingToGetNonExistentChildMatcher",
      "expected-problems": null,
      "expected-linenumbers": [
        85,
        90
      ],
      "code": "@Test\n    void throwsExceptionWhenTryingToGetNonExistentChildMatcher() {\n        Assertions.assertThrows(IllegalStateException.class, () -> {\n            new NotMatcher().originalMatcher();\n        });\n    }"
    }
  ]
}