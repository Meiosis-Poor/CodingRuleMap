{
  "name": "RelationalOp",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 125,
  "branches": 3,
  "apis": 11,
  "test": [
    {
      "description": "testRelationalObject",
      "expected-problems": null,
      "expected-linenumbers": [
        34,
        53
      ],
      "code": "@Test\n    void testRelationalObject() {\n        assertTrue(RelationalOp.byName(\"EQ\").check(\"A\", \"A\"));\n        assertFalse(RelationalOp.byName(\"EQ\").check(\"B\", \"C\"));\n\n        assertFalse(RelationalOp.byName(\"NEQ\").check(\"A\", \"A\"));\n        assertTrue(RelationalOp.byName(\"NEQ\").check(\"B\", \"C\"));\n\n        assertTrue(RelationalOp.byName(\"GEQ\").check(\"A\", \"A\"));\n        assertFalse(RelationalOp.byName(\"GEQ\").check(\"B\", \"C\"));\n        assertTrue(RelationalOp.byName(\"GEQ\").check(\"E\", \"D\"));\n\n        assertFalse(RelationalOp.byName(\"GT\").check(\"A\", \"A\"));\n        assertFalse(RelationalOp.byName(\"GT\").check(\"B\", \"C\"));\n        assertTrue(RelationalOp.byName(\"GT\").check(\"E\", \"D\"));\n\n        assertTrue(RelationalOp.byName(\"LEQ\").check(\"A\", \"A\"));\n        assertTrue(RelationalOp.byName(\"LEQ\").check(\"B\", \"C\"));\n        assertFalse(RelationalOp.byName(\"LEQ\").check(\"E\", \"D\"));\n    }"
    },
    {
      "description": "testToString",
      "expected-problems": null,
      "expected-linenumbers": [
        55,
        58
      ],
      "code": "@Test\n    void testToString() {\n        assertThat(RelationalOp.EQ.toString(), is(\"==\"));\n    }"
    },
    {
      "description": "testByName",
      "expected-problems": null,
      "expected-linenumbers": [
        60,
        65
      ],
      "code": "@Test\n    void testByName() {\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            RelationalOp.byName(\"Unknown\");\n        });\n    }"
    }
  ]
}