{
  "name": "JAIFScanner",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 226,
  "branches": 14,
  "apis": 27,
  "test": [
    {
      "description": "testScanColon",
      "expected-problems": null,
      "expected-linenumbers": [
        41,
        46
      ],
      "code": "@Test\n    void testScanColon() throws Exception {\n        JAIFScanner scanner = getScanner(\":\");\n        checkToken(scanner, \":\", JAIFTokenKind.COLON);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    },
    {
      "description": "testScanParens",
      "expected-problems": null,
      "expected-linenumbers": [
        48,
        55
      ],
      "code": "@Test\n    void testScanParens() throws Exception {\n        JAIFScanner scanner = getScanner(\"()\");\n\n        checkToken(scanner, \"(\", JAIFTokenKind.LPAREN);\n        checkToken(scanner, \")\", JAIFTokenKind.RPAREN);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    },
    {
      "description": "testScanComma",
      "expected-problems": null,
      "expected-linenumbers": [
        57,
        63
      ],
      "code": "@Test\n    void testScanComma() throws Exception {\n        JAIFScanner scanner = getScanner(\",\");\n\n        checkToken(scanner, \",\", JAIFTokenKind.COMMA);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    },
    {
      "description": "testScanEquals",
      "expected-problems": null,
      "expected-linenumbers": [
        65,
        71
      ],
      "code": "@Test\n    void testScanEquals() throws Exception {\n        JAIFScanner scanner = getScanner(\"=\");\n\n        checkToken(scanner, \"=\", JAIFTokenKind.EQUALS);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    },
    {
      "description": "testScanIdentifier",
      "expected-problems": null,
      "expected-linenumbers": [
        73,
        88
      ],
      "code": "@Test\n    void testScanIdentifier() throws Exception {\n        JAIFScanner scanner = getScanner(\"  \\t  \\t\\t@foobar Baz123   ( Boing Boing) @Yum@Yum __123  $plotz\");\n\n        checkToken(scanner, \"@foobar\", JAIFTokenKind.IDENTIFIER_OR_KEYWORD);\n        checkToken(scanner, \"Baz123\", JAIFTokenKind.IDENTIFIER_OR_KEYWORD);\n        checkToken(scanner, \"(\", JAIFTokenKind.LPAREN);\n        checkToken(scanner, \"Boing\", JAIFTokenKind.IDENTIFIER_OR_KEYWORD);\n        checkToken(scanner, \"Boing\", JAIFTokenKind.IDENTIFIER_OR_KEYWORD);\n        checkToken(scanner, \")\", JAIFTokenKind.RPAREN);\n        checkToken(scanner, \"@Yum\", JAIFTokenKind.IDENTIFIER_OR_KEYWORD);\n        checkToken(scanner, \"@Yum\", JAIFTokenKind.IDENTIFIER_OR_KEYWORD);\n        checkToken(scanner, \"__123\", JAIFTokenKind.IDENTIFIER_OR_KEYWORD);\n        checkToken(scanner, \"$plotz\", JAIFTokenKind.IDENTIFIER_OR_KEYWORD);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    },
    {
      "description": "testScanFloatingPointLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        90,
        101
      ],
      "code": "@Test\n    void testScanFloatingPointLiteral() throws Exception {\n        JAIFScanner scanner = getScanner(\"1e1f    2.f     .3f     0f      3.14f   6.022137e+23f\");\n\n        checkToken(scanner, \"1e1f\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"2.f\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \".3f\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"0f\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"3.14f\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"6.022137e+23f\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    },
    {
      "description": "testScanFloatingPointLiteral2",
      "expected-problems": null,
      "expected-linenumbers": [
        103,
        115
      ],
      "code": "@Test\n    void testScanFloatingPointLiteral2() throws Exception {\n        JAIFScanner scanner = getScanner(\"1e1     2.      .3      0.0     3.14    1e-9d   1e137\");\n\n        checkToken(scanner, \"1e1\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"2.\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \".3\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"0.0\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"3.14\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"1e-9d\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"1e137\", JAIFTokenKind.FLOATING_POINT_LITERAL);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    },
    {
      "description": "testScanOctalLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        117,
        125
      ],
      "code": "@Test\n    void testScanOctalLiteral() throws Exception {\n        JAIFScanner scanner = getScanner(\"0237   01575L  027365l\");\n\n        checkToken(scanner, \"0237\", JAIFTokenKind.OCTAL_LITERAL);\n        checkToken(scanner, \"01575L\", JAIFTokenKind.OCTAL_LITERAL);\n        checkToken(scanner, \"027365l\", JAIFTokenKind.OCTAL_LITERAL);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    },
    {
      "description": "testScanHexLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        127,
        135
      ],
      "code": "@Test\n    void testScanHexLiteral() throws Exception {\n        JAIFScanner scanner = getScanner(\"0xDEADbeef   0xcafeBabeL   0X123EEfl\");\n\n        checkToken(scanner, \"0xDEADbeef\", JAIFTokenKind.HEX_LITERAL);\n        checkToken(scanner, \"0xcafeBabeL\", JAIFTokenKind.HEX_LITERAL);\n        checkToken(scanner, \"0X123EEfl\", JAIFTokenKind.HEX_LITERAL);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    },
    {
      "description": "testScanDecimalLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        137,
        145
      ],
      "code": "@Test\n    void testScanDecimalLiteral() throws Exception {\n        JAIFScanner scanner = getScanner(\"1234     5678L    91919191l\");\n\n        checkToken(scanner, \"1234\", JAIFTokenKind.DECIMAL_LITERAL);\n        checkToken(scanner, \"5678L\", JAIFTokenKind.DECIMAL_LITERAL);\n        checkToken(scanner, \"91919191l\", JAIFTokenKind.DECIMAL_LITERAL);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    },
    {
      "description": "testScanStringLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        147,
        157
      ],
      "code": "@Test\n    void testScanStringLiteral() throws Exception {\n        JAIFScanner scanner = getScanner(\"\\\"hello\\\"    \\\"foobie bletch\\\"  \\\"\\\\\\\"\\\"  \\\"\\\\\\\\\\\\6\\\\45\\\\037\\\"  \\\"\\\\b\\\\t\\\\f\\\\n\\\"  \");\n\n        checkToken(scanner, \"\\\"hello\\\"\", JAIFTokenKind.STRING_LITERAL);\n        checkToken(scanner, \"\\\"foobie bletch\\\"\", JAIFTokenKind.STRING_LITERAL);\n        checkToken(scanner, \"\\\"\\\\\\\"\\\"\", JAIFTokenKind.STRING_LITERAL);\n        checkToken(scanner, \"\\\"\\\\\\\\\\\\6\\\\45\\\\037\\\"\", JAIFTokenKind.STRING_LITERAL);\n        checkToken(scanner, \"\\\"\\\\b\\\\t\\\\f\\\\n\\\"\", JAIFTokenKind.STRING_LITERAL);\n        checkToken(scanner, \"\\n\", JAIFTokenKind.NEWLINE);\n    }"
    }
  ]
}