{
  "name": "SignatureParser",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 286,
  "branches": 35,
  "apis": 35,
  "test": [
    {
      "description": "testNoParams",
      "expected-problems": null,
      "expected-linenumbers": [
        10,
        15
      ],
      "code": "@Test\n    void testNoParams() {\n        SignatureParser sut = new SignatureParser(\"()V\");\n        Iterator<String> i = sut.parameterSignatureIterator();\n        Assertions.assertFalse(i.hasNext());\n    }"
    },
    {
      "description": "testManyParams",
      "expected-problems": null,
      "expected-linenumbers": [
        17,
        36
      ],
      "code": "@Test\n    void testManyParams() {\n        SignatureParser sut = new SignatureParser(\"(IJFDZLjava/lang/String;B)Ljava/lang/Object;\");\n        Iterator<String> i = sut.parameterSignatureIterator();\n        Assertions.assertTrue(i.hasNext());\n        Assertions.assertEquals(i.next(), \"I\");\n        Assertions.assertTrue(i.hasNext());\n        Assertions.assertEquals(i.next(), \"J\");\n        Assertions.assertTrue(i.hasNext());\n        Assertions.assertEquals(i.next(), \"F\");\n        Assertions.assertTrue(i.hasNext());\n        Assertions.assertEquals(i.next(), \"D\");\n        Assertions.assertTrue(i.hasNext());\n        Assertions.assertEquals(i.next(), \"Z\");\n        Assertions.assertTrue(i.hasNext());\n        Assertions.assertEquals(i.next(), \"Ljava/lang/String;\");\n        Assertions.assertTrue(i.hasNext());\n        Assertions.assertEquals(i.next(), \"B\");\n        Assertions.assertFalse(i.hasNext());\n    }"
    }
  ]
}