{
  "name": "GenericUtilities",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 486,
  "branches": 63,
  "apis": 70,
  "test": [
    {
      "description": "testUnmatchedRightAngleBracket",
      "expected-problems": null,
      "expected-linenumbers": [
        41,
        45
      ],
      "code": "@Test\n    void testUnmatchedRightAngleBracket() {\n        assertEquals(3, GenericUtilities.nextUnmatchedRightAngleBracket(\"<I>>\", 0));\n        assertEquals(1, GenericUtilities.nextUnmatchedRightAngleBracket(\"I><I>\", 0));\n    }"
    },
    {
      "description": "testNestedSignature",
      "expected-problems": null,
      "expected-linenumbers": [
        47,
        51
      ],
      "code": "@Test\n    void testNestedSignature() {\n        GenericObjectType t = (GenericObjectType) GenericUtilities.getType(SAMPLE_SIGNATURE);\n        assertEquals(1, t.getNumParameters());\n    }"
    },
    {
      "description": "testNestedSignature2",
      "expected-problems": null,
      "expected-linenumbers": [
        53,
        62
      ],
      "code": "@Test\n    void testNestedSignature2() {\n        List<ReferenceType> parameters = GenericUtilities\n                .getTypeParameters(\"Lcom/google/common/util/WeakIdentityHashMap<TK;TV;>.IdentityWeakReference;TV;\");\n\n        System.out.println(parameters);\n        assertEquals(2, parameters.size());\n        ReferenceType t = parameters.get(0);\n        assertEquals(\"com.google.common.util.WeakIdentityHashMap$IdentityWeakReference\", t.toString());\n    }"
    },
    {
      "description": "testMapSignature",
      "expected-problems": null,
      "expected-linenumbers": [
        64,
        69
      ],
      "code": "@Test\n    void testMapSignature() {\n        GenericObjectType t = (GenericObjectType) GenericUtilities\n                .getType(\"Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\");\n        assertEquals(2, t.getNumParameters());\n    }"
    },
    {
      "description": "testNestedSignatureParser",
      "expected-problems": null,
      "expected-linenumbers": [
        71,
        75
      ],
      "code": "@Test\n    void testNestedSignatureParser() {\n        GenericSignatureParser parser = new GenericSignatureParser(\"(\" + SAMPLE_SIGNATURE + \")V\");\n        assertEquals(1, parser.getNumParameters());\n    }"
    },
    {
      "description": "testOKSignaturesThatHaveCausedProblems",
      "expected-problems": null,
      "expected-linenumbers": [
        77,
        83
      ],
      "code": "@Test\n    void testOKSignaturesThatHaveCausedProblems() {\n        assertDoesNotThrow(() -> GenericUtilities.getType(\"[Ljava/util/Map$Entry<Ljava/lang/String;[B>;\"));\n        assertDoesNotThrow(() -> GenericUtilities.getType(\"[Ljava/util/Map<Ljava/lang/String;[Ljava/lang/String;>;\"));\n        assertDoesNotThrow(() -> GenericUtilities.getType(\n                \"Lcom/palantir/finance/commons/service/calculator/Call<-Ljava/util/List<!*>;+Ljava/util/List<Ljava/lang/String;>;>;\"));\n    }"
    },
    {
      "description": "testEclipseJDTInvalidUpperBoundSignature",
      "expected-problems": null,
      "expected-linenumbers": [
        85,
        91
      ],
      "code": "@Test\n    void testEclipseJDTInvalidUpperBoundSignature() {\n        final Type type = GenericUtilities.getType(\"!+LHasUniqueKey<Ljava/lang/Integer;>;\");\n        assertThat(type, instanceOf(GenericObjectType.class));\n        assertEquals(\"+\", ((GenericObjectType) type).getVariable());\n        assertEquals(\"HasUniqueKey<java.lang.Integer>\", ((GenericObjectType) type).getExtension().toString());\n    }"
    },
    {
      "description": "testEclipseJDTInvalidLowerBoundSignature",
      "expected-problems": null,
      "expected-linenumbers": [
        93,
        99
      ],
      "code": "@Test\n    void testEclipseJDTInvalidLowerBoundSignature() {\n        final Type type = GenericUtilities.getType(\"!-LHasUniqueKey<Ljava/lang/Integer;>;\");\n        assertThat(type, instanceOf(GenericObjectType.class));\n        assertEquals(\"-\", ((GenericObjectType) type).getVariable());\n        assertEquals(\"HasUniqueKey<java.lang.Integer>\", ((GenericObjectType) type).getExtension().toString());\n    }"
    },
    {
      "description": "testEclipseJDTInvalidWildcardSignature",
      "expected-problems": null,
      "expected-linenumbers": [
        101,
        107
      ],
      "code": "@Test\n    void testEclipseJDTInvalidWildcardSignature() {\n        final Type type = GenericUtilities.getType(\"!*\");\n        assertThat(type, instanceOf(GenericObjectType.class));\n        assertEquals(\"*\", ((GenericObjectType) type).getVariable());\n        assertNull(((GenericObjectType) type).getExtension());\n    }"
    }
  ]
}