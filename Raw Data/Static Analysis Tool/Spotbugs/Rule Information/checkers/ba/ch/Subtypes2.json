{
  "name": "Subtypes2",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 1407,
  "branches": 161,
  "apis": 267,
  "test": [
    {
      "description": "testStringSubtypeOfObject",
      "expected-problems": null,
      "expected-linenumbers": [
        131,
        146
      ],
      "code": "@Test\n    void testStringSubtypeOfObject() throws Throwable {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertTrue(test.isSubtype(typeString, typeObject));\n            }\n        });\n    }"
    },
    {
      "description": "testStringSubtypeOfSerializable",
      "expected-problems": null,
      "expected-linenumbers": [
        148,
        163
      ],
      "code": "@Test\n    void testStringSubtypeOfSerializable() throws Throwable {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertTrue(test.isSubtype(typeString, typeSerializable));\n            }\n        });\n    }"
    },
    {
      "description": "testIdentitySubtype",
      "expected-problems": null,
      "expected-linenumbers": [
        165,
        182
      ],
      "code": "@Test\n    void testIdentitySubtype() throws Throwable {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertTrue(test.isSubtype(typeObject, typeObject));\n                Assertions.assertTrue(test.isSubtype(typeSerializable, typeSerializable));\n                Assertions.assertTrue(test.isSubtype(typeArrayClonable, typeArrayClonable));\n            }\n        });\n    }"
    },
    {
      "description": "testInterfaceIsSubtypeOfObject",
      "expected-problems": null,
      "expected-linenumbers": [
        184,
        194
      ],
      "code": "@Test\n    void testInterfaceIsSubtypeOfObject() throws Throwable {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            @Override\n            public void run() throws ClassNotFoundException {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertTrue(test.isSubtype(typeClonable, typeObject));\n            }\n        });\n    }"
    },
    {
      "description": "testArrays",
      "expected-problems": null,
      "expected-linenumbers": [
        196,
        212
      ],
      "code": "@Test\n    void testArrays() throws Throwable {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertTrue(test.isSubtype(typeArrayClonable, typeObject));\n                Assertions.assertTrue(test.isSubtype(typeArrayClonable, typeArrayObject));\n            }\n        });\n    }"
    },
    {
      "description": "testUnrelatedTypes",
      "expected-problems": null,
      "expected-linenumbers": [
        214,
        229
      ],
      "code": "@Test\n    void testUnrelatedTypes() throws Throwable {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertFalse(test.isSubtype(typeInteger, typeString));\n            }\n        });\n    }"
    },
    {
      "description": "testArraysWrongDimension",
      "expected-problems": null,
      "expected-linenumbers": [
        231,
        246
      ],
      "code": "@Test\n    void testArraysWrongDimension() throws Throwable {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertFalse(test.isSubtype(typeArrayArrayString, typeArrayString));\n            }\n        });\n    }"
    },
    {
      "description": "testMultidimensionalArrayIsSubtypeOfObjectArray",
      "expected-problems": null,
      "expected-linenumbers": [
        248,
        265
      ],
      "code": "@Test\n    void testMultidimensionalArrayIsSubtypeOfObjectArray() throws Throwable {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertTrue(test.isSubtype(typeArrayArrayString, typeArrayObject));\n                Assertions.assertTrue(test.isSubtype(typeArrayArraySerializable, typeArrayObject));\n                Assertions.assertTrue(test.isSubtype(typeArrayArrayInt, typeArrayObject));\n            }\n        });\n    }"
    },
    {
      "description": "testArrayOfPrimitiveIsSubtypeOfObject",
      "expected-problems": null,
      "expected-linenumbers": [
        267,
        282
      ],
      "code": "@Test\n    void testArrayOfPrimitiveIsSubtypeOfObject() throws Throwable {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Exception {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertTrue(test.isSubtype(typeArrayInt, typeObject));\n            }\n        });\n    }"
    },
    {
      "description": "testSpecialStringSubclasses",
      "expected-problems": null,
      "expected-linenumbers": [
        284,
        301
      ],
      "code": "@Test\n    void testSpecialStringSubclasses() throws Exception {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Exception {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertTrue(test.isSubtype(typeDynamicString, typeString));\n                Assertions.assertTrue(test.isSubtype(typeStaticString, typeString));\n                Assertions.assertTrue(test.isSubtype(typeParameterString, typeString));\n            }\n        });\n    }"
    },
    {
      "description": "testEasyFirstCommonSuperclass",
      "expected-problems": null,
      "expected-linenumbers": [
        303,
        324
      ],
      "code": "@Test\n    void testEasyFirstCommonSuperclass() throws Exception {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeObject, typeObject));\n                Assertions.assertEquals(typeString, test.getFirstCommonSuperclass(typeString, typeString));\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeString, typeObject));\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeObject, typeString));\n\n                // Slightly harder one\n                Assertions.assertEquals(typeComparable, test.getFirstCommonSuperclass(typeString, typeInteger));\n            }\n        });\n    }"
    },
    {
      "description": "testInterfaceFirstCommonSuperclass",
      "expected-problems": null,
      "expected-linenumbers": [
        326,
        345
      ],
      "code": "@Test\n    void testInterfaceFirstCommonSuperclass() throws Exception {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeSerializable, typeObject));\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeObject, typeSerializable));\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeSerializable, typeClonable));\n\n                Assertions.assertEquals(typeSerializable, test.getFirstCommonSuperclass(typeSerializable, typeSerializable));\n            }\n        });\n    }"
    },
    {
      "description": "testArrayFirstCommonSuperclass",
      "expected-problems": null,
      "expected-linenumbers": [
        347,
        374
      ],
      "code": "@Test\n    void testArrayFirstCommonSuperclass() throws Exception {\n        executeFindBugsTest(new RunnableWithExceptions() {\n            /*\n             * (non-Javadoc)\n             *\n             * @see edu.umd.cs.findbugs.RunnableWithExceptions#run()\n             */\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeArrayInteger, typeObject));\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeSerializable, typeArrayClonable));\n\n                Assertions.assertEquals(typeArrayComparable, test.getFirstCommonSuperclass(typeArrayString, typeArrayInteger));\n\n                Assertions.assertEquals(typeArrayInt, test.getFirstCommonSuperclass(typeArrayInt, typeArrayInt));\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeArrayChar, typeArrayInt));\n\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeArrayString, typeArrayInt));\n\n                Assertions.assertEquals(typeArrayObject, test.getFirstCommonSuperclass(typeArrayArraySerializable, typeArrayString));\n\n                Assertions.assertEquals(typeObject, test.getFirstCommonSuperclass(typeArrayArrayString, typeArrayInt));\n            }\n        });\n    }"
    },
    {
      "description": "testArrayFirstCommonSuperclassTricky",
      "expected-problems": null,
      "expected-linenumbers": [
        376,
        393
      ],
      "code": "@Test\n    void testArrayFirstCommonSuperclassTricky() throws Exception {\n        executeFindBugsTest(new RunnableWithExceptions() {\n\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n\n                Assertions.assertEquals(typeArrayObject, test.getFirstCommonSuperclass(typeArrayArrayInt, typeArrayArrayChar));\n                Assertions.assertEquals(typeArrayObject, test.getFirstCommonSuperclass(typeArrayArrayInt, typeArrayArrayArrayChar));\n                Assertions.assertEquals(typeArrayArrayObject, test.getFirstCommonSuperclass(typeArrayArrayArrayChar, typeArrayArrayArrayInt));\n\n                // Sanity check\n                Assertions.assertEquals(typeArrayArrayArrayChar,\n                        test.getFirstCommonSuperclass(typeArrayArrayArrayChar, typeArrayArrayArrayChar));\n            }\n        });\n    }"
    },
    {
      "description": "testInterfaces",
      "expected-problems": null,
      "expected-linenumbers": [
        395,
        413
      ],
      "code": "@Test\n    void testInterfaces() throws Exception {\n        executeFindBugsTest(new RunnableWithExceptions() {\n\n            @Override\n            public void run() throws Throwable {\n                Subtypes2 test = getSubtypes2();\n                Assertions.assertEquals(typeCollection, test.getFirstCommonSuperclass(typeCollection, typeHashSet));\n                Assertions.assertEquals(typeCollection, test.getFirstCommonSuperclass(typeHashSet, typeCollection));\n                Assertions.assertEquals(typeCollection, test.getFirstCommonSuperclass(typeList, typeHashSet));\n\n            }\n        });\n        /*\n         * ObjectType typeList; ObjectType typeMap; ObjectType typeCollection;\n         * ObjectType typeHashSet;\n         */\n\n    }"
    }
  ]
}