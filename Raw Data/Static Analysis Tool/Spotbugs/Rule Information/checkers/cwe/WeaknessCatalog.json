{
  "name": "WeaknessCatalog",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 129,
  "branches": 6,
  "apis": 19,
  "test": [
    {
      "description": "testGetInstanceConstruction",
      "expected-problems": null,
      "expected-linenumbers": [
        13,
        16
      ],
      "code": "@Test\n    void testGetInstanceConstruction() {\n        assertNotNull(WeaknessCatalog.getInstance());\n    }"
    },
    {
      "description": "testGetInstanceCalledTwiceSameInstance",
      "expected-problems": null,
      "expected-linenumbers": [
        18,
        24
      ],
      "code": "@Test\n    void testGetInstanceCalledTwiceSameInstance() {\n        WeaknessCatalog instance1 = WeaknessCatalog.getInstance();\n        WeaknessCatalog instance2 = WeaknessCatalog.getInstance();\n\n        assertTrue(instance1 == instance2);\n    }"
    },
    {
      "description": "testGetWeaknessByCweIdOrNullExistingWeakness",
      "expected-problems": null,
      "expected-linenumbers": [
        26,
        39
      ],
      "code": "@Test\n    void testGetWeaknessByCweIdOrNullExistingWeakness() {\n        int cweid = 78;\n        String name = \"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\";\n        String description = \"The product constructs all or part of an OS command using externally-influenced input from an upstream component, but\";\n\n        WeaknessCatalog weaknessCatalog = WeaknessCatalog.getInstance();\n        Weakness weakness = weaknessCatalog.getWeaknessByCweIdOrNull(cweid);\n\n        assertEquals(cweid, weakness.getCweId());\n        assertEquals(name, weakness.getName());\n        assertThat(weakness.getDescription(), startsWith(description));\n        assertEquals(WeaknessSeverity.HIGH, weakness.getSeverity());\n    }"
    },
    {
      "description": "testGetWeaknessByCweIdOrNullNonExistingWeakness",
      "expected-problems": null,
      "expected-linenumbers": [
        41,
        49
      ],
      "code": "@Test\n    void testGetWeaknessByCweIdOrNullNonExistingWeakness() {\n        int cweid = Integer.MAX_VALUE;\n\n        WeaknessCatalog weaknessCatalog = WeaknessCatalog.getInstance();\n        Weakness weakness = weaknessCatalog.getWeaknessByCweIdOrNull(cweid);\n\n        assertNull(weakness);\n    }"
    },
    {
      "description": "testGetWeaknessByCweIdOrNullNonInvalidCweId",
      "expected-problems": null,
      "expected-linenumbers": [
        51,
        59
      ],
      "code": "@Test\n    void testGetWeaknessByCweIdOrNullNonInvalidCweId() {\n        int cweid = Integer.MIN_VALUE;\n\n        WeaknessCatalog weaknessCatalog = WeaknessCatalog.getInstance();\n        Weakness weakness = weaknessCatalog.getWeaknessByCweIdOrNull(cweid);\n\n        assertNull(weakness);\n    }"
    },
    {
      "description": "testGetWeaknessByCweIdOrNullCweIdIsZero",
      "expected-problems": null,
      "expected-linenumbers": [
        61,
        69
      ],
      "code": "@Test\n    void testGetWeaknessByCweIdOrNullCweIdIsZero() {\n        int cweid = 0;\n\n        WeaknessCatalog weaknessCatalog = WeaknessCatalog.getInstance();\n        Weakness weakness = weaknessCatalog.getWeaknessByCweIdOrNull(cweid);\n\n        assertNull(weakness);\n    }"
    }
  ]
}