{
  "name": "Level",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 69,
  "branches": 9,
  "apis": 3,
  "test": [
    {
      "description": "testToJsonString",
      "expected-problems": null,
      "expected-linenumbers": [
        15,
        21
      ],
      "code": "@Test\n    void testToJsonString() {\n        Gson gson = new Gson();\n        JsonObject jsonObject = new JsonObject();\n        jsonObject.addProperty(\"level\", Level.WARNING.toJsonString());\n        assertThat(gson.toJson(jsonObject), is(\"{\\\"level\\\":\\\"warning\\\"}\"));\n    }"
    },
    {
      "description": "testMapHighestRankToError",
      "expected-problems": null,
      "expected-linenumbers": [
        23,
        26
      ],
      "code": "@Test\n    void testMapHighestRankToError() {\n        assertThat(Level.fromBugRank(1), is(Level.ERROR));\n    }"
    },
    {
      "description": "testMapHighRankToError",
      "expected-problems": null,
      "expected-linenumbers": [
        28,
        31
      ],
      "code": "@Test\n    void testMapHighRankToError() {\n        assertThat(Level.fromBugRank(9), is(Level.ERROR));\n    }"
    },
    {
      "description": "testMapLowRankToWarning",
      "expected-problems": null,
      "expected-linenumbers": [
        33,
        36
      ],
      "code": "@Test\n    void testMapLowRankToWarning() {\n        assertThat(Level.fromBugRank(14), is(Level.WARNING));\n    }"
    },
    {
      "description": "testMapLowestRankToNote",
      "expected-problems": null,
      "expected-linenumbers": [
        38,
        41
      ],
      "code": "@Test\n    void testMapLowestRankToNote() {\n        assertThat(Level.fromBugRank(20), is(Level.NOTE));\n    }"
    },
    {
      "description": "testMapWeaknessSeverityLevelHighToError",
      "expected-problems": null,
      "expected-linenumbers": [
        43,
        46
      ],
      "code": "@Test\n    void testMapWeaknessSeverityLevelHighToError() {\n        assertThat(Level.fromWeaknessSeverity(WeaknessSeverity.HIGH), is(Level.ERROR));\n    }"
    },
    {
      "description": "testMapWeaknessSeverityLevelMediumToWarning",
      "expected-problems": null,
      "expected-linenumbers": [
        48,
        51
      ],
      "code": "@Test\n    void testMapWeaknessSeverityLevelMediumToWarning() {\n        assertThat(Level.fromWeaknessSeverity(WeaknessSeverity.MEDIUM), is(Level.WARNING));\n    }"
    },
    {
      "description": "testMapWeaknessSeverityLevelLowToNote",
      "expected-problems": null,
      "expected-linenumbers": [
        53,
        56
      ],
      "code": "@Test\n    void testMapWeaknessSeverityLevelLowToNote() {\n        assertThat(Level.fromWeaknessSeverity(WeaknessSeverity.LOW), is(Level.NOTE));\n    }"
    },
    {
      "description": "testMapWeaknessSeverityLevelNoneToNone",
      "expected-problems": null,
      "expected-linenumbers": [
        58,
        61
      ],
      "code": "@Test\n    void testMapWeaknessSeverityLevelNoneToNone() {\n        assertThat(Level.fromWeaknessSeverity(WeaknessSeverity.NONE), is(Level.NONE));\n    }"
    }
  ]
}