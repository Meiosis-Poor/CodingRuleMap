{
  "name": "SarifBugReporter",
  "language": "java",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 170,
  "branches": 10,
  "apis": 63,
  "test": [
    {
      "description": "testVersionAndSchema",
      "expected-problems": null,
      "expected-linenumbers": [
        87,
        467
      ],
      "code": "@Test\n    void testVersionAndSchema() {\n        reporter.finish();\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n\n        assertThat(\"the first key in JSON should be 'version'\", json, startsWith(\"{\\\"version\\\"\"));\n        assertThat(jsonObject.get(\"version\").getAsString(), is(\"2.1.0\"));\n        assertThat(jsonObject.get(\"$schema\").getAsString(), is(\n                \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\"));\n    }\n\n    /**\n     * {@code toolComponent} object in {@code \"runs.tool.driver\"} SHOULD have {@code \"version\"} (ยง3.19.2).\n     * A toolComponent object SHALL contain a {@code \"name\"} property (ยง3.19.8).\n     * A toolComponent object MAY contain a {@code \"language\"} property (ยง3.19.21).\n     */\n    @Test\n    void testDriver() {\n        final String EXPECTED_VERSION = Version.VERSION_STRING;\n        final String EXPECTED_LANGUAGE = \"ja\";\n\n        Locale defaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.JAPANESE);\n            reporter.finish();\n        } finally {\n            Locale.setDefault(defaultLocale);\n        }\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = (JsonObject) jsonObject.getAsJsonArray(\"runs\").get(0);\n        JsonObject tool = run.getAsJsonObject(\"tool\");\n        JsonObject driver = tool.getAsJsonObject(\"driver\");\n\n        assertThat(driver.get(\"name\").getAsString(), is(\"SpotBugs\"));\n        assertThat(driver.get(\"version\").getAsString(), is(EXPECTED_VERSION));\n        assertThat(driver.get(\"language\").getAsString(), is(EXPECTED_LANGUAGE));\n    }\n\n    @Test\n    void testRuleWithArguments() {\n        // given\n        final String EXPECTED_BUG_TYPE = \"BUG_TYPE\";\n        final String EXPECTED_DESCRIPTION = \"describing about this bug type...\";\n        BugPattern bugPattern = new BugPattern(EXPECTED_BUG_TYPE, \"abbrev\", \"category\", false, EXPECTED_DESCRIPTION,\n                \"describing about this bug type with value {0}...\", \"detailText\", null, 0);\n        DetectorFactoryCollection.instance().registerBugPattern(bugPattern);\n\n        // when\n        reporter.reportBug(new BugInstance(bugPattern.getType(), bugPattern.getPriorityAdjustment()).addInt(10).addClass(\"the/target/Class\"));\n        reporter.finish();\n\n        // then\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n        JsonArray rules = run.getAsJsonObject(\"tool\").getAsJsonObject(\"driver\").getAsJsonArray(\"rules\");\n        JsonArray results = run.getAsJsonArray(\"results\");\n\n        assertThat(rules.size(), is(1));\n        JsonObject rule = rules.get(0).getAsJsonObject();\n        assertThat(rule.get(\"id\").getAsString(), is(bugPattern.getType()));\n        String defaultText = rule.getAsJsonObject(\"messageStrings\").getAsJsonObject(\"default\").get(\"text\").getAsString();\n        assertThat(defaultText, is(\"describing about this bug type with value {0}...\"));\n\n        assertThat(results.size(), is(1));\n        JsonObject result = results.get(0).getAsJsonObject();\n        assertThat(result.get(\"ruleId\").getAsString(), is(bugPattern.getType()));\n        JsonObject message = result.getAsJsonObject(\"message\");\n        assertThat(message.get(\"id\").getAsString(), is(\"default\"));\n        assertThat(message.get(\"text\").getAsString(), is(bugPattern.getShortDescription()));\n        JsonArray arguments = message.getAsJsonArray(\"arguments\");\n        assertThat(arguments.get(0).getAsInt(), is(10));\n    }\n\n\n\n    @Test\n    void testRuleWithInvalidArguments() {\n        // given\n        final String EXPECTED_BUG_TYPE = \"BUG_TYPE\";\n        final String EXPECTED_DESCRIPTION = \"describing about this bug type...\";\n        BugPattern bugPattern = new BugPattern(EXPECTED_BUG_TYPE, \"abbrev\", \"category\", false, EXPECTED_DESCRIPTION,\n                \"describing about this bug type with value {1234}...\", \"detailText\", null, 0);\n        DetectorFactoryCollection.instance().registerBugPattern(bugPattern);\n\n        // when\n        reporter.reportBug(new BugInstance(bugPattern.getType(), bugPattern.getPriorityAdjustment()).addInt(10).addClass(\"the/target/Class\"));\n        reporter.finish();\n\n        // then\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n        JsonArray rules = run.getAsJsonObject(\"tool\").getAsJsonObject(\"driver\").getAsJsonArray(\"rules\");\n        JsonArray results = run.getAsJsonArray(\"results\");\n\n        assertThat(rules.size(), is(1));\n        JsonObject rule = rules.get(0).getAsJsonObject();\n        assertThat(rule.get(\"id\").getAsString(), is(bugPattern.getType()));\n        String defaultText = rule.getAsJsonObject(\"messageStrings\").getAsJsonObject(\"default\").get(\"text\").getAsString();\n        assertThat(defaultText, is(\"describing about this bug type with value {0}...\"));\n\n        assertThat(results.size(), is(1));\n        JsonObject result = results.get(0).getAsJsonObject();\n        assertThat(result.get(\"ruleId\").getAsString(), is(bugPattern.getType()));\n        JsonObject message = result.getAsJsonObject(\"message\");\n        assertThat(message.get(\"id\").getAsString(), is(\"default\"));\n        assertThat(message.get(\"text\").getAsString(), is(bugPattern.getShortDescription()));\n        JsonArray arguments = message.getAsJsonArray(\"arguments\");\n        assertThat(arguments.get(0).getAsString(), is(\"?>?1234/2???\"));\n    }\n\n    @Test\n    void testMissingClassNotification() {\n        ClassDescriptor classDescriptor = DescriptorFactory.instance().getClassDescriptor(\"com/github/spotbugs/MissingClass\");\n        reporter.reportMissingClass(classDescriptor);\n        reporter.finish();\n\n        // then\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n        JsonArray toolConfigurationNotifications = run.getAsJsonArray(\"invocations\")\n                .get(0).getAsJsonObject()\n                .getAsJsonArray(\"toolConfigurationNotifications\");\n\n        assertThat(toolConfigurationNotifications.size(), is(1));\n        JsonObject notification = toolConfigurationNotifications.get(0).getAsJsonObject();\n        assertThat(notification.getAsJsonObject(\"descriptor\").get(\"id\").getAsString(), is(\"spotbugs-missing-classes\"));\n        assertThat(notification.getAsJsonObject(\"message\").get(\"text\").getAsString(), is(\n                \"Classes needed for analysis were missing: [com.github.spotbugs.MissingClass]\"));\n    }\n\n    @Test\n    void testErrorNotification() {\n        reporter.logError(\"Unexpected Error\");\n        reporter.finish();\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n        JsonArray toolExecutionNotifications = run.getAsJsonArray(\"invocations\")\n                .get(0).getAsJsonObject()\n                .getAsJsonArray(\"toolExecutionNotifications\");\n\n        assertThat(toolExecutionNotifications.size(), is(1));\n        JsonObject notification = toolExecutionNotifications.get(0).getAsJsonObject();\n        assertThat(notification.getAsJsonObject(\"descriptor\").get(\"id\").getAsString(), is(\"spotbugs-error-0\"));\n        assertThat(notification.getAsJsonObject(\"message\").get(\"text\").getAsString(), is(\"Unexpected Error\"));\n        assertFalse(notification.has(\"exception\"));\n    }\n\n    @Test\n    void testExceptionNotification() {\n        reporter.getProject().getSourceFinder().setSourceBaseList(Collections.singletonList(new File(\"src/test/java\").getAbsolutePath()));\n        reporter.logError(\"Unexpected Error\", new Exception(\"Unexpected Problem\"));\n        reporter.finish();\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n        JsonArray toolExecutionNotifications = run.getAsJsonArray(\"invocations\")\n                .get(0).getAsJsonObject()\n                .getAsJsonArray(\"toolExecutionNotifications\");\n\n        assertThat(toolExecutionNotifications.size(), is(1));\n        JsonObject notification = toolExecutionNotifications.get(0).getAsJsonObject();\n        assertThat(notification.getAsJsonObject(\"descriptor\").get(\"id\").getAsString(), is(\"spotbugs-error-0\"));\n        assertThat(notification.getAsJsonObject(\"message\").get(\"text\").getAsString(), is(\"Unexpected Error\"));\n        assertTrue(notification.has(\"exception\"));\n        JsonArray frames = notification.getAsJsonObject(\"exception\").getAsJsonObject(\"stack\").getAsJsonArray(\"frames\");\n        JsonObject physicalLocation = frames.get(0).getAsJsonObject().getAsJsonObject(\"location\").getAsJsonObject(\"physicalLocation\");\n        String uri = physicalLocation.getAsJsonObject(\"artifactLocation\").get(\"uri\").getAsString();\n        assertThat(uri, is(\"edu/umd/cs/findbugs/sarif/SarifBugReporterTest.java\"));\n    }\n\n    @Test\n    void testExceptionNotificationWithoutMessage() {\n        reporter.logError(\"Unexpected Error\", new Exception());\n        reporter.finish();\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n        JsonArray toolExecutionNotifications = run.getAsJsonArray(\"invocations\")\n                .get(0).getAsJsonObject()\n                .getAsJsonArray(\"toolExecutionNotifications\");\n\n        assertThat(toolExecutionNotifications.size(), is(1));\n        JsonObject notification = toolExecutionNotifications.get(0).getAsJsonObject();\n        assertThat(notification.getAsJsonObject(\"descriptor\").get(\"id\").getAsString(), is(\"spotbugs-error-0\"));\n        assertThat(notification.getAsJsonObject(\"message\").get(\"text\").getAsString(), is(\"Unexpected Error\"));\n        assertTrue(notification.has(\"exception\"));\n    }\n\n    @Test\n    void testHelpUriAndTags() {\n        BugPattern bugPattern = new BugPattern(\"TYPE\", \"abbrev\", \"category\", false, \"shortDescription\",\n                \"longDescription\", \"detailText\", \"https://example.com/help.html\", 0);\n        DetectorFactoryCollection.instance().registerBugPattern(bugPattern);\n\n        reporter.reportBug(new BugInstance(bugPattern.getType(), bugPattern.getPriorityAdjustment()).addInt(10).addClass(\"the/target/Class\"));\n        reporter.finish();\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n        JsonArray rules = run.getAsJsonObject(\"tool\").getAsJsonObject(\"driver\").getAsJsonArray(\"rules\");\n\n        assertThat(rules.size(), is(1));\n        JsonObject rule = rules.get(0).getAsJsonObject();\n        assertThat(rule.get(\"helpUri\").getAsString(), is(\"https://example.com/help.html#TYPE\"));\n\n        JsonArray tags = rule.getAsJsonObject(\"properties\").getAsJsonArray(\"tags\");\n        assertThat(tags.size(), is(1));\n        assertThat(tags.get(0).getAsString(), is(\"category\"));\n    }\n\n    @Test\n    void testExtensions() {\n        PluginLoader pluginLoader = DetectorFactoryCollection.instance().getCorePlugin().getPluginLoader();\n        Plugin plugin = new Plugin(\"pluginId\", \"version\", null, pluginLoader, true, false);\n        DetectorFactoryCollection dfc = new DetectorFactoryCollection(plugin);\n        try {\n            DetectorFactoryCollection.resetInstance(dfc);\n            reporter.finish();\n        } finally {\n            DetectorFactoryCollection.resetInstance(null);\n        }\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n        JsonObject tool = run.getAsJsonObject(\"tool\");\n        JsonArray extensions = tool.getAsJsonArray(\"extensions\");\n\n        assertThat(extensions.size(), is(1));\n        JsonObject extension = extensions.get(0).getAsJsonObject();\n\n        assertThat(extension.get(\"name\").getAsString(), is(\"pluginId\"));\n        assertThat(extension.get(\"version\").getAsString(), is(\"version\"));\n    }\n\n    @Test\n    void testSourceLocation() throws IOException {\n        Path tmpDir = Files.createTempDirectory(\"spotbugs\");\n        new File(tmpDir.toFile(), \"SampleClass.java\").createNewFile();\n        SourceFinder sourceFinder = reporter.getProject().getSourceFinder();\n        sourceFinder.setSourceBaseList(Collections.singleton(tmpDir.toString()));\n\n        BugPattern bugPattern = new BugPattern(\"TYPE\", \"abbrev\", \"category\", false, \"shortDescription\",\n                \"longDescription\", \"detailText\", \"https://example.com/help.html\", 0);\n        DetectorFactoryCollection.instance().registerBugPattern(bugPattern);\n\n        reporter.reportBug(new BugInstance(bugPattern.getType(), bugPattern.getPriorityAdjustment()).addInt(10).addClass(\"SampleClass\"));\n        reporter.finish();\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n\n        JsonObject originalUriBaseIds = run.getAsJsonObject(\"originalUriBaseIds\");\n        String uriBaseId = takeFirstKey(originalUriBaseIds).get();\n        assertThat(URI.create(originalUriBaseIds.getAsJsonObject(uriBaseId).get(\"uri\").getAsString()), is(tmpDir.toUri()));\n\n        JsonArray results = run.getAsJsonArray(\"results\");\n        assertThat(results.size(), is(1));\n        JsonObject result = results.get(0).getAsJsonObject();\n        JsonObject artifactLocation = result.getAsJsonArray(\"locations\").get(0).getAsJsonObject().getAsJsonObject(\"physicalLocation\").getAsJsonObject(\n                \"artifactLocation\");\n        String relativeUri = artifactLocation.get(\"uri\").getAsString();\n        assertThat(\"relative URI that can be resolved by the uriBase\",\n                relativeUri, is(\"SampleClass.java\"));\n        assertThat(artifactLocation.get(\"uriBaseId\").getAsString(), is(uriBaseId));\n    }\n\n    @Test\n    void testCweTaxonomy() throws IOException {\n        String type = \"TYPE_WITH_CWE\";\n        int cweid = 502;\n\n        Path tmpDir = Files.createTempDirectory(\"spotbugs\");\n        new File(tmpDir.toFile(), \"SampleClass.java\").createNewFile();\n        SourceFinder sourceFinder = reporter.getProject().getSourceFinder();\n        sourceFinder.setSourceBaseList(Collections.singleton(tmpDir.toString()));\n\n        BugPattern bugPattern = new BugPattern(type, \"abbrev\", \"category\", false, \"shortDescription\",\n                \"longDescription\", \"detailText\", \"https://example.com/help.html\", cweid);\n        DetectorFactoryCollection.instance().registerBugPattern(bugPattern);\n\n        reporter.reportBug(new BugInstance(bugPattern.getType(), bugPattern.getPriorityAdjustment()).addInt(10)\n                .addClass(\"SampleClass\"));\n        reporter.finish();\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n\n        /* test rules part */\n        JsonObject tool = run.getAsJsonObject(\"tool\");\n        JsonObject driver = tool.getAsJsonObject(\"driver\");\n        JsonObject rule = driver.getAsJsonArray(\"rules\").get(0).getAsJsonObject();\n        JsonObject relationship = rule.getAsJsonArray(\"relationships\").get(0).getAsJsonObject();\n\n        assertThat(rule.get(\"id\").getAsString(), is(type));\n        assertThat(relationship.getAsJsonObject(\"target\").get(\"id\").getAsInt(), is(cweid));\n        assertThat(relationship.getAsJsonArray(\"kinds\").get(0).getAsString(), is(\"superset\"));\n\n        /* test supported taxonomies part */\n        assertThat(driver.getAsJsonArray(\"supportedTaxonomies\").get(0).getAsJsonObject().get(\"name\").getAsString(),\n                is(\"CWE\"));\n\n        /* test taxonomies */\n        JsonArray taxonomies = run.getAsJsonArray(\"taxonomies\");\n        assertThat(taxonomies.size(), is(1));\n\n        JsonObject cweTaxonomy = taxonomies.get(0).getAsJsonObject();\n        assertThat(cweTaxonomy.get(\"organization\").getAsString(), is(\"MITRE\"));\n        assertThat(cweTaxonomy.get(\"name\").getAsString(), is(\"CWE\"));\n\n        JsonArray taxa = cweTaxonomy.getAsJsonArray(\"taxa\");\n        assertThat(taxonomies.size(), is(1));\n\n        JsonObject cwe502taxon = taxa.get(0).getAsJsonObject();\n        assertThat(cwe502taxon.get(\"id\").getAsInt(), is(cweid));\n        assertThat(cwe502taxon.get(\"shortDescription\").getAsJsonObject().get(\"text\").getAsString(),\n                is(\"Deserialization of Untrusted Data\"));\n    }\n\n    @Test\n    void testNullInResultsOrTaxa() {\n        reporter.finish();\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n\n        // \"results\" may be empty or null, but not missing,\n        // https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/sarif-v2.1.0-errata01-os-complete.html#_Toc141790757\n        JsonElement results = run.get(\"results\");\n        assertNotNull(results);\n        if (results != JsonNull.INSTANCE) {\n            assertThat(results.getAsJsonArray().size(), is(0));\n        }\n\n        // \"taxonomies\" may not be or contain null, but may be missing\n        // https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/sarif-v2.1.0-errata01-os-complete.html#_Toc141790742\n        JsonElement taxonomies = run.get(\"taxonomies\");\n        assertThat(taxonomies, not(JsonNull.INSTANCE));\n        if (taxonomies != null) {\n            assertThat(taxonomies.getAsJsonArray().size(), is(0));\n        }\n    }\n\n    @Test\n    void testInvocationSuccessfulOnBugPresence() {\n        BugPattern bugPattern = new BugPattern(\"TYPE\", \"abbrev\", \"category\", false, \"shortDescription\",\n                \"longDescription\", \"detailText\", \"https://example.com/help.html\", 0);\n        DetectorFactoryCollection.instance().registerBugPattern(bugPattern);\n\n        reporter.reportBug(new BugInstance(bugPattern.getType(), bugPattern.getPriorityAdjustment()).addInt(10).addClass(\"the/target/Class\"));\n        reporter.finish();\n\n        String json = writer.toString();\n        JsonObject jsonObject = new Gson().fromJson(json, JsonObject.class);\n        JsonObject run = jsonObject.getAsJsonArray(\"runs\").get(0).getAsJsonObject();\n        JsonObject invocation = run.getAsJsonArray(\"invocations\").get(0).getAsJsonObject();\n\n        assertThat(invocation.get(\"exitCode\").getAsInt(), is(1));\n        assertThat(invocation.get(\"exitCodeDescription\").getAsString(), is(\"BUGS FOUND\"));\n        assertThat(invocation.get(\"executionSuccessful\").getAsBoolean(), is(true));\n    }\n\n    Optional<String> takeFirstKey(JsonObject object) {\n        return object.keySet().stream().findFirst();\n    }\n}"
    }
  ]
}