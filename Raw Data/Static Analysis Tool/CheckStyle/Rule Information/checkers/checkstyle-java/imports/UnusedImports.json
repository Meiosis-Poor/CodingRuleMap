{
  "name": "UnusedImports",
  "language": "java",
  "description": "<div>\n Checks for unused import statements. An import statement\n is considered unused if:\n </div>\n\n <ul>\n <li>\n It is not referenced in the file. The algorithm does not support wild-card\n imports like {@code import java.io.*;}. Most IDE's provide very sophisticated\n checks for imports that handle wild-card imports.\n </li>\n <li>\n The class imported is from the {@code java.lang} package. For example\n importing {@code java.lang.String}.\n </li>\n <li>\n The class imported is from the same package.\n </li>\n <li>\n A static method is imported when used as method reference. In that case,\n only the type needs to be imported and that's enough to resolve the method.\n </li>\n <li>\n <b>Optionally:</b> it is referenced in Javadoc comments. This check is on by\n default, but it is considered bad practice to introduce a compile-time\n dependency for documentation purposes only. As an example, the import\n {@code java.util.List} would be considered referenced with the Javadoc\n comment {@code {@link List}}. The alternative to avoid introducing a compile-time\n dependency would be to write the Javadoc comment as {@code {&#64;link java.util.List}}.\n </li>\n </ul>\n\n <p>\n The main limitation of this check is handling the cases where:\n </p>\n <ul>\n <li>\n An imported type has the same name as a declaration, such as a member variable.\n </li>\n <li>\n There are two or more static imports with the same method name\n (javac can distinguish imports with same name but different parameters, but checkstyle can not\n due to <a href=\"https://checkstyle.org/writingchecks.html#Limitations\">limitation.</a>)\n </li>\n </ul>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 320,
  "branches": 43,
  "apis": 83,
  "test": [
    {
      "description": "Auto test from InputUnusedImports.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        10,
        14,
        15,
        17,
        20,
        23,
        24,
        30,
        35,
        47
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport com.google.errorprone.annotations.*;\nimport com.google.errorprone.annotations.concurrent.GuardedBy; \nimport java.io.*;\nimport java.lang.*;\nimport java.lang.String; \nimport java.util.List; \nimport java.util.List; \nimport java.lang.*;\nimport java.util.Iterator;\nimport java.util.Enumeration; \nimport java.util.Arrays;\nimport javax.swing.JToolBar;\nimport javax.swing.JToggleButton; \nimport javax.swing.BorderFactory; \nimport static java.io.File.listRoots;\nimport static javax.swing.WindowConstants.*;\nimport static java.io.File. \n    createTempFile;\nimport java.awt.Graphics2D;\nimport java.awt.HeadlessException;\nimport java.awt.Label; \nimport java.util.Date;\nimport java.util.Calendar;\nimport java.util.BitSet;\nimport com.google.errorprone.annotations.CheckReturnValue;\nimport com.google.errorprone.annotations.CanIgnoreReturnValue;\nimport com.google.errorprone.annotations.CompatibleWith;\nimport com.google.errorprone.annotations.concurrent.LazyInit;\nimport com.google.errorprone.annotations.DoNotCall;\nimport com.google.errorprone.annotations.CompileTimeConstant;\nimport com.google.errorprone.annotations.FormatString;\nimport com.google.errorprone.annotations.ForOverride; \nclass InputUnusedImports\n{\n    private Class mUse1 = null;\n    private Class mUse2 = java.io.File.class;\n    private Class mUse3 = Iterator[].class;\n    private Class mUse4 = java.util.Enumeration[].class;\n    private Object ftpClient = null;\n    {\n        int[] x = {};\n        Arrays.sort(x);\n        Object obj = javax.swing.BorderFactory.createEmptyBorder();\n        File[] files = listRoots();\n    }\n    private JToolBar.Separator mSep = null;\n    private Object mUse5 = new Object();\n    private Object mUse6 = new javax.swing.JToggleButton.ToggleButtonModel();\n    private int Component;\n    public void Label() {}\n    public void render() {}\n    public void aMethodWithManyLinks() {}\n}"
    },
    {
      "description": "Auto test from InputUnusedImports2.java",
      "expected-problems": 22,
      "expected-linenumbers": [
        10,
        14,
        15,
        17,
        20,
        23,
        24,
        30,
        32,
        34,
        35,
        36,
        37,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        46,
        47
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport com.google.errorprone.annotations.*;\nimport com.google.errorprone.annotations.concurrent.GuardedBy; \nimport java.io.*;\nimport java.lang.*;\nimport java.lang.String; \nimport java.util.List; \nimport java.util.List; \nimport java.lang.*;\nimport java.util.Iterator;\nimport java.util.Enumeration; \nimport java.util.Arrays;\nimport javax.swing.JToolBar;\nimport javax.swing.JToggleButton; \nimport javax.swing.BorderFactory; \nimport static java.io.File.listRoots;\nimport static javax.swing.WindowConstants.*;\nimport static java.io.File. \n    createTempFile;\nimport java.awt.Graphics2D; \nimport java.awt.HeadlessException; \nimport java.awt.Label; \nimport java.util.Date; \nimport java.util.Calendar; \nimport java.util.BitSet; \nimport com.google.errorprone.annotations.CheckReturnValue; \nimport com.google.errorprone.annotations.CanIgnoreReturnValue; \nimport com.google.errorprone.annotations.CompatibleWith; \nimport com.google.errorprone.annotations.concurrent.LazyInit; \nimport com.google.errorprone.annotations.DoNotCall; \nimport com.google.errorprone.annotations.CompileTimeConstant; \nimport com.google.errorprone.annotations.FormatMethod; \nimport com.google.errorprone.annotations.FormatString; \nclass InputUnusedImports2\n{\n    private Class mUse1 = null;\n    private Class mUse2 = java.io.File.class;\n    private Class mUse3 = Iterator[].class;\n    private Class mUse4 = java.util.Enumeration[].class;\n    private Object ftpClient = null;\n    {\n        int[] x = {};\n        Arrays.sort(x);\n        Object obj = javax.swing.BorderFactory.createEmptyBorder();\n        File[] files = listRoots();\n    }\n    private JToolBar.Separator mSep = null;\n    private Object mUse5 = new Object();\n    private Object mUse6 = new javax.swing.JToggleButton.ToggleButtonModel();\n    private int Component;\n    public void Label() {}\n    public void render() {}\n    public void aMethodWithManyLinks() {}\n}"
    },
    {
      "description": "Auto test from InputUnusedImports3.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        10,
        12
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.awt.AWTException;\nimport java.awt.Rectangle; \nimport java.awt.event.InputEvent;\nimport java.awt.event.KeyEvent; \npublic class InputUnusedImports3 extends java.awt.Robot {\n    private int delay;\n    protected InputUnusedImports3() throws AWTException {\n        super();\n    }\n    public void hitKey(int keycode) {\n        keyPress(keycode);\n        delay();\n    }\n    public void clickMouse(int buttons) {\n        mousePress(buttons);\n        delay();\n    }\n    public void clickMouse() {\n        clickMouse(InputEvent.BUTTON1_MASK);\n    }\n    public void delay() {\n        delay(delay);\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsArrayRef.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        12
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.ArrayList; \npublic class InputUnusedImportsArrayRef {\n    private static final Set<String> FOO;\n    static {\n        FOO = new HashSet<>();\n        FOO.add( HashMap[].class.getName() );\n        FOO.add( java.util.ArrayList[].class.getName() );\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsCheckClearState.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        8,
        10,
        11
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.util.Arrays; \nimport java.util.List; \nimport java.util.Set; \npublic class InputUnusedImportsCheckClearState {}"
    },
    {
      "description": "Auto test from InputUnusedImportsFromJavaLang.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.lang.String; \nimport java.lang.Math; \nimport java.lang.Class; \nimport java.lang.Exception; \nimport java.lang.Runnable; \nimport java.lang.RuntimeException; \nimport java.lang.ProcessBuilder; \nimport java.lang.Double; \nimport java.lang.Integer; \nimport java.lang.Float; \nimport java.lang.Short; \nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.Field;\nimport java.lang.*;\npublic class InputUnusedImportsFromJavaLang {\n    private static final String SOMETHING = \"a string\";\n    private static final double PI =  Math.PI;\n    private Class clazz = this.getClass();\n    private Exception ex = new RuntimeException();\n    private Runnable runnable = new Runnable() {\n        @Override\n        public void run() {\n        }\n    };\n    private ProcessBuilder processBuilder = new ProcessBuilder();\n    private int modifier = Modifier.fieldModifiers();\n    private Field field;\n    private Annotation annotation;\n    public static void main(String[] args) {\n        Double d = new Double(0.0d);\n        Float f = new Float(0.1f);\n        Integer i = new Integer(1);\n        Short s = Short.MIN_VALUE;\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsFromStaticMethodRef.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        25,
        26,
        27,
        28
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport static java.lang.annotation.ElementType.TYPE_USE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Optional;\nimport java.util.Objects;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport static java.lang.String.format; \nimport static java.util.Arrays.sort; \nimport static java.util.List.of; \nimport static java.util.Collections.emptyMap; \npublic class InputUnusedImportsFromStaticMethodRef {\n    public static <T, R> Function<T, R> func(Function<T, R> f) { return f; }\n    InputUnusedImportsFromStaticMethodRef() {\n    }\n    void testMethodRef() {\n        Optional<String> test = Optional.empty();\n        test.map(String::format);\n    }\n    void testMethodRefWithClass() {\n        Optional<String> test = Optional.empty();\n        test.map(Objects::nonNull);\n    }\n    void testMethodRefAssignment() {\n        int[] array = { 10, 2, 19, 5, 17 };\n        Consumer<int[]> consumer = Arrays::sort;\n        consumer.accept(array);\n    }\n    void testConstructorMethodRefArgument() {\n        func(func(@CJ WeakReference::new));\n    }\n    void testConstructorMethodRefAssignment() {\n        ListGetter<String> listGetter = ArrayList::new;\n        listGetter.get();\n    }\n    void testMethodRefOnGenericTypeAssignment() {\n        Function<String, List<String>> fn = List::of;\n        List<String> list = fn.apply(\"test\");\n    }\n    void testMethodRefOnGenericTypeArgument() {\n        Function<String, List<String>> fn = func(List::of);\n        List<String> list = fn.apply(\"test\");\n    }\n    void testMethodRefImportedInJavadoc() {\n        Supplier<Map<String, String>> supplier = Collections::emptyMap;\n        Map<String, String> list = supplier.get();\n    }\n    void testMethodRefNotImported() {\n        Function<String, Integer> parseIntFunc = Integer::parseInt;\n        int number = parseIntFunc.apply(\"42\");\n    }\n}\n@Retention(RUNTIME) @Target({TYPE_USE}) @interface CJ { }\ninterface ListGetter<T> {\n    List<T> get();\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsFromStaticMethodRefExtended.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        15,
        17,
        18,
        19,
        20
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.util.Optional;\nimport java.util.function.Function;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.function.Predicate;\nimport java.util.Objects; \nimport static java.util.Arrays.toString; \nimport static java.util.Arrays.asList; \nimport static java.lang.Integer.parseInt; \nimport static java.util.Collections.emptyList; \npublic class InputUnusedImportsFromStaticMethodRefExtended {\n    private Function<int[], String> arrayToString = Arrays::toString;\n    Function<String, Integer> parseIntFunc = Integer::parseInt;\n    private final Predicate<List> isListEmpty = List::isEmpty;\n    InputUnusedImportsFromStaticMethodRefExtended() {\n    }\n    void testMethodRefWithQualifiedName()\n    {\n        Optional<String> test = Optional.empty();\n        test.map(java.util.Objects::nonNull);\n    }\n    void testMethodRefWithGenericType()\n    {\n        Function<String[],List<String>> listGetter = Arrays::<String>asList;\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsFromStaticMethodRefInDocsOnly.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        10,
        11,
        12,
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.util.Collections;\nimport java.util.Arrays;\nimport java.lang.Integer; \nimport static java.util.Collections.emptyEnumeration; \nimport static java.util.Arrays.sort; \nimport static java.util.Collections.shuffle; \npublic class InputUnusedImportsFromStaticMethodRefInDocsOnly {\n    public static void m() {}\n    public static void n() {}\n    public static void l() {}\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsFromStaticMethodRefJavadocDisabled.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        23,
        24,
        25,
        26,
        27
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport static java.lang.annotation.ElementType.TYPE_USE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.Optional;\nimport java.util.Objects;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport java.util.Arrays; \nimport static java.lang.Integer.parseInt; \nimport static java.lang.String.format; \nimport static java.util.List.of; \nimport static java.util.Collections.emptyMap; \npublic class InputUnusedImportsFromStaticMethodRefJavadocDisabled {\n    public static <T, R> Function<T, R> func(Function<T, R> f) { return f; }\n    InputUnusedImportsFromStaticMethodRefJavadocDisabled() {\n    }\n    void testMethodRef()\n    {\n        Optional<String> test = Optional.empty();\n        test.map(String::format);\n    }\n    void testMethodRefWithClass()\n    {\n        Optional<String> test = Optional.empty();\n        test.map(Objects::nonNull);\n    }\n    void testConstructorMethodRefArgument()\n    {\n        func(func(@CJ2 WeakReference::new));\n    }\n    void testConstructorMethodRefAssignment()\n    {\n        ListGetter2<String> listGetter = ArrayList::new;\n        listGetter.get();\n    }\n    void testMethodRefOnGenericTypeAssignment()\n    {\n        Function<String, List<String>> fn = List::of;\n        List<String> list = fn.apply(\"test\");\n    }\n    void testMethodRefOnGenericTypeArgument()\n    {\n        Function<String, List<String>> fn = func(List::of);\n        List<String> list = fn.apply(\"test\");\n    }\n    void testMethodRefImportedInJavadoc()\n    {\n        Supplier<Map<String, String>> supplier = Collections::emptyMap;\n        Map<String, String> list = supplier.get();\n    }\n}\n@Retention(RUNTIME) @Target({TYPE_USE}) @interface CJ2 { }\ninterface ListGetter2<T> {\n    List<T> get();\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsJavadocAboveComments.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        10
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.util.Map;\nimport java.util.List; \npublic class InputUnusedImportsJavadocAboveComments {\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsJavadocQualifiedName.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        10
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.util.Map;\nimport java.util.List; \npublic class InputUnusedImportsJavadocQualifiedName {}"
    },
    {
      "description": "Auto test from InputUnusedImportsRecordsAndCompactCtors.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        18,
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.util.ArrayDeque;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport javax.swing.JToolBar; \nimport javax.swing.JToggleButton; \nimport org.w3c.dom.Node;\npublic class InputUnusedImportsRecordsAndCompactCtors {\n    record TestRecord1() {\n        static HashMap<String, Node> hashMap;\n        static ArrayDeque<Integer> arrayDeque;\n        public TestRecord1{}\n    }\n    record TestRecord2() {\n        public TestRecord2{\n            Arrays arrays;\n            Iterator<String> it;\n        }\n        TestRecord2(LinkedList<String> link) {\n            this();\n        }\n    }\n    record TestRecord3(LinkedHashSet<Integer> lhs) {\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsShadowed.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        11,
        12,
        16
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.util.AbstractMap;\nimport java.util.List;\nimport java.util.Map; \nimport java.util.Set; \nimport java.util.concurrent.Callable;\nimport com.puppycrawl.tools.checkstyle.checks.imports.unusedimports.InputUnusedImportsShadowed;\nimport com.puppycrawl.tools.checkstyle.checks.imports.unusedimports.InputUnusedImportsShadowed.Deprecated;\nimport com.puppycrawl.tools.checkstyle.checks.imports.unusedimports.InputUnusedImportsShadowed.Foo;\nimport com.puppycrawl.tools.checkstyle.checks.imports.unusedimports.InputUnusedImportsShadowed.Inner;\nimport com.puppycrawl.tools.checkstyle.checks.imports.unusedimports.InputUnusedImportsShadowed.Nested;\nimport com.puppycrawl.tools.checkstyle.checks.imports.unusedimports.InputUnusedImportsShadowed.Nested.List.Map.Entry;\n@Deprecated(foo = Foo.class, classes = {Inner.class})\npublic class InputUnusedImportsShadowed\n        extends AbstractMap.SimpleEntry\n        implements Comparable<Nested.List.Map.Entry>, Callable<Entry> {\n    InputUnusedImportsShadowed() {\n        super(null, null);\n        List x = null; \n    }\n    @Override\n    public int compareTo(Nested.List.Map.Entry entry) {\n        return 0;\n    }\n    @Override\n    public Entry call() throws Exception {\n        return Entry.IGNORED;\n    }\n    static class Nested {\n        List.Map field;\n        public Nested() {\n            List x = null;\n        }\n        @Set\n        interface List {\n            Map foo();\n            class Map {\n                enum Entry {\n                    BAR, FOO, IGNORED\n                }\n            }\n        }\n    }\n    @interface Set {\n    }\n    @interface Deprecated {\n        Class<?> foo();\n        Class<?>[] classes();\n    }\n    @interface Inner {\n    }\n    enum Foo {\n    }\n    interface Callable<V> {\n        V call();\n    }\n    interface AbstractMap {\n        class SimpleEntry {\n        }\n    }\n    List field; \n    void function() {\n        List variable; \n        {\n            class List {\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsWithLinkAndMethodTag.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        8,
        11,
        13,
        15,
        19,
        23,
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.util.Collections; \nimport java.util.List;\nimport java.util.Set;         \nimport java.util.ArrayList;\nimport java.util.PriorityQueue; \nimport java.time.Duration;\nimport java.util.Queue;         \nimport java.util.HashSet;\nimport java.util.TreeSet;\nimport java.util.Random;\nimport java.util.LinkedList;   \nimport java.net.URI;\nimport java.util.Collection;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime; \nimport java.time.LocalTime;\nimport java.time.Month;\nimport java.util.concurrent.TimeUnit; \nclass InputUnusedImportsWithLinkAndMethodTag extends\n        InputUnusedImportsWithLinkAndMethodTagSuperClass {\n}"
    },
    {
      "description": "Auto test from InputUnusedImportsWithLinkTag.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        8,
        11
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;\nimport java.util.List; \nimport java.util.Set;\nimport java.util.TreeSet; \nclass InputUnusedImportsWithLinkTag {\n}"
    }
  ]
}