{
  "name": "SingleSpaceSeparator",
  "language": "java",
  "description": "<div>\n Checks that non-whitespace characters are separated by no more than one\n whitespace. Separating characters by tabs or multiple spaces will be\n reported. Currently, the check doesn't permit horizontal alignment. To inspect\n whitespaces before and after comments, set the property\n {@code validateComments} to true.\n </div>\n\n <p>\n Setting {@code validateComments} to false will ignore cases like:\n </p>\n\n <pre>\n int i;  &#47;&#47; Multiple whitespaces before comment tokens will be ignored.\n private void foo(int  &#47;* whitespaces before and after block-comments will be\n ignored *&#47;  i) {\n </pre>\n\n <p>\n Sometimes, users like to space similar items on different lines to the same\n column position for easier reading. This feature isn't supported by this\n check, so both braces in the following case will be reported as violations.\n </p>\n\n <pre>\n public long toNanos(long d)  { return d;             } &#47;&#47; 2 violations\n public long toMicros(long d) { return d / (C1 / C0); }\n </pre>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 79,
  "branches": 5,
  "apis": 27,
  "test": [
    {
      "description": "Auto test from InputSingleSpaceSeparatorChildNodes.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        11
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.singlespaceseparator;\npublic class InputSingleSpaceSeparatorChildNodes {\n    int j = 0;\n    int i = 1  + j; \n}"
    },
    {
      "description": "Auto test from InputSingleSpaceSeparatorComments.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        12,
        20
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.singlespaceseparator;\npublic class InputSingleSpaceSeparatorComments {\n    int        j = 0; \n    int k;   \n    void foo() {\n        int  a = 0;\t\n    }  \n}"
    },
    {
      "description": "Auto test from InputSingleSpaceSeparatorComments2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        18
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.singlespaceseparator;\npublic class InputSingleSpaceSeparatorComments2 {\n    int        j = 0;\n    int k;   \n    void foo() {\n        int  a = 0; \n    }  \n}"
    },
    {
      "description": "Auto test from InputSingleSpaceSeparatorCommentsWithEmoji.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        25,
        26,
        33,
        36,
        38,
        38
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.singlespaceseparator;\npublic class InputSingleSpaceSeparatorCommentsWithEmoji {\n    String s1 = \"🧐😉           assa  \";\n    String s2 = \"🧐😉\" + \"          \" + \"assa  \";\n    String s3 = \"🧐\" + \"🎄 \";\n    String s4\n        = \"da🎄\";\n    private void foo(String s) {\n        if (s.equals(\"🤩🎄\") ){\n            foo(s);\n        }\n    }\n    String   st = \"🎄  assa\"; \n    String str = \"🤩🎄\";   \n    ;       String j = \"\"; \n    void foo2() {\n        String s = \"🧐  🧐\";\n    }  \n    private void foo3 (String s) {  \n        if (s.substring(0).equals(\"da🎄\")) {  \n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputSingleSpaceSeparatorErrors.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        10,
        13,
        17,
        18,
        19,
        20,
        26,
        27,
        37
      ],
      "code": "package  com.puppycrawl.   tools.checkstyle.checks.whitespace.singlespaceseparator; \nimport java.util.List;\nimport  java.util.Vector; \npublic class      InputSingleSpaceSeparatorErrors  { \n    int             number; \nint i =    99  ; \n{\ni=1;\ni  =2; \n i=  3; \n  i =  4; \n    i =\t5; \n}\n    private  void foo  (int     i) { \n        if (i  > 10)  { \n            if  (bar(  )) { \n                i  ++; \n                foo  (i); \n            }\n        }\n    }\n    private boolean  bar(  ) { \n        List  <Double  > list  = new Vector<  >(); \n        int a\t= 0;  \n\t\tint b = 1; \n        return  Math.random() <  0.5; \n    }  } "
    },
    {
      "description": "Auto test from InputSingleSpaceSeparatorMinColumnNo.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        11
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.singlespaceseparator;\npublic class InputSingleSpaceSeparatorMinColumnNo {\n    int\nj  = 0; \n}"
    },
    {
      "description": "Auto test from InputSingleSpaceSeparatorStartOfTheLine.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        11
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.singlespaceseparator;\npublic class InputSingleSpaceSeparatorStartOfTheLine {\n    int\n   i  = 0; \n}"
    },
    {
      "description": "Auto test from InputSingleSpaceSeparatorWithEmoji.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        13,
        15,
        17,
        24,
        26,
        31,
        37,
        39
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.singlespaceseparator;\npublic class InputSingleSpaceSeparatorWithEmoji {\n    String s1 = \"🧐😉           assa  \";\n    String s2 = \"🧐😉\" + \"          \" + \"assa  \";\n    String s3 =  \"🧐\" + \"🎄 \"; \n    String s4\n            =   \"da🎄\"; \n    private void foo(String s) {\n      if (s.equals(\"🤩🎄\")  ){ \n                foo(s);\n      }\n    }\n    String    st =  \"🎄  assa\";\n    String str = \"🤩🎄\";   \n;       String j = \"\"; \n    void foo2() {\n        String  s = \"🧐  🧐\"; \n    }\n    private  void foo3  (String     s) { \n        if (s.substring(0).equals(\"da🎄\")  )  { \n          if  (\"🧐\". \n                  isEmpty()){\n          }\n        }\n    }\n}"
    }
  ]
}