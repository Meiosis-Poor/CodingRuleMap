{
  "name": "MethodParamPad",
  "language": "java",
  "description": "<div>\n Checks the padding between the identifier of a method definition,\n constructor definition, method call, constructor invocation, record, or record pattern;\n and the left parenthesis of the parameter list.\n That is, if the identifier and left parenthesis are on the same line,\n checks whether a space is required immediately after the identifier or\n such a space is forbidden.\n If they are not on the same line, reports a violation, unless configured to\n allow line breaks. To allow linebreaks after the identifier, set property\n {@code allowLineBreaks} to {@code true}.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 74,
  "branches": 9,
  "apis": 19,
  "test": [
    {
      "description": "Auto test from InputMethodParamPad.java",
      "expected-problems": 18,
      "expected-linenumbers": [
        19,
        22,
        26,
        29,
        35,
        41,
        45,
        47,
        51,
        53,
        59,
        61,
        65,
        67,
        70,
        72,
        83,
        88
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.methodparampad;\nimport java.util.Vector;\npublic class InputMethodParamPad\n{\n    public InputMethodParamPad()\n    {\n        super();\n    }\n    public InputMethodParamPad (int aParam) \n    {\n        super (); \n    }\n    public InputMethodParamPad\n        (double aParam) \n    {\n        super\n            (); \n    }\n    public void method()\n    {\n    }\n    public void method (int aParam) \n    {\n    }\n    public void method\n        (double aParam) \n    {\n        InputMethodParamPad pad = new InputMethodParamPad();\n        pad = new InputMethodParamPad (); \n        pad = new InputMethodParamPad\n            (); \n        method();\n        method (); \n        method\n            (); \n    }\n    public void dottedCalls()\n    {\n        this.method();\n        this.method (); \n        this.method\n            (); \n        InputMethodParamPad p = new InputMethodParamPad();\n        p.method();\n        p.method (); \n        p.method\n            (); \n        java.lang.Integer.parseInt(\"0\");\n        java.lang.Integer.parseInt (\"0\"); \n        java.lang.Integer.parseInt\n            (\"0\"); \n    }\n    public void newArray()\n    {\n        int[] a = new int[]{0, 1};\n        java.util.Vector<String> v = new java.util.Vector<String>();\n        java.util.Vector<String> v1 = new Vector<String>();\n    }\n    enum TestEnum {\n        FIRST () \n            {\n            },\n        SECOND\n            () \n        {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMethodParamPad2.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        19,
        22,
        35,
        45,
        51,
        59,
        65,
        70,
        83
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.methodparampad;\nimport java.util.Vector;\npublic class InputMethodParamPad2\n{\n    public InputMethodParamPad2()\n    {\n        super();\n    }\n    public InputMethodParamPad2 (int aParam) \n    {\n        super (); \n    }\n    public InputMethodParamPad2\n        (double aParam)\n    {\n        super\n            ();\n    }\n    public void method()\n    {\n    }\n    public void method (int aParam) \n    {\n    }\n    public void method\n        (double aParam)\n    {\n        InputMethodParamPad pad = new InputMethodParamPad();\n        pad = new InputMethodParamPad (); \n        pad = new InputMethodParamPad\n            ();\n        method();\n        method (); \n        method\n            ();\n    }\n    public void dottedCalls()\n    {\n        this.method();\n        this.method (); \n        this.method\n            ();\n        InputMethodParamPad p = new InputMethodParamPad();\n        p.method();\n        p.method (); \n        p.method\n            ();\n        java.lang.Integer.parseInt(\"0\");\n        java.lang.Integer.parseInt (\"0\"); \n        java.lang.Integer.parseInt\n            (\"0\");\n    }\n    public void newArray()\n    {\n        int[] a = new int[]{0, 1};\n        java.util.Vector<String> v = new java.util.Vector<String>();\n        java.util.Vector<String> v1 = new Vector<String>();\n    }\n    enum TestEnum {\n        FIRST () \n            {\n            },\n        SECOND\n            ()\n        {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMethodParamPad3.java",
      "expected-problems": 22,
      "expected-linenumbers": [
        15,
        17,
        26,
        29,
        31,
        41,
        45,
        48,
        49,
        54,
        56,
        59,
        62,
        65,
        66,
        69,
        70,
        74,
        76,
        81,
        83,
        92
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.methodparampad;\nimport java.util.Vector;\npublic class InputMethodParamPad3\n{\n    public InputMethodParamPad3() \n    {\n        super(); \n    }\n    public InputMethodParamPad3 (int aParam)\n    {\n        super ();\n    }\n    public InputMethodParamPad3\n        (double aParam) \n    {\n        super\n            (); \n    }\n    public void method() \n    {\n    }\n    public void method (int aParam)\n    {\n    }\n    public void method\n        (double aParam) \n    {\n        InputMethodParamPad pad =\n                new InputMethodParamPad(); \n        pad = new InputMethodParamPad ();\n        pad = new InputMethodParamPad\n            (); \n        method(); \n        method ();\n        method\n            (); \n    }\n    public void dottedCalls() \n    {\n        this.method(); \n        this.method ();\n        this.method\n            (); \n        InputMethodParamPad p =\n                new InputMethodParamPad(); \n        p.method(); \n        p.method ();\n        p.method\n            (); \n        java.lang.Integer.parseInt(\"0\"); \n        java.lang.Integer.parseInt (\"0\");\n        java.lang.Integer.parseInt\n            (\"0\"); \n    }\n    public void newArray() \n    {\n        int[] a = new int[]{0, 1};\n        java.util.Vector<String> v =\n                new java.util.Vector<String>(); \n        java.util.Vector<String> v1 =\n                new Vector<String>(); \n    }\n    enum TestEnum {\n        FIRST ()\n            {\n            },\n        SECOND\n            () \n        {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMethodParamPadCheckConstructors.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        20,
        24,
        28
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.methodparampad;\nimport java.util.ArrayList;\npublic class InputMethodParamPadCheckConstructors extends ArrayList {\n    public InputMethodParamPadCheckConstructors() {\n        super(); \n    }\n    public InputMethodParamPadCheckConstructors(Object b) {\n        super (10); \n    }\n    public InputMethodParamPadCheckConstructors(int a) {\n        this (); \n    }\n    public InputMethodParamPadCheckConstructors(int a, String b) {\n        this (a + b.length()); \n    }\n    public InputMethodParamPadCheckConstructors(String a, String b) {\n        this\n            (a.length() + b.length()); \n    }\n    public InputMethodParamPadCheckConstructors(String a, String b, Object c) {\n        this(a.length() + b.length()); \n    }\n}"
    },
    {
      "description": "Auto test from InputMethodParamPadCheckWithEmoji.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        18,
        20,
        24,
        31,
        36,
        36,
        39,
        46,
        48
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.methodparampad;\nimport java.util.Arrays;\npublic class InputMethodParamPadCheckWithEmoji {\n    class MyTestRecord {\n        private boolean equal (Object obj) { \n            String value = \"üòÇüéÑda\";\n            if( value.equals (\"üéÑd\") ) { \n                return true;\n            }\n            return value.\n                    equals ( \"üòÇ\" + \n                    \"d\" );\n        }\n    }\n    public void test() {\n        java.lang.Integer.parseInt (\"üòÜ ü§õüèª \"); \n        java.lang.Integer.parseInt\n                (\"0 ü§õüèª asd asd\");\n        java.util.Vector<String> v = new java. util. Vector <String> (\n                Arrays.asList (\"aüòÇsüòÇd\")); \n    }\n    public  void test2 () { \n        Comparable\n                <\n                        String\n                        >\n                c = new\n                String (    \"üéÑdüëÜüèªüëáüèªüòÇ\"); \n    }\n    public void test3 () { \n                \"üëÜüèªüëáüèª\") {\n        }\n    }\n    void                                         method4()\n    {\n    }\n}"
    },
    {
      "description": "Auto test from InputMethodParamPadRecords.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        16,
        19,
        28,
        31,
        32,
        35,
        37,
        41,
        44,
        50,
        56
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.methodparampad;\nimport org.w3c.dom.Node;\npublic class InputMethodParamPadRecords {\n    record Mtr (String string, Record rec){ \n        private boolean inRecord (Object obj) { \n            int value = 0;\n            if(obj instanceof Integer i) {\n                value = i;\n            }\n            return value > 10;\n        }\n    }\n    record Mtr2 () { \n        Mtr2 (String s1, String s2, String s3){ \n            this (); \n        }\n    }\n    record Mtr3 (Integer i, Node node) { \n        public static void main (String... args) { \n            System.out.println(\"works!\");\n        }\n    }\n    record Mtr4 () { \n        void foo (){} \n    }\n    record Mtr5() {\n        static Mtr mtr =\n                new Mtr (\"my string\", new Mtr4()); \n    }\n    class MyTestClass {\n        private Mtr mtr =\n                new Mtr (\"my string\", new Mtr4()); \n    }\n}"
    },
    {
      "description": "Auto test from InputMethodParamPadSetOptionTrim.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        13,
        24
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.methodparampad;\npublic class InputMethodParamPadSetOptionTrim {\n    public void method1() { \n        int a = 1, b = 2;\n        if (a > b) {\n            System.out.println (a);\n        }\n    }\n    public int method2 () {\n        return 1;\n    }\n    public Boolean method3() { \n        if (4 < 5) {\n            return true;\n        }\n        return false;\n    }\n}"
    },
    {
      "description": "Auto test from InputMethodParamPadWhitespaceAround.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        27
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.methodparampad;\n@SuppressWarnings({\"this\", \"that\"})\npublic class InputMethodParamPadWhitespaceAround\n{\n    protected InputMethodParamPadWhitespaceAround ( int i )\n    {\n        this (); \n        toString ();\n    }\n    protected InputMethodParamPadWhitespaceAround ()\n    {\n        super ();\n    }\n    protected InputMethodParamPadWhitespaceAround ( String s)\n    {\n        this(); \n    }\n    public void enhancedFor ()\n    {\n        int[] i = new int[2];\n        for ( int j: i ) {\n            System.identityHashCode ( j );\n        }\n    }\n}\n@interface CronExpression {\n    Class<?>[] groups() default {};\n}\n@interface CronExpression1 {\n    Class<?>[] groups() default { };\n}"
    }
  ]
}