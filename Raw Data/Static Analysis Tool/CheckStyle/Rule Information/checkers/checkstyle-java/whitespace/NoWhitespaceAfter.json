{
  "name": "NoWhitespaceAfter",
  "language": "java",
  "description": "<div>\n Checks that there is no whitespace after a token.\n More specifically, it checks that it is not followed by whitespace,\n or (if linebreaks are allowed) all characters on the line after are\n whitespace. To forbid linebreaks after a token, set property\n {@code allowLineBreaks} to {@code false}.\n </div>\n\n <p>\n The check processes\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ARRAY_DECLARATOR\">\n ARRAY_DECLARATOR</a> and\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INDEX_OP\">\n INDEX_OP</a> tokens specially from other tokens. Actually it is checked that\n there is no whitespace before these tokens, not after them. Space after the\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATIONS\">\n ANNOTATIONS</a> before\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ARRAY_DECLARATOR\">\n ARRAY_DECLARATOR</a> and\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INDEX_OP\">\n INDEX_OP</a> will be ignored.\n </p>\n\n <p>\n If the annotation is between the type and the array, like {@code char @NotNull [] param},\n the check will skip validation for spaces.\n </p>\n\n <p>\n Note: This check processes the\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_SYNCHRONIZED\">\n LITERAL_SYNCHRONIZED</a> token only when it appears as a part of a\n <a href=\"https://docs.oracle.com/javase/specs/jls/se19/html/jls-14.html#jls-14.19\">\n synchronized statement</a>, i.e. {@code synchronized(this) {}}.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 267,
  "branches": 32,
  "apis": 41,
  "test": [
    {
      "description": "Auto test from InputNoWhitespaceAfterArrayDeclarations.java",
      "expected-problems": 19,
      "expected-linenumbers": [
        13,
        15,
        16,
        17,
        18,
        23,
        25,
        26,
        35,
        36,
        38,
        39,
        47,
        50,
        54,
        56,
        57,
        58,
        59
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespaceafter;\npublic class InputNoWhitespaceAfterArrayDeclarations\n{\n    Object[] someStuff = {}; \n    Object [] someStuff1 = {}; \n    Object someStuff2[] = {}; \n    Object someStuff3 [] = {}; \n    int [] a = {}; \n    String s [] = {}; \n    double d [] = {}; \n    char[] c = {}; \n    short sh[] = {}; \n    long[] l = {}; \n    byte b[] = {}; \n    int get() [] { \n        return a;}\n    int [] receive() { return a; } \n    int get1(int k, int c, int b) [] { \n        return null;\n    }\n    private String[] getLines() { \n        return new String[] { \n                \"s\"\n        };\n    }\n    String aOptions[][]; \n    int [][][] abc; \n    int cba [][][]; \n    private String[][][] getSeveralLines() { \n        return new String [][][] { \n                new String [][] { \n                        new String[] { \n                                \"s\"\n                        }\n                }\n        };\n    }\n    int ar [] = new int [] {1, 2}; \n    private int [][][] getMultiArray() { \n        return null;\n    }\n    private long getLongMultiArray(int someParam, String value) [][][] { \n        return null;\n    }\n    int aa = new int[]{1}[0];\n    int bb = new int[]{1} [0]; \n    int aaa = new int[][]{{1},{2}}[0][0];\n    int bbb = new int [][]{{1},{2}}[0][0]; \n    int ccc = new int[] []{{1},{2}}[0][0]; \n    int ddd = new int[][]{{1},{2}} [0][0]; \n    int eee = new int[][]{{1},{2}}[0] [0]; \n    int in1 = new int[][]{{1},{2}}[ 0][0];\n    int in2 = new int[][]{{1},{2}}[0 ][0];\n    int in3 = new int[][]{{1},{2}}[0][ 0];\n    int in4 = new int[][]{{1},{2}}[0][0 ];\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterArrayDeclarations2.java",
      "expected-problems": 20,
      "expected-linenumbers": [
        19,
        24,
        25,
        36,
        49,
        50,
        56,
        61,
        62,
        73,
        77,
        86,
        92,
        93,
        94,
        99,
        100,
        104,
        107,
        114
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespaceafter;\nimport java.util.List;\npublic class InputNoWhitespaceAfterArrayDeclarations2\n{\n    public class A {\n        public int[][] create(int i, int j) {\n            return new int[3] [3]; \n        }\n    }\n    public class B {\n        public int create(int i, int j) [][] { \n            return new int     [3][i + j] ; \n        }\n    }\n    public class C {\n        public int[][] create(int i, int j) {\n            return new int[i + j][i + j];\n        }\n    }\n    public class D {\n        public int[][]   [] create(int i, int j) { \n            return new int  [ i + j ]    [ i + j ]               [ 0 ]     ; \n        }\n    }\n    public class E {\n        public int create(int i, int j, int   [][] k)[] [][] { \n            int e [][] [] = new int[i + j] [2][i + j]; \n            e [0] [1][2] = 0; e[1][1][1] = 0; \n            return e;\n        }\n    }\n    public static class F {\n        public static Integer [][][] create(int i, int j) { \n            int[][] [] f= new int[   0][1    ][    2    ]   ; \n            return new Integer[i + j][i + j][0];\n        }\n    }\n    public class G {\n        public List<String> [] [] [] create(int i, int j) { \n            int g[][][] = new int [0][1][2]; \n            g[  0][0   ][   0   ]=0;\n            g [0][0][0]=0; \n            g[0] [0][0]=0; \n            g [0] [0] [0]        =0; \n            return null;\n        }\n    }\n    public class H {\n        public List<Integer> create(int i, int j)     []      [][] { \n            return null;\n        }\n    }\n    Object someStuff4 = boolean [].class; \n    String[][] someStuff5 = new String[4][9];\n    String[][] someStuff6 = (java.lang.String  []  []) someStuff5; \n    String[][] someStuff7 = (String [][]) someStuff5; \n    int someStuff8\n    [];\n    int[]\n    someStuff81;\n    Integer someStuff9[][][] = (Integer [][][]) F.create(1,2); \n    List<char[]> someStuff10;\n    List<char [][]> someStuff11; \n    List<InputNoWhitespaceAfterArrayDeclarations2.A []> someStuff12; \n    void foo(List<? extends String[]> bar, Comparable<? super Object []> baz) { } \n    Integer someStuff13 = F.create(1,1)[0][0][0];\n    Integer someStuff131 = F.create(1,1)  [0][0]   [0]; \n    Object[] someStuff14 = (Object[]) null;\n    Object[] someStuff15 = (Object  []  ) null; \n    byte someStuff16 = ((byte[]) someStuff4) [0]; \n    public void bar() {\n        if(someStuff15 instanceof Object  []) { \n        }\n        if(someStuff15 instanceof Object[]  []) { \n        }\n        if(someStuff15 instanceof Object[][]) {\n        }\n        Object[] a = null;\n        if(a instanceof Object  []) { \n        }\n        if(a instanceof Object[][]) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterNewGenericTypeArgument.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        59,
        60,
        61,
        72
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespaceafter;\nimport java.io.PrintStream;\npublic class InputNoWhitespaceAfterNewGenericTypeArgument {\n    static interface SomeInterface {\n        int SEVENS = 777;\n    }\n    static interface AnotherInterface {\n        int THIRDS = 33;\n    }\n    static class SomeClass implements SomeInterface {\n        int i;\n        SomeClass(int i) {\n            this.i = i;\n        }\n    }\n    static class ImmediateSubclass extends SomeClass implements SomeInterface {\n        float f;\n        ImmediateSubclass(int i, float f) {\n            super(i);\n            this.f = f;\n        }\n    }\n    static final class FinalSubclass extends ImmediateSubclass implements AnotherInterface {\n        double d;\n        FinalSubclass(int i, float f, double d) {\n            super(i, f);\n            this.d = d;\n        }\n    }\n    static int errorStatus = 0;\n    static void errorAlert(PrintStream out, int errorLevel) {\n        out.println(\"Test: failure #\" + errorLevel);\n        errorStatus = 2;\n    }\n    static SomeClass[] v2 = new FinalSubclass[4];\n    public static int run(String args[],PrintStream out) {\n        int i [], j []; \n        SomeInterface u []; \n        SomeInterface v[] [] = null; \n        AnotherInterface w []; \n        SomeClass x [] []; \n        x = (SomeClass [] []) v; \n        x[0] = (SomeClass []) new ImmediateSubclass [4]; \n        if (! (x[0] instanceof ImmediateSubclass [])) \n            errorAlert(out, 8);\n        if (! (x[1] instanceof FinalSubclass []))  \n            errorAlert(out, 10);\n        w = (AnotherInterface []) x[1]; \n        return errorStatus;\n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterNewTypeStructure.java",
      "expected-problems": 21,
      "expected-linenumbers": [
        52,
        53,
        54,
        55,
        59,
        60,
        65,
        66,
        70,
        71,
        89,
        91,
        124,
        125,
        129,
        148,
        213,
        214,
        218,
        219,
        225
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespaceafter;\nimport java.awt.*;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.AnnotatedElement;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport javax.net.ssl.KeyManager;\npublic class InputNoWhitespaceAfterNewTypeStructure {\n    private static class Slot {\n        double sin2Phi = 2 * StrictMath.sin(1.618033988749895);\n        public int[] ci;\n    }\n    private static class Transformer {\n    }\n    private static class Ef {\n        Transformer[] transformers = new Transformer[10];\n        static boolean forward = true;\n    }\n    void goodMethod() {\n        Slot slot = new Slot();\n        slot.ci[5] = 10;\n        slot.ci = new int[6];\n        double[] cZ = {1.1, 1.2};\n        final double   dnZ = slot.sin2Phi               * cZ[1];\n        final Ef ef = new Ef();\n        final Transformer transformer =\n            ef.forward ? ef.transformers[ef.transformers.length - 1]\n                    : ef.transformers[0];\n    }\n    void badMethod() {\n        Slot slot = new Slot();\n        slot.ci [5] = 10; \n        slot.ci = new int [6]; \n        double [] cZ = {1.1, 1.2}; \n        final double   dnZ = slot.sin2Phi               * cZ [1]; \n        final Ef ef = new Ef();\n        final Transformer transformer =\n            ef.forward ? ef.transformers [ef.transformers.length - 1] \n                    : ef.transformers [0]; \n        int[][\n                ]\n                 a\n                  [] \n                        [] ; \n                int[][\n                 ]\n                 b\n                 [] \n                        [] ; \n    }\n    void varargLong(@I String @L [] @K [] @J ... vararg2) { }\n    @SuppressWarnings(\"unused\")\n    void withUpperBound(List<? extends int[][]> list) {}\n    private static class SSLSecurity {\n        static KeyManager[] truncateArray(KeyManager[] kmaw,\n                                          KeyManager[] keyManagers) {\n            return null;\n        }\n    }\n    void method3(int x) {\n        KeyManager[] kmaw = null;\n         if (x == 1) {\n             kmaw = (javax.net.ssl.KeyManager[]) \n                       SSLSecurity.truncateArray(kmaw,\n                           new javax.net.ssl.KeyManager [3]); \n         }\n    }\n    enum FPMethodArgs {\n        IGNN,\n        IIGNN,\n        GNNII,\n        GNNC;\n        public Class<?>[] getMethodArguments(boolean isFPType) {\n            Class<?> N = (isFPType) ? Float.TYPE : Integer.TYPE;\n            Class<?> G = (isFPType) ? Graphics2D.class : Graphics.class;\n            switch (this) {\n                case IGNN:\n                    return new Class<?>[]{Integer.TYPE, G, N, N};\n                case IIGNN:\n                    return new Class<?>[]{Integer.TYPE, Integer.TYPE, G, N, N};\n                case GNNII:\n                    return new Class<?>[]{G, N, N, Integer.TYPE, Integer.TYPE};\n                case GNNC:\n                    return new Class<?>[]{G, N, N, Character.TYPE};\n                default:\n                    throw new RuntimeException(\"Unknown method arguments!\");\n            }\n        }\n    }\n    public static class IntData {\n        int[] xorData;\n        IntData(Object srcPixel, Object xorPixel) {\n            this.xorData = (int[]) srcPixel; \n            this.xorData = (int[]) xorPixel; \n        }\n        protected void xorPixel(Object pixData) {\n            int[] dstData = (int[]) pixData; \n            for (int i = 0; i < dstData.length; i++) {\n                dstData[i] ^= xorData[i];\n            }\n        }\n        Object[] getXorData() {\n            return new Object[5];\n        }\n        void method6() {\n            if (getXorData().length == 5\n                    && this.getXorData()[1] != IntData.class\n                    || this.getXorData()[5] != IntData.class) {\n                System.out.println(getXorData().length);\n            }\n        }\n    }\n    protected TreeSet<byte []> sortedPrefixes = createTreeSet(); \n    TreeSet<byte[]> createTreeSet() {\n        return null;\n    }\n    public Object newInstance(Object[] objects){\n        InputNoWhitespaceAfterNewTypeStructure tmpConstructor = null;\n        return tmpConstructor.newInstance((Object[])null);\n    }\n    public TypeVariable<Class<String>>[] getTypeParameters() {\n        ClassRepository info = getGenericInfo();\n        if (info != null)\n            return (TypeVariable<Class<String>>[])info.getTypeParameters();\n        else\n            return (TypeVariable<Class<String>>[])new TypeVariable<?>[0];\n    }\n    class ClassRepository {\n        public Object getTypeParameters() {\n            return null;\n        }\n    }\n    class TypeVariable<E> {\n    }\n    private ClassRepository getGenericInfo() {\n        return null;\n    }\n    String[] c, d[];\n    String [] e, f []; \n    public enum Stooge {\n        MOE, CURLY, LARRY,\n    }\n    static void checkArrayTypes1(ArrayTypes at, AnnotatedElement e) {\n        if (!(at.cls()[0]  == Map.class    &&\n              at.e()[0]    == Stooge.MOE  )) {\n        }\n    }\n    static class ArrayTypes {\n        Object[] cls;\n        public Stooge[] e() {\n            return null;\n        }\n        Object[] cls() {\n            return cls;\n        }\n        public int[] a() {\n            return null;\n        }\n    }\n    int[][\n    ]\n     w\n     [] \n            [] ; \n    int[][\n     ]\n     z\n    [] \n            [] ; \n    static class P {\n        private int x;\n        public void set3(P p) {\n              synchronized (this) { \n                  p.x = get()[0];\n              }\n          }\n        public void set4(P p) {\n              synchronized(this) {\n                  p.x = get()[0];\n              }\n          }\n        private int[] get() {\n            return null;\n        }\n    }\n    private @Nullable int array2 @Nullable [] @Nullable [];\n}\n@Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n@interface Nullable{}\n@Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n@interface I {}\n@Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n@interface J {}\n@Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n@interface K {}\n@Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n@interface L {}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterSynchronized.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        17
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespaceafter;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Target;\npublic class InputNoWhitespaceAfterSynchronized<T> {\n    private final Object lock = new Object();\n    void m1() {\n        synchronized (lock) {} \n        synchronized(lock) {}\n    }\n    synchronized int m2() {\n        return 2;\n    }\n    synchronized private int[] m3() {\n        return new int[]{2};\n    }\n    synchronized int[] m4() {\n        return new int[]{2};\n    }\n    private final synchronized int m5() {\n        return 2;\n    }\n    synchronized T m6() {\n        return null;\n    }\n    @SyncAnno synchronized T m7() {\n        return null;\n    }\n    @SyncAnno private synchronized T m8() {\n        return null;\n    }\n    synchronized <T2> void m9() {}\n    synchronized<T2> void m10() {}\n}\n@Target(ElementType.METHOD)\n@interface SyncAnno {\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterTestAllowLineBreaks.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        126,
        135
      ],
      "code": "package com . puppycrawl \n    .tools.\n    checkstyle.checks.whitespace.nowhitespaceafter;\nclass InputNoWhitespaceAfterTestAllowLineBreaks\n{\n    private int mVar1=1;\n    private int mVar2 =1;\n    private int mVar3 = 1;\n    void method1()\n    {\n        final int a = 1;\n        int b= 1; \n        b=1; \n        b+=1; \n        b -=- 1 + (+ b);\n        b = b ++ + b --; \n        b = ++ b - -- b;\n    }\n    void method2()\n    {\n        synchronized(this) {\n        }\n        try{\n        }\n        catch(RuntimeException e){\n        }\n    }\n    private int mVar4 = 1;\n    private void fastExit()\n    {\n        boolean complicatedStuffNeeded = true;\n        if( !complicatedStuffNeeded )\n        {\n            return; \n        }\n        else\n        {\n        }\n    }\n    private int nonVoid()\n    {\n        if ( true )\n        {\n            return(2); \n        }\n        else\n        {\n            return 2; \n        }\n    }\n    private void testCasts()\n    {\n        Object o = (Object) new Object();\n        o = (Object)o;\n        o = ( Object ) o;\n        o = (Object)\n            o;\n    }\n    private void testQuestions()\n    {\n        boolean b = (1 == 2)?true:false;\n        b = (1==2) ? false : true;\n    }\n    private void starTest()\n    {\n        int x = 2 *3* 4;\n    }\n    private void boolTest()\n    {\n        boolean a = true;\n        boolean x = ! a;\n        int z = ~1 + ~ 2;\n    }\n    private void divTest()\n    {\n        int a = 4 % 2;\n        int b = 4% 2;\n        int c = 4 %2;\n        int d = 4%2;\n        int e = 4 / 2;\n        int f = 4/ 2;\n        int g = 4 /2;\n        int h = 4/2;\n    }\n    private java .lang.  String dotTest() \n    {\n        Object o = new Object();\n        o.\n            toString();\n        o\n            .toString();\n        o . toString(); \n        return o.toString();\n    }\n    public void assertTest()\n    {\n        assert true;\n        assert true : \"Whups\";\n        assert \"OK\".equals(null) ? false : true : \"Whups\";\n        assert(true);\n        assert true:\"Whups\";\n    }\n    void donBradman(Runnable aRun)\n    {\n        donBradman(new Runnable() {\n            public void run() {\n            }\n        });\n        final Runnable r = new Runnable() {\n            public void run() {\n            }\n        };\n    }\n    void rfe521323()\n    {\n        doStuff() ;\n        for (int i = 0 ; i < 5; i++) {\n        }\n    }\n    private int i ;\n    private int i1, i2, i3 ;\n    private int i4, i5, i6;\n    void bug806243()\n    {\n        Object o = new InputNoWhitespaceAfterTestAllowLineBreaks() {\n            private int j ;\n        };\n    }\n    void doStuff() {\n    }\n}\ninterface IFooAllowLineBreaks\n{\n    void foo() ;\n}\nclass SpecialCasesInForLoopAllowLineBreaks\n{\n    void forIterator()\n    {\n        for (int i = 0; i++ < 5;) {\n    }\n    int i = 0;\n    for ( ; i < 5; i++ ) {\n    }\n        for (int anInt : getSomeInts()) {\n        }\n    }\n    int[] getSomeInts() {\n        int i = (int) ( 2 / 3 );\n        return null;\n    }\n    public void myMethod() {\n        new Thread() {\n            public void run() {\n            }\n        }.start();\n    }\n    public void foo(java.util.List<? extends String[]> bar, Comparable<? super Object[]> baz) { }\n    public void mySuperMethod() {\n        Runnable[] runs = new Runnable[] {new Runnable() {\n                public void run() {\n                }\n            },\n            new Runnable() {\n                public void run() {\n                }\n            }};\n        runs[0]\n.\n run()\n;\n    }\n    public void testNullSemi() {\n        return ;\n    }\n    public void register(Object obj) { }\n    public void doSomething(String args[]) {\n        register(boolean[].class);\n        register( args );\n    }\n    public void parentheses() {\n        testNullSemi\n(\n)\n;\n    }\n    public static void testNoWhitespaceBeforeEllipses(String ... args) {\n    }\n    @ interface BAD{}\n    @   interface BAD2{}\n    @\n    interface BAD3{}\n    @interface Ok{}\n    static {\n        int[]err = new int [50];\n    }\n    Object foo() {\n        return ( (Object\n                ) \"\"); \n    }\n    public Object[]\n        variable;\n    int someStuff8\n    [];\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterTestAllTokens.java",
      "expected-problems": 17,
      "expected-linenumbers": [
        10,
        87,
        89,
        90,
        111,
        112,
        127,
        132,
        136,
        241,
        264,
        289,
        290,
        291,
        296,
        300,
        308
      ],
      "code": "package com . puppycrawl \n    .tools. \n    checkstyle.checks.whitespace.nowhitespaceafter; \nclass InputNoWhitespaceAfterTestAllTokens\n{\n    private int mVar1=1;\n    private int mVar2 =1;\n    private int mVar3 = 1;\n    void method1()\n    {\n        final int a = 1;\n        int b= 1; \n        b=1; \n        b+=1; \n        b -=- 1 + (+ b); \n        b = b ++ + b --; \n        b = ++ b - -- b; \n    }\n    void method2()\n    {\n        synchronized(this) {\n        }\n        try{\n        }\n        catch(RuntimeException e){\n        }\n    }\n    private int mVar4 = 1;\n    private void fastExit()\n    {\n        boolean complicatedStuffNeeded = true;\n        if( !complicatedStuffNeeded )\n        {\n            return; \n        }\n        else\n        {\n        }\n    }\n    private int nonVoid()\n    {\n        if ( true )\n        {\n            return(2); \n        }\n        else\n        {\n            return 2; \n        }\n    }\n    private void testCasts()\n    {\n        Object o = (Object) new Object(); \n        o = (Object)o;\n        o = ( Object ) o; \n        o = (Object) \n            o;\n    }\n    private void testQuestions()\n    {\n        boolean b = (1 == 2)?true:false;\n        b = (1==2) ? false : true;\n    }\n    private void starTest()\n    {\n        int x = 2 *3* 4;\n    }\n    private void boolTest()\n    {\n        boolean a = true;\n        boolean x = ! a; \n        int z = ~1 + ~ 2; \n    }\n    private void divTest()\n    {\n        int a = 4 % 2;\n        int b = 4% 2;\n        int c = 4 %2;\n        int d = 4%2;\n        int e = 4 / 2;\n        int f = 4/ 2;\n        int g = 4 /2;\n        int h = 4/2;\n    }\n    private java .lang.  String dotTest() \n    {\n        Object o = new Object();\n        o. \n            toString();\n        o\n            .toString();\n        o . toString(); \n        return o.toString();\n    }\n    public void assertTest()\n    {\n        assert true;\n        assert true : \"Whups\";\n        assert \"OK\".equals(null) ? false : true : \"Whups\";\n        assert(true);\n        assert true:\"Whups\";\n    }\n    void donBradman(Runnable aRun)\n    {\n        donBradman(new Runnable() {\n            public void run() {\n            }\n        });\n        final Runnable r = new Runnable() {\n            public void run() {\n            }\n        };\n    }\n    void rfe521323()\n    {\n        doStuff() ;\n        for (int i = 0 ; i < 5; i++) {\n        }\n    }\n    private int i ;\n    private int i1, i2, i3 ;\n    private int i4, i5, i6;\n    void bug806243()\n    {\n        Object o = new InputNoWhitespaceAfterTestAllTokens() {\n            private int j ;\n        };\n    }\n    void doStuff() {\n    }\n}\ninterface IFooTestAllTokens\n{\n    void foo() ;\n}\nclass SpecialCasesInForLoopTestAllTokens\n{\n    void forIterator()\n    {\n        for (int i = 0; i++ < 5;) {\n    }\n    int i = 0;\n    for ( ; i < 5; i++ ) {\n    }\n        for (int anInt : getSomeInts()) {\n        }\n    }\n    int[] getSomeInts() {\n        int i = (int) ( 2 / 3 ); \n        return null;\n    }\n    public void myMethod() {\n        new Thread() {\n            public void run() {\n            }\n        }.start();\n    }\n    public void foo(java.util.List<? extends String[]> bar, Comparable<? super Object[]> baz) { }\n    public void mySuperMethod() {\n        Runnable[] runs = new Runnable[] {new Runnable() {\n                public void run() {\n                }\n            },\n            new Runnable() {\n                public void run() {\n                }\n            }};\n        runs[0]\n. \n run()\n;\n    }\n    public void testNullSemi() {\n        return ;\n    }\n    public void register(Object obj) { }\n    public void doSomething(String args[]) {\n        register(boolean[].class);\n        register( args );\n    }\n    public void parentheses() {\n        testNullSemi\n(\n)\n;\n    }\n    public static void testNoWhitespaceBeforeEllipses(String ... args) {\n    }\n    @ interface BAD{} \n    @   interface BAD2{} \n    @ \n    interface BAD3{}\n    @interface Ok{}\n    static {\n        int[]err = new int [50]; \n    }\n    Object foo() {\n        return ( (Object \n                ) \"\"); \n    }\n    public Object[]\n        variable;\n    int someStuff8\n    []; \n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterTestArrayDeclarator.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        18
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespaceafter;\nimport java.util.Map;\nimport java.util.stream.IntStream;\npublic class InputNoWhitespaceAfterTestArrayDeclarator {\n    @SuppressWarnings(\"unchecked\")\n    Map.Entry<Integer,String>[] genEntries(int n) {\n        return IntStream.range(0, n)\n            .mapToObj(i -> entry(i, valueFor(i)))\n            .toArray(Map.Entry []::new); \n    }\n    static Map.Entry<Integer, String> entry(int k, String v) {\n        return null;\n    }\n    static String valueFor(int i) {\n        return \"abcdefghijklmnopqrst\".substring(i,i+1);\n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterTestDefault.java",
      "expected-problems": 12,
      "expected-linenumbers": [
        10,
        111,
        112,
        127,
        132,
        136,
        264,
        289,
        290,
        291,
        296,
        308
      ],
      "code": "package com . puppycrawl \n    .tools. \n    checkstyle.checks.whitespace.nowhitespaceafter; \nclass InputNoWhitespaceAfterTestDefault\n{\n    private int mVar1=1;\n    private int mVar2 =1;\n    private int mVar3 = 1;\n    void method1()\n    {\n        final int a = 1;\n        int b= 1; \n        b=1; \n        b+=1; \n        b -=- 1 + (+ b); \n        b = b ++ + b --; \n        b = ++ b - -- b; \n    }\n    void method2()\n    {\n        synchronized(this) {\n        }\n        try{\n        }\n        catch(RuntimeException e){\n        }\n    }\n    private int mVar4 = 1;\n    private void fastExit()\n    {\n        boolean complicatedStuffNeeded = true;\n        if( !complicatedStuffNeeded )\n        {\n            return; \n        }\n        else\n        {\n        }\n    }\n    private int nonVoid()\n    {\n        if ( true )\n        {\n            return(2); \n        }\n        else\n        {\n            return 2; \n        }\n    }\n    private void testCasts()\n    {\n        Object o = (Object) new Object();\n        o = (Object)o;\n        o = ( Object ) o;\n        o = (Object)\n            o;\n    }\n    private void testQuestions()\n    {\n        boolean b = (1 == 2)?true:false;\n        b = (1==2) ? false : true;\n    }\n    private void starTest()\n    {\n        int x = 2 *3* 4;\n    }\n    private void boolTest()\n    {\n        boolean a = true;\n        boolean x = ! a; \n        int z = ~1 + ~ 2; \n    }\n    private void divTest()\n    {\n        int a = 4 % 2;\n        int b = 4% 2;\n        int c = 4 %2;\n        int d = 4%2;\n        int e = 4 / 2;\n        int f = 4/ 2;\n        int g = 4 /2;\n        int h = 4/2;\n    }\n    private java .lang.  String dotTest() \n    {\n        Object o = new Object();\n        o. \n            toString();\n        o\n            .toString();\n        o . toString(); \n        return o.toString();\n    }\n    public void assertTest()\n    {\n        assert true;\n        assert true : \"Whups\";\n        assert \"OK\".equals(null) ? false : true : \"Whups\";\n        assert(true);\n        assert true:\"Whups\";\n    }\n    void donBradman(Runnable aRun)\n    {\n        donBradman(new Runnable() {\n            public void run() {\n            }\n        });\n        final Runnable r = new Runnable() {\n            public void run() {\n            }\n        };\n    }\n    void rfe521323()\n    {\n        doStuff() ;\n        for (int i = 0 ; i < 5; i++) {\n        }\n    }\n    private int i ;\n    private int i1, i2, i3 ;\n    private int i4, i5, i6;\n    void bug806243()\n    {\n        Object o = new InputNoWhitespaceAfterTestAssignment() {\n            private int j ;\n        };\n    }\n    void doStuff() {\n    }\n}\ninterface IFoo\n{\n    void foo() ;\n}\nclass SpecialCasesInForLoop\n{\n    void forIterator()\n    {\n        for (int i = 0; i++ < 5;) {\n    }\n    int i = 0;\n    for ( ; i < 5; i++ ) {\n    }\n        for (int anInt : getSomeInts()) {\n        }\n    }\n    int[] getSomeInts() {\n        int i = (int) ( 2 / 3 );\n        return null;\n    }\n    public void myMethod() {\n        new Thread() {\n            public void run() {\n            }\n        }.start();\n    }\n    public void foo(java.util.List<? extends String[]> bar, Comparable<? super Object[]> baz) { }\n    public void mySuperMethod() {\n        Runnable[] runs = new Runnable[] {new Runnable() {\n                public void run() {\n                }\n            },\n            new Runnable() {\n                public void run() {\n                }\n            }};\n        runs[0]\n. \n run()\n;\n    }\n    public void testNullSemi() {\n        return ;\n    }\n    public void register(Object obj) { }\n    public void doSomething(String args[]) {\n        register(boolean[].class);\n        register( args );\n    }\n    public void parentheses() {\n        testNullSemi\n(\n)\n;\n    }\n    public static void testNoWhitespaceBeforeEllipses(String ... args) {\n    }\n    @ interface BAD{} \n    @   interface BAD2{} \n    @ \n    interface BAD3{}\n    @interface Ok{}\n    static {\n        int[]err = new int [50]; \n    }\n    Object foo() {\n        return ( (Object\n                ) \"\"); \n    }\n    public Object[]\n        variable;\n    int someStuff8\n    []; \n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterTestMethodRef.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        16,
        17
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespaceafter;\nimport java.util.function.Function;\nimport java.util.function.IntFunction;\npublic class InputNoWhitespaceAfterTestMethodRef\n{\n    IntFunction<int[]> arrayMaker = int []::new; \n    Function<Integer, String[]> messageArrayFactory = String []::new; \n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterTestMethodRefAfter.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        24,
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespaceafter;\nimport java.util.function.Supplier;\npublic class InputNoWhitespaceAfterTestMethodRefAfter {\n    public static class SomeClass {\n        public static class Nested<V> {\n            private Nested() {\n            }\n        }\n    }\n    public static class Nested2<V> {\n    }\n    public <V> void methodName(V value) {\n        Supplier<?> t = Nested2<V>:: new; \n        Supplier<SomeClass.Nested<V>> passes = SomeClass.Nested:: new; \n        Supplier<SomeClass.Nested<V>> fails = SomeClass.Nested<V>::new; \n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterTestSynchronized.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        21
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespaceafter;\nclass InputNoWhitespaceAfterTestSynchronized {\n    void method2()\n    {\n        synchronized(this) {\n        }\n    }\n    public void synchronized_() {\n        synchronized(this) {}\n        synchronized\n            (this) {}\n        synchronized (this) {} \n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterTestTypecast.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        86,
        88,
        240
      ],
      "code": "package com . puppycrawl\n    .tools.\n    checkstyle.checks.whitespace.nowhitespaceafter;\nclass InputNoWhitespaceAfterTestTypecast\n{\n    private int mVar1=1;\n    private int mVar2 =1;\n    private int mVar3 = 1;\n    void method1()\n    {\n        final int a = 1;\n        int b= 1; \n        b=1; \n        b+=1; \n        b -=- 1 + (+ b);\n        b = b ++ + b --; \n        b = ++ b - -- b;\n    }\n    void method2()\n    {\n        synchronized(this) {\n        }\n        try{\n        }\n        catch(RuntimeException e){\n        }\n    }\n    private int mVar4 = 1;\n    private void fastExit()\n    {\n        boolean complicatedStuffNeeded = true;\n        if( !complicatedStuffNeeded )\n        {\n            return; \n        }\n        else\n        {\n        }\n    }\n    private int nonVoid()\n    {\n        if ( true )\n        {\n            return(2); \n        }\n        else\n        {\n            return 2; \n        }\n    }\n    private void testCasts()\n    {\n        Object o = (Object) new Object(); \n        o = (Object)o;\n        o = ( Object ) o; \n        o = (Object)\n            o;\n    }\n    private void testQuestions()\n    {\n        boolean b = (1 == 2)?true:false;\n        b = (1==2) ? false : true;\n    }\n    private void starTest()\n    {\n        int x = 2 *3* 4;\n    }\n    private void boolTest()\n    {\n        boolean a = true;\n        boolean x = ! a;\n        int z = ~1 + ~ 2;\n    }\n    private void divTest()\n    {\n        int a = 4 % 2;\n        int b = 4% 2;\n        int c = 4 %2;\n        int d = 4%2;\n        int e = 4 / 2;\n        int f = 4/ 2;\n        int g = 4 /2;\n        int h = 4/2;\n    }\n    private java .lang.  String dotTest()\n    {\n        Object o = new java.lang.Object();\n        o.\n            toString();\n        o\n            .toString();\n        o . toString();\n        return o.toString();\n    }\n    public void assertTest()\n    {\n        assert true;\n        assert true : \"Whups\";\n        assert \"OK\".equals(null) ? false : true : \"Whups\";\n        assert(true);\n        assert true:\"Whups\";\n    }\n    void donBradman(Runnable aRun)\n    {\n        donBradman(new Runnable() {\n            public void run() {\n            }\n        });\n        final Runnable r = new Runnable() {\n            public void run() {\n            }\n        };\n    }\n    void rfe521323()\n    {\n        doStuff() ;\n        for (int i = 0 ; i < 5; i++) {\n        }\n    }\n    private int i ;\n    private int i1, i2, i3 ;\n    private int i4, i5, i6;\n    void bug806243()\n    {\n        Object o = new InputNoWhitespaceAfterTestTypecast() {\n            private int j ;\n        };\n    }\n    void doStuff() {\n    }\n}\ninterface IFooTestTypecast\n{\n    void foo() ;\n}\nclass SpecialCasesInForLoopTestTypecast\n{\n    void forIterator()\n    {\n        for (int i = 0; i++ < 5;) {\n    }\n    int i = 0;\n    for ( ; i < 5; i++ ) {\n    }\n        for (int anInt : getSomeInts()) {\n        }\n    }\n    int[] getSomeInts() {\n        int i = (int) ( 2 / 3 ); \n        return null;\n    }\n    public void myMethod() {\n        new Thread() {\n            public void run() {\n            }\n        }.start();\n    }\n    public void foo(java.util.List<? extends String[]> bar, Comparable<? super Object[]> baz) { }\n    public void mySuperMethod() {\n        Runnable[] runs = new Runnable[] {new Runnable() {\n                public void run() {\n                }\n            },\n            new Runnable() {\n                public void run() {\n                }\n            }};\n        runs[0]\n.\n run()\n;\n    }\n    public void testNullSemi() {\n        return ;\n    }\n    public void register(Object obj) { }\n    public void doSomething(String args[]) {\n        register(boolean[].class);\n        register( args );\n    }\n    public void parentheses() {\n        testNullSemi\n(\n)\n;\n    }\n    public static void testNoWhitespaceBeforeEllipses(String ... args) {\n    }\n    @ interface BAD{}\n    @   interface BAD2{}\n    @\n    interface BAD3{}\n    @interface Ok{}\n    static {\n        int[]err = new int [50];\n    }\n    Object foo() {\n        return ( (Object\n                ) \"\"); \n    }\n    public Object[]\n        variable;\n    int someStuff8\n    [];\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceAfterWithEmoji.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        21
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespaceafter;\npublic class InputNoWhitespaceAfterWithEmoji {\n    String txt = new String (\"sd🤩🎄😂 \" );\n    public String foo() {\n        String []   s =  { \"🎄😂\", \n                        \"🎄😂12wq\"\n        };\n        for (int i = 0; i < s.length; i++) {\n            char[]c = \"🤩🎄\".toCharArray();\n        }\n        return \"😅🧐 dsad \";\n    }\n    public String foo2() {\n        String str = (@ MyAnnotation String) \"🤩dsa😂adsad\"; \n        String str3 = str + \"😂\" + \"sadsa\" +\"😅🧐\" +    \" \" ;\n        return(\"  🎄😂  \");\n    }\n    public String foo3() {\n        return  ! \"🎄\". isEmpty() ?\"dsa😂a\":  \"😂..😅\" ; \n    }\n    public String[] foo4 () {\n        return new String[] {\n          \"sd😂\"+  \"😅🧐\",\n                \"👉🏻\"\n        };\n    }\n}"
    }
  ]
}