{
  "name": "OperatorWrap",
  "language": "java",
  "description": "<div>\n Checks the policy on how to wrap lines on\n <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/opsummary.html\">\n operators</a>.\n </div>\n\n <p>\n See the <a href=\"https://docs.oracle.com/javase/specs/jls/se22/html/jls-15.html#jls-15.20.2\">\n Java Language Specification</a> for more information about {@code instanceof} operator.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 198,
  "branches": 21,
  "apis": 32,
  "test": [
    {
      "description": "Auto test from InputOperatorWrap1.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        22,
        23,
        31,
        47,
        53,
        65
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap;\nimport java.util.Arrays;\nclass InputOperatorWrap1\n{\n    void test()\n    {\n        int x = 1 + \n            2 - \n            3\n            -\n            4;\n        x = x + 2;\n        boolean y = true\n            &&\n            false;\n        y = true && \n            false;\n        y = false\n            && true;\n        Arrays.sort(null, String\n                    ::\n                    compareToIgnoreCase);\n        Arrays.sort(null, String::\n                    compareToIgnoreCase);\n        Arrays.sort(null, String\n                    ::compareToIgnoreCase);\n    }\n    void testAssignment()\n    {\n        int x\n            = 0; \n        int y =\n            0;\n    }\n    <\n        T extends Comparable & \n        java.io.Serializable\n    >\n    void testGenerics1()\n    {\n        Comparable\n            <\n            String\n            >\n            c = new String();\n    }\n}\nclass badCase21<T extends Foo & \n    Bar> {\n}\nclass goodCase1<T extends Foo & Bar> {\n}\nclass Switch1 {\n    public void test(int i, int j) {\n        switch(j) {\n        case 7:\n            return;\n        }\n        switch(i) {\n        case 1:\n            break;\n        default:\n            ;\n        }\n        for (int k : new int[]{1,2,3}) {}\n    }\n}\ninterface Foo {}\ninterface Bar {}"
    },
    {
      "description": "Auto test from InputOperatorWrap2.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        25,
        29,
        34,
        47
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap;\nimport java.util.Arrays;\nclass InputOperatorWrap2\n{\n    void test()\n    {\n        int x = 1 +\n            2 -\n            3\n            - \n            4;\n        x = x + 2;\n        boolean y = true\n            && \n            false;\n        y = true &&\n            false;\n        y = false\n            && true; \n        Arrays.sort(null, String\n                    ::\n                    compareToIgnoreCase);\n        Arrays.sort(null, String::\n                    compareToIgnoreCase);\n        Arrays.sort(null, String\n                    ::compareToIgnoreCase);\n    }\n    void testAssignment()\n    {\n        int x\n            = 0; \n        int y =\n            0;\n    }\n    <\n        T extends Comparable &\n        java.io.Serializable\n    >\n    void testGenerics1()\n    {\n        Comparable\n            <\n            String\n            >\n            c = new String();\n    }\n}\nclass badCase22<T extends Foo2 &\n    Bar2> {\n}\nclass goodCase2<T extends Foo2 & Bar2> {\n}\nclass Switch2 {\n    public void test(int i, int j) {\n        switch(j) {\n        case 7:\n            return;\n        }\n        switch(i) {\n        case 1:\n            break;\n        default:\n            ;\n        }\n        for (int k : new int[]{1,2,3}) {}\n    }\n}\ninterface Foo2 {}\ninterface Bar2 {}"
    },
    {
      "description": "Auto test from InputOperatorWrap3.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        36,
        45
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap;\nimport java.util.Arrays;\nclass InputOperatorWrap3\n{\n    void test()\n    {\n        int x = 1 +\n            2 -\n            3\n            -\n            4;\n        x = x + 2;\n        boolean y = true\n            &&\n            false;\n        y = true &&\n            false;\n        y = false\n            && true;\n        Arrays.sort(null, String\n                    ::\n                    compareToIgnoreCase);\n        Arrays.sort(null, String:: \n                    compareToIgnoreCase);\n        Arrays.sort(null, String\n                    ::compareToIgnoreCase);\n    }\n    void testAssignment()\n    {\n        int x\n            = 0; \n        int y =\n            0;\n    }\n    <\n        T extends Comparable &\n        java.io.Serializable\n    >\n    void testGenerics1()\n    {\n        Comparable\n            <\n            String\n            >\n            c = new String();\n    }\n}\nclass badCase23<T extends Foo3 &\n    Bar3> {\n}\nclass goodCase3<T extends Foo3 & Bar3> {\n}\nclass Switch3 {\n    public void test(int i, int j) {\n        switch(j) {\n        case 7:\n            return;\n        }\n        switch(i) {\n        case 1:\n            break;\n        default:\n            ;\n        }\n        for (int k : new int[]{1,2,3}) {}\n    }\n}\ninterface Foo3 {}\ninterface Bar3 {}"
    },
    {
      "description": "Auto test from InputOperatorWrap4.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        34,
        39,
        45
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap;\nimport java.util.Arrays;\nclass InputOperatorWrap4\n{\n    void test()\n    {\n        int x = 1 +\n            2 -\n            3\n            -\n            4;\n        x = x + 2;\n        boolean y = true\n            &&\n            false;\n        y = true &&\n            false;\n        y = false\n            && true;\n        Arrays.sort(null, String\n                    :: \n                    compareToIgnoreCase);\n        Arrays.sort(null, String::\n                    compareToIgnoreCase);\n        Arrays.sort(null, String\n                    ::compareToIgnoreCase); \n    }\n    void testAssignment()\n    {\n        int x\n            = 0; \n        int y =\n            0;\n    }\n    <\n        T extends Comparable &\n        java.io.Serializable\n    >\n    void testGenerics1()\n    {\n        Comparable\n            <\n            String\n            >\n            c = new String();\n    }\n}\nclass badCase24<T extends Foo4 &\n    Bar4> {\n}\nclass goodCase4<T extends Foo4 & Bar4> {\n}\nclass Switch4 {\n    public void test(int i, int j) {\n        switch(j) {\n        case 7:\n            return;\n        }\n        switch(i) {\n        case 1:\n            break;\n        default:\n            ;\n        }\n        for (int k : new int[]{1,2,3}) {}\n    }\n}\ninterface Foo4 {}\ninterface Bar4 {}"
    },
    {
      "description": "Auto test from InputOperatorWrap5.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        45
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap;\nimport java.util.Arrays;\nclass InputOperatorWrap5\n{\n    void test()\n    {\n        int x = 1 +\n            2 -\n            3\n            -\n            4;\n        x = x + 2;\n        boolean y = true\n            &&\n            false;\n        y = true &&\n            false;\n        y = false\n            && true;\n        Arrays.sort(null, String\n                    ::\n                    compareToIgnoreCase);\n        Arrays.sort(null, String::\n                    compareToIgnoreCase);\n        Arrays.sort(null, String\n                    ::compareToIgnoreCase);\n    }\n    void testAssignment()\n    {\n        int x\n            = 0; \n        int y =\n            0;\n    }\n    <\n        T extends Comparable &\n        java.io.Serializable\n    >\n    void testGenerics1()\n    {\n        Comparable\n            <\n            String\n            >\n            c = new String();\n    }\n}\nclass badCase25<T extends Foo5 &\n    Bar5> {\n}\nclass goodCase5<T extends Foo5 & Bar5> {\n}\nclass Switch5 {\n    public void test(int i, int j) {\n        switch(j) {\n        case 7:\n            return;\n        }\n        switch(i) {\n        case 1:\n            break;\n        default:\n            ;\n        }\n        for (int k : new int[]{1,2,3}) {}\n    }\n}\ninterface Foo5 {}\ninterface Bar5 {}"
    },
    {
      "description": "Auto test from InputOperatorWrap6.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        47
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap;\nimport java.util.Arrays;\nclass InputOperatorWrap6\n{\n    void test()\n    {\n        int x = 1 +\n            2 -\n            3\n            -\n            4;\n        x = x + 2;\n        boolean y = true\n            &&\n            false;\n        y = true &&\n            false;\n        y = false\n            && true;\n        Arrays.sort(null, String\n                    ::\n                    compareToIgnoreCase);\n        Arrays.sort(null, String::\n                    compareToIgnoreCase);\n        Arrays.sort(null, String\n                    ::compareToIgnoreCase);\n    }\n    void testAssignment()\n    {\n        int x\n            = 0; \n        int y =\n            0;\n    }\n    <\n        T extends Comparable &\n        java.io.Serializable\n    >\n    void testGenerics1()\n    {\n        Comparable\n            <\n            String\n            >\n            c = new String();\n    }\n}\nclass badCase26<T extends Foo6 &\n    Bar6> {\n}\nclass goodCase6<T extends Foo6 & Bar6> {\n}\nclass Switch6 {\n    public void test(int i, int j) {\n        switch(j) {\n        case 7:\n            return;\n        }\n        switch(i) {\n        case 1:\n            break;\n        default:\n            ;\n        }\n        for (int k : new int[]{1,2,3}) {}\n    }\n}\ninterface Foo6 {}\ninterface Bar6 {}"
    },
    {
      "description": "Auto test from InputOperatorWrapArrayAssign.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        17,
        35
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap;\nimport java.lang.annotation.Repeatable;\nimport java.util.Arrays;\n@Annotation1(example = {\n    \"foo\",\n    \"bar\"\n})\n@Annotation2(example = \n{\n    \"foo\",\n    \"bar\"\n})\n@Nested(\n    nestedAnn = {\n        @Annotation1(example = {\n            \"foo\",\n            \"bar\"\n        })\n    }\n)\npublic class InputOperatorWrapArrayAssign {\n    public String[] array = {\n        \"foo\",\n        \"bar\"\n    };\n    public String[] array2 = \n    {\n        \"foo\",\n        \"bar\"\n    };\n}\n@Annotation1(\n    value = \"1\",\n    example = {\n        \"foo\",\n        \"bar\"\n    },\n    other = \"2\"\n)\nclass Second {}\n@Annotation1(\n    example = {\n        \"foo\",\n        \"bar\"\n    },\n    arr = {\n        \"1\"\n    }\n)\nclass Third {}\n@interface Annotation1 {\n    String[] example();\n    String value() default \"\";\n    String other() default \"\";\n    String[] arr() default \"\";\n}\n@interface Annotation2 {\n    String[] example();\n}\n@interface Nested {\n    Annotation1[] nestedAnn();\n}"
    },
    {
      "description": "Auto test from InputOperatorWrapEol.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        20,
        21,
        32,
        37,
        38,
        43,
        48,
        60,
        61
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap;\nimport java.io.*; \nclass InputOperatorWrapEol\n{\n    {\n        int x1 =\n                1 *\n                2;\n        int x2\n                = 1 \n                * 2; \n        int x3 = ((2 * 1)\n                    ) * 0 * (1 * 2) * 0; \n    }\n    public InputOperatorWrapEol() throws IOException {\n        label: try (Reader r =\n                 null) {\n        }\n        try (Reader r\n                 = null) { \n        }\n        int x = (1 < 2) ?\n                false ? \"\".substring(0,\n                        0).length()\n                    : false \n                    ? 2 : 3 : 4; \n        for (int value :\n                new int[0]) {}\n        for (int value\n                : new int[0]) {} \n        int[] a1 =\n                {};\n        int[] a2\n                = {}; \n        int[] a3 = {\n        };\n    }\n    void comment(int magic) {\n        if (magic != 0x31 && \n                magic != 0x41 && \n                magic != 0x59 \n            ) {\n        }\n        if (magic == 0x32 \n                || magic == 0x41 \n                || magic == 0x58 \n        ) {\n        }\n    }\n    int a;\n    void shortName(int oa) {\n        a=oa;\n        a+=2;\n    }\n}"
    },
    {
      "description": "Auto test from InputOperatorWrapNl.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        19,
        20,
        31,
        34,
        42,
        47,
        59,
        60
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap;\nimport java.io.*; \nclass InputOperatorWrapNl\n{\n    {\n        int x1\n                = (1\n                * 2) * (1\n                    * 2);\n        int x2 = \n                1 * \n                2 * \"\"\n                    .length();\n        int x3 = (2 * 1) * 0 * ( \n                1 * 2) * 0;\n    }\n    public InputOperatorWrapNl() throws IOException {\n        label: try (Reader r\n                     = null) {\n        }\n        try (Reader r = \n                     null) {\n        }\n        int x = (1 < 2) ? \n            false ? \"\".substring(0,\n                    0).length() : false\n                ? 1\n                : 2 : 3;\n        for (int value\n                : new int[0]) {}\n        for (int value : \n                new int[0]) {}\n        int[] a1\n                = {};\n        int[] a2 = \n                {};\n        int[] a3 = {\n        };\n    }\n    void comment(int magic) {\n        if (magic == 0x32 \n                || magic == 0x41 \n                || magic == 0x58 \n        ) {\n        }\n        if (magic != 0x31 && \n                magic != 0x41 && \n                magic != 0x59 \n        ) {\n        }\n    }\n    int a;\n    void shortName(int oa) {\n        a=oa;\n        a+=2;\n    }\n}"
    },
    {
      "description": "Auto test from InputOperatorWrapWithTrimOptionProperty.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        17,
        18
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap;\npublic class InputOperatorWrapWithTrimOptionProperty {\n        int x = (1 < 2) ?\n                false ? \"\".substring(0,\n                        0).length()\n                    : false \n                    ? 2 : 3 : 4; \n}"
    }
  ]
}