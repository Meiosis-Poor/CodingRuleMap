{
  "name": "NoWhitespaceBefore",
  "language": "java",
  "description": "<div>\n Checks that there is no whitespace before a token.\n More specifically, it checks that it is not preceded with whitespace,\n or (if linebreaks are allowed) all characters on the line before are\n whitespace. To allow linebreaks before a token, set property\n {@code allowLineBreaks} to {@code true}. No check occurs before semicolons in empty\n for loop initializers or conditions.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 72,
  "branches": 7,
  "apis": 17,
  "test": [
    {
      "description": "Auto test from InputNoWhitespaceBeforeAtStartOfTheLine.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        9
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace\n.nowhitespacebefore; \nimport java.util.function.Supplier;\npublic class InputNoWhitespaceBeforeAtStartOfTheLine {\n    public static class A {\n        private A() {\n        }\n    }\n    public <V> void methodName(V value) {\n        Supplier<?> t =\nA ::new;\n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceBeforeAtStartOfTheLine2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        21
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace\n.nowhitespacebefore;\nimport java.util.function.Supplier;\npublic class InputNoWhitespaceBeforeAtStartOfTheLine2 {\n    public static class A {\n        private A() {\n        }\n    }\n    public <V> void methodName(V value) {\n        Supplier<?> t =\nA ::new; \n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceBeforeDefault.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        179,
        180,
        185,
        189,
        198,
        214,
        269,
        273,
        287,
        289,
        294
      ],
      "code": "package com . puppycrawl\n        .tools.\n        checkstyle.checks.whitespace.nowhitespacebefore;\nclass InputNoWhitespaceBeforeDefault\n{\n    private int mVar1=1;\n    private int mVar2 =1;\n    private int mVar3 = 1;\n    void method1()\n    {\n        final int a = 1;\n        int b= 1; \n        b=1; \n        b+=1; \n        b -=- 1 + (+ b); \n        b = b ++ + b --; \n        b = ++ b - -- b; \n    }\n    void method2()\n    {\n        synchronized(this) {\n        }\n        try{\n        }\n        catch(RuntimeException e){\n        }\n    }\n    private int mVar4 = 1;\n    private void fastExit()\n    {\n        boolean complicatedStuffNeeded = true;\n        if( !complicatedStuffNeeded )\n        {\n            return; \n        }\n        else\n        {\n        }\n    }\n    private int nonVoid()\n    {\n        if ( true )\n        {\n            return(2); \n        }\n        else\n        {\n            return 2; \n        }\n    }\n    private void testCasts()\n    {\n        Object o = (Object) new Object();\n        o = (Object)o;\n        o = ( Object ) o;\n        o = (Object)\n                o;\n    }\n    private void testQuestions()\n    {\n        boolean b = (1 == 2)?true:false;\n        b = (1==2) ? false : true;\n    }\n    private void starTest()\n    {\n        int x = 2 *3* 4;\n    }\n    private void boolTest()\n    {\n        boolean a = true;\n        boolean x = ! a;\n        int z = ~1 + ~ 2;\n    }\n    private void divTest()\n    {\n        int a = 4 % 2;\n        int b = 4% 2;\n        int c = 4 %2;\n        int d = 4%2;\n        int e = 4 / 2;\n        int f = 4/ 2;\n        int g = 4 /2;\n        int h = 4/2;\n    }\n    private java .lang.  String dotTest()\n    {\n        Object o = new java.lang.Object();\n        o.\n            toString();\n        o\n            .toString();\n        o . toString();\n        return o.toString();\n    }\n    public void assertTest()\n    {\n        assert true;\n        assert true : \"Whups\";\n        assert \"OK\".equals(null) ? false : true : \"Whups\";\n        assert(true);\n        assert true:\"Whups\";\n    }\n    void donBradman(Runnable aRun)\n    {\n        donBradman(new Runnable() {\n            public void run() {\n            }\n        });\n        final Runnable r = new Runnable() {\n            public void run() {\n            }\n        };\n    }\n    void rfe521323()\n    {\n        doStuff() ; \n        for (int i = 0 ; i < 5; i++) { \n        }\n    }\n    private int i ; \n    private int i1, i2, i3 ; \n    private int i4, i5, i6;\n    void bug806243()\n    {\n        Object o = new InputNoWhitespaceBeforeDefault() {\n            private int j ; \n        };\n    }\n    void doStuff() {\n    }\n}\ninterface IFoo_NoWhitespaceBeforeDefault\n{\n    void foo() ; \n}\nclass SpecialCasesInForLoop_NoWhitespaceBeforeDefault\n{\n    void forIterator()\n    {\n        for (int i = 0; i++ < 5;) {\n        }\n        int i = 0;\n        for ( ; i < 5; i++ ) {\n        }\n        for (int anInt : getSomeInts()) {\n        }\n    }\n    int[] getSomeInts() {\n        int i = (int) ( 2 / 3 );\n        return null;\n    }\n    public void myMethod() {\n        new Thread() {\n            public void run() {\n            }\n        }.start();\n    }\n    public void foo(java.util.List<? extends String[]> bar, Comparable<? super Object[]> baz) { }\n    public void mySuperMethod() {\n        Runnable[] runs = new Runnable[] {new Runnable() {\n                public void run() {\n                }\n            },\n            new Runnable() {\n                public void run() {\n                }\n            }};\n        runs[0]\n.\n run()\n; \n    }\n    public void testNullSemi() {\n        return ; \n    }\n    public void register(Object obj) { }\n    public void doSomething(String args[]) {\n        register(boolean[].class);\n        register( args );\n    }\n    public void parentheses() {\n        testNullSemi\n(\n)\n; \n    }\n    public static void testNoWhitespaceBeforeEllipses(String ... args) { \n    }\n    {\n        label1 : \n        for(int i = 0; i < 10; i++) {}\n    }\n    public void foo() {\n        label2: \n        while (true) {}\n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceBeforeDot.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        9,
        130,
        138,
        139,
        267
      ],
      "code": "package com . puppycrawl \n    .tools. \n    checkstyle.checks.whitespace.nowhitespacebefore;\nclass InputNoWhitespaceBeforeDot\n{\n    private int mVar1=1;\n    private int mVar2 =1;\n    private int mVar3 = 1;\n    void method1()\n    {\n        final int a = 1;\n        int b= 1; \n        b=1; \n        b+=1; \n        b -=- 1 + (+ b); \n        b = b ++ + b --; \n        b = ++ b - -- b; \n    }\n    void method2()\n    {\n        synchronized(this) {\n        }\n        try{\n        }\n        catch(RuntimeException e){\n        }\n    }\n    private int mVar4 = 1;\n    private void fastExit()\n    {\n        boolean complicatedStuffNeeded = true;\n        if( !complicatedStuffNeeded )\n        {\n            return; \n        }\n        else\n        {\n        }\n    }\n    private int nonVoid()\n    {\n        if ( true )\n        {\n            return(2); \n        }\n        else\n        {\n            return 2; \n        }\n    }\n    private void testCasts()\n    {\n        Object o = (Object) new Object();\n        o = (Object)o;\n        o = ( Object ) o;\n        o = (Object)\n            o;\n    }\n    private void testQuestions()\n    {\n        boolean b = (1 == 2)?true:false;\n        b = (1==2) ? false : true;\n    }\n    private void starTest()\n    {\n        int x = 2 *3* 4;\n    }\n    private void boolTest()\n    {\n        boolean a = true;\n        boolean x = ! a;\n        int z = ~1 + ~ 2;\n    }\n    private void divTest()\n    {\n        int a = 4 % 2;\n        int b = 4% 2;\n        int c = 4 %2;\n        int d = 4%2;\n        int e = 4 / 2;\n        int f = 4/ 2;\n        int g = 4 /2;\n        int h = 4/2;\n    }\n    private java .lang.  String dotTest() \n    {\n        Object o = new java.lang.Object();\n        o.\n            toString();\n        o\n            .toString(); \n        o . toString(); \n        return o.toString();\n    }\n    public void assertTest()\n    {\n        assert true;\n        assert true : \"Whups\";\n        assert \"OK\".equals(null) ? false : true : \"Whups\";\n        assert(true);\n        assert true:\"Whups\";\n    }\n    void donBradman(Runnable aRun)\n    {\n        donBradman(new Runnable() {\n            public void run() {\n            }\n        });\n        final Runnable r = new Runnable() {\n            public void run() {\n            }\n        };\n    }\n    void rfe521323()\n    {\n        doStuff() ;\n        for (int i = 0 ; i < 5; i++) {\n        }\n    }\n    private int i ;\n    private int i1, i2, i3 ;\n    private int i4, i5, i6;\n    void bug806243()\n    {\n        Object o = new InputNoWhitespaceBeforeDot() {\n            private int j ;\n        };\n    }\n    void doStuff() {\n    }\n}\ninterface IFoo_NoWhitespaceBeforeDot\n{\n    void foo() ;\n}\nclass SpecialCasesInForLoop_NoWhitespaceBeforeDot\n{\n    void forIterator()\n    {\n        for (int i = 0; i++ < 5;) {\n    }\n    int i = 0;\n    for ( ; i < 5; i++ ) {\n    }\n        for (int anInt : getSomeInts()) {\n        }\n    }\n    int[] getSomeInts() {\n        int i = (int) ( 2 / 3 );\n        return null;\n    }\n    public void myMethod() {\n        new Thread() {\n            public void run() {\n            }\n        }.start();\n    }\n    public void foo(java.util.List<? extends String[]> bar, Comparable<? super Object[]> baz) { }\n    public void mySuperMethod() {\n        Runnable[] runs = new Runnable[] {new Runnable() {\n                public void run() {\n                }\n            },\n            new Runnable() {\n                public void run() {\n                }\n            }};\n        runs[0]\n. \n run()\n;\n    }\n    public void testNullSemi() {\n        return ;\n    }\n    public void register(Object obj) { }\n    public void doSomething(String args[]) {\n        register(boolean[].class);\n        register( args );\n    }\n    public void parentheses() {\n        testNullSemi\n(\n)\n;\n    }\n    public static void testNoWhitespaceBeforeEllipses(String ... args) {\n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceBeforeDotAllowLineBreaks.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        130,
        139
      ],
      "code": "package com . puppycrawl \n    .tools.\n    checkstyle.checks.whitespace.nowhitespacebefore;\nclass InputNoWhitespaceBeforeDotAllowLineBreaks\n{\n    private int mVar1=1;\n    private int mVar2 =1;\n    private int mVar3 = 1;\n    void method1()\n    {\n        final int a = 1;\n        int b= 1; \n        b=1; \n        b+=1; \n        b -=- 1 + (+ b); \n        b = b ++ + b --; \n        b = ++ b - -- b; \n    }\n    void method2()\n    {\n        synchronized(this) {\n        }\n        try{\n        }\n        catch(RuntimeException e){\n        }\n    }\n    private int mVar4 = 1;\n    private void fastExit()\n    {\n        boolean complicatedStuffNeeded = true;\n        if( !complicatedStuffNeeded )\n        {\n            return; \n        }\n        else\n        {\n        }\n    }\n    private int nonVoid()\n    {\n        if ( true )\n        {\n            return(2); \n        }\n        else\n        {\n            return 2; \n        }\n    }\n    private void testCasts()\n    {\n        Object o = (Object) new Object();\n        o = (Object)o;\n        o = ( Object ) o;\n        o = (Object)\n            o;\n    }\n    private void testQuestions()\n    {\n        boolean b = (1 == 2)?true:false;\n        b = (1==2) ? false : true;\n    }\n    private void starTest()\n    {\n        int x = 2 *3* 4;\n    }\n    private void boolTest()\n    {\n        boolean a = true;\n        boolean x = ! a;\n        int z = ~1 + ~ 2;\n    }\n    private void divTest()\n    {\n        int a = 4 % 2;\n        int b = 4% 2;\n        int c = 4 %2;\n        int d = 4%2;\n        int e = 4 / 2;\n        int f = 4/ 2;\n        int g = 4 /2;\n        int h = 4/2;\n    }\n    private java .lang.  String dotTest() \n    {\n        Object o = new java.lang.Object();\n        o.\n            toString();\n        o\n            .toString();\n        o . toString(); \n        return o.toString();\n    }\n    public void assertTest()\n    {\n        assert true;\n        assert true : \"Whups\";\n        assert \"OK\".equals(null) ? false : true : \"Whups\";\n        assert(true);\n        assert true:\"Whups\";\n    }\n    void donBradman(Runnable aRun)\n    {\n        donBradman(new Runnable() {\n            public void run() {\n            }\n        });\n        final Runnable r = new Runnable() {\n            public void run() {\n            }\n        };\n    }\n    void rfe521323()\n    {\n        doStuff() ;\n        for (int i = 0 ; i < 5; i++) {\n        }\n    }\n    private int i ;\n    private int i1, i2, i3 ;\n    private int i4, i5, i6;\n    void bug806243()\n    {\n        Object o = new InputNoWhitespaceBeforeDotAllowLineBreaks() {\n            private int j ;\n        };\n    }\n    void doStuff() {\n    }\n}\ninterface IFoo_NoWhitespaceBeforeDotAllowLineBreaks\n{\n    void foo() ;\n}\nclass SpecialCasesInForLoop_NoWhitespaceBeforeDotAllowLineBreaks\n{\n    void forIterator()\n    {\n        for (int i = 0; i++ < 5;) {\n    }\n    int i = 0;\n    for ( ; i < 5; i++ ) {\n    }\n        for (int anInt : getSomeInts()) {\n        }\n    }\n    int[] getSomeInts() {\n        int i = (int) ( 2 / 3 );\n        return null;\n    }\n    public void myMethod() {\n        new Thread() {\n            public void run() {\n            }\n        }.start();\n    }\n    public void foo(java.util.List<? extends String[]> bar, Comparable<? super Object[]> baz) { }\n    public void mySuperMethod() {\n        Runnable[] runs = new Runnable[] {new Runnable() {\n                public void run() {\n                }\n            },\n            new Runnable() {\n                public void run() {\n                }\n            }};\n        runs[0]\n.\n run()\n;\n    }\n    public void testNullSemi() {\n        return ;\n    }\n    public void register(Object obj) { }\n    public void doSomething(String args[]) {\n        register(boolean[].class);\n        register( args );\n    }\n    public void parentheses() {\n        testNullSemi\n(\n)\n;\n    }\n    public static void testNoWhitespaceBeforeEllipses(String ... args) {\n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceBeforeEmptyForLoop.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        19,
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespacebefore;\npublic class InputNoWhitespaceBeforeEmptyForLoop {\n    public static void f() {\n        for (; ; ) {\n            break;\n        }\n        for (int x = 0; ; ) {\n            break;\n        }\n        for (int x = 0 ; ; ) { \n            break;\n        }\n        for (int x = 0; x < 10; ) {\n            break;\n        }\n        for (int x = 0; x < 10 ; ) { \n            break;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceBeforeMethodRef.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        24,
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespacebefore;\nimport java.util.function.Supplier;\npublic class InputNoWhitespaceBeforeMethodRef {\n    public static class SomeClass {\n    public static class Nested<V> {\n      private Nested() {\n      }\n    }\n  }\n  public static class Nested2<V> {\n  }\n  public <V> void methodName(V value) {\n    Supplier<?> t = Nested2<V> ::new; \n    Supplier<SomeClass.Nested<V>> passes = SomeClass.Nested ::new; \n    Supplier<SomeClass.Nested<V>> fails = SomeClass.Nested<V>::new;\n  }\n}"
    },
    {
      "description": "Auto test from InputNoWhitespaceBeforeWithEmoji.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        12,
        13,
        19,
        20
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nowhitespacebefore;\npublic class InputNoWhitespaceBeforeWithEmoji {\n    private String[] _mVar0 = {\n        \"😃😉🙈\" ,  \n        \"😃 😉 🙈\" ,  \n        \"😃 😉 🙈\",\n        \"😃😉🙈\"\n    };\n    private String _mVar1 = \"😃😉🙈\";\n    private String _mVar2 = \"😃 😉 🙈\";\n    private String _mVar3 = \"😃 😉 🙈\" ; \n    private String _mVar4 = \"a b c\" ; \n}"
    }
  ]
}