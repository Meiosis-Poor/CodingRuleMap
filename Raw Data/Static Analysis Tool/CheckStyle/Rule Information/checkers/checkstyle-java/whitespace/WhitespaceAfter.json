{
  "name": "WhitespaceAfter",
  "language": "java",
  "description": "<div>\n Checks that a token is followed by whitespace, with the exception that it\n does not check for whitespace after the semicolon of an empty for iterator.\n Use Check\n <a href=\"https://checkstyle.org/checks/whitespace/emptyforiteratorpad.html#EmptyForIteratorPad\">\n EmptyForIteratorPad</a> to validate empty for iterators.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 74,
  "branches": 4,
  "apis": 15,
  "test": [
    {
      "description": "Auto test from InputWhitespaceAfterBraces.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        104
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\nclass InputWhitespaceAfterBraces\n{\n    boolean condition()\n    {\n        return false;\n    }\n    void testDoWhile()\n    {\n        do {\n            testDoWhile();\n        }\n        while (condition());\n        do testDoWhile(); while (condition());\n    }\n    void testWhile()\n    {\n        while (condition()) {\n            testWhile();\n        }\n        while(condition());\n        while (condition())\n            testWhile();\n        while (condition())\n            if (condition())\n                testWhile();\n    }\n    void testFor()\n    {\n        for (int i = 1; i < 5; i++) {\n            testFor();\n        }\n        for(int i = 1;i < 5;i++); \n        for (int i = 1; i < 5; i++)\n            testFor();\n        for (int i = 1; i < 5;\n             i++)\n            if (i > 2)\n                testFor();\n    }\n    public void testIf()\n    {\n        if (condition()) {\n            testIf();\n        }\n        else if (condition()) {\n            testIf();\n        }\n        else {\n            testIf();\n        }\n        if (condition());\n        if (condition())\n            testIf();\n        if (condition())\n            testIf();\n        else\n            testIf();\n        if (condition())\n            testIf();\n        else {\n            testIf();\n        }\n        if (condition()) {\n            testIf();\n        }\n        else\n            testIf();\n        if (condition())\n            if (condition())\n                testIf();\n    }\n    void whitespaceAfterSemi()\n    {\n        int i = 1;int j = 2; \n        for (;;) {\n        }\n    }\n    public InputWhitespaceAfterBraces() {}\n    public void emptyImplementation() {}\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterCountUnicodeCorrectly.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterCountUnicodeCorrectly {\n    String a = \"  \";\n    String b = \"💩💩\";\n    String c = \"💩💩\";\n    String d = \"💩💩\";\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterDefaultConfig.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        42,
        61
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\nimport java.io.*;\nfinal class InputWhitespaceAfterDefaultConfig\n{\n    public static final int badConstant = 2;\n    public static final int MAX_ROWS = 2;\n    private static int badStatic = 2;\n    private static int sNumCreated = 0;\n    private int badMember = 2;\n    private int mNumCreated1 = 0;\n    protected int mNumCreated2 = 0;\n    private int[] mInts = new int[] {1,2, 3, \n                                     4};\n    public static int sTest1;\n    protected static int sTest3;\n    static int sTest2;\n    int mTest1;\n    public int mTest2;\n    int test1(int badFormat1,int badFormat2, \n              final int badFormat3)\n        throws java.lang.Exception\n    {\n        return 0;\n    }\n    private void longMethod()\n    {\n    }\n    private InputWhitespaceAfterDefaultConfig()\n    {\n    }\n    private void localVariables()\n    {\n        int abc = 0;\n        int ABC = 0;\n        final int cde = 0;\n        final int CDE = 0;\n        for (int k = 0; k < 1; k++)\n        {\n            String innerBlockVariable = \"\";\n        }\n        for (int I = 0; I < 1; I++)\n        {\n            String InnerBlockVariable = \"\";\n        }\n    }\n    void ALL_UPPERCASE_METHOD()\n    {\n    }\n    private static final int BAD__NAME = 3;\n    void errorColumnAfterTabs()\n    {\n                int tab0 =1;\n        \tint tab1 =1;\n         \tint tab2 =1;\n\t\tint tab3 =1;\n  \t  \tint tab4 =1;\n  \t        int tab5 =1;\n    }\n    void veryLong()\n    {\n    }\n    void toManyArgs(int aArg1, int aArg2, int aArg3, int aArg4, int aArg5,\n                    int aArg6, int aArg7, int aArg8, int aArg9)\n    {\n    }\n}\nclass InputSimple2\n{\n    public void doSomething()\n    {\n        for (Object O : new java.util.ArrayList())\n        {\n        }\n    }\n}\nenum MyEnum1\n{\n    ABC,\n    XYZ;\n    private int someMember;\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterDoWhile.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        24
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterDoWhile {\n    boolean condition() {\n        return false;\n    }\n    void testDoWhile() {\n        do {\n            testDoWhile();\n        } while (condition());\n        do {\n            testDoWhile();\n        } while(condition()); \n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterFor.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        16,
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\nclass InputWhitespaceAfterFor\n{\n    void method1()\n    {\n        for (int i = 0; i < 1; i++) {\n        }\n        for (int i = 0; i < 1;i++) { \n        }\n        for (int i = 0; i < 1;i++ ) { \n        }\n        for (int i = 0; i < 1; i++ ) {\n        }\n        for (int i = 0; i < 1;) {\n            i++;\n        }\n        for (int i = 0; i < 1; ) {\n            i++;\n        }\n        for (int i = 0; i < 1;\n            ) {\n            i++;\n        }\n    }\n    void method2()\n    {\n        for ( int i = 0; i < 1; i++ ) {\n        }\n        for ( int i = 0; i < 1; ) {\n            i++;\n        }\n        int i = 0;\n        for ( ; i < 1; i++ ) {\n        }\n        for (; i < 2; i++ ) {\n        }\n        for (\n        ;; ) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLambdaExpressions.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        15,
        17,
        27
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\nimport java.util.function.Function;\npublic class InputWhitespaceAfterLambdaExpressions {\n    static Runnable r1 = () -> {\n        String.valueOf(\"Hello world one!\");\n    };\n    static Runnable r2 = () ->String.valueOf(\"\"); \n    Runnable r3 = () ->{String.valueOf(\"\");}; \n    static Runnable r4 = () ->\n    {\n        String.valueOf(\"Hello world one!\");\n    };\n    public void foo() {\n        Function<Object, String> function =\n                (o) ->o.toString(); \n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralCase.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        14
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralCase {\n    public static void main(String... args) {\n        switch(args[0]) {\n            case \"123\":\n                return;\n            case\"1\": \n                return;\n            default:\n                return;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralCase2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        12
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralCase2 {\n    public static void main(String... args) {\n        switch(args[0]) {\n            case\"123\": \n                return;\n            case \"1\":\n                return;\n            default:\n                return;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralCatch.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralCatch {\n    public static void main(String[] args) {\n      try {} catch (Exception e){}\n      try {} catch(Exception e){} \n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralDo.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        67
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralDo {\n    boolean condition() {\n        return false;\n    }\n    void testIfElse() {\n        if (condition()) {\n            testIfElse();\n        } else {\n            testIfElse();\n        }\n        if(condition()) {\n            testIfElse();\n        } else {\n            testIfElse();\n        }\n        if (condition()) {\n            testIfElse();\n        } else{\n            testIfElse();\n        }\n    }\n    void testWhile() {\n        while (condition()) {\n            testWhile();\n        }\n        while(condition()) {\n            testWhile();\n        }\n    }\n    void testFor() {\n        for (int i = 0; i < 5; i++) {\n            testFor();\n        }\n        for(int i = 0; i < 5; i++) {\n            testFor();\n        }\n    }\n    void testDo() {\n        do {\n            testDo();\n        } while (condition());\n        do{ \n            testDo();\n        } while (condition());\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralElse.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralElse {\n    boolean condition() {\n        return false;\n    }\n    void testIfElse() {\n        if (condition()) {\n            testIfElse();\n        } else {\n            testIfElse();\n        }\n        if(condition()) {\n            testIfElse();\n        } else {\n            testIfElse();\n        }\n        if (condition()) {\n            testIfElse();\n        } else{ \n            testIfElse();\n        }\n    }\n    void testWhile() {\n        while (condition()) {\n            testWhile();\n        }\n        while(condition()) {\n            testWhile();\n        }\n    }\n    void testFor() {\n        for (int i = 0; i < 5; i++) {\n            testFor();\n        }\n        for(int i = 0; i < 5; i++) {\n            testFor();\n        }\n    }\n    void testDo() {\n        do {\n            testDo();\n        } while (condition());\n        do{\n            testDo();\n        } while (condition());\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralFinally.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        13,
        16
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralFinally {\n    public static void main(String[] args) {\n     try {} finally {}\n     try {} finally{} \n     try {} catch (Error e){} finally {}\n     try {} catch (Error e){} finally{} \n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralFor.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        55
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralFor {\n    boolean condition() {\n        return false;\n    }\n    void testIfElse() {\n        if (condition()) {\n            testIfElse();\n        } else {\n            testIfElse();\n        }\n        if(condition()) {\n            testIfElse();\n        } else {\n            testIfElse();\n        }\n        if (condition()) {\n            testIfElse();\n        } else{\n            testIfElse();\n        }\n    }\n    void testWhile() {\n        while (condition()) {\n            testWhile();\n        }\n        while(condition()) {\n            testWhile();\n        }\n    }\n    void testFor() {\n        for (int i = 0; i < 5; i++) {\n            testFor();\n        }\n        for(int i = 0; i < 5; i++) { \n            testFor();\n        }\n    }\n    void testDo() {\n        do {\n            testDo();\n        } while (condition());\n        do{\n            testDo();\n        } while (condition());\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralIf.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        22
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralIf {\n    boolean condition() {\n        return false;\n    }\n    void testIfElse() {\n        if (condition()) {\n            testIfElse();\n        } else {\n            testIfElse();\n        }\n        if(condition()) { \n            testIfElse();\n        } else {\n            testIfElse();\n        }\n        if (condition()) {\n            testIfElse();\n        } else{\n            testIfElse();\n        }\n    }\n    void testWhile() {\n        while (condition()) {\n            testWhile();\n        }\n        while(condition()) {\n            testWhile();\n        }\n    }\n    void testFor() {\n        for (int i = 0; i < 5; i++) {\n            testFor();\n        }\n        for(int i = 0; i < 5; i++) {\n            testFor();\n        }\n    }\n    void testDo() {\n        do {\n            testDo();\n        } while (condition());\n        do{\n            testDo();\n        } while (condition());\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralReturn.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        16,
        20,
        24,
        28
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralReturn {\n    String testOne() {\n        return (\"a\" + \"b\");\n    }\n    String testTwo() {\n        return(\"a\" + \"b\"); \n    }\n    boolean testThree() {\n        return!true; \n    }\n    int testFour() {\n        return-1; \n    }\n    double testFive() {\n        return~1; \n    }\n    void testSix() {\n        return ;\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralSynchronized.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        12,
        30
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralSynchronized {\n    public void check1() {\n        synchronized(this) { \n        }\n        try {\n        }\n        catch (RuntimeException e){\n        }\n    }\n    public void check2() {\n        synchronized (this) {\n        }\n        try {\n        }\n        catch (RuntimeException e){\n        }\n    }\n    public void check3() {\n        synchronized(this) { } \n        synchronized (this) { }\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralTry.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        18,
        22
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\nimport java.io.IOException;\nimport java.io.InputStream;\npublic class InputWhitespaceAfterLiteralTry {\n    public static void main(String[] args) throws IOException {\n        try (InputStream ignored = System.in) {}\n        try\n            (InputStream ignored = System.in) {}\n        try(InputStream ignored = System.in) {} \n        try {}catch (Exception e){}\n        try{}catch (Exception e){} \n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralWhile.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        43
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralWhile {\n    boolean condition() {\n        return false;\n    }\n    void testIfElse() {\n        if (condition()) {\n            testIfElse();\n        } else {\n            testIfElse();\n        }\n        if(condition()) {\n            testIfElse();\n        } else {\n            testIfElse();\n        }\n        if (condition()) {\n            testIfElse();\n        } else{\n            testIfElse();\n        }\n    }\n    void testWhile() {\n        while (condition()) {\n            testWhile();\n        }\n        while(condition()) { \n            testWhile();\n        }\n    }\n    void testFor() {\n        for (int i = 0; i < 5; i++) {\n            testFor();\n        }\n        for(int i = 0; i < 5; i++) {\n            testFor();\n        }\n    }\n    void testDo() {\n        do {\n            testDo();\n        } while (condition());\n        do{\n            testDo();\n        } while (condition());\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterLiteralYield.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        16
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterLiteralYield {\n  public static void main(String[] args) {\n    int a = switch (args[0]) {\n      case \"got\":\n        yield (1);\n      case \"my\":\n        yield(3); \n      default:\n        yield 2;\n    };\n  }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterMultilineCast.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\npublic class InputWhitespaceAfterMultilineCast {\n    void issue3850() {\n        Object obj = new Object();\n        obj = (java.lang.\n                Object)obj; \n        obj = (java.lang.\n                Object) obj;\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterTypeCast.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        90
      ],
      "code": "package com . puppycrawl\n    .tools.\n    checkstyle.checks.whitespace.whitespaceafter;\nclass InputWhitespaceAfterTypeCast\n{\n    private int mVar1=1;\n    private int mVar2 =1;\n    private int mVar3 = 1;\n    void method1()\n    {\n        final int a = 1;\n        int b= 1; \n        b=1; \n        b+=1; \n        b -=- 1 + (+ b); \n        b = b ++ + b --; \n        b = ++ b - -- b; \n    }\n    void method2()\n    {\n        synchronized(this) {\n        }\n        try{\n        }\n        catch(RuntimeException e){\n        }\n    }\n    private int mVar4 = 1;\n    private void fastExit()\n    {\n        boolean complicatedStuffNeeded = true;\n        if( !complicatedStuffNeeded )\n        {\n            return; \n        }\n        else\n        {\n        }\n    }\n    private int nonVoid()\n    {\n        if ( true )\n        {\n            return(2); \n        }\n        else\n        {\n            return 2; \n        }\n    }\n    private void testCasts()\n    {\n        Object o = (Object) new Object();\n        o = (Object)o; \n        o = ( Object ) o;\n        o = (Object)\n            o;\n    }\n    private void testQuestions()\n    {\n        boolean b = (1 == 2)?true:false;\n        b = (1==2) ? false : true;\n    }\n    private void starTest()\n    {\n        int x = 2 *3* 4;\n    }\n    private void boolTest()\n    {\n        boolean a = true;\n        boolean x = ! a;\n        int z = ~1 + ~ 2;\n    }\n    private void divTest()\n    {\n        int a = 4 % 2;\n        int b = 4% 2;\n        int c = 4 %2;\n        int d = 4%2;\n        int e = 4 / 2;\n        int f = 4/ 2;\n        int g = 4 /2;\n        int h = 4/2;\n    }\n    private java .lang.  String dotTest()\n    {\n        Object o = new java.lang.Object();\n        o.\n            toString();\n        o\n            .toString();\n        o . toString();\n        return o.toString();\n    }\n    public void assertTest()\n    {\n        assert true;\n        assert true : \"Whups\";\n        assert \"OK\".equals(null) ? false : true : \"Whups\";\n        assert(true);\n        assert true:\"Whups\";\n    }\n    void donBradman(Runnable aRun)\n    {\n        donBradman(new Runnable() {\n            public void run() {\n            }\n        });\n        final Runnable r = new Runnable() {\n            public void run() {\n            }\n        };\n    }\n    void rfe521323()\n    {\n        doStuff() ;\n        for (int i = 0 ; i < 5; i++) {\n        }\n    }\n    private int i ;\n    private int i1, i2, i3 ;\n    private int i4, i5, i6;\n    void bug806243()\n    {\n        Object o = new InputWhitespaceAfterTypeCast() {\n            private int j ;\n        };\n    }\n    void doStuff() {\n    }\n}\ninterface IFoo\n{\n    void foo() ;\n}\nclass SpecialCasesInForLoop\n{\n    void forIterator()\n    {\n        for (int i = 0; i++ < 5;) {\n    }\n    int i = 0;\n    for ( ; i < 5; i++ ) {\n    }\n        for (int anInt : getSomeInts()) {\n        }\n    }\n    int[] getSomeInts() {\n        int i = (int) ( 2 / 3 );\n        return null;\n    }\n    public void myMethod() {\n        new Thread() {\n            public void run() {\n            }\n        }.start();\n    }\n    public void foo(java.util.List<? extends String[]> bar, Comparable<? super Object[]> baz) { }\n    public void mySuperMethod() {\n        Runnable[] runs = new Runnable[] {new Runnable() {\n                public void run() {\n                }\n            },\n            new Runnable() {\n                public void run() {\n                }\n            }};\n        runs[0]\n.\n run()\n;\n    }\n    public void testNullSemi() {\n        return ;\n    }\n    public void register(Object obj) { }\n    public void doSomething(String args[]) {\n        register(boolean[].class);\n        register( args );\n    }\n    public void parentheses() {\n        testNullSemi\n(\n)\n;\n    }\n    public static void testNoWhitespaceBeforeEllipses(String ... args) {\n    }\n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterVarargs.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        12,
        17,
        19,
        26,
        36
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\nimport java.util.List;\npublic class InputWhitespaceAfterVarargs {\n    public void method(int...obj) { \n    }\n    public InputWhitespaceAfterVarargs(String first,\n           List<Integer>...second) { \n    }\n    public <T> void anoMeth(List<T>...args) { \n    }\n    public static String multipleArguments(int l, String format, Object ... args) {\n        return format;\n    }\n    private void noWtSpcBefore(boolean ...args) { \n    }\n    testInterface<Integer> obj = (Integer... i) -> {\n    };\n}\n@FunctionalInterface\ninterface testInterface<T> {\n    void method(T ...args); \n}"
    },
    {
      "description": "Auto test from InputWhitespaceAfterWithEmoji.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        28,
        37
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.whitespaceafter;\nclass InputWhitespaceAfterWithEmoji {\n    private String[] emoji = new String[]{\"🤩🎄\" ,\"🧐\",\"🧐🧐\", \n        \"🧐🧐\"};\n    void foo1() {\n        int i = 0, count = 0;\n        do {\n            count += \"🎄🧐\".charAt(i) == \"🤩🎄\".charAt(i) ? 1 : 0;\n        }\n        while (\"🎄🧐\".equals(\"🎄🧐weqwe\"));\n        while (\"🤩\".isEmpty()) ;\n        while (\"🎄\".equals(\"0sda\"));\n        while (true)\n            if (\"🎄🎄\".equals(\"🎄dsaewwrrw🧐\")) {\n                String b = \"🎄🎄\";return; \n            } else {\n                if (!!\"🎄🎄\".equals(\"🎄dsaewwrrw🧐\")) return;\n            }\n    }\n    void foo2() {\n        Object obj = (\"🎄dsaewwrrw🧐\");\n        obj = (java.lang.\n                Object)\"🎄\"; \n        obj = (java.lang.\n            Object) \"🎄\";\n    }\n    void foo3() {\n        char[] a = (\"🎄🎄🎄\" +\n            \"asd🧐\").toString(\n        ).toCharArray();\n        for (int i = 0;i < 5 && emoji[i].equals(\"🎄\");i++) { \n        }\n    }\n}"
    }
  ]
}