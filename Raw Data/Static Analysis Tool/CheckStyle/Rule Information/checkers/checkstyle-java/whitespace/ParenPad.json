{
  "name": "ParenPad",
  "language": "java",
  "description": "<div>\n Checks the policy on the padding of parentheses; that is whether a space is required\n after a left parenthesis and before a right parenthesis, or such spaces are\n forbidden. No check occurs at the right parenthesis after an empty for\n iterator, at the left parenthesis before an empty for initialization, or at\n the right parenthesis of a try-with-resources resource specification where\n the last resource variable has a trailing semicolon.\n Use Check\n <a href=\"https://checkstyle.org/checks/whitespace/emptyforiteratorpad.html#EmptyForIteratorPad\">\n EmptyForIteratorPad</a> to validate empty for iterators and\n <a href=\"https://checkstyle.org/checks/whitespace/emptyforinitializerpad.html#EmptyForInitializerPad\">\n EmptyForInitializerPad</a> to validate empty for initializers.\n Typecasts are also not checked, as there is\n <a href=\"https://checkstyle.org/checks/whitespace/typecastparenpad.html#TypecastParenPad\">\n TypecastParenPad</a> to validate them.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 160,
  "branches": 31,
  "apis": 31,
  "test": [
    {
      "description": "Auto test from InputParenPadCheckEmoji.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        24,
        28,
        32,
        36
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nimport java.util.function.Consumer;\npublic class InputParenPadCheckEmoji {\n    void emojiFamilyRunner1(Consumer<String> testRunner, String text) {\n        testRunner.accept(\"👩‍👩‍👧‍👧 \" + text);\n    }\n    void emojiFamilyWithSkinToneModifierRunner1(Consumer<String> testRunner, String text) {\n        testRunner.accept(\"👩🏻‍👩🏽‍👧🏾‍👦🏿 \" + text);\n    }\n    void emojiFamilyRunner2(Consumer<String> testRunner, String text) {\n        testRunner.accept(\"👩‍👩‍👧‍👧 \" + text ); \n    }\n    void emojiFamilyWithSkinToneModifierRunner2(Consumer<String> testRunner, String text) {\n        testRunner.accept(\"👩🏻‍👩🏽‍👧🏾‍👦🏿 \" + text ); \n    }\n    void emojiFamilyRunner3(Consumer<String> testRunner, String text) {\n        testRunner.accept( \"👩‍👩‍👧‍👧 \" + text); \n    }\n    void emojiFamilyWithSkinToneModifierRunner3(Consumer<String> testRunner, String text) {\n        testRunner.accept( \"👩🏻‍👩🏽‍👧🏾‍👦🏿 \" + text); \n    }\n    void emojiFamilyWithSkinToneModifierRunnerTricky(Consumer<String> testRunner, String text) {\n        testRunner\n        .accept\n        ( \"👩🏻‍👩🏽‍👧🏾‍👦🏿 \"  + \"ab cdefg\" + \"👩🏽‍👧🏾‍👦🏿 \" + text ); \n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadCheckRecords.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        24,
        30,
        32,
        39,
        48,
        52,
        53
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nimport java.util.HashMap;\nimport org.w3c.dom.Node;\npublic class InputParenPadCheckRecords {\n    record MyRecord1( ) { \n        MyRecord1( int x ){this();} \n        public MyRecord1{\n            bar( 1);  \n        }\n        static int n;\n        public void fun() {\n            bar( 1);  \n        }\n        public void bar(int k ) {  \n            while (k > 0) {\n            }\n        }\n        public void fun2() {\n            switch( n) {  \n                case 2:\n                    bar(n);\n                default:\n                    break;\n            }\n        }\n    }\n    record MyRecord2( String s){} \n    record MyRecord4( String s, String ...varargs ){} \n    record MyRecord6( String[] strArr){} \n    record MyRecord7(HashMap<String, Node> hashMap ){} \n}"
    },
    {
      "description": "Auto test from InputParenPadCheckRecordsSpace.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        24,
        30,
        32,
        39,
        48,
        52,
        53,
        54
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nimport java.util.HashMap;\nimport org.w3c.dom.Node;\npublic class InputParenPadCheckRecordsSpace {\n    record MyRecord1( ) {\n        MyRecord1( int x ){this();}\n        public MyRecord1{\n            bar( 1);  \n        }\n        static int n;\n        public void fun() {\n            bar( 1);  \n        }\n        public void bar(int k ) {  \n            while (k > 0) {  \n            }\n        }\n        public void fun2() {\n            switch( n) {  \n                case 2:\n                    bar(n);  \n                default:\n                    break;\n            }\n        }\n    }\n    record MyRecord2( String s){} \n    record MyRecord4( String s, String ...varargs ){}\n    record MyRecord6( String[] strArr){} \n    record MyRecord7(HashMap<String, Node> hashMap ){} \n    record MyRecord8(int x \n        ){\n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadForSynchronized.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        17
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nclass InputParenPadForSynchronized {\n    private static InputParenPadForSynchronized instance = null;\n    private InputParenPadForSynchronized() {\n    }\n    public synchronized static InputParenPadForSynchronized getInstance() {\n        if(instance == null ) { \n            instance = new InputParenPadForSynchronized();\n        }\n        return instance;\n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadForWhitespace.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        22,
        25,
        48,
        54,
        56
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nclass InputParenPadForWhitespace\n{\n    void method1()\n    {\n        for (int i = 0; i < 1; i++) {\n        }\n        for (int i = 0; i < 1;i++) {\n        }\n        for (int i = 0; i < 1;i++ ) { \n        }\n        for (int i = 0; i < 1; i++ ) { \n        }\n        for (int i = 0; i < 1;) {\n            i++;\n        }\n        for (int i = 0; i < 1; ) {\n            i++;\n        }\n        for (int i = 0; i < 1;\n            ) {\n            i++;\n        }\n    }\n    void method2()\n    {\n        for ( int i = 0; i < 1; i++ ) { \n        }\n        for ( int i = 0; i < 1; ) { \n            i++;\n        }\n        int i = 0;\n        for ( ; i < 1; i++ ) { \n        }\n        for (; i < 2; i++ ) { \n        }\n        for (\n        ;; ) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadForWhitespace2.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        22,
        25,
        28,
        32,
        36
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nclass InputParenPadForWhitespace2\n{\n    void method1()\n    {\n        for (int i = 0; i < 1; i++) { \n        }\n        for (int i = 0; i < 1;i++) { \n        }\n        for (int i = 0; i < 1;i++ ) { \n        }\n        for (int i = 0; i < 1; i++ ) { \n        }\n        for (int i = 0; i < 1;) { \n            i++;\n        }\n        for (int i = 0; i < 1; ) { \n            i++;\n        }\n        for (int i = 0; i < 1; \n            ) {\n            i++;\n        }\n    }\n    void method2()\n    {\n        for ( int i = 0; i < 1; i++ ) {\n        }\n        for ( int i = 0; i < 1; ) {\n            i++;\n        }\n        int i = 0;\n        for ( ; i < 1; i++ ) {\n        }\n        for (; i < 2; i++ ) {\n        }\n        for (\n        ;; ) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadLambda.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        20,
        22
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nclass InputParenPadLambda {\n    {\n        java.util.function.Consumer a = (o) -> { o.toString(); };\n        java.util.function.Consumer b = o -> { o.toString(); };\n        java.util.function.Consumer c = ( o ) -> { o.toString(); }; \n        java.util.function.Consumer d = (o ) -> { o.toString(); }; \n        java.util.function.Consumer e = ( o) -> { o.toString(); }; \n        java.util.stream.Stream.of().forEach(( o ) -> o.toString()); \n        java.util.stream.Stream.of().forEach(( Object o ) -> o.toString()); \n        java.util.stream.Stream.of().forEach(o -> o.toString( )); \n    }\n    void someMethod( String param ) { \n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadLambdaOnly.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        17,
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\npublic class InputParenPadLambdaOnly {\n    {\n        java.util.function.Consumer a = (o) -> { o.toString(); };\n        java.util.function.Consumer b = o -> { o.toString(); };\n        java.util.function.Consumer c = ( o ) -> { o.toString(); }; \n        java.util.function.Consumer d = (o ) -> { o.toString(); }; \n        java.util.function.Consumer e = ( o) -> { o.toString(); }; \n        java.util.stream.Stream.of().forEach(( o ) -> o.toString()); \n        java.util.stream.Stream.of().forEach(( Object o ) -> o.toString()); \n        java.util.stream.Stream.of().forEach(o -> o.toString( ));\n    }\n    void someMethod( String param ) {\n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadLambdaOnlyWithSpace.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        17,
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nclass InputParenPadLambdaOnlyWithSpace {\n    {\n        java.util.function.Consumer a = ( o ) -> { o.toString( ); };\n        java.util.function.Consumer b = o -> { o.toString(); };\n        java.util.function.Consumer c = (o) -> { o.toString(); }; \n        java.util.function.Consumer d = (o ) -> { o.toString(); }; \n        java.util.function.Consumer e = ( o) -> { o.toString(); }; \n        java.util.stream.Stream.of().forEach( (o) -> o.toString() ); \n        java.util.stream.Stream.of().forEach( (Object o) -> o.toString() ); \n        java.util.stream.Stream.of().forEach( o -> o.toString() );\n    }\n    void someMethod(String param) {\n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadLambdaWithSpace.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        20,
        22
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nclass InputParenPadLambdaWithSpace {\n    {\n        java.util.function.Consumer a = ( o ) -> { o.toString( ); };\n        java.util.function.Consumer b = o -> { o.toString(); };\n        java.util.function.Consumer c = (o) -> { o.toString(); }; \n        java.util.function.Consumer d = (o ) -> { o.toString(); }; \n        java.util.function.Consumer e = ( o) -> { o.toString(); }; \n        java.util.stream.Stream.of().forEach( (o) -> o.toString() ); \n        java.util.stream.Stream.of().forEach( (Object o) -> o.toString() ); \n        java.util.stream.Stream.of().forEach( o -> o.toString() );\n    }\n    void someMethod(String param) { \n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadLeftRightAndNoSpace1.java",
      "expected-problems": 33,
      "expected-linenumbers": [
        55,
        57,
        61,
        63,
        67,
        68,
        69,
        71,
        72,
        73,
        75,
        89,
        91,
        95,
        97,
        100,
        101,
        102,
        103,
        105,
        106,
        107,
        109,
        122,
        163,
        164,
        175,
        182,
        184,
        211,
        212,
        221,
        228
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\npublic class InputParenPadLeftRightAndNoSpace1\n{\n    class ParenPadNoSpace  {\n        ParenPadNoSpace() {\n            this(0);\n        }\n        ParenPadNoSpace(int i) {\n            super();\n        }\n        @SuppressWarnings(\"\")\n        void method(boolean status) {\n            try (Writer writer = new StringWriter()) {\n                do {\n                    writer.append(\"a\");\n                } while (status);\n            } catch (IOException e) {\n                while (status) {\n                    for (int i = 0; i < (long) (2 * (4 / 2)); i++) {\n                        if (i > 2) {\n                            synchronized (this) {\n                                switch (i) {\n                                    case 3:\n                                    case (4):\n                                    case 5:\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    class ParenPadSpaceLeft {\n        ParenPadSpaceLeft( ) { \n            this( 0); \n        }\n        ParenPadSpaceLeft( int i) { \n            super( ); \n        }\n        @SuppressWarnings( \"\") \n        void method( boolean status) { \n            try ( Writer writer = new StringWriter( )) { \n                do {\n                    writer.append(\"a\");\n                } while ( status); \n            } catch ( IOException e) { \n                while ( status) { \n                    for ( int i = 0; i < ( long) ( 2 * ( 4 / 2)); i++) { \n                        if ( i > 2) { \n                            synchronized ( this) { \n                                switch ( i) { \n                                    case 3:\n                                    case ( 4): \n                                    case 5:\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    class ParenPadSpaceRight {\n        ParenPadSpaceRight( ) { \n            this(0 ); \n        }\n        ParenPadSpaceRight(int i ) { \n            super( ); \n        }\n        @SuppressWarnings(\"\" ) \n        void method(boolean status ) { \n            try (Writer writer = new StringWriter( ) ) { \n                do {\n                    writer.append(\"a\" ); \n                } while (status ); \n            } catch (IOException e ) { \n                while (status ) { \n                    for (int i = 0; i < (long ) (2 * (4 / 2 ) ); i++ ) { \n                        if (i > 2 ) { \n                            synchronized (this ) { \n                                switch (i ) { \n                                    case 3:\n                                    case (4 ): \n                                    case 5:\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    String foo() {\n        return ( (Object \n                ) bar( ( 1 > 2 ) ? \n                        ( ( 3 < 4 )? false : true ) : \n                        ( ( 1 == 1 ) ? false : true) ) ).toString(); \n    }\n    @MyAnnotation1\n    public boolean bar(boolean a) {\n        assert ( true ); \n        return true;\n    }\n    boolean fooo = this.bar(( true && false ) && true); \n}\n@interface MyAnnotation1 {\n    String someField( ) default \"Hello world\"; \n}\nenum MyEnum1 {\n    SOME_CONSTANT( ) { \n        int i = (int) (2 * (4 / 2)\n                );\n    };\n    public void myMethod() {\n        String s = \"test\";\n        Object o = s;\n        ((String)o).length();\n        ( (String)o ).length(); \n    }\n    public void crisRon() {\n        Object leo = \"messi\";\n        Object ibra = leo;\n        ((String)leo).compareTo( (String)ibra ); \n        Math.random();\n    }\n    public void intStringConv() {\n        Object a = 5;\n        Object b = \"string\";\n        int w = Integer.parseInt((String)a);\n        int x = Integer.parseInt( (String)a); \n        double y = Double.parseDouble((String)a ); \n        float z = Float.parseFloat( (String)a ); \n        String d = ((String)b);\n    }\n    public int something( Object o ) { \n        if ( o == null || !( o instanceof Float ) ) { \n            return -1;\n        }\n        return Integer.valueOf( 22 ).compareTo( (Integer) o ); \n    }\n    private void launch(Integer number ) { \n        String myInt = ( number.toString() + '\\0' ); \n        boolean result = false;\n        if (number == 123)\n            result = true;\n    }\n    private static String getterName( Exception t) { \n        if (t instanceof ClassNotFoundException ) { \n            return ( (ClassNotFoundException) t ).getMessage(); \n        }\n        else {\n            return \"?\";\n        }\n    }\n    private Object exam;\n    public String testing() {\n        return ( this.exam != null ) \n                ? ( ( Enum )this.exam ).name() \n                : null;\n    }\n    Object stringReturnValue( Object result ) { \n        if ( result instanceof String ) { \n            result = ( (String) result ).length(); \n        }\n        return result;\n    }\n    private void except() { \n        java.util.ArrayList<Integer> arrlist = new java.util.ArrayList<Integer>( 5 );\n        arrlist.add( 20); \n        arrlist.add(15 ); \n        arrlist.add( 30 ); \n        arrlist.add(45);\n        try {\n            ( arrlist ).remove( 2); \n        } catch ( IndexOutOfBoundsException x ) { \n            x.getMessage();\n        }\n        org.junit.Assert.assertThat( \"123\", org.hamcrest.CoreMatchers.is( \"123\" ) ); \n        org.junit.Assert.assertThat( \"Help! Integers don't work\", \n                0, org.hamcrest.CoreMatchers.is( 1 ) ); \n    }\n}\nenum MyEnum21 {\n    SOME_CONSTANT( ) { \n        int i = (int) (2 * (4 / 2\n)                   ); \n    };\n}"
    },
    {
      "description": "Auto test from InputParenPadLeftRightAndNoSpace2.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        97,
        120,
        122,
        160,
        161,
        208,
        209,
        213,
        218
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\npublic class InputParenPadLeftRightAndNoSpace2\n{\n    class ParenPadNoSpace  {\n        ParenPadNoSpace() {\n            this(0);\n        }\n        ParenPadNoSpace(int i) {\n            super();\n        }\n        @SuppressWarnings(\"\")\n        void method(boolean status) {\n            try (Writer writer = new StringWriter()) {\n                do {\n                    writer.append(\"a\");\n                } while (status);\n            } catch (IOException e) {\n                while (status) {\n                    for (int i = 0; i < (long) (2 * (4 / 2)); i++) {\n                        if (i > 2) {\n                            synchronized (this) {\n                                switch (i) {\n                                    case 3:\n                                    case (4):\n                                    case 5:\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    class ParenPadSpaceLeft {\n        ParenPadSpaceLeft( ) {\n            this( 0);\n        }\n        ParenPadSpaceLeft( int i) {\n            super( );\n        }\n        @SuppressWarnings( \"\")\n        void method( boolean status) {\n            try ( Writer writer = new StringWriter( )) {\n                do {\n                    writer.append(\"a\");\n                } while ( status);\n            } catch ( IOException e) {\n                while ( status) {\n                    for ( int i = 0; i < ( long) ( 2 * ( 4 / 2)); i++) {\n                        if ( i > 2) {\n                            synchronized ( this) {\n                                switch ( i) {\n                                    case 3:\n                                    case ( 4):\n                                    case 5:\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    class ParenPadSpaceRight {\n        ParenPadSpaceRight( ) {\n            this(0 );\n        }\n        ParenPadSpaceRight(int i ) {\n            super( );\n        }\n        @SuppressWarnings(\"\" )\n        void method(boolean status ) {\n            try (Writer writer = new StringWriter( ) ) {\n                do {\n                    writer.append(\"a\" ); \n                } while (status );\n            } catch (IOException e ) {\n                while (status ) {\n                    for (int i = 0; i < (long ) (2 * (4 / 2 ) ); i++ ) {\n                        if (i > 2 ) {\n                            synchronized (this ) {\n                                switch (i ) {\n                                    case 3:\n                                    case (4 ):\n                                    case 5:\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    String foo() {\n        return ( (Object\n                ) bar( ( 1 > 2 ) ? \n                        ( ( 3 < 4 )? false : true ) :\n                        ( ( 1 == 1 ) ? false : true) ) ).toString(); \n    }\n    @MyAnnotation2\n    public boolean bar(boolean a) {\n        assert ( true );\n        return true;\n    }\n    boolean fooo = this.bar(( true && false ) && true);\n}\n@interface MyAnnotation2 {\n    String someField( ) default \"Hello world\";\n}\nenum MyEnum12 {\n    SOME_CONSTANT( ) {\n        int i = (int) (2 * (4 / 2)\n                );\n    };\n    public void myMethod() {\n        String s = \"test\";\n        Object o = s;\n        ((String)o).length();\n        ( (String)o ).length();\n    }\n    public void crisRon() {\n        Object leo = \"messi\";\n        Object ibra = leo;\n        ((String)leo).compareTo( (String)ibra ); \n        Math.random();\n    }\n    public void intStringConv() {\n        Object a = 5;\n        Object b = \"string\";\n        int w = Integer.parseInt((String)a);\n        int x = Integer.parseInt( (String)a); \n        double y = Double.parseDouble((String)a ); \n        float z = Float.parseFloat( (String)a ); \n        String d = ((String)b);\n    }\n    public int something( Object o ) {\n        if ( o == null || !( o instanceof Float ) ) {\n            return -1;\n        }\n        return Integer.valueOf( 22 ).compareTo( (Integer) o ); \n    }\n    private void launch(Integer number ) {\n        String myInt = ( number.toString() + '\\0' );\n        boolean result = false;\n        if (number == 123)\n            result = true;\n    }\n    private static String getterName( Exception t) {\n        if (t instanceof ClassNotFoundException ) {\n            return ( (ClassNotFoundException) t ).getMessage();\n        }\n        else {\n            return \"?\";\n        }\n    }\n    private Object exam;\n    public String testing() {\n        return ( this.exam != null )\n                ? ( ( Enum )this.exam ).name()\n                : null;\n    }\n    Object stringReturnValue( Object result ) {\n        if ( result instanceof String ) {\n            result = ( (String) result ).length();\n        }\n        return result;\n    }\n    private void except() {\n        java.util.ArrayList<Integer> arrlist = new java.util.ArrayList<Integer>( 5 );\n        arrlist.add( 20); \n        arrlist.add(15 ); \n        arrlist.add( 30 ); \n        arrlist.add(45);\n        try {\n            ( arrlist ).remove( 2); \n        } catch ( IndexOutOfBoundsException x ) {\n            x.getMessage();\n        }\n        org.junit.Assert.assertThat( \"123\", org.hamcrest.CoreMatchers.is( \"123\" ) ); \n        org.junit.Assert.assertThat( \"Help! Integers don't work\", \n                0, org.hamcrest.CoreMatchers.is( 1 ) ); \n    }\n}\nenum MyEnum22 {\n    SOME_CONSTANT( ) {\n        int i = (int) (2 * (4 / 2\n)                   );\n    };\n}"
    },
    {
      "description": "Auto test from InputParenPadStartOfTheLine.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\npublic class InputParenPadStartOfTheLine {\npublic String checkSmth( String\na) { \n    return a + 1;\n   }\n}"
    },
    {
      "description": "Auto test from InputParenPadTryWithResources.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        19,
        20,
        21
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.parenpad;\nclass InputParenPadTryWithResources {\n    private void tryWithResources() throws Exception {\n        try (AutoCloseable a = null) {}\n        try (AutoCloseable a = null; AutoCloseable b = null) {}\n        try (AutoCloseable a = null; AutoCloseable b = null; ) {}\n        try (AutoCloseable a = null; AutoCloseable b = null; ) {}\n        try (AutoCloseable a = null ) {} \n        try (AutoCloseable a = null; AutoCloseable b = null ) {} \n        try ( AutoCloseable a = null) {} \n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadWhitespace.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        238
      ],
      "code": "package com . puppycrawl\n    .tools.\n    checkstyle.checks.whitespace.parenpad;\nclass InputParenPadWhitespace\n{\n    private int mVar1=1;\n    private int mVar2 =1;\n    private int mVar3 = 1;\n    void method1()\n    {\n        final int a = 1;\n        int b= 1; \n        b=1; \n        b+=1; \n        b -=- 1 + (+ b); \n        b = b ++ + b --; \n        b = ++ b - -- b; \n    }\n    void method2()\n    {\n        synchronized(this) {\n        }\n        try{\n        }\n        catch(RuntimeException e){\n        }\n    }\n    private int mVar4 = 1;\n    private void fastExit()\n    {\n        boolean complicatedStuffNeeded = true;\n        if( !complicatedStuffNeeded ) \n        {\n            return; \n        }\n        else\n        {\n        }\n    }\n    private int nonVoid()\n    {\n        if ( true ) \n        {\n            return(2); \n        }\n        else\n        {\n            return 2; \n        }\n    }\n    private void testCasts()\n    {\n        Object o = (Object) new Object(); \n        o = (Object)o;\n        o = ( Object ) o; \n        o = (Object)\n            o; \n    }\n    private void testQuestions()\n    {\n        boolean b = (1 == 2)?true:false;\n        b = (1==2) ? false : true;\n    }\n    private void starTest()\n    {\n        int x = 2 *3* 4;\n    }\n    private void boolTest()\n    {\n        boolean a = true;\n        boolean x = ! a;\n        int z = ~1 + ~ 2;\n    }\n    private void divTest()\n    {\n        int a = 4 % 2;\n        int b = 4% 2;\n        int c = 4 %2;\n        int d = 4%2;\n        int e = 4 / 2;\n        int f = 4/ 2;\n        int g = 4 /2;\n        int h = 4/2;\n    }\n    private java .lang.  String dotTest()\n    {\n        Object o = new java.lang.Object();\n        o.\n            toString();\n        o\n            .toString();\n        o . toString();\n        return o.toString();\n    }\n    public void assertTest()\n    {\n        assert true;\n        assert true : \"Whups\";\n        assert \"OK\".equals(null) ? false : true : \"Whups\";\n        assert(true);\n        assert true:\"Whups\";\n    }\n    void donBradman(Runnable aRun)\n    {\n        donBradman(new Runnable() {\n            public void run() {\n            }\n        });\n        final Runnable r = new Runnable() {\n            public void run() {\n            }\n        };\n    }\n    void rfe521323()\n    {\n        doStuff() ;\n        for (int i = 0 ; i < 5; i++) {\n        }\n    }\n    private int i ;\n    private int i1, i2, i3 ;\n    private int i4, i5, i6;\n    void bug806243()\n    {\n        Object o = new InputParenPadWhitespace() {\n            private int j ;\n        };\n    }\n    void doStuff() {\n    }\n}\ninterface IFoo\n{\n    void foo() ;\n}\nclass SpecialCasesInForLoop\n{\n    void forIterator()\n    {\n        for (int i = 0; i++ < 5;) {\n\t}\n\tint i = 0;\n\tfor ( ; i < 5; i++ ) { \n\t}\n        for (int anInt : getSomeInts()) {\n        }\n    }\n    int[] getSomeInts() {\n        int i = (int) ( 2 / 3 ); \n        return null;\n    }\n    public void myMethod() {\n        new Thread() {\n            public void run() {\n            }\n        }.start();\n    }\n    public void foo(java.util.List<? extends String[]> bar, Comparable<? super Object[]> baz) { }\n    public void mySuperMethod() {\n        Runnable[] runs = new Runnable[] {new Runnable() {\n                public void run() {\n                }\n            },\n            new Runnable() {\n                public void run() {\n                }\n            }};\n        runs[0]\n.\n run()\n;\n    }\n    public void testNullSemi() {\n        return ;\n    }\n    public void register(Object obj) { }\n    public void doSomething(String args[]) {\n        register(boolean[].class);\n        register( args ); \n    }\n    public void parentheses() {\n        testNullSemi\n(\n)\n;\n    }\n    public static void testNoWhitespaceBeforeEllipses(String ... args) {\n    }\n}"
    },
    {
      "description": "Auto test from InputParenPadWhitespace2.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        168,
        171,
        230
      ],
      "code": "package com . puppycrawl\n    .tools.\n    checkstyle.checks.whitespace.parenpad;\nclass InputParenPadWhitespace2\n{\n    private int mVar1=1;\n    private int mVar2 =1;\n    private int mVar3 = 1;\n    void method1()\n    {\n        final int a = 1;\n        int b= 1; \n        b=1; \n        b+=1; \n        b -=- 1 + (+ b); \n        b = b ++ + b --; \n        b = ++ b - -- b; \n    }\n    void method2()\n    {\n        synchronized(this) { \n        }\n        try{\n        }\n        catch(RuntimeException e){ \n        }\n    }\n    private int mVar4 = 1;\n    private void fastExit()\n    {\n        boolean complicatedStuffNeeded = true;\n        if( !complicatedStuffNeeded )\n        {\n            return; \n        }\n        else\n        {\n        }\n    }\n    private int nonVoid()\n    {\n        if ( true )\n        {\n            return(2); \n        }\n        else\n        {\n            return 2; \n        }\n    }\n    private void testCasts()\n    {\n        Object o = (Object) new Object(); \n        o = (Object)o;\n        o = ( Object ) o; \n        o = (Object)\n            o; \n    }\n    private void testQuestions()\n    {\n        boolean b = (1 == 2)?true:false; \n        b = (1==2) ? false : true; \n    }\n    private void starTest()\n    {\n        int x = 2 *3* 4;\n    }\n    private void boolTest()\n    {\n        boolean a = true;\n        boolean x = ! a;\n        int z = ~1 + ~ 2;\n    }\n    private void divTest()\n    {\n        int a = 4 % 2;\n        int b = 4% 2;\n        int c = 4 %2;\n        int d = 4%2;\n        int e = 4 / 2;\n        int f = 4/ 2;\n        int g = 4 /2;\n        int h = 4/2;\n    }\n    private java .lang.  String dotTest()\n    {\n        Object o = new java.lang.Object();\n        o.\n            toString();\n        o\n            .toString();\n        o . toString();\n        return o.toString();\n    }\n    public void assertTest()\n    {\n        assert true;\n        assert true : \"Whups\";\n        assert \"OK\".equals(null) ? false : true : \"Whups\"; \n        assert(true); \n        assert true:\"Whups\";\n    }\n    void donBradman(Runnable aRun) \n    {\n        donBradman(new Runnable() { \n            public void run() {\n            }\n        }); \n        final Runnable r = new Runnable() {\n            public void run() {\n            }\n        };\n    }\n    void rfe521323()\n    {\n        doStuff() ;\n        for (int i = 0 ; i < 5; i++) { \n        }\n    }\n    private int i ;\n    private int i1, i2, i3 ;\n    private int i4, i5, i6;\n    void bug806243()\n    {\n        Object o = new InputParenPadWhitespace() {\n            private int j ;\n        };\n    }\n    void doStuff() {\n    }\n}\ninterface IFoo2\n{\n    void foo() ;\n}\nclass SpecialCasesInForLoop2\n{\n    void forIterator()\n    {\n        for (int i = 0; i++ < 5;) { \n    }\n    int i = 0;\n    for ( ; i < 5; i++ ) {\n    }\n        for (int anInt : getSomeInts()) { \n        }\n    }\n    int[] getSomeInts() {\n        int i = (int) ( 2 / 3 );\n        return null;\n    }\n    public void myMethod() {\n        new Thread() {\n            public void run() {\n            }\n        }.start();\n    }\n    public void foo(java.util.List<? extends String[]> bar, Comparable<? super Object[]> baz) { }\n    public void mySuperMethod() {\n        Runnable[] runs = new Runnable[] {new Runnable() {\n                public void run() {\n                }\n            },\n            new Runnable() {\n                public void run() {\n                }\n            }};\n        runs[0]\n.\n run()\n;\n    }\n    public void testNullSemi() {\n        return ;\n    }\n    public void register(Object obj) { } \n    public void doSomething(String args[]) { \n        register(boolean[].class); \n        register( args );\n    }\n    public void parentheses() {\n        testNullSemi\n(\n)\n;\n    }\n    public static void testNoWhitespaceBeforeEllipses(String ... args) { \n    }\n}"
    }
  ]
}