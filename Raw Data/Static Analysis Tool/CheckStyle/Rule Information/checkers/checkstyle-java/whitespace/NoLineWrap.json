{
  "name": "NoLineWrap",
  "language": "java",
  "description": "<div>Checks that chosen statements are not line-wrapped.\n By default, this Check restricts wrapping import and package statements,\n but it's possible to check any statement.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 40,
  "branches": 1,
  "apis": 9,
  "test": [
    {
      "description": "Auto test from InputNoLineWrapBad.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        11,
        15
      ],
      "code": "package com.puppycrawl.tools. \n    checkstyle.checks.whitespace.nolinewrap;\nimport java.util.Calendar;\nimport javax.accessibility. \n    AccessibleAttributeSequence;\nimport java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\nimport static java.math. \n\t\tBigInteger.ZERO;\npublic class\n    InputNoLineWrapBad {\n\tpublic void\n\t    fooMethod() {\n\t\tfinal int\n\t\t    foo = 0;\n\t}\n}\nenum\n    FooFoo {\n}\ninterface\n    InterFoo {}"
    },
    {
      "description": "Auto test from InputNoLineWrapBad2.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        11,
        15,
        18,
        21,
        28
      ],
      "code": "package com.puppycrawl.tools.\n    checkstyle.checks.whitespace.nolinewrap;\nimport java.util.Calendar;\nimport javax.accessibility. \n    AccessibleAttributeSequence;\nimport java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\nimport static java.math. \n\t\tBigInteger.ZERO;\npublic class \n    InputNoLineWrapBad2 {\n\tpublic void \n\t    fooMethod() {\n\t\tfinal int\n\t\t    foo = 0;\n\t}\n}\nenum \n    FooFoo2 {\n}\ninterface\n    InterFoo2 {}"
    },
    {
      "description": "Auto test from InputNoLineWrapRecordsAndCompactCtors.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        12,
        18,
        27,
        33,
        35,
        38,
        41,
        46,
        48
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.whitespace.nolinewrap;\npublic class InputNoLineWrapRecordsAndCompactCtors {\n    class Bar {\n        public \n        Bar() {\n        }\n        public void fun() {\n        }\n    }\n    record \n    MyRecord1() {\n        public MyRecord1() {\n        }\n        public static void\n        doSomething() {\n        }\n    }\n    record MyRecord2() {\n        public \n        MyRecord2() {\n        }\n        public void fun() {\n        }\n    }\n    record MyRecord3(String str, int \n                     x) {\n        public \n        MyRecord3{}\n    }\n    record MyRecord4(String str, int x, \n                     int y) {\n        public \n        MyRecord4{}\n    }\n    Record recordMethod (int x) {\n        record MyMethodRecord(int \n                                      x) {\n            public MyMethodRecord \n            {}\n        }\n        return new MyMethodRecord(42);\n    }\n}"
    }
  ]
}