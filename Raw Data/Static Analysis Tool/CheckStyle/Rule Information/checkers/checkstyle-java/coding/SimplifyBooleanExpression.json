{
  "name": "SimplifyBooleanExpression",
  "language": "java",
  "description": "<div>\n Checks for over-complicated boolean expressions. Currently, it finds code like\n {@code if (b == true)}, {@code b || true}, {@code !false},\n {@code boolean a = q > 12 ? true : false},\n etc.\n </div>\n\n <p>\n Rationale: Complex boolean logic makes code hard to understand and maintain.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 47,
  "branches": 10,
  "apis": 12,
  "test": [
    {
      "description": "Auto test from InputSimplifyBooleanExpression.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        19,
        42,
        43,
        94,
        95,
        97,
        103,
        105,
        108,
        109,
        110
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.simplifybooleanexpression;\npublic class InputSimplifyBooleanExpression\n{\n    public static boolean isOddMillis()\n    {\n        boolean even = System.currentTimeMillis() % 2 == 0;\n        if (even == true) { \n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    public static boolean isOddMillis2()\n    {\n        boolean even = System.currentTimeMillis() % 2 == 0;\n        if (!even)\n            return true;\n        else\n            return false;\n    }\n    public static boolean giveMeTrue()\n    {\n        boolean tt = isOddMillis() || true; \n        boolean ff = isOddMillis() && false; \n        return !false || (true != false); \n    }\n    public void tryToProvokeNPE()\n    {\n        if (true) {\n        }\n        else {\n        }\n        if (true) {\n            return;\n        }\n        else {\n            return;\n        }\n    }\n    public boolean ifNoElse()\n    {\n        if (isOddMillis()) {\n            return true;\n        }\n        return false;\n    }\n    boolean a() {\n        boolean asd = false;\n        boolean dasa = true;\n        if (asd) {\n            return true;\n        } else {\n            return dasa;\n        }\n    }\n    boolean b() {\n        boolean asd = false;\n        if(asd);\n        else;\n        return true;\n    }\n    void testTernaryExpressions() {\n        boolean a = false;\n        boolean b = true;\n        int c = 13;\n        boolean m = c > 1 ? true : false; \n        boolean e = (a == true) \n                ? c > 1 : false;\n        boolean h = false ? c > 13 : c < 21; \n        boolean f = a == b ? false : c > 1;\n        boolean q = c > 1 ? (c < 15\n                ? false : b)\n                : a != b;\n        boolean v = c > 0 ? true :\n                c < 0 ? false : true; \n        boolean g = (c > 0 ? true : c < 0)\n                ? false : false; \n        Boolean value = null;\n        boolean temp = value != null ? value : false;\n        temp = true ? a() : b(); \n        int d = false ? 1 : 2; \n        temp = a() ? true : true; \n        temp = value != null ? value : (false);\n    }\n}"
    }
  ]
}