{
  "name": "OverloadMethodsDeclarationOrder",
  "language": "java",
  "description": "<div>\n Checks that overloaded methods are grouped together. Overloaded methods have the same\n name but different signatures where the signature can differ by the number of\n input parameters or type of input parameters or both.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 67,
  "branches": 4,
  "apis": 19,
  "test": [
    {
      "description": "Auto test from InputOverloadMethodsDeclarationOrder.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        29,
        29,
        58,
        58,
        68,
        84,
        128,
        128,
        141,
        153,
        157
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.overloadmethodsdeclarationorder;\nclass InputOverloadMethodsDeclarationOrder\n{\n    public void overloadMethod(int i)\n    {\n    }\n    public void overloadMethod(String s)\n    {\n    }\n    public void overloadMethod(boolean b)\n    {\n    }\n    public void fooMethod()\n    {\n    }\n    public void overloadMethod(String s, Boolean b, int i)\n    {\n    }\n    InputOverloadMethodsDeclarationOrder anonymous = new InputOverloadMethodsDeclarationOrder()\n    {\n        public void overloadMethod(int i)\n        {\n        }\n        public void overloadMethod(String s)\n        {\n        }\n        public void overloadMethod(boolean b)\n        {\n        }\n        public void fooMethod()\n        {\n        }\n        public void overloadMethod(String s, Boolean b, int i)\n        {\n        };\n        public void overloadMethod(double d)\n        {\n        }\n    };\n}\ninterface Fooable\n{\n    public abstract void foo(int i);\n    public abstract void foo(String s);\n    public abstract void noFoo();\n    public abstract void foo(String s, Boolean b, int i);\n}\nenum FooType {\n    Strategy(\"\"),\n    Shooter(\"\"),\n    RPG(\"\");\n    private String description;\n    private FooType(String description) {\n        this.description = description;\n    }\n    public String getDescription() {\n        return description;\n    }\n    public void setDescription(String description) {\n        this.description = description;\n    }\n    public void overloadMethod(int i)\n    {\n    }\n    public void overloadMethod(String s)\n    {\n    }\n    public void overloadMethod(boolean b)\n    {\n    }\n    public void fooMethod()\n    {\n    }\n    public void overloadMethod(String s, Boolean b, int i)\n    {\n    }\n    void test() {}\n    String str;\n    private interface Testing {}\n    void test(int x) {}\n    private class Inner {\n        void test() {}\n        void test(String str) {}\n        void test2() {}\n        String str;\n        void test(int x) {}\n    }\n    void test(double d) {}\n}\nenum Foo2 {\n    VALUE {\n        public void value() {\n            value(\"\");\n        }\n        public void middle() {\n        }\n        public void value(String s) {\n        }\n    };\n}\n@interface ClassPreamble {\n    String author();\n}"
    },
    {
      "description": "Auto test from InputOverloadMethodsDeclarationOrderRecords.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        19,
        40,
        56,
        63
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.overloadmethodsdeclarationorder;\npublic class InputOverloadMethodsDeclarationOrderRecords {\n    record MyRecord1() {\n        public void foo(int i) {\n        }\n        public void foo(String s) {\n        }\n        public void notFoo() {\n        }\n        public void foo(int i, String s) {\n        }\n        public void foo(String s, int i) {\n        }\n    }\n    record MyRecord2() {\n        public void foo(int i, String s) {\n        }\n        public void foo(String s, int i) {\n        }\n        public void foo(int i) {\n        }\n         public void notFoo(){\n         }\n        public void foo() {\n        }\n        public MyRecord2{}\n    }\n    class MyClass {\n        public void foo(int i) {\n        }\n        public void notFoo() {\n        }\n        public void foo() {\n        }\n        public MyClass() {\n        }\n        public void foo(int i, String s) {\n        }\n        public void foo(String s, int i) {\n        }\n    }\n}"
    }
  ]
}