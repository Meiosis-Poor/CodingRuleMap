{
  "name": "UnnecessarySemicolonInEnumeration",
  "language": "java",
  "description": "<div>\n Checks if unnecessary semicolon is in enum definitions.\n Semicolon is not needed if enum body contains only enum constants.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 34,
  "branches": 1,
  "apis": 10,
  "test": [
    {
      "description": "Auto test from InputUnnecessarySemicolonInEnumeration.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        29,
        32,
        35,
        38,
        41,
        44,
        47,
        51,
        56,
        60,
        63
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unnecessarysemicoloninenumeration;\npublic class InputUnnecessarySemicolonInEnumeration{\n    enum Nothing {\n        A,B\n    }\n    enum Comma {\n        A,B,\n    }\n    enum Paren {\n        A,B()\n    }\n    enum Block {\n        A,B{}\n    }\n    enum ParenAndBlock {\n        A,B(){ public String toString() { return \"\";}}\n    }\n    enum ParenAndBlockAndComma {\n        A,B(){ public String toString() { return \"\";}},\n    }\n    enum Semicolon {\n        A,B; \n    }\n    enum CommaAndSemicolon {\n        A,B,; \n    }\n    enum BlockAndSemicolon {\n        A,B{}; \n    }\n    enum ParensAndSemicolon {\n        A,B(); \n    }\n    enum BlockAndCommaAndSemicolon {\n        A,B{ public String toString() { return \"\";}},; \n    }\n    enum ParensAndCommaAndSemicolon {\n        A,B(),; \n    }\n    enum All {\n        A,B(){ public String toString() { return \"\";}},; \n    }\n    enum SemicolonNextLine {\n        A,B\n        ; \n    }\n    enum NestedEnum {\n        A, B, C;\n        enum Nested {\n            First, Second, Third; \n        }\n    }\n    enum NoEnums {\n        ; \n    }\n    enum NoEnums2 {\n        ,; \n    }\n    enum NoEnums3 {\n        ;\n        {}\n    }\n    enum EmptyEnum {\n    }\n    enum EmptyEnum2 {\n        ,\n    }\n    enum Normal {\n        A,B;\n        void m(){}\n    }\n    enum CommaNormal {\n        A,B,;\n        {}\n    }\n    enum ParenNormal {\n        A,B();\n        static {}\n    }\n    enum SemiNextLine {\n        A,\n        B\n        ;\n        SemiNextLine(){}\n    }\n    enum BlockNormal {\n        A,B{ public String toString() { return \"\";}};\n        BlockNormal(){}\n    }\n    enum ParenAndBlockNormal {\n        A,B(){ public String toString() { return \"\";}};\n        int a = 10;\n    }\n    enum ParenAndBlockAndCommaNormal {\n        A,B(){ public String toString() { return \"\";}},;\n        interface a {}\n    }\n}"
    }
  ]
}