{
  "name": "IllegalTokenText",
  "language": "java",
  "description": "<div>\n Checks specified tokens text for matching an illegal pattern.\n By default, no tokens are specified.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 78,
  "branches": 11,
  "apis": 18,
  "test": [
    {
      "description": "Auto test from InputIllegalTokenTextCheckCaseInSensitive.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        33,
        34
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.illegaltokentext;\npublic class InputIllegalTokenTextCheckCaseInSensitive\n{\n    public void methodWithPreviouslyIllegalTokens()\n    {\n        int i = 0;\n        switch (i)\n        {\n            default:\n                i--;\n                i++;\n                break;\n        }\n    }\n    public native void nativeMethod();\n    public void methodWithLiterals()\n    {\n        final String ref = \"<a href=\\\"\"; \n        final String refCase = \"<A hReF=\\\"\"; \n    }\n    public void methodWithLabels() {\n        label:\n        {\n            anotherLabel: \n            do {\n                continue anotherLabel;\n            } while (false);\n            break label; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputIllegalTokenTextCheckCommentToken.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        43
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.illegaltokentext;\npublic class InputIllegalTokenTextCheckCommentToken\n{\n    public void methodWithPreviouslyIllegalTokens()\n    {\n        int i = 0;\n        switch (i)\n        {\n            default:\n                i--;\n                i++;\n                break;\n        }\n    }\n    public native void nativeMethod();\n    public void methodWithLiterals()\n    {\n        final String ref = \"<a href=\\\"\";\n        final String refCase = \"<A hReF=\\\"\";\n    }\n    public void methodWithLabels() {\n        label:\n        {\n            anotherLabel: \n            do {\n                continue anotherLabel;\n            } while (false); \n            break label; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputIllegalTokenTextCheckCustomMessageInStringLiteral.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.illegaltokentext;\npublic class InputIllegalTokenTextCheckCustomMessageInStringLiteral\n{\n    public void methodWithPreviouslyIllegalTokens()\n    {\n        int i = 0;\n        switch (i)\n        {\n            default:\n                i--;\n                i++;\n                break;\n        }\n    }\n    public native void nativeMethod();\n    public void methodWithLiterals()\n    {\n        final String ref = \"<a href=\\\"\"; \n        final String refCase = \"<A hReF=\\\"\";\n    }\n    public void methodWithLabels() {\n        label:\n        {\n            anotherLabel: \n            do {\n                continue anotherLabel;\n            } while (false);\n            break label; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputIllegalTokenTextCheckDefaultCaseSensitive.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.illegaltokentext;\npublic class InputIllegalTokenTextCheckDefaultCaseSensitive\n{\n    public void methodWithPreviouslyIllegalTokens()\n    {\n        int i = 0;\n        switch (i)\n        {\n            default:\n                i--;\n                i++;\n                break;\n        }\n    }\n    public native void nativeMethod();\n    public void methodWithLiterals()\n    {\n        final String ref = \"<a href=\\\"\"; \n        final String refCase = \"<A hReF=\\\"\";\n    }\n    public void methodWithLabels() {\n        label:\n        {\n            anotherLabel: \n            do {\n                continue anotherLabel;\n            } while (false);\n            break label; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputIllegalTokenTextCheckNullMessageInStringLiteral.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.illegaltokentext;\npublic class InputIllegalTokenTextCheckNullMessageInStringLiteral\n{\n    public void methodWithPreviouslyIllegalTokens()\n    {\n        int i = 0;\n        switch (i)\n        {\n            default:\n                i--;\n                i++;\n                break;\n        }\n    }\n    public native void nativeMethod();\n    public void methodWithLiterals()\n    {\n        final String ref = \"<a href=\\\"\"; \n        final String refCase = \"<A hReF=\\\"\";\n    }\n    public void methodWithLabels() {\n        label:\n        {\n            anotherLabel: \n            do {\n                continue anotherLabel;\n            } while (false);\n            break label; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputIllegalTokenTextTextBlocks.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        15,
        19,
        29,
        34,
        42
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.illegaltokentext;\npublic class InputIllegalTokenTextTextBlocks {\n    public void methodWithLiterals() {\n        final String ref = \"<a href=\\\"\"; \n        final String refCase1 = \"<A hReF=\\\"\";\n        final String ref2 = \"\"\"\n                <a href=\\\"\"\"\"; \n        final String refCase2 = \"\"\"\n                <A hReF=\\\"\"\"\";\n        String escape = \"\"\"\n                <html>\\u000D\\u000A\\n\n                    <body>\\u000D\\u000A\\n\n                        <p>Hello, world</p>\\u000D\\u000A\\n\n                    </body>\\u000D\\u000A\\n\n                </html>\\u000D\\u000A\n                \"\"\"; \n        String testMoreEscapes = \"\"\"\n                fun with a href\\n\n                whitespace\\t\\r\n                and other escapes \\\"\"\"\n                \"\"\"; \n        String evenMoreEscapes = \"\"\"\n                \\b \\f \\\\ \\0 \\1 \\2 \\r \\r\\n \\\\r\\\\n \\\\''\n                \\\\11 \\\\57 \\n\\\\n\\n\\\\\\n\\n \\\\ \"\"a \"a\n                \\\\uffffa href \\\\' \\\\\\' \\'\n                \"\"\";\n        String concat = \"\"\"\n                The quick brown fox\"\"\" + \"  \\n\" + \"\"\"\n                jumps over the lazy dog a href \n                \"\"\";\n    }\n}"
    },
    {
      "description": "Auto test from InputIllegalTokenTextTextBlocksQuotes.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        15,
        16,
        19,
        21,
        29,
        34,
        42
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.illegaltokentext;\npublic class InputIllegalTokenTextTextBlocksQuotes {\n    public void methodWithLiterals() {\n        final String ref = \"<a href=\\\"\"; \n        final String refCase1 = \"<A hReF=\\\"\"; \n        final String ref2 = \"\"\"\n                <a href=\\\"\"\"\"; \n        final String refCase2 = \"\"\"\n                <A hReF=\\\"\"\"\"; \n        String escape = \"\"\"\n                <html>\\u000D\\u000A\\n\n                    <body>\\u000D\\u000A\\n\n                        <p>Hello, world</p>\\u000D\\u000A\\n\n                    </body>\\u000D\\u000A\\n\n                </html>\\u000D\\u000A\n                \"\"\"; \n        String testMoreEscapes = \"\"\"\n                fun with\\n\n                whitespace\\t\\r\n                and other escapes \\\"\"\"\n                \"\"\"; \n        String evenMoreEscapes = \"\"\"\n                \\b \\f \\\\ \\0 \\1 \\2 \\r \\r\\n \\\\r\\\\n \\\\''\n                \\\\11 \\\\57 \\n\\\\n\\n\\\\\\n\\n \\\\ \"\"a \"a\n                \\\\uffff \\\\' \\\\\\' \\'\n                \"\"\";\n        String concat = \"\"\"\n                The quick brown fox\"\"\" + \"  \\n\" + \"\"\"\n                jumps over the lazy dog \n                \"\"\";\n    }\n}"
    }
  ]
}