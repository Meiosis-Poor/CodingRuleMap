{
  "name": "NoEnumTrailingComma",
  "language": "java",
  "description": "<div>\n  Checks that enum definition does not contain a trailing comma.\n  Rationale: JLS allows trailing commas in arrays and enumerations, but does not allow\n  them in other locations. To unify the coding style, the use of trailing commas should\n  be prohibited.\n </div>\n <pre>\n enum Foo1 {\n   FOO,\n   BAR;\n }\n </pre>\n\n <p>\n  The check demands that there should not be any comma after last constant in\n  enum definition.\n </p>\n <pre>\n enum Foo1 {\n   FOO,\n   BAR, // violation\n }\n </pre>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 31,
  "branches": 1,
  "apis": 12,
  "test": [
    {
      "description": "Auto test from InputNoEnumTrailingCommaOne.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        22,
        27,
        33,
        35,
        37,
        51,
        57,
        75
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.noenumtrailingcomma;\npublic class InputNoEnumTrailingCommaOne {\n    enum Foo1 {\n        FOO,\n        BAR;\n    }\n    enum Foo2 {\n        FOO,\n        BAR\n    }\n    enum Foo3 {\n        FOO,\n        BAR, \n    }\n    enum Foo4 {\n        FOO,\n        BAR, \n        ;\n    }\n    enum Foo5 {\n        FOO,\n        BAR,; \n    }\n    enum Foo6 { FOO, BAR,; } \n    enum Foo7 { FOO, BAR, } \n    enum Foo8 {\n        FOO,\n        BAR\n        ;\n    }\n    enum Foo9 { FOO, BAR; }\n    enum Foo10 { FOO, BAR }\n    enum Foo11 {}\n    enum Foo12 { FOO, } \n    enum Foo13 { FOO }\n    enum Foo14 {\n        FOO, \n    }\n    enum Foo15 {\n        FOO\n    }\n    enum Foo16 {\n    }\n    enum Foo17 { FOO; }\n    enum Foo18 {\n        FOO;\n    }\n    enum Foo19 {\n        FOO\n        , \n    }\n    enum Foo20 {\n        FOO\n        ;\n    }\n    public enum Foo21\n    {\n        FIRST_CONSTANT,\n        SECOND_CONSTANT;\n        public void someMethod() {\n        }\n    }\n    enum Foo22 {\n        A,B()\n    }\n}"
    },
    {
      "description": "Auto test from InputNoEnumTrailingCommaThree.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        12,
        32,
        76,
        82,
        85
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.noenumtrailingcomma;\npublic class InputNoEnumTrailingCommaThree {\n    public enum Foo40 {\n        ONE_ONE(1,1),\n        ONE_TWO(1,2),; \n        int major, minor;\n        Foo40(int major, int minor) {\n            this.major = major;\n            this.minor = minor;\n        }\n    }\n    public enum Foo41 {\n        ONE_ONE (1, 1) {\n            @Override\n            public void someFunction() {\n            }\n        },\n        ONE_TWO (1, 2) {\n            @Override\n            public void someFunction(){\n            }\n        },; \n        int major, minor;\n        Foo41 (int major, int minor) {\n            this.major = major;\n            this.minor = minor;\n        }\n        public void someFunction(){\n            major = 1;\n        }\n    }\n    public enum Foo42 {\n        ONE_ONE (1, 1) {\n            @Override\n            public void someFunction() {\n            }\n        },\n        ONE_TWO (1, 2) {\n            @Override\n            public void someFunction(){\n            }\n        };\n        int major, minor;\n        Foo42 (int major, int minor) {\n            this.major = major;\n            this.minor = minor;\n        }\n        public void someFunction(){\n            major = 1;\n        }\n    }\n    enum Foo43 {\n        A,B(){ public String toString() { return \"\";}};\n        interface SomeInterface {}\n    }\n    enum Foo44 {\n        A,B(){ public String toString() { return \"\";}},;\n        interface SomeInterface {}\n    }\n    enum Foo45 {\n        , \n    }\n    enum Foo46 {\n        ,; \n    }\n}"
    },
    {
      "description": "Auto test from InputNoEnumTrailingCommaTwo.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        19,
        24,
        28,
        44,
        48,
        52,
        59,
        66,
        83
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.noenumtrailingcomma;\npublic class InputNoEnumTrailingCommaTwo {\n    enum Foo23 {\n        A,B{}\n    }\n    enum Foo24 {\n        A,B(){ public String toString() { return \"\";}}\n    }\n    enum Foo25 {\n        A,B(){ public String toString() { return \"\";}},\n    }\n    enum Foo26 {\n        A,B(), \n    }\n    enum Foo27 {\n        A,B{}, \n    }\n    enum Foo28 {\n        A,B();\n    }\n    enum Foo29 {\n        A,B{};\n    }\n    enum Foo30 {\n        A,B(){ public String toString() { return \"\";}};\n    }\n    enum Foo31 {\n        A,B(),; \n    }\n    enum Foo32 {\n        A,B{},; \n    }\n    enum Foo33 {\n        A,B(){ public String toString() { return \"\";}},;\n    }\n    enum Foo34 {\n        A, B, C;\n        enum NestedFoo1 {\n            First, Second, Third, \n        }\n    }\n    enum Foo35 {\n        A, B, C;\n        enum NestedFoo1 {\n            First, Second, Third,; \n        }\n    }\n    enum Foo36 {\n        A, B, C;\n        enum NestedFoo1 {\n            First, Second, Third;\n        }\n    }\n    enum Foo37 {\n        A, B;\n        Foo37() {}\n    }\n    enum Foo38 {\n        A, B,; \n        Foo38() {};\n    }\n    public enum Foo39 {\n        ONE_ONE(1,1),\n        ONE_TWO(1,2);\n        int major, minor;\n        Foo39(int major, int minor) {\n            this.major = major;\n            this.minor = minor;\n        }\n    }\n}"
    }
  ]
}