{
  "name": "ModifiedControlVariable",
  "language": "java",
  "description": "<div>\n Checks that for loop control variables are not modified\n inside the for block. An example is:\n </div>\n <pre>\n for (int i = 0; i &lt; 1; i++) {\n   i++; // violation\n }\n </pre>\n\n <p>\n Rationale: If the control variable is modified inside the loop\n body, the program flow becomes more difficult to follow.\n See <a href=\"https://docs.oracle.com/javase/specs/jls/se11/html/jls-14.html#jls-14.14\">\n FOR statement</a> specification for more details.\n </p>\n\n <p>\n Such loop would be suppressed:\n </p>\n <pre>\n for (int i = 0; i &lt; 10;) {\n   i++;\n }\n </pre>\n\n <p>\n NOTE:The check works with only primitive type variables.\n The check will not work for arrays used as control variable.An example is\n </p>\n <pre>\n for (int a[]={0};a[0] &lt; 10;a[0]++) {\n  a[0]++;   // it will skip this violation\n }\n </pre>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 232,
  "branches": 63,
  "apis": 45,
  "test": [
    {
      "description": "Auto test from InputModifiedControlVariableBothForLoops.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        14,
        16,
        19,
        22,
        23,
        51,
        58,
        69,
        70,
        80
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.modifiedcontrolvariable;\nimport java.io.Serializable;\nclass InputModifiedControlVariableBothForLoops\n{\n    int k;\n    void method1()\n    {\n        for (int i = 0; i < 1; i++) {\n            i++; \n        }\n        for (int i = 0; i < 1; i++) {\n            i = i + 1; \n        }\n        for (int i = 0; i < 1; i++) {\n            for (int j = 0; j < 1; i++) { \n                --i; \n            }\n        }\n        for (int i = 0, j = 0; i < 1; i++) {\n            j++;\n        }\n        for (int i = 0; i < 1; i++) {\n        }\n        for (int i = 0; i < 1; i++) {\n            int x = i;\n        }\n        for (int i = 0; i < 1; i++) {\n            Serializable s = new Serializable() {\n                int i = 3;\n                void a() {\n                    System.identityHashCode(i++);\n                }\n            };\n        }\n        for (int k = 0; k < 1; k++) {\n            this.k++;\n        }\n        String[] sa = {\"a\", \"b\"};\n        for(String s:sa) {}\n        for(String s:sa) {\n            s = \"new string\"; \n        }\n        for(int i=0;i < 10;) {\n            i++;\n        }\n        for (int i = 0, l = 0,m=0; l < 10; i++,m=m+2) {\n            l++;\n            m++; \n        }\n        for (int i = 0; i < 10; ) {\n            i = 11;\n        }\n        int w=0;\n        for (int i=0;i<10; java.sql.Date.valueOf(\"\"),this.i++,w++) {\n            i++;\n            w++;\n        }\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i = i + 3; \n            k = k + 4; \n        }\n        for (int i = 0,j = 0 ; i <10; i++) {\n            j++;\n        }\n        for (String v : sa) {\n            new NestedClass() {\n                public void method() {}\n            };\n            v = \"bad\"; \n        }\n        for (int i = 0; i < 10; i += 1) {\n            for (i = 7; i < 10; i += 1) {}\n        }\n        for (String name: new String[] {}) {\n        }\n        for (i = 0; i < 10; i++) {\n            String name;\n            name = \"\";\n        }\n        for (int EXPR = 0; EXPR < 1; EXPR++) {\n            for (int j = 0; j < 1; i++) {\n                i++;\n            }\n        }\n    }\n    private int i;\n}\n@SuppressWarnings(value = \"this previously caused NullPointerException\")\nclass VariableDeclaredBeforeTheFirstBlockBegins {\n    void foo(String[] requests) {\n        for (String eventDataType : requests) {\n            @SuppressWarnings(value = \"this previously caused NullPointerException\")\n            String eventData;\n        }\n    }\n}\nabstract class NestedClass {\n    public abstract void method();\n}"
    },
    {
      "description": "Auto test from InputModifiedControlVariableEnhancedForLoopVariable2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        20
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.modifiedcontrolvariable;\npublic class InputModifiedControlVariableEnhancedForLoopVariable2 {\n    void m(int[] a) {\n        for (int i = 0, j = 1; ; i++, j++) {\n            for (int k : a) {\n            }\n        }\n    }\n    void m2(int[] a) {\n        for (int i = 0, j = 1; ; i++, j++) {\n            for (int k : a) {\n                i++; \n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputModifiedControlVariableEnhancedForLoopVariable3.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.modifiedcontrolvariable;\npublic class InputModifiedControlVariableEnhancedForLoopVariable3 {\n    public void method2()\n    {\n        final String[] lines = {\"line1\", \"line2\", \"line3\"};\n        for (String line: lines) {\n            line = line.trim(); \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputModifiedControlVariableTestVariousAssignments.java",
      "expected-problems": 22,
      "expected-linenumbers": [
        13,
        14,
        20,
        21,
        27,
        28,
        34,
        35,
        41,
        42,
        47,
        48,
        54,
        55,
        61,
        62,
        68,
        69,
        75,
        76,
        82,
        83
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.modifiedcontrolvariable;\npublic class InputModifiedControlVariableTestVariousAssignments {\n    void method() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i -= 3; \n            k -= 4; \n        }\n    }\n    void method1() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i *= 3; \n            k *= 4; \n        }\n    }\n    void method2() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i /= 3; \n            k /= 4; \n        }\n    }\n    void method3() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i %= 3; \n            k %= 4; \n        }\n    }\n    void method4() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i >>= 3; \n            k >>= 4; \n        }\n    }\n    void method5() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i >>>= 3; \n            k >>>= 4; \n        }\n    }\n    void method6() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i <<= 3; \n            k <<= 4; \n        }\n    }\n    void method7() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i &= 3; \n            k &= 4; \n        }\n    }\n    void method8() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i ^= 3; \n            k ^= 4; \n        }\n    }\n    void method9() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i |= 3; \n            k |= 4; \n        }\n    }\n    void method10() {\n        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {\n            i--; \n            k--; \n        }\n    }\n}"
    }
  ]
}