{
  "name": "NoFinalizer",
  "language": "java",
  "description": "<div>\n Checks that there is no method {@code finalize} with zero parameters.\n </div>\n\n <p>\n See\n <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#finalize()\">\n Object.finalize()</a>\n </p>\n\n <p>\n Rationale: Finalizers are unpredictable, often dangerous, and generally unnecessary.\n Their use can cause erratic behavior, poor performance, and portability problems.\n For more information for the finalize method and its issues, see Effective Java:\n Programming Language Guide Third Edition by Joshua Bloch, &#167;8.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 34,
  "branches": 2,
  "apis": 9,
  "test": [
    {
      "description": "Auto test from InputNoFinalizerFallThrough.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        421
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.nofinalizer;\npublic class InputNoFinalizerFallThrough\n{\n    void method(int i, int j, boolean cond) {\n        while (true) {\n            switch (i) {\n            case 0:\n            case 1:\n                i++;\n                break;\n            case 2:\n                i++;\n            case 3: \n                i++;\n                break;\n            case 4:\n                return;\n            case 5:\n                throw new RuntimeException(\"\");\n            case 6:\n                continue;\n            case 7: {\n                break;\n            }\n            case 8: {\n                return;\n            }\n            case 9: {\n                throw new RuntimeException(\"\");\n            }\n            case 10: {\n                continue;\n            }\n            case 11: {\n                i++;\n            }\n            case 12: \n                if (false)\n                    break;\n                else\n                    break;\n            case 13:\n                if (true) {\n                    return;\n                }\n            case 14:\n                if (true) {\n                    return;\n                } else {\n                }\n            case 15: \n                do {\n                    System.identityHashCode(\"something\");\n                    return;\n                } while(true);\n            case 16:\n                for (int j1 = 0; j1 < 10; j1++) {\n                    String.valueOf(\"something\");\n                    return;\n                }\n            case 17:\n                while (true)\n                    throw new RuntimeException(\"\");\n            case 18:\n                while(cond) {\n                    break;\n                }\n            case 19: \n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                    break;\n                } catch (Error e) {\n                    return;\n                }\n            case 20:\n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                } catch (Error e) {\n                    return;\n                }\n            case 21: \n                try {\n                    i++;\n                } catch (RuntimeException e) {\n                    i--;\n                } finally {\n                    break;\n                }\n            case 22:\n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                    i--;\n                    break;\n                } finally {\n                    i++;\n                }\n            case 23:\n                switch (j) {\n                case 1:\n                    continue;\n                case 2:\n                    return;\n                default:\n                    return;\n                }\n            case 24:\n                switch (j) {\n                case 1:\n                    continue;\n                case 2:\n                    break;\n                default:\n                    return;\n                }\n            default: \n                i++;\n            }\n        }\n    }\n    void methodFallThru(int i, int j, boolean cond) {\n      while (true) {\n          switch (i) {\n          case -1: \n          case 0:\n          case 1:\n              i++;\n              break;\n          case 2:\n              i++;\n          case 3:\n              i++;\n              break;\n          case 4:\n              return;\n          case 5:\n              throw new RuntimeException(\"\");\n          case 6:\n              continue;\n          case 7: {\n              break;\n          }\n          case 8: {\n              return;\n          }\n          case 9: {\n              throw new RuntimeException(\"\");\n          }\n          case 10: {\n              continue;\n          }\n          case 11: {\n              i++;\n          }\n          case 12:\n              if (false)\n                  break;\n              else\n                  break;\n          case 13:\n              if (true) {\n                  return;\n              }\n          case 14:\n              if (true) {\n                  return;\n              } else {\n              }\n          case 15:\n              do {\n                  System.identityHashCode(\"something\");\n                  return;\n              } while(true);\n          case 16:\n              for (int j1 = 0; j1 < 10; j1++) {\n                  String.valueOf(\"something\");\n                  return;\n              }\n          case 17:\n              while (cond)\n                  throw new RuntimeException(\"\");\n          case 18:\n              while(cond) {\n                  break;\n              }\n          case 19:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n                  break;\n              } catch (Error e) {\n                  return;\n              }\n          case 20:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n              } catch (Error e) {\n                  return;\n              }\n          case 21:\n              try {\n                  i++;\n              } catch (RuntimeException e) {\n                  i--;\n              } finally {\n                  break;\n              }\n          case 22:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n                  i--;\n                  break;\n              } finally {\n                  i++;\n              }\n          case 23:\n              switch (j) {\n              case 1:\n                  continue;\n              case 2:\n                  return;\n              default:\n                  return;\n              }\n          case 24:\n              i++;\n              i++;\n              break;\n          case 26:\n              switch (j) {\n              case 1:\n                  continue;\n              case 2:\n                  break;\n              default:\n                  return;\n              }\n          default:\n              i++;\n         }\n      }\n   }\n   void methodFallThruCC(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2: {\n              i++;\n          }\n          case 3:\n              i++;\n                break;\n          case 5:\n              i++;\n          }\n      }\n   }\n   void methodFallThruC(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruC2(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruCOtherWords(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruCCustomWords(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruLastCaseGroup(int i, int j, boolean cond) {\n       while (true) {\n           switch (i){\n           case 0:\n               i++; \n           }\n           switch (i){\n           case 0:\n               i++;\n           }\n           switch (i){\n           case 0:\n               i++;\n       }\n    }\n    void method1472228(int i) {\n        switch(i) {\n        case 2:\n            break;\n        default:\n        }\n    }\n    void nestedSwitches() {\n        switch (hashCode()) {\n            case 1:\n                switch (hashCode()) { \n                    case 1:\n                }\n            default: \n        }\n    }\n    void nextedSwitches2() {\n        switch(hashCode()) {\n        case 1:\n            switch(hashCode()){}\n        case 2:\n            System.lineSeparator();\n            break;\n        }\n    }\n    void ifWithoutBreak() {\n        switch(hashCode()) {\n        case 1:\n            if (true) {\n                System.lineSeparator();\n            }\n        case 2:\n            System.lineSeparator();\n            break;\n        }\n    }\n    void noCommentAtTheEnd() {\n        switch(hashCode()) {\n        case 1: System.lineSeparator();\n        case 2:\n            System.lineSeparator();\n            break;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputNoFinalizerHasFinalizer.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        10
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.nofinalizer;\npublic class InputNoFinalizerHasFinalizer\n{\n    public void finalize() \n    {\n        Runnable runnable = new Runnable() {\n            public void run() {\n                reallyFinalize(\"hi\");\n            }\n            private void reallyFinalize(String s)\n            {\n            }\n        };\n        runnable.run();\n    }\n    public void finalize(String x)\n    {\n    }\n}"
    }
  ]
}