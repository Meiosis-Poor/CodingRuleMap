{
  "name": "OneStatementPerLine",
  "language": "java",
  "description": "<div>\n Checks that there is only one statement per line.\n </div>\n\n <p>\n Rationale: It's very difficult to read multiple statements on one line.\n </p>\n\n <p>\n In the Java programming language, statements are the fundamental unit of\n execution. All statements except blocks are terminated by a semicolon.\n Blocks are denoted by open and close curly braces.\n </p>\n\n <p>\n OneStatementPerLineCheck checks the following types of statements:\n variable declaration statements, empty statements, import statements,\n assignment statements, expression statements, increment statements,\n object creation statements, 'for loop' statements, 'break' statements,\n 'continue' statements, 'return' statements, resources statements (optional).\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 136,
  "branches": 26,
  "apis": 24,
  "test": [
    {
      "description": "Auto test from InputOneStatementPerLineBeginTree1.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.onestatementperline; import java.util.Set;\npublic class InputOneStatementPerLineBeginTree1 {\n}"
    },
    {
      "description": "Auto test from InputOneStatementPerLineBeginTreeLastVariableResourcesStatementEnd1.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.onestatementperline;\nimport java.io.*;\npublic class InputOneStatementPerLineBeginTreeLastVariableResourcesStatementEnd1 {\n    public void resourceListExists() throws IOException {\n        try (FileInputStream f1 = new FileInputStream(\"1\"); FileInputStream f2 =\n                new FileInputStream(\"2\")) { \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputOneStatementPerLineMultilineForDeclarations.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        48,
        65,
        73,
        84,
        94
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.onestatementperline;\npublic class InputOneStatementPerLineMultilineForDeclarations {\n    int e = 1, f = 2,\n        g = 5;\n    int h = 1,\n        i = 2,\n        j = 5;\n    int k = 1,\n        l = 2,\n        m = 5\n        ;\n    int o = 1, p = 2,\n        r = 5; int t; \n    int one = 1,\n        three = 5;\n    int two = 2;\n    int var1 = 5,\n        var4 = 5; int var2 = 6,\n        var3 = 5; \n    int var6 = 5; int var7 = 6,\n        var8 = 5; \n    private void foo() {\n        toString(\n        );toString(\n        ); \n    }\n    int var9 = 1,\n        var10 = 5\n            ; int var11 = 2; \n    private void foo2() {\n        for (int n = 0,\n             k = 1;\n             n < 5; n++,\n                 k--) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputOneStatementPerLineMultilineInLoopsAndTryWithResources.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        52,
        85,
        97
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.onestatementperline;\nimport java.io.StringReader;\npublic class InputOneStatementPerLineMultilineInLoopsAndTryWithResources {\n    int var1 = 1,var2 = 2;\n    private void foo3() {\n        for(int n = 0,\n            k = 1\n            ; n<5\n            ;\n            n++, k--) {}\n    }\n    private void foo4() {\n        for(int n = 0,\n            k = 1\n            ; n<5\n            ; ) { int a = 5,\n        b = 2;}\n    }\n    private void foo5() {\n        for(int n = 0,\n            k = 1\n            ; n<5\n            ;\n            n++, k--) { var1++; var2++; } \n    }\n    private void issue2211pass() {\n        try(\n                AutoCloseable i = new java.io.StringReader(\"\");\n                AutoCloseable k = new java.io.StringReader(\"\");\n        ) {\n        } catch (Exception e1) {\n        }\n    }\n    private void issue2211pass2() {\n        try( AutoCloseable i = new java.io.StringReader(\"\");\n            AutoCloseable k = new java.io.StringReader(\"\");) {\n        } catch (Exception e1) {\n        }\n    }\n  private void issue2211fail() {\n    try(\n  AutoCloseable i=new java.io.PipedReader();AutoCloseable k=new java.io.PipedReader();\n    ) {\n    } catch (Exception e1) {\n    }\n  }\n  private void issue2211fail2() {\n    try(AutoCloseable i=new StringReader(\"\");AutoCloseable k=new StringReader(\"\");) {\n    } catch (Exception e1) {\n    }\n  }\n}"
    },
    {
      "description": "Auto test from InputOneStatementPerLineSingleLineInLoops.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        26,
        48,
        60,
        82,
        85
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.onestatementperline;\npublic class InputOneStatementPerLineSingleLineInLoops {\n    private int one = 0;\n    private int two = 0;\n    public void doIllegal2() {\n        one = 1\n        ; two = 2; \n    }\n    public void doStringBuffer() {\n        StringBuffer sb = new StringBuffer();\n        sb.append(\"test \");\n        sb.append(\"test2 \").append(\"test3 \");\n        appendToSpringBuffer(sb, \"test4\");\n    }\n    private void appendToSpringBuffer(StringBuffer sb, String text) {\n        sb.append(text);\n    }\n    int a; int b; \n    int c;\n    int d;\n    int e = 1; int f = 2; \n    int g = 1;\n    int h = 2;\n    private void foo() {\n        int var1 = 1;\n        int var2 = 2;\n        var1++; var2++; \n        Object obj1 = new Object(); Object obj2 = new Object();\n    }\n}"
    },
    {
      "description": "Auto test from InputOneStatementPerLineSingleLineSmallTalkStyle.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        8,
        87
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.onestatementperline;\nimport java.io.EOFException; import java.io.BufferedReader;\npublic class InputOneStatementPerLineSingleLineSmallTalkStyle {\n  class SmallTalkStyle {\n    SmallTalkStyle doSomething1() {\n      return this;\n    }\n    SmallTalkStyle doSomething2() {\n      return this;\n    }\n    SmallTalkStyle doSomething3() {\n      return this;\n    }\n  }\n  private int one = 0;\n  private int two = 0;\n  public void doLegal() {\n    one = 1;\n    two = 2;\n  }\n  public void doLegalComment() {\n    one = 1;\n    two = 2;\n  }\n  public void doLegalString() {\n    one = 1;\n    two = 2;\n    System.identityHashCode(\"one = 1; two = 2\");\n  }\n  public void doLegalForLoop() {\n    for (int i = 0; i < 20; i++) {\n      one = i;\n    }\n  }\n  public void doIllegal() {\n    one = 1; two = 2; \n  }\n  public void doIllegalSmallTalk() {\n    SmallTalkStyle smalltalker = new SmallTalkStyle();\n    smalltalker.doSomething1().doSomething2().doSomething3();\n  }\n  public void doIllegalSmallTalk2() {\n    SmallTalkStyle smalltalker = new SmallTalkStyle();\n    smalltalker.doSomething1()\n        .doSomething2()\n        .doSomething3();\n  }\n}"
    },
    {
      "description": "Auto test from InputOneStatementPerLineTryWithResources.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        31,
        36,
        43,
        48
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.onestatementperline;\nimport java.io.IOException;\nimport java.io.PipedOutputStream;\nimport java.io.OutputStream;\npublic class InputOneStatementPerLineTryWithResources {\n    void method() throws IOException {\n        OutputStream s1 = new PipedOutputStream();\n        OutputStream s2 = new PipedOutputStream();\n        try (s1; s2; OutputStream s3 = new PipedOutputStream();) {\n        }\n        try (s1; OutputStream s4 = new PipedOutputStream(); s2;) {\n        }\n        try (s1; s2; OutputStream s5 = new PipedOutputStream()) {\n        }\n        try (s1; OutputStream s6 = new PipedOutputStream(); s2) {\n        }\n        try (\nOutputStream s7 = new PipedOutputStream();OutputStream s8 = new PipedOutputStream();\n           s2;\n        ) {}\n        try (\nOutputStream s9=new PipedOutputStream();s2;OutputStream s10 = new PipedOutputStream())\n        {}\n        try (s1; OutputStream s11 = new PipedOutputStream();\n             s2;) {\n        }\n        try (OutputStream\n             s12 = new PipedOutputStream();s1;OutputStream s3 = new PipedOutputStream()\n             ;s2;) {\n        }\n        try (OutputStream\n             s12 = new PipedOutputStream();s1;OutputStream s3\n                = new PipedOutputStream()) {}\n        try (s1; s2; OutputStream stream3 =\n             new PipedOutputStream()) {}\n        try (OutputStream s10 = new PipedOutputStream();\n             OutputStream s11 = new PipedOutputStream(); s2;) {\n        }\n    }\n    void testNestedInLambda() {\n        Runnable r = () -> {\n            try (OutputStream s1 = new PipedOutputStream();\n                 OutputStream s2 = new PipedOutputStream();) {\n            }\n            catch (IOException e) {\n            }\n        };\n    }\n}"
    }
  ]
}