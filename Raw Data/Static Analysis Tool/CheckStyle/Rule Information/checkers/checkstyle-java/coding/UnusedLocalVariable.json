{
  "name": "UnusedLocalVariable",
  "language": "java",
  "description": "<div>\n Checks that a local variable is declared and/or assigned, but not used.\n Doesn't support\n <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-14.html#jls-14.30\">\n pattern variables yet</a>.\n Doesn't check\n <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-4.html#jls-4.12.3\">\n array components</a> as array\n components are classified as different kind of variables by\n <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/index.html\"></a>.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 542,
  "branches": 75,
  "apis": 94,
  "test": [
    {
      "description": "Auto test from InputUnusedLocalVariable.java",
      "expected-problems": 13,
      "expected-linenumbers": [
        26,
        27,
        30,
        32,
        33,
        49,
        53,
        64,
        66,
        70,
        80,
        83,
        90
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\nimport java.util.function.Predicate;\npublic class InputUnusedLocalVariable {\n    int sameName = 20;\n    static int a = 12;\n    static int b = 12;\n    String s;\n    Obj obj = new Obj() {\n        int a = 12;\n        int b = 12;\n    };\n    private void sameName(int unusedParameter) {\n        int sameName = 10; \n        int b = 12; \n        b = 23;\n        this.sameName /= 2;\n        int testInLambdas = 0; \n        testInLambdas = 12;\n        int coding = 0; \n        int InputUnusedLocalVariable = 1; \n        com.puppycrawl.tools.checkstyle.checks\n                .coding.unusedlocalvariable\n                .InputUnusedLocalVariable.testInLambdas(a);\n    }\n    public void testCallingMethods() {\n        int var = 21;\n        sameName(var);\n        var = sameName;\n    }\n    public static void testInLambdas(int q) {\n        int test = 21;\n        int isInOuterScope = 32;\n        Predicate<Integer> foo = integer -> {\n            int b; \n            int a = integer;\n            b = integer;\n            boolean ans = a > 12;\n            int c = 21; \n            c = -isInOuterScope;\n            return ans;\n        };\n        foo.test(test);\n    }\n    public void testMultipleIdentifiers() {\n        int[] arr = {1};\n        int a = 21;\n        arr[0] = a;\n        Class<Integer> b = int.class; \n        @SuppressWarnings(\"unused\")\n        int c = 41; \n    }\n    public void testChainedCalls() throws InterruptedException {\n        Obj p; \n        Obj q = null;\n        p = q.foo().p;\n        if (s instanceof String) {\n        }\n        Boolean r = false;\n        while (r.booleanValue() != true) {\n        }\n        int a = 13, b = 21;\n        q.getClass().wait(a, b);\n        int f = 12; \n        Predicate<String> obj = InputUnusedLocalVariable::f;\n        obj.test(\"test\");\n        int foo = 12; \n        foo(q);\n    }\n    class SubClass extends InputUnusedLocalVariable {\n        void testSuperKeyword() {\n            int a = 12; \n            a = super.a;\n        }\n    }\n    class Obj {\n        Obj p;\n        Obj foo() {\n            return new Obj();\n        }\n    }\n    Object foo(Object a) {\n        return a;\n    }\n    public static boolean f(String a) {\n        class k { \n            int a = 12;\n        }\n        return true;\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariable2.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        16,
        18,
        29,
        30,
        38,
        39,
        40,
        60,
        75
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\nimport java.util.ArrayList;\nimport java.util.function.Predicate;\npublic class InputUnusedLocalVariable2 {\n    int a = 12;\n    public void testStatementsWithoutSlistToken() {\n        int k = 1;\n        for (int i = 0; k < 1; i++) \n            i++;\n        for (int j = 0; ; ) { \n            j++;\n            break;\n        }\n        ArrayList<String> obj = new ArrayList<>();\n        for (String s : obj) {\n            System.out.println(s);\n        }\n    }\n    public void testChainedCallsWithNewKeyword() {\n        Object a; \n        Object b; \n        a = testDifferentAssignments(new c.b(new d.a()));\n        a = testDifferentAssignments(new b().new a());\n        b = testDifferentAssignments(new a.d());\n    }\n    static class Test implements a {\n        public void testMethodReference() {\n            int b = 12; \n            int Test = 12; \n            a obj = Test::new; \n            Test ab = new Test();\n            Predicate<String> a = ab::b;\n            a.test(\"abc\");\n        }\n        private boolean b(String s) {\n            return true;\n        }\n        public static boolean ba(String s) {\n            return true;\n        }\n        @Override\n        public void method() {\n        }\n    }\n    public Object testDifferentAssignments(Object obj) {\n        int a = 12; \n        a = 13;\n        int b = 13;\n        b /= 12;\n        int c = 1;\n        c -= this.a;\n        int h = 1;\n        h <<= 12;\n        return null;\n    }\n    public void testDoWhileLoops(int s) {\n        do {\n            int a = 12;\n            do {\n                int b = 1; \n                b = a;\n            }\n            while (s > 1);\n        }\n        while (s > 0);\n    }\n    interface a {\n        void method();\n        class d {\n        }\n    }\n    static class c {\n        static class b {\n            public b(Object a) {\n            }\n        }\n    }\n    static class d {\n        public static class a {\n        }\n    }\n    class b {\n        class a {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariable3.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        20
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariable3 {\n    class Parent {\n        protected int a = 0;\n        public Parent(Child d) {\n            a = 1;\n        }\n    }\n    class Child extends InputUnusedLocalVariable3.Parent {\n        protected int b = 0;\n        public Child(Child d) {\n            InputUnusedLocalVariable3.this.super(d);\n            int a = 0; \n            System.out.println(super.a);\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableAnonInnerClasses.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        13,
        14,
        16,
        21,
        30,
        45,
        46,
        58,
        61
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableAnonInnerClasses {\n    static int a = 12, b = 13, c = 14;\n    public void testAnonymousInnerClass() {\n        int a = 12; \n        int b = 12; \n        int k = 14;\n        Test obj = new Test() { \n            int a = 2;\n            private void testSameName(int s) {\n                s = a + InputUnusedLocalVariable.a;\n                Test obj = new Test() { \n                    int b = 1;\n                    private void testSameNameNested(int s) {\n                        s = b + InputUnusedLocalVariable.b + InputUnusedLocalVariable.a + a + k;\n                    }\n                };\n            }\n        };\n        Test obj2; \n        obj2 = new Test() {\n            int a = 1;\n            int b = 1;\n            int c = 0;\n            private void testSameName(int s) {\n                s = a + b + this.a + this.b + InputUnusedLocalVariableAnonInnerClasses.a\n                        + InputUnusedLocalVariableAnonInnerClasses.b;\n            }\n        };\n    }\n    {\n        int m = 12; \n        int l = 2; \n        d obj = new d() {\n            void method() {\n                m += l;\n            }\n        };\n        obj.getClass();\n    }\n    static {\n        int a = 1;\n        int x = 2;\n        int h = 3; \n        m.Test obj = new m().new Test() {\n            void method() {\n                boolean v = \n                        a == x == (h == 2);\n            }\n        };\n        obj.getClass();\n    }\n    class Test {\n        private int k = 1;\n    }\n    static class m {\n        public int x = 1;\n        class Test {\n            public int h = 12;\n        }\n    }\n    class d {\n        protected int m = 11;\n        int l = 14;\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableAnonInnerClasses2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableAnonInnerClasses2 {\n    static class m {\n        static class h {\n            public int a = 12;\n        }\n    }\n    static class j {\n        static void method() {\n            int a = 1000;\n            int s = 13; \n            int q = 14;\n            m.h obj = new m.h() {\n                @Override\n                void method() {\n                    Integer.valueOf(a + s);\n                }\n                m.h obj = new m.h() { \n                    @Override\n                    void method() {\n                        Integer.valueOf(q);\n                    }\n                };\n            };\n            obj.method();\n        }\n        static class m {\n            static class h {\n                int s = 12;\n                void method() {\n                }\n            }\n        }\n    }\n    static class jasper {\n        static class m {\n            static class h {\n                int q = 12;\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableAnonInnerClasses3.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        12,
        19,
        31
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableAnonInnerClasses3 {\n    static class m {\n        void method() {\n            int a = 12; \n        }\n    }\n    static class myClass {\n        static void method() {\n            int a = 12;\n            m obj = new m() { \n                @Override\n                void method() {\n                    Integer.valueOf(a);\n                }\n            };\n        }\n    }\n    static class j {\n        static void method() {\n            int a = 1000;\n            int s = 13; \n            int q = 14;\n            m obj = new m() {\n                @Override\n                void method() {\n                    Integer.valueOf(a + s);\n                }\n                m obj = new m() { \n                    @Override\n                    void method() {\n                        Integer.valueOf(q);\n                    }\n                };\n            };\n            obj.method();\n        }\n        static class m {\n            int s = 12;\n            void method() {\n            }\n        }\n    }\n    static class jasper {\n        static class m {\n            int q = 12;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableDepthOfClasses.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        27,
        48,
        63,
        93
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableDepthOfClasses {\n    int variable = 1;\n    class k {\n        class n {\n        }\n    }\n    class n {\n        int r = 1;\n    }\n    class f {\n        class n {\n        }\n    }\n    void method() {\n        int r = 1; \n        n obj = new n() {\n            void method() {\n                r += 12;\n            }\n        };\n        obj.getClass();\n    }\n    class r {\n        class k {\n            int s = 12;\n        }\n    }\n    static class s {\n        class r {\n            class k {\n                int a = 13;\n                void method() {\n                    int a = 1; \n                    int s = 1;\n                    r.k obj = new r().new k() {\n                        void method() {\n                            a += s;\n                        }\n                    };\n                    obj.getClass();\n                }\n            }\n        }\n    }\n    class P {\n        void method() {\n            int a = 1; \n            Q obj = new Q() {\n                void method() {\n                    a += 1;\n                }\n            };\n            obj.getClass();\n        }\n    }\n    class Q {\n        int a = 1;\n    }\n    class PR {\n        class P {\n            class Q {\n            }\n        }\n    }\n}\nclass anotherClass {\n    class InputUnusedLocalVariableDepthOfClasses {\n    }\n}\nclass Clazz {\n    void method() {\n        int variable = 1; \n        InputUnusedLocalVariableDepthOfClasses obj = new InputUnusedLocalVariableDepthOfClasses() {\n            void method() {\n                variable += 1;\n            }\n        };\n        obj.getClass();\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableEnum.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        21,
        49,
        76,
        79,
        91
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic enum InputUnusedLocalVariableEnum {\n    CONST_1,\n    CONST_2(new a() {\n    }),\n    CONST_3(new a() {\n    });\n    InputUnusedLocalVariableEnum(Object obj) {\n        int a = 12; \n        a = (int) obj;\n    }\n    InputUnusedLocalVariableEnum() {\n    }\n    public static class nestedClass {\n        int d = 12;\n    }\n    public class innerClass {\n        int k = 1;\n    }\n    public void testTryWithResources(int a) {\n        try (BufferedReader br =\n                     new BufferedReader(new FileReader(\"someFile.txt\"))) {\n            br.readLine();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    static int a = 12;\n    public void testIncrementAndDecrementKinds() {\n        int a = 0; \n        a = ++this.a;\n        a++;\n        a--;\n        int index = 1;\n        int[] arr = {1};\n        arr[--index] = 3;\n        int ind = 0;\n        testTryWithResources(--ind);\n        int k = 1;\n        if (++k > 12) {\n        }\n        int p = 2;\n        if ((++p - --p) > 21) {\n        }\n        int m = 2;\n        int h = ++m;\n        h += 1;\n    }\n    public void testBooleanExpressions() {\n        boolean b = false;\n        if (!b) {\n        }\n        boolean b1 = true;\n        if (b1) {\n        }\n        boolean a; \n        if ((a = true) != false) {\n        }\n        boolean j; \n        if (j = true) {\n        }\n        boolean k = true, l = false;\n        if (k && !l) {\n        }\n    }\n}\nclass a {\n    void method() {\n        int d = 12; \n        InputUnusedLocalVariableEnum.nestedClass obj =\n                new InputUnusedLocalVariableEnum.nestedClass() {\n                    void method() {\n                        d += 12;\n                    }\n                };\n        obj.getClass();\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableGenericAnonInnerClasses.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        12,
        13,
        32,
        33,
        46,
        66,
        68,
        76
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\nimport java.util.function.Function;\npublic class InputUnusedLocalVariableGenericAnonInnerClasses {\n    Function<Integer, Integer> obj = a -> {\n        int l = 12; \n        testClass obj = new testClass() { \n            void method() {\n                l += 1;\n            }\n        };\n        return a;\n    };\n    testClass obj2 = new testClass() {\n        int l = 13; \n        testClass obj2 = new testClass() { \n            void method() {\n                l += 1;\n            }\n        };\n    };\n    testClass obj3 = new testClass() {\n        void method() {\n            int l = 13; \n            testClass obj2 = new testClass() { \n                void method() {\n                    l += 1;\n                }\n            };\n        }\n    };\n}\nclass testClass {\n    int l = 12;\n    void method2() {\n        int s = 12; \n        int j = 13;\n        hoo k = () -> {\n            Integer.valueOf(j);\n            hoo obj2 = () -> {\n                testClass obj3 = new testClass() {\n                    void foo() {\n                        s += 12;\n                    }\n                };\n                obj3.getClass();\n            };\n            obj2.anotherMethod();\n        };\n        k.anotherMethod();\n    }\n    int s = 2;\n    void test() {\n        int variable = 1; \n        int mainVar = 2;\n        int anotherVar = 1; \n        testingGenerics<Integer>.nested obj\n                = new testingGenerics<Integer>().new nested() {\n            void method() {\n                anotherVar += 1;\n            }\n        };\n        obj.getClass();\n        testingGenerics<Integer>.clazz<String>.nested obj2 \n                = new testingGenerics<Integer>().new clazz<String>().new nested() {\n            void method() {\n                variable += 1;\n                Integer.valueOf(mainVar);\n            }\n        };\n    }\n}\nclass testingGenerics<T> {\n    int mainVar = 2;\n    class clazz<T> {\n        class nested {\n            int variable = 1;\n        }\n    }\n    class nested {\n        int anotherVar = 2;\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableLambdaExpression.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        13,
        18,
        28,
        29,
        30,
        32,
        39,
        51,
        64,
        72
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\nimport java.util.function.Supplier;\npublic class InputUnusedLocalVariableLambdaExpression {\n    private final LambdaTest<String> myComponent = LambdaTest.lazy(() -> {\n        String foo = \"\";\n        String hoo = \"\"; \n        new Runnable() {\n            String hoo = \"\";\n            @Override\n            public void run() {\n                String j = hoo; \n                String ja = foo;\n                ja += \"asd\";\n            }\n        };\n        return \"\";\n    });\n    final LambdaTest<String> nestedLambdas = LambdaTest.lazy(() -> {\n        String foo = \"\", hoo = \"\";\n        String hoo2 = \"\"; \n        String hoo3 = \"\"; \n        final LambdaTest<String> myComponent = LambdaTest.lazy(() -> {\n            final LambdaTest<String> myComponent3 = LambdaTest.lazy(() -> {\n                new Runnable() {\n                    String hoo2 = \"\";\n                    @Override\n                    public void run() {\n                        String j = hoo; \n                        String ja = foo;\n                        ja += hoo2;\n                    }\n                };\n                return \"\";\n            });\n            new Runnable() {\n                String hoo3 = \"\";\n                @Override\n                public void run() {\n                    String j = hoo3; \n                    String ja = foo;\n                    ja += \"asd\";\n                }\n            };\n            return \"\";\n        });\n        new Runnable() {\n            String hoo2 = \"\";\n            @Override\n            public void run() {\n                String j = hoo2;\n                String ja = foo; \n                j += hoo2;\n            }\n        };\n        return \"\";\n    });\n    final LambdaTest<String> nestedLambdas2 = LambdaTest.lazy(() -> {\n        String k = \"\"; \n        final LambdaTest<String> nestedLambdas = LambdaTest.lazy(() -> {\n            new LambdaTest<String>() {\n                void foo() {\n                    String j = k;\n                    j += \"asd\";\n                }\n            };\n            return \"\";\n        });\n        return nestedLambdas.toString();\n    });\n}\nclass LambdaTest<T> {\n    String k = \"\";\n    public static <T> LambdaTest<T> lazy(Supplier<T> supplier) {\n        return new LambdaTest<>();\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableLocalClasses.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        13,
        14
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableLocalClasses {\n    int a = 12;\n    void foo() {\n        int a = 12; \n        int ab = 1; \n        class asd {\n            InputUnusedLocalVariableLocalClasses a = new InputUnusedLocalVariableLocalClasses() {\n                void asd() {\n                    System.out.println(a);\n                }\n            };\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableNestedClasses.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        20,
        22,
        23,
        35,
        42,
        66,
        67
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\nimport java.lang.annotation.Annotation;\npublic class InputUnusedLocalVariableNestedClasses {\n    public int V = 1;\n    private int G = 1;\n    protected int S = 1;\n    int Q = 1;\n    class AnotherClass {\n        void method() {\n            int V = 1; \n            int G = 1;\n            int S = 1; \n            int Q = 1; \n            InputUnusedLocalVariableNestedClasses obj\n                    = new InputUnusedLocalVariableNestedClasses() {\n                void method() {\n                    Integer.valueOf(V + G + S + Q);\n                }\n            };\n            obj.getClass();\n        }\n    }\n    void method() {\n        int variable = 1; \n        A.B obj = new A.B() {\n            void method() {\n                variable += 1;\n            }\n        };\n        obj.getClass();\n        int anotherVariable = 2; \n        A.B.innerClass obj2 = new A.B().new innerClass() {\n            void method() {\n                anotherVariable += 1;\n            }\n        };\n        obj2.getClass();\n        InputUnusedLocalVariable obj3\n                = new InputUnusedLocalVariable() { \n        };\n        obj3.getClass();\n    }\n    static class A {\n        static class B {\n            int variable = 1;\n            class innerClass {\n                protected int anotherVariable = 1;\n                public int k = 1;\n                void testInterfaces() {\n                    int s = 12; \n                    int n = 13; \n                    foo obj = new foo() {\n                        @Override\n                        public Class<? extends Annotation> annotationType() {\n                            Integer.valueOf(s);\n                            hoo obj = () -> {\n                                hoo anotherObj = new hoo() {\n                                    @Override\n                                    public void anotherMethod() {\n                                        Integer.valueOf(n);\n                                    }\n                                };\n                                anotherObj.getClass();\n                                String outsideAnonInner = \"n is accessible by \" + hoo.n;\n                                outsideAnonInner.isEmpty();\n                            };\n                            obj.getClass();\n                            return null;\n                        }\n                    };\n                    obj.getClass();\n                }\n            }\n        }\n    }\n}\n@interface foo {\n    int s = 2;\n}\ninterface hoo {\n    int n = 12;\n    void anotherMethod();\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableNestedClasses2.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        28,
        29,
        45,
        56,
        108
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableNestedClasses2 {\n    static class A {\n        static class B {\n            void foo() {\n                class C {\n                    int a = 12;\n                }\n            }\n            class C {\n                int q = 13;\n            }\n        }\n    }\n}\nclass d {\n    void testLocalClasses() {\n        int a = 12;\n        int q = 13; \n        InputUnusedLocalVariableNestedClasses2.A.B.C obj = \n                new InputUnusedLocalVariableNestedClasses2.A.B().new C() {\n            void method() {\n                q += a;\n            }\n        };\n    }\n}\nclass InputUnusedLocalVariableSameNameLen1 {\n    class A {\n        class B {\n            class C {\n                int b = 12;\n                void method() {\n                    int b = 12; \n                    int a = 12;\n                    C obj = new C() {\n                        void method() {\n                            b += a;\n                        }\n                    };\n                    obj.getClass();\n                }\n                void anotherMethod() {\n                    int b = 12; \n                    InputUnusedLocalVariableSameNameLen1.A.B.C obj =\n                            new com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable\n                                    .InputUnusedLocalVariableSameNameLen1()\n                                    .new A().new B().new C() {\n                        void anotherMethod() {\n                            b += 1;\n                        }\n                    };\n                    obj.anotherMethod();\n                }\n            }\n        }\n        void method() {\n            int a = 12; \n            InputUnusedLocalVariable obj\n                    = new com.puppycrawl.tools.checkstyle.checks.coding\n                    .unusedlocalvariable.InputUnusedLocalVariable() {\n                void method() {\n                    a += 12;\n                }\n            };\n            obj.getClass();\n        }\n    }\n    interface Tester {\n        void test();\n    }\n    interface TU<U> {\n        public void foo(U u);\n    }\n    public static <U> void exec(TU<U> lambda, U x) {\n        lambda.foo(x);\n    }\n    void test1() {\n        final Integer N1 = 1;\n        class A {\n            Integer n2 = 20;\n            void test() {\n                final Integer N2 = 2;\n                class B {\n                    void test() {\n                        final Integer N3 = 3;\n                        exec((final Integer x) -> new Tester() {\n                            public void test() {\n                                int s = Integer.valueOf(x + n2 + N1 + N2 + N3);\n                            }\n                        }.test(), 30);\n                    }\n                }\n                new B().test();\n            }\n        }\n        new A().test();\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableNestedClasses3.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        34,
        52,
        91,
        93
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Target;\npublic class InputUnusedLocalVariableNestedClasses3 {\n    void method() {\n        final OuterClass outerClass = new OuterClass();\n        final OuterClass.InnerClass innerClass = outerClass.new InnerClass();\n        System.out.println(innerClass);\n    }\n    class OuterClass {\n        class InnerClass {\n            InnerClass() { }\n        }\n    }\n}\nclass Outer {\n    public class Inner { }\n}\nclass Test {\n    void m() {\n        @A Outer p1 = new @A Outer();\n        @A Outer.@B Inner p2 = p1.new @B Inner();\n    }\n    @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n    @interface A { }\n    @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n    @interface B { }\n}\nclass H006_ComplexConstructors<T> {\n    public <V> H006_ComplexConstructors(T t, V v) { }\n    class Inner3 {\n        Inner3(int x) {\n            H006_ComplexConstructors<Integer> instance =\n                    new <String>H006_ComplexConstructors<Integer>(0, \"\");\n            Object o = instance.new Inner3(5).new <String>InnerInner3(\"hey\");\n        }\n        class InnerInner3 {\n            <D> InnerInner3(D in) { }\n        }\n    }\n}\nclass NullQualifiedNew2 {\n    class Inner {\n        Inner(int i) {}\n    }\n    public static void main(String[] args) {\n        int i = 1;\n        a: try {\n            NullQualifiedNew2 c = null;\n            c.new Inner(i++) {};\n        } catch (NullPointerException e) {\n            break a;\n        }\n        if (i != 1) throw new Error(\"i = \" + i);\n    }\n}\nclass T7090499<E> {\n    static class B<X> { }\n    class A<X> {\n        class X { }\n        class Z<Y> { }\n    }\n    T7090499 t = new T7090499() {\n        void test(Object arg1, B arg2) {\n            boolean b = arg1 instanceof A;\n            Object a = (A) arg1;\n            A a2 = new A() { };\n            a2.new Z() { };\n        }\n    };\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableNestedClasses4.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        11,
        12
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableNestedClasses4 {\n  int a = 12;\n  void foo() {\n    int a = 12; \n    int ab = 12; \n    class asd {\n      Test a = new Test() {\n        void asd() {\n          System.out.println(a);\n        }\n      };\n    }\n  }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableNestedClasses5.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        11,
        12,
        18
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableNestedClasses5 {\n  int a = 12;\n  void foo() {\n    int a = 12; \n    int ab = 12; \n    class abc {\n      Test a = new Test() {\n        void abc() {\n          System.out.println(a);\n          int abc = 10; \n          class def {\n            Test abc = new Test() {\n              void def() {\n                System.out.println(abc);\n              }\n            };\n          }\n        }\n      };\n    }\n  }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableNestedClasses6.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        11,
        12
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableNestedClasses6 {\n  int a = 12;\n  void foo() {\n    int a = 12; \n    int ab = 12; \n    class abc {\n      Test a = new Test() {\n        void abc() {\n          System.out.println(a);\n          int abc = 10;\n          class def {\n            Test ab = new Test() {\n              void def() {\n                System.out.println(abc);\n              }\n            };\n          }\n        }\n      };\n    }\n  }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableNestedClasses7.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        9,
        10,
        15,
        22,
        23,
        27
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableNestedClasses7 {\n  void foo() {\n    int a = 12; \n    int ab = 12; \n    class Ghi {\n      void foo() {\n        int a = 12;\n        int ab = 12; \n        System.out.println(a);\n      }\n    }\n    class Def {\n      void foo() {\n        int a = 12; \n        int ab = 12; \n        class InnerDef {\n          void foo() {\n            int a = 12; \n            int ab = 12;\n            System.out.println(ab);\n          }\n        }\n      }\n    }\n  }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableRecords.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        15,
        24,
        25,
        35
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\nimport java.util.function.Predicate;\npublic record InputUnusedLocalVariableRecords(int a, int b) {\n    public InputUnusedLocalVariableRecords {\n        int ab = 12;\n        ab += a;\n        int var1 = 1; \n        new nested() {\n            void method() {\n                var1 += 12;\n            }\n        };\n    }\n    static Predicate<Integer> obj = a -> {\n        int var1 = 1; \n        nested obj = new nested() { \n            void method() {\n                var1 += 12;\n            }\n        };\n        return a == 12;\n    };\n    public InputUnusedLocalVariableRecords(int a) {\n        this(a, -1);\n        int var2 = 12; \n        inner obj = new inner() {\n            {\n                var2 += 12;\n            }\n        };\n        obj.getClass();\n    }\n    static class nested {\n        int var1 = 12;\n    }\n    class inner {\n        int var2 = 1;\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableSwitchExpression.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableSwitchExpression {\n    public int complexSwitch(int input) {\n        int check = 8;\n        int something = 0;\n        int line = 1;\n        int line2 = 9; \n        return switch (check++) {\n            case 0 -> {\n                int x = 2;\n                line2++;\n                yield switch (x) {\n                    case 1 -> x++;\n                    case 2 -> x--;\n                    default -> 0;\n                };\n            }\n            case 1 -> {\n                int y = input * 2;\n                yield switch (++line) {\n                    case 2, 4 -> y / 2;\n                    case 6 -> y - 1;\n                    default -> -1;\n                };\n            }\n            case 2 -> {\n                int checks = switch (something++) {\n                    case 1 -> input/2;\n                    default -> input;\n                };\n                yield checks;\n            }\n            default -> 0;\n        };\n    }\n}"
    },
    {
      "description": "Auto test from InputUnusedLocalVariableSwitchStatement2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        58
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.unusedlocalvariable;\npublic class InputUnusedLocalVariableSwitchStatement2 {\n    public void testParameters0() {\n        int i = 0;\n        switch (i+1) {\n            default:\n            case 0:\n                System.out.println(\"one: \");\n                break;\n            case 1:\n                System.out.println(\"two: \" );\n                break;\n        }\n    }\n    public void testParameters01() {\n        int i = 0;\n        switch (1+i) {\n            default:\n            case 0:\n                System.out.println(\"one: \");\n                break;\n            case 1:\n                System.out.println(\"two: \" );\n                break;\n        }\n    }\n    public void testParameters() {\n        String[] tests = { \"one\", \"two\" };\n        int i = 0;\n        for (String test : tests) {\n            switch (i+1) {\n                default:\n                case 0:\n                    System.out.println(\"one: \" + test);\n                    break;\n                case 1:\n                    System.out.println(\"two: \" + test);\n                    break;\n            }\n        }\n    }\n    public void testParameters2() {\n        String[] tests = { \"one\", \"two\" };\n        int i = 0;\n        i++;\n        int j = 0; \n        for (String test : tests) {\n            switch (i) {\n                default:\n                case 0:\n                    j++;\n                    System.out.println(\"one: \" + test);\n                    break;\n                case 1:\n                    System.out.println(\"two: \" + test);\n                    break;\n            }\n        }\n    }\n    public void testParameters4() {\n        int i = 2;\n        int j = 1;\n        switch (j) {\n            case 1:\n                System.out.println(\"j is 1\");\n                break;\n            case 2:\n                System.out.println(\"j is 2\");\n                System.out.println(\"i is: \" + i);\n                break;\n            default:\n                System.out.println(\"j is something else\");\n        }\n    }\n    public void testParameters5() {\n        int i = 2;\n        int j = 1;\n        switch (++j) {\n            case 1:\n                System.out.println(\"j is 1\");\n                break;\n            case 2:\n                System.out.println(\"j is 2\");\n                System.out.println(\"i is: \" + ++i);\n                break;\n            default:\n                System.out.println(\"j is something else\");\n        }\n    }\n}"
    }
  ]
}