{
  "name": "FinalLocalVariable",
  "language": "java",
  "description": "<div>\n Checks that local variables that never have their values changed are declared final.\n The check can be configured to also check that unchanged parameters are declared final.\n </div>\n\n <p>\n When configured to check parameters, the check ignores parameters of interface\n methods and abstract methods.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 439,
  "branches": 62,
  "apis": 75,
  "test": [
    {
      "description": "Auto test from InputFinalLocalVariable2Five.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        16,
        31,
        42,
        77
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariable2Five {\n    class class42 {\n        public void foo() {\n            int shouldBeFinal;\n            class Bar {\n                void bar () {\n                    int shouldBeFinal;\n                    final boolean b = false;\n                    if (b) {\n                        shouldBeFinal = 1;\n                    } else {\n                        shouldBeFinal = 2;\n                    }\n                }\n            }\n        }\n    }\n    class class52 {\n        public void test1(){\n            final boolean b = false;\n            int shouldBeFinal;    \n            if(b){\n                if(b){\n                    shouldBeFinal = 1;\n                } else {\n                    shouldBeFinal = 2;\n                }\n            }\n        }\n        public void test2() {\n            final int b = 10;\n            int shouldBeFinal;        \n            switch (b) {\n                case 0:\n                    switch (b) {\n                        case 0:\n                            shouldBeFinal = 1;\n                            break;\n                        default:\n                            shouldBeFinal = 2;\n                            break;\n                    }\n                    break;\n                default:\n                    shouldBeFinal = 3;\n                    break;\n            }\n        }\n        public void test3() {\n            int x;    \n            try {\n                x = 0;\n                try {\n                    x = 0;\n                } catch (final Exception e) {\n                    x = 1;\n                }\n            } catch (final Exception e) {\n                x = 1;\n            }\n        }\n        public void test4() {\n            int shouldBeFinal;\n            class Bar {\n                void bar () {\n                    int shouldBeFinal;\n                    final boolean b = false;\n                    if (b) {\n                        if (b) {\n                            shouldBeFinal = 1;\n                        } else {\n                            shouldBeFinal = 2;\n                        }\n                    } else {\n                        shouldBeFinal = 2;\n                    }\n                }\n            }\n            abstract class Bar2 {\n                abstract void method(String param);\n            }\n        }\n        public void test5() {\n            InputFinalLocalVariableFive table\n                    = new InputFinalLocalVariableFive();\n            new Runnable() {\n                @Override\n                public void run() {\n                    InputFinalLocalVariableFive table = null;\n                    table = new InputFinalLocalVariableFive();\n                }\n            };\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariable2Four.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        14,
        26,
        70
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariable2Four {\n    class Class32 {\n        public void test1() {\n            final boolean b = true;\n            int shouldBeFinal;        \n            if (b) {\n                shouldBeFinal = 1;\n            }\n            else {\n                shouldBeFinal = 2;\n            }\n        }\n        public void test2() {\n            final int b = 10;\n            int shouldBeFinal;        \n            switch (b) {\n                case 0:\n                    shouldBeFinal = 1;\n                    break;\n                default:\n                    shouldBeFinal = 2;\n                    break;\n            }\n        }\n        public void test3() {\n            int x;        \n            try {\n                x = 0;\n            } catch (final Exception e) {\n                x = 1;\n            }\n            int y;        \n            try {\n                y = 0;\n            } finally {\n                y = 1;\n            }\n        }\n        public void test4() {\n            final boolean b = false;\n            int x;        \n            if (b) {\n                x = 1;\n            } else {\n                x = 2;\n            }\n            if(b) {\n                x = 3;\n            }\n        }\n        public void test5() {\n            final boolean b = false;\n            int shouldBeFinal;    \n            if(b) {\n            }\n            if (b) {\n                shouldBeFinal = 1;\n            } else {\n                shouldBeFinal = 2;\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariable2One.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        50
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariable2One {\n    private int m_ClassVariable = 0;\n    static\n    {\n        int i, j = 0;\n        Runnable runnable = new Runnable()\n        {\n            public void run()\n            {\n            }\n        };\n    }\n    public InputFinalLocalVariable2One()\n    {\n        int i = 0;\n        final int j = 2;\n        int z;\n        Object obj = new Object();\n        int k = 0;\n        String x = obj.toString();\n        k++;\n        k = 2;\n        Runnable runnable = new Runnable()\n        {\n            public void run()\n            {\n                int q = 0;\n            }\n        };\n    }\n    public void method(int aArg, final int aFinal, int aArg2)\n    {\n        int z = 0;\n        z++;\n        aArg2++;\n    }\n    public void aMethod()\n    {\n        int i = 0;\n        final int j = 2;\n        int z;\n        Object obj = new Object();\n        int k = 0;\n        String x = obj.toString();\n        k++;\n        final class Inner\n        {\n            public Inner()\n            {\n                int w = 0;\n                Runnable runnable = new Runnable()\n                {\n                    public void run()\n                    {\n                    }\n                };\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariable2Three.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        97
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariable2Three {\n    class class22 {\n        public void method1(){\n            int x;\n            x = 3;\n        }\n        public void method2() {\n            for(int i=0;i<5;i++){\n                int x;\n                x = 3;\n            }\n            int y;\n            for(int i=0;i<5;i++) {\n                y = 3;\n            }\n            for(int i=0;i<5;i++) {\n                int z;\n                for(int j=0;j<5;j++) {\n                    z = 3;\n                }\n            }\n        }\n        public void method3() {\n            int m;\n            do {\n                m = 0;\n            } while (false);\n            do {\n                int n;\n                n = 0;\n            } while (true);\n        }\n        private void foo() {\n            int q;\n            int w;\n            int e;\n            q = 1;\n            w = 1;\n            e = 1;\n            e = 2;\n            class Local {\n                void bar() {\n                    int q;\n                    int w;\n                    int e;\n                    q = 1;\n                    q = 2;\n                    w = 1;\n                    e = 1;\n                }\n            }\n            int i;\n            for (;; i = 1) { }\n        }\n        public void method4() {\n            int m;\n            int i = 5;\n            while (i > 1) {\n                m = 0;\n                i++;\n            }\n            while (true) {\n                int n;\n                n = 0;\n            }\n        }\n        int[] array = new int[10];\n        public void method5() {\n            int r;\n            for (int a: array) {\n                r = 0;\n            }\n            for (int a: array) {\n                int t;\n                t = 0;\n            }\n        }\n    }\n    class classs32 {\n        public void method(final int i) {\n            switch (i) {\n                case 1:\n                    int foo = 1;    \n                    break;\n                default:\n            }\n            switch (i) {\n                case 1:\n                    int foo = 1;    \n                    break;\n                case 2:\n                    foo = 2;\n                    break;\n                default:\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariable2Two.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        76,
        81
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariable2Two {\n    public void anotherMethod()\n    {\n        boolean aBool = true;\n        for (int i = 0, j = 1, k = 1; j < 10 ; j++)\n        {\n            k++;\n            aBool = false;\n        }\n        int l = 0;\n        {\n            int weird = 0;\n            int j = 0;\n            int k = 0;\n            {\n                l++;\n            }\n        }\n        int weird = 0;\n        weird++;\n        final InputFinalLocalVariable2Two.InnerClass ic =\n                new InputFinalLocalVariable2Two.InnerClass();\n        ic.mInner2 = 1;\n    }\n    class InnerClass\n    {\n        private int mInner = 0;\n        public int mInner2 = 0;\n    }\n}\ninterface Inter2\n{\n    void method(int aParam);\n}\nabstract class AbstractClass2\n{\n    public abstract void abstractMethod(int aParam);\n}\nclass Blah2\n{\n    static\n    {\n        for(int a : getInts())\n        {\n        }\n    }\n    static int[] getInts() {\n        return null;\n    }\n}\nclass test_12417222\n{\n    private Object o_;\n    public void doSomething(Object _o) \n    {\n        System.identityHashCode(_o);\n    }\n    public void doSomething2(Object _o1) \n    {\n        o_ = _o1;\n    }\n}\nclass class12\n{\n    public class12(final int x){\n    }\n}\nclass AA2 {\n    {\n        int y = 0;\n        y = 9;\n    }\n}\nenum Enum12 {\n    ;\n    {\n        int var = 0;\n        var = 1;\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariable3.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        20,
        22,
        39,
        43,
        45
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\nimport java.net.CacheRequest;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\npublic class InputFinalLocalVariable3 {\n    private List<ProblemDescriptor> checkCodeBlock(final PsiCodeBlock body) {\n        if (body == null) return null;\n        final ControlFlow flow = new ControlFlow();\n        try {\n            int start = flow.getStartOffset(body);\n            int end = flow.getEndOffset(body);\n            final HashSet<Object> result = new HashSet<>();\n            body.accept(new JavaRecursiveElementWalkingVisitor() {\n                public void visitPatternVariable(Object variable) {\n                    super.visitPatternVariable(variable);\n                    if (true) return;\n                    if (true) {\n                        return;\n                    }\n                    int from;\n                    int end;\n                    if (true) {\n                        from = flow.getEndOffset(body);\n                        end = flow.getEndOffset(body);\n                    } else if (false) {\n                        PsiCodeBlock list; \n                        end = flow.getEndOffset(body);\n                    } else if (true) {\n                        CacheRequest forEach;\n                        PsiStatement body = null;\n                        if (body == null) return;\n                        from = flow.getStartOffset(body);\n                        end = flow.getEndOffset(body);\n                    } else {\n                        return;\n                    }\n                    from = MathUtil.clamp(from, 0, flow.getInstructions().size());\n                    end = MathUtil.clamp(end, from, flow.getInstructions().size());\n                }\n            });\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return null;\n    }\n}\nclass PsiStatement {\n}\nclass MathUtil {\n    public static int clamp(int from, int i, int size) {\n        return 0;\n    }\n}\nclass PsiExpression {\n}\nclass ProblemDescriptor {\n}\nclass PsiCodeBlock {\n    public void accept(JavaRecursiveElementWalkingVisitor javaRecursiveElementWalkingVisitor) {\n    }\n}\nabstract class JavaRecursiveElementWalkingVisitor {\n    protected void visitPatternVariable(Object variable) {\n    }\n}\nclass ControlFlow {\n    public int getStartOffset(PsiCodeBlock body) {\n        return 0;\n    }\n    public int getEndOffset(PsiCodeBlock body) {\n        return 0;\n    }\n    public Collection<Object> getInstructions() {\n        return null;\n    }\n    public int getStartOffset(PsiStatement body) {\n        return 0;\n    }\n    public int getEndOffset(PsiStatement body) {\n        return 0;\n    }\n    public int getStartOffset(PsiExpression guardingExpression) {\n        return 0;\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableAnonymousClass.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        12
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableAnonymousClass {\n    public void test() {\n        Object testSupport = new Object() {\n            @Override\n            public String toString() {\n                final String dc = new String();\n                return dc;\n            }\n        };\n        testSupport.toString();\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableAssignedInsideAndOutsideSwitch.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        38
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\nimport java.util.ArrayList;\npublic class InputFinalLocalVariableAssignedInsideAndOutsideSwitch {\n    private static void foo1(final int[][] m, final int x, final int y,\n                                final int d, final int[] regionSizes) {\n        final int a = m[y][x] & 1;\n        int b;\n        switch (d) {\n            case 1:\n                b = m[y - 1][x];\n                break;\n            case 2:\n                b = m[y][x - 1];\n                break;\n            case 3:\n                b = m[y][x + 1];\n                break;\n            default:\n                b = m[y + 1][x];\n                break;\n        }\n        b &= 5;\n    }\n    private static void foo2(final int[][] m, final int x, final int y,\n                                final int d, final int[] regionSizes) {\n        final int a = m[y][x] & 1;\n        int b; \n        switch (d) {\n            case 1:\n                break;\n            case 2:\n                b = m[y][x - 1];\n                break;\n            case 3:\n                b = m[y][x + 1];\n                break;\n            default:\n                b = m[y + 1][x];\n                break;\n        }\n    }\n    private static void foo3(final int[][] m, final int x, final int y,\n                                 final int d, final int[] regionSizes) {\n        final int a = m[y][x] & 1;\n        int b;\n        switch (d) {\n            case 1:\n            case 2:\n            case 3:\n                b = m[y][x + 1];\n                break;\n            default:\n                b = m[y + 1][x];\n                break;\n        }\n        b &= 5;\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableAssignedMultipleTimes.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        56,
        129,
        133,
        210,
        214,
        417
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\nimport java.util.HashMap;\nimport java.util.Locale;\npublic class InputFinalLocalVariableAssignedMultipleTimes {\n    void foo1() {\n        final boolean some_condition = true;\n        int i;\n        if (some_condition) {\n            i = 1;\n        }\n        i = 2;\n    }\n    void foo2() {\n        final boolean some_condition = true;\n        int i;\n        if (some_condition) {\n            i = 1;\n        }\n        else {\n        }\n        i = 2;\n    }\n    void foo3() {\n        final boolean some_condition = true;\n        int i;\n        if (some_condition) {\n            i = 1;\n            if (i >= 1) {\n            }\n            else {\n            }\n        }\n        i = 2;\n    }\n    void foo4() {\n        final boolean some_condition = true;\n        int i; \n        if (some_condition) {\n            if (true) {\n            }\n            else {\n            }\n            i = 1;\n        }\n        else {\n            i = 2;\n        }\n        if (true) {\n        }\n        else {\n        }\n    }\n    void foo5() {\n        final boolean some_condition = true;\n        int i;\n        {\n            i = 2;\n        }\n        if (some_condition) {\n            i = 1;\n        }\n    }\n    void foo6() {\n        final boolean some_condition = true;\n        int i;\n        {\n            i = 2;\n        }\n        if (some_condition) {\n            i = 1;\n        }\n        else {\n            i = 6;\n        }\n    }\n    void foo7() {\n        final boolean some_condition = true;\n        int i;\n        if (some_condition) {\n            i = 1;\n        }\n        else {\n            i = 1;\n        }\n        i = 2;\n    }\n    void foo8() {\n        final boolean some_condition = true;\n        final int i;\n        if (some_condition) {\n            i = 1;\n        }\n        else {\n        }\n    }\n    public static String foo9(String filePath, String project) {\n        String path = new String(filePath); \n        String commonPath;\n        if (project != null) {\n            commonPath = \"\";\n            String relativePath = \"\";\n            if (!relativePath.equals(path)) {\n                return relativePath;\n            }\n        }\n        commonPath = \"\";\n        return commonPath;\n    }\n    public int foo10(String factory1, String factory2) {\n        int result = 0;\n        String s1, s2;\n        switch (result) {\n            case 1:\n                s1 = \"Java\";\n                s2 = \"C#\";\n                break;\n            case 2:\n                s1 = \"C++\";\n                s2 = \"Pascal\";\n                ;\n                break;\n            case 3:\n                s1 = \"Basic\";\n                s2 = \"Angol\";\n                break;\n            case 4:\n                s1 = \"JavaScript\";\n                s2 = \"Go\";\n                break;\n            case 5:\n            default:\n                s1 = \"F#\";\n                s2 = \"Objective C\";\n                break;\n        }\n        if (s1 == null) {\n            s1 = \"incorrect language\";\n        }\n        if (s2 == null) {\n            s2 = \"incorrect language\";\n        }\n        result = s1.compareTo(s2);\n        if (result == 0) {\n            switch (result) {\n                case 1:\n                    s1 = \"Java\";\n                    s2 = \"C#\";\n                    break;\n                case 2:\n                default:\n                    s1 = \"C++\";\n                    s2 = \"C\";\n                    break;\n            }\n            result = s1.compareTo(s2);\n        }\n        else if (result == 1) {\n            result = -8;\n        }\n        return result;\n    }\n    public String foo11(final Object o, boolean getMinimal) {\n        String n = System.lineSeparator();\n        if (n != null) {\n            return n;\n        }\n        try {\n            String className;\n            int kind; \n            boolean isParameterToInitMethodofAnonymousInnerClass = false;\n            boolean isSyntheticMethod = false;\n            if (o instanceof String || o instanceof Integer) {\n                String m; \n                if (o instanceof String) {\n                    m = (String) o;\n                    isSyntheticMethod = m.equals(\"\");\n                    kind = 1;\n                    className = this.getClass().getName();\n                }\n                else if (o instanceof String) {\n                    m = \"\";\n                    isSyntheticMethod = m.equals(\"\");\n                    className = this.getClass().getName();\n                    kind = 2;\n                    if (\"<init>\".equals(m.toLowerCase(Locale.getDefault()))) {\n                        final int i = className.lastIndexOf('$');\n                        if (i + 1 < className.length()) {\n                            isParameterToInitMethodofAnonymousInnerClass = true;\n                        }\n                    }\n                }\n                else {\n                    throw new IllegalStateException(\"impossible\");\n                }\n                if (!m.equals(\"\") && !\"<init>\".equals(m.toLowerCase(Locale.getDefault()))) {\n                    final String c = \"className\";\n                    String inheritedAnnotations = new String();\n                    if (c.charAt(1) > 0) {\n                        n = \"\";\n                        if (n != null) {\n                            inheritedAnnotations += \"\";\n                        }\n                    }\n                    for (int i = 5; i < 10; i++) {\n                        n = new String(\"\");\n                        if (n != null) {\n                            inheritedAnnotations += \"\";\n                        }\n                    }\n                    if (n == null) {\n                        String.CASE_INSENSITIVE_ORDER.equals(\"#\" + inheritedAnnotations.length());\n                    }\n                    if (!inheritedAnnotations.isEmpty()) {\n                        if (inheritedAnnotations.length() == 1) {\n                            return inheritedAnnotations;\n                        }\n                        if (!getMinimal) {\n                            return inheritedAnnotations;\n                        }\n                        String min = inheritedAnnotations;\n                        if (min.length() == 0) {\n                            inheritedAnnotations = null;\n                            min = inheritedAnnotations;\n                        }\n                        return min;\n                    }\n                    if (inheritedAnnotations == null) {\n                        return null;\n                    }\n                    if (inheritedAnnotations.equals(\"\")) {\n                        String.CASE_INSENSITIVE_ORDER.equals(\"l\" + \" defines \" + m);\n                    }\n                } \n            } \n            else if (o instanceof String) {\n                className = ((String) o).getClass().getName();\n                kind = 3;\n            }\n            else if (o instanceof String) {\n                assert false;\n                className = (String) o;\n                kind = 4;\n            }\n            else {\n                throw new IllegalArgumentException(\"Can't\" + o.getClass().getName());\n            }\n            if (isParameterToInitMethodofAnonymousInnerClass) {\n                return null;\n            }\n            if (isSyntheticMethod) {\n                return null;\n            }\n            try {\n                final String c = new String(className);\n                if (c != null && c.equals(\"\")) {\n                    return null;\n                }\n            }\n            catch (Exception e) {\n                assert true;\n            }\n            n = new String(className);\n            if (n == null) {\n                String.CASE_INSENSITIVE_ORDER.equals(\"Default annotation for \" + kind + \" is \" + n);\n            }\n            if (n != null) {\n                return n;\n            }\n            n = new String(className);\n            if (n == null) {\n                String.CASE_INSENSITIVE_ORDER.equals(\"Default annotation for any is \" + n);\n            }\n            if (n != null) {\n                return n;\n            }\n            final int p = className.lastIndexOf('.');\n            className = className.substring(0, p + 1) + \"package-info\";\n            n = new String(className);\n            if (n == null) {\n                String.CASE_INSENSITIVE_ORDER.equals(\"Default annotation for \" + kind + \" is \" + n);\n            }\n            if (n != null) {\n                return n;\n            }\n            n = new String(className);\n            if (n == null) {\n                String.CASE_INSENSITIVE_ORDER.equals(\"Default annotation for any is \" + n);\n            }\n            if (n != null) {\n                return n;\n            }\n            return n;\n        }\n        catch (Exception e) {\n            String.CASE_INSENSITIVE_ORDER.equals(e);\n            ;\n            return null;\n        }\n    }\n    private void foo12(Long start, Long end) {\n        HashMap<Object, Object> headMap;\n        if (end < Long.MAX_VALUE) {\n            headMap = new HashMap<>();\n            Long tailEnd = 1L;\n            if (tailEnd != null) {\n                end = tailEnd;\n            }\n            if (!headMap.isEmpty()) {\n                tailEnd = (Long) headMap.get(headMap.size());\n                if (tailEnd > end) {\n                    end = tailEnd;\n                }\n            }\n        }\n        headMap = new HashMap<>();\n        if (!headMap.isEmpty()) {\n            final int headStart = headMap.size();\n            final Long headEnd = (Long) headMap.get(headStart);\n            if (headEnd >= start - 1) {\n                headMap.remove(headStart);\n                start = Long.valueOf(headStart);\n            }\n        }\n        headMap.clear();\n        headMap.remove(end);\n        headMap.put(start, end);\n    }\n    public static int foo13(int p, int q, int mode) {\n        String.CASE_INSENSITIVE_ORDER.equals(mode);\n        ;\n        if (q == 0) {\n            throw new ArithmeticException(\"/ by zero\"); \n        }\n        final int div = p / q;\n        final int rem = p - q * div; \n        if (rem == 0) {\n            return div;\n        }\n        final int signum = 1 | ((p ^ q) >> (Integer.SIZE - 1));\n        boolean increment; \n        switch (mode) {\n            case 1:\n                String.CASE_INSENSITIVE_ORDER.equals(rem == 0);\n            case 2:\n                increment = false;\n                break;\n            case 3:\n                increment = true;\n                break;\n            case 4:\n                increment = signum > 0;\n                break;\n            case 5:\n                increment = signum < 0;\n                break;\n            case 6:\n            case 7:\n            case 8:\n                final int absRem = 1;\n                final int cmpRemToHalfDivisor = absRem - (1 - absRem);\n                if (cmpRemToHalfDivisor == 0) { \n                    increment = (mode == 1) || (mode == 2 & (div & 1) != 0);\n                }\n                else {\n                    increment = cmpRemToHalfDivisor > 0; \n                }\n                break;\n            default:\n                throw new AssertionError();\n        }\n        return increment ? div + signum : div;\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableBreak.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        14
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableBreak {\n    void foo1() throws Exception {\n        Exception e; \n        final int a = (int) Math.random();\n        final int b = (int) Math.random();\n        switch (a) {\n        case 0:\n            e = new Exception();\n            break;\n        case 1:\n            if (b == 0) {\n                e = new Exception();\n                break;\n            }\n            if (b == 1) {\n                e = new Exception();\n            }\n            else {\n                e = new Exception();\n            }\n            break;\n        case 2:\n            if (b == 0) {\n                return;\n            }\n            e = new Exception();\n            break;\n        default:\n            e = new Exception();\n            break;\n        }\n        throw e;\n    }\n    int foo2() {\n        int a;\n        if (true) {\n            a = 1;\n        } else {\n            a = 2;\n            if (a == 3) {\n                return a;\n            }\n            a = 4;\n        }\n        return a;\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableCheckRecords.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic record InputFinalLocalVariableCheckRecords(boolean t, boolean f) {\n    public InputFinalLocalVariableCheckRecords {\n        int a = 0;\n        a = 1;\n    }\n    record bad(int i) {\n        public bad {\n            int b = 0; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableCheckSwitchAssignment.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        20,
        42,
        45,
        71,
        91
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableCheckSwitchAssignment {\n    private static final int staticValue = 2;\n    private static final int staticField = switch(staticValue) {\n        case 0 -> -1;\n        case 2-> 2;\n        default -> 3;\n    };\n    public InputFinalLocalVariableCheckSwitchAssignment() throws Exception {\n        int a = 0; \n        final int b = 0;\n        int c = 10;\n        int d = 0;\n        c = switch (a) {\n            case 0 -> 5;\n            case 1 -> 10;\n            default -> switch(b) {\n                    case 2 -> {\n                        if (a == 0) {\n                            d = 1; \n                        }\n                        throw new Exception();\n                    }\n                    default -> 2;\n                };\n        };\n    }\n    public void foo() throws Exception {\n        final int a = 0;\n        int b = switch(a) { \n            case 0 -> {\n                int x = 5; \n                int y = 6;\n                if (a == 2) {\n                    y = 7;\n                }\n                throw new Exception();\n            }\n            default -> 2;\n        };\n        int c = switch(b) {\n            case 0 -> 1;\n            default -> 2;\n        };\n        c = switch(a) {\n            case 0 -> switch (b) {\n                    case 0 -> 1;\n                    case 1 -> 2;\n                    default -> 3;\n                };\n            default -> 1;\n        };\n    }\n    String statement1(int t) {\n        String res; \n        switch (t) {\n            case 1 -> {\n                res = \"A\";\n            }\n            case 2, 3 -> res = \"B-C\";\n            case 4 -> throw new IllegalStateException(\"D\");\n            default -> {\n                res = \"other\";\n            }\n        }\n        return res;\n    }\n    enum MyEnum {\n        a,b,c\n    }\n    void switch_rules(MyEnum value) {\n        String res; \n        switch (value) {\n            case a -> throw new RuntimeException();\n            case b -> res = \"2\";\n            case c -> res = \"3\";\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableCheckSwitchExpressions.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        13,
        51,
        89,
        123
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableCheckSwitchExpressions {\n    void foo1() throws Exception {\n        Exception e; \n        final int a = (int) Math.random();\n        final int b = (int) Math.random();\n        switch (a) {\n            case 0:\n                e = new Exception();\n                break;\n            case 1:\n                if (b == 0) {\n                    e = new Exception();\n                    break;\n                }\n                if (b == 1) {\n                    e = new Exception();\n                } else {\n                    e = new Exception();\n                }\n                break;\n            case 2:\n                if (b == 0) {\n                    return;\n                }\n                e = new Exception();\n                break;\n            default:\n                e = new Exception();\n                break;\n        }\n        throw e;\n    }\n    void foo2() throws Exception {\n        Exception e; \n        final int a = (int) Math.random();\n        final int b = (int) Math.random();\n        switch (a) {\n            case 0 -> {\n                e = new Exception();\n            }\n            case 1 -> {\n                if (b == 0) {\n                    e = new Exception();\n                    break;\n                }\n                if (b == 1) {\n                    e = new Exception();\n                } else {\n                    e = new Exception();\n                }\n            }\n            case 2 -> {\n                if (b == 0) {\n                    return;\n                }\n                e = new Exception();\n            }\n            default -> {\n                e = new Exception();\n            }\n        }\n        throw e;\n    }\n    void foo3() throws Exception {\n        Exception e; \n        final int a = (int) Math.random();\n        final int b = (int) Math.random();\n        switch (a) {\n            case 0 -> e = new Exception();\n            case 1 -> {\n                if (b == 0) {\n                    e = new Exception();\n                    break;\n                }\n                if (b == 1) {\n                    e = new Exception();\n                } else {\n                    e = new Exception();\n                }\n            }\n            case 2 -> {\n                if (b == 0) {\n                    return;\n                }\n                e = new Exception();\n            }\n            default -> e = new Exception();\n        }\n        throw e;\n    }\n    void foo4() throws Exception {\n        Exception e; \n        final int a = (int) Math.random();\n        final int b = (int) Math.random();\n        switch (a) {\n            case 0 -> e = new Exception();\n            case 1 -> System.out.println(\"test!\");\n            default -> System.out.println(\"Exception!\");\n        }\n    }\n    enum T {\n        A, B, C;\n    }\n    public void foo5() {\n        int x;\n        final T e = T.B;\n        final boolean t8 = (switch (e) {\n        case A:\n            x = 1;\n            yield isTrue();\n        case B:\n            yield (x = 1) == 1 || isTrue();\n        default:\n            yield false;\n        }) && x == 1;\n        {\n            final T y = T.A;\n            final boolean t9 = (switch (y) {\n            case A:\n                x = 1;\n                yield true;\n            case B:\n                yield (x = 1) == 1 || true;\n            default:\n                yield false;\n            }) && x == 1;\n        }\n        {\n            final T y = T.A;\n            final int v = switch (y) {\n            case A -> x = 0;\n            case B -> x = 0;\n            case C -> x = 0;\n            };\n            if (x != 0 || v != 0) {\n                throw new IllegalStateException(\"Unexpected result.\");\n            }\n        }\n        {\n            final T y = T.A;\n            final boolean tA = (switch (y) {\n            case A -> {\n                x = 1;\n                yield true;\n            }\n            case B -> {\n                x = 1;\n                yield true;\n            }\n            case C -> {\n                x = 1;\n                yield true;\n            }\n            }) && x == 1;\n        }\n    }\n    private boolean isTrue() {\n        return true;\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableConstructor.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        14,
        16,
        18,
        22,
        35
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableConstructor {\n    InputFinalLocalVariableConstructor(int a) {\n    }\n    InputFinalLocalVariableConstructor(int a, \n                                      int b) { \n    }\n    InputFinalLocalVariableConstructor(String str) {\n    }\n}\nclass Mutation {\n    Mutation(final int a) {\n    }\n    Mutation(final String check) {\n    }\n    Mutation(String str, final int b) {\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableEnhancedForLoopVariable.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        14,
        22,
        27,
        29,
        31,
        46,
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableEnhancedForLoopVariable {\n    public void method1()\n    {\n        final java.util.List<Object> list = new java.util.ArrayList<>();\n        for(Object a : list){ \n        }\n    }\n    public void method2()\n    {\n        final int[] squares = {0, 1, 4, 9, 16, 25};\n        int x; \n        for (final int i : squares) {\n        }\n    }\n    public java.util.List<String> method3(java.util.List<String> snippets) {\n        java.util.List<String> filteredSnippets = new java.util.ArrayList<>();\n        for (String snippet : snippets) {\n            filteredSnippets.add(snippet);\n        }\n        if (filteredSnippets.size() == 0) {\n            String snippet = snippets.get(0);\n            snippet = new String(snippet);\n            filteredSnippets.add(snippet);\n        }\n        return filteredSnippets;\n    }\n    public void method4()\n    {\n        final java.util.List<Object> list = new java.util.ArrayList<>();\n        for(Object a : list) { \n        }\n        Object a; \n        if (list.isEmpty())\n        {\n            a = new String(\"empty\");\n        }\n        else\n        {\n            a = new String(\"not empty\");\n        }\n        for(Object b : list) {\n            b = new String(\"b\");\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableEnhancedForLoopVariable2.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        22,
        27,
        29,
        48
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableEnhancedForLoopVariable2 {\n    public void method1()\n    {\n        final java.util.List<Object> list = new java.util.ArrayList<>();\n        for(Object a : list){\n        }\n    }\n    public void method2()\n    {\n        final int[] squares = {0, 1, 4, 9, 16, 25};\n        int x; \n        for (final int i : squares) {\n        }\n    }\n    public java.util.List<String> method3(java.util.List<String> snippets) {\n        java.util.List<String> filteredSnippets = new java.util.ArrayList<>();\n        for (String snippet : snippets) {\n            filteredSnippets.add(snippet);\n        }\n        if (filteredSnippets.size() == 0) {\n            String snippet = snippets.get(0);\n            snippet = new String(snippet);\n            filteredSnippets.add(snippet);\n        }\n        return filteredSnippets;\n    }\n    public void method4()\n    {\n        final java.util.List<Object> list = new java.util.ArrayList<>();\n        for(Object a : list) {\n        }\n        Object a; \n        if (list.isEmpty())\n        {\n            a = new String(\"empty\");\n        }\n        else\n        {\n            a = new String(\"not empty\");\n        }\n        for(Object b : list) {\n            b = new String(\"b\");\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableFalsePositives.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        351,
        2194
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class InputFinalLocalVariableFalsePositives {\n    private void foo1() {\n        String value;\n        if (true) {\n            try {\n                value = \"\";\n            }\n            catch (Exception ex) {\n                if (true) {\n                }\n                value = \"\";\n            }\n        }\n        else {\n            value = \"\";\n        }\n    }\n    private void foo2() {\n        String stompAccessor;\n        if (true) {\n            throw new IllegalStateException(\n                \"No header accessor (not using the SimpMessagingTemplate?): \");\n        }\n        else if (true) {\n            stompAccessor = \"\";\n        }\n        else if (true) {\n            stompAccessor = \"\";\n        }\n        else {\n            throw new IllegalStateException(\"Unexpected header accessor type \");\n        }\n        if (true) {\n            if (true) {\n                if (true) {\n                }\n                return;\n            }\n            stompAccessor.toString();\n        }\n        if (true) {\n            return;\n        }\n        if (true) {\n            if (true) {\n            }\n            stompAccessor = \"\";\n            stompAccessor.toString();\n            stompAccessor.toString();\n            if (true) {\n                stompAccessor.toString();\n            }\n        }\n        else if (true) {\n            if (true) {\n                if (true) {\n                }\n                return;\n            }\n        }\n        else {\n            if (true) {\n                if (true) {\n                }\n                return;\n            }\n        }\n    }\n    private void foo3() {\n        String errorCodes;\n        try {\n            if (true) {\n            }\n            else {\n            }\n            if (true) {\n            }\n            errorCodes = \"\";\n            if (true) {\n            }\n        }\n        catch (Exception ex) {\n            errorCodes = \"\";\n        }\n        final String s = errorCodes;\n    }\n    private void foo4() {\n        if (true) {\n            try {\n                int corePoolSize;\n                if (true) {\n                    corePoolSize = Integer.valueOf(\"1\");\n                    if (corePoolSize > 2) {\n                    }\n                    if (true) {\n                        if (corePoolSize == 0) {\n                            corePoolSize = 2;\n                        }\n                        else {\n                        }\n                    }\n                }\n                else {\n                    corePoolSize = 1;\n                }\n            }\n            catch (NumberFormatException ex) {\n            }\n        }\n    }\n    private void foo5() {\n        if (true) {\n            final String s = \"\";\n            String constructorToUse;\n            synchronized (s) {\n                constructorToUse = \"\";\n                if (constructorToUse == null) {\n                    if (true) {\n                    }\n                    try {\n                        if (System.getSecurityManager() != null) {\n                            constructorToUse = \"\";\n                        }\n                        else {\n                            constructorToUse = \"\";\n                        }\n                    }\n                    catch (Exception ex) {\n                    }\n                }\n            }\n        }\n        else {\n        }\n    }\n    private void foo6() {\n        String[] attrs;\n        if (true) {\n            attrs = null;\n            for (int i = 0; i < attrs.length; i++) {\n            }\n        }\n        if (true) {\n            attrs = null;\n            for (int i = 0; i < attrs.length; i++) {\n                if (attrs[i] instanceof Object) {\n                }\n                if (attrs[i] instanceof Object) {\n                }\n            }\n        }\n    }\n    private void foo7() {\n        int index;\n        if (true) {\n            index = 0;\n        }\n        else if (true) {\n            index = 2;\n        }\n        else {\n            return;\n        }\n        if (true) {\n            index += 1;\n        }\n    }\n    private void foo8() {\n        String[] attrs;\n        if (true) {\n            attrs = null;\n            for (int i = 0; i < attrs.length; i++) {\n                if (attrs[i] instanceof String) {\n                }\n            }\n        }\n        if (true) {\n            attrs = null;\n            for (int i = 0; i < attrs.length; i++) {\n                if (attrs[i] instanceof Object) {\n                }\n                if (attrs[i] instanceof String) {\n                }\n            }\n        }\n    }\n    private void foo9() {\n        int transx, transy;\n        if (true) {\n            if (true) {\n                if (true) {\n                }\n                else {\n                }\n                transx = 2;\n                transy = 1;\n            }\n            else {\n                transx = 0;\n                transy = 0;\n            }\n        }\n        if (true) {\n            transx = 1;\n            transy = 2;\n        }\n        else {\n            transx = transy = 0;\n        }\n        try {\n        }\n        finally {\n        }\n    }\n    private void foo10() {\n        int index;\n        if (false) {\n            index = 0;\n        }\n        else if (true) {\n            index = 2;\n        }\n        else {\n            return;\n        }\n        if (false) {\n            index += 1;\n        }\n    }\n    private void foo11() {\n        if (true)\n            if (true)\n                return;\n        long lastModifiedTime;\n        if (true) {\n            lastModifiedTime = 1L;\n            if (true) {\n            }\n        }\n        else if (true) {\n        }\n        if (true) {\n            lastModifiedTime = 2L;\n            if (true) {\n            }\n        }\n    }\n    private void foo12() {\n        String numElemKey;\n        if (true) {\n            numElemKey = \".NumberElements\";\n            if (true) {\n            }\n        }\n        if (true) {\n            numElemKey = \"\";\n            if (true) {\n            }\n        }\n    }\n    private void foo13() {\n        String out;\n        if (true) {\n            out = \"\";\n        }\n        else {\n            out = \"\";\n            if (true) {\n            }\n        }\n        if (true) {\n            out = \"\";\n        }\n        if (true) {\n        }\n        out.toString();\n        if (true) {\n            try {\n                out = \"\";\n            }\n            catch (Exception ioe) {\n            }\n            finally {\n                if (true) {\n                }\n                if (true) {\n                    out.toString();\n                }\n                if (true) {\n                }\n                if (true) {\n                }\n                if (true) {\n                }\n            }\n        }\n    }\n    private void foo14() {\n        int c, c2; \n        if (true) {\n        }\n        if (true) {\n            if ((c = 'd') >= 0) {\n                if (true) {\n                    c2 = 'a';\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                            }\n                            c = c2;\n                        }\n                        else {\n                        }\n                    }\n                }\n                if (true) {\n                }\n            }\n            return;\n        }\n    }\n    private void foo15() {\n        int limit;\n        if (true) {\n            limit = 0xdc00 >> 1;\n            limit = 2 + 1;\n        }\n    }\n    private void foo16() {\n        final int a = 1;\n        byte level;\n        if (true) {\n            switch (a) {\n                case 1:\n                    break;\n                case 2:\n                    break;\n                case 3:\n                    if (true) {\n                    }\n                    if ((true) ||\n                        (true)) {\n                        level = 1;\n                        if (true) {\n                        }\n                        if (true) {\n                        }\n                        break;\n                    }\n                    for (int i = 0; i < 14; i++) {\n                    }\n                    if (true) {\n                    }\n                    break;\n                case 4:\n                    if (true)\n                        break;\n                case 5:\n                    if (true) {\n                        if (true) {\n                            break;\n                        }\n                        if (true) {\n                        }\n                        break;\n                    }\n                    if (true) {\n                    }\n                    break;\n                case 6:\n                    break;\n                case 7:\n                    for (int i = 0; i < 15458; i++) {\n                    }\n                    if (true) {\n                    }\n                    break;\n                case 8:\n                    break;\n                case 9:\n                    if (true) {\n                    }\n                    break;\n                case 10:\n                    level = (byte) 1;\n                    for (int i = 0; i < 12; i++) {\n                        if (true) {\n                        }\n                    }\n                    break;\n                case 11:\n                    level = 1;\n                    for (int i = 0; i < 12; i++) {\n                        if (true) {\n                            while (level < 2) {\n                            }\n                            while (true) {\n                            }\n                        }\n                        if (true) {\n                            continue;\n                        }\n                    }\n                    break;\n                case 12:\n                    level = (byte) 2;\n                    for (int i = 0; i < 12; i++) {\n                        if (true) {\n                        }\n                    }\n                    break;\n                default:\n                    throw new IllegalStateException(\"Internal ICU error in processPropertySeq\");\n            }\n        }\n        if (true) {\n            level = (byte) 12;\n            for (; ; ) {\n            }\n        }\n    }\n    private void foo17() {\n        try {\n            int newLen;\n            if (true) {\n                try {\n                    newLen = 1;\n                }\n                catch (Exception ibse) {\n                }\n            }\n            else {\n                newLen = 2;\n                if (true) {\n                }\n            }\n            if (true) {\n                try {\n                }\n                catch (Exception e) {\n                }\n            }\n            if (true) {\n                newLen = 3;\n                if (true) {\n                    if (true) {\n                    }\n                }\n            }\n            return;\n        }\n        catch (Exception e) {\n            throw new ArrayIndexOutOfBoundsException(e.toString());\n        }\n    }\n    private void foo18() throws Exception {\n        int newLen;\n        if (true) {\n            try {\n                newLen = 1;\n            }\n            catch (Exception ibse) {\n            }\n        }\n        else {\n            newLen = 2;\n            if (true) {\n            }\n        }\n        if (true) {\n            try {\n            }\n            catch (Exception e) {\n            }\n        }\n        if (true) {\n            newLen = 1;\n            if (true) {\n                if (true) {\n                    throw new Exception(\"invalid explicit IV\");\n                }\n            }\n        }\n        return;\n    }\n    private String foo19() {\n        String params;\n        synchronized (this) {\n            params = \"blindingCache.get(modulus)\";\n        }\n        if (true) {\n            return params;\n        }\n        params = \"new BlindingParameters(e, re, rInv)\";\n        synchronized (this) {\n        }\n        return params;\n    }\n    private void foo20() {\n        String cert;\n        if (true) {\n            cert = \"certPair.getForward()\";\n            if (true) {\n            }\n        }\n        if (true) {\n            cert = \"certPair.getReverse()\";\n            if (true) {\n            }\n        }\n    }\n    private void foo21() throws Exception {\n        try {\n            final int keyType = 8;\n            String[] attributes;\n            switch (keyType) {\n                case 1:\n                case 2:\n                case 3:\n                    attributes = null;\n                    break;\n                default:\n                    attributes = null;\n                    break;\n            }\n            attributes = null;\n            return;\n        }\n        catch (Exception e) {\n            throw new Exception(\"Could not generate key\", e);\n        }\n        finally {\n        }\n    }\n    private void foo22() throws Exception {\n        String subDer;\n        if (true) {\n            subDer = \"\";\n            if (true) {\n                while (\"\".equals(subDer)) {\n                }\n                for (int i = 0; i < 1541; i++) {\n                }\n            }\n            else {\n                throw new Exception();\n            }\n        }\n        else {\n            throw new Exception();\n        }\n        if (true) {\n        }\n        if (true) {\n        }\n        if (true) {\n            if (true) {\n                subDer = \"\";\n                if (true) {\n                    while (\"\".equals(subDer)) {\n                    }\n                }\n                else {\n                    throw new Exception();\n                }\n                if (true) {\n                }\n            }\n            else {\n                throw new Exception();\n            }\n        }\n        if (true) {\n            throw new Exception();\n        }\n    }\n    private void foo23() throws Exception {\n        int bint;\n        if (true) {\n            throw new Exception();\n        }\n        if (true) {\n            throw new Exception();\n        }\n        if (true) {\n            bint = 1;\n            if (true) {\n                throw new Exception(\"\");\n            }\n        }\n        else {\n            throw new Exception();\n        }\n        if (true) {\n            bint = 2;\n            if (bint == 4) {\n                throw new Exception();\n            }\n        }\n        else {\n            throw new Exception();\n        }\n    }\n    private void foo24() {\n        final String a = \"\";\n        String loader;\n        synchronized (this) {\n            while (\"\".equals(a)) {\n                if (true) {\n                }\n            }\n            if (true) {\n                if (true) {\n                }\n                loader = \"\";\n            }\n            loader = \"\";\n        }\n    }\n    private void foo25() {\n        double w, h;\n        if (true) {\n            if (true) {\n                w = 11.0;\n                h = 12.2;\n            }\n        }\n        if (true) {\n            w = 1.0;\n            h = 2.5;\n        }\n        return;\n    }\n    private void foo26() {\n        String[] attrs;\n        if (true) {\n            attrs = null;\n            for (int i = 0; i < attrs.length; i++) {\n                if (true) {\n                }\n            }\n        }\n        if (true) {\n            attrs = null;\n            for (int i = 0; i < attrs.length; i++) {\n                if (attrs[i] instanceof String) {\n                }\n                if (attrs[i] instanceof String) {\n                }\n            }\n        }\n    }\n    private void foo27() {\n        String locUrl;\n        try {\n            locUrl = \"\";\n            if (true) {\n                return;\n            }\n        }\n        catch (Exception mue) {\n            locUrl = \"\";\n        }\n    }\n    private void foo28() {\n        final String a = \"\";\n        String[] path;\n        if (true) {\n            while (\"\".equals(a)) {\n            }\n            path = new String[5];\n            while (\"\".equals(a)) {\n                if (true) {\n                    path[1] = \"\";\n                }\n                else {\n                    path[2] = \"\";\n                }\n            }\n            if (true) {\n                path[3] = \"\";\n            }\n            else {\n                path[4] = \"\";\n            }\n            if (true) {\n                path = new String[14];\n            }\n        }\n        else {\n            path = new String[81];\n        }\n        return;\n    }\n    private void foo29() {\n        int decExp;\n        parseNumber:\n        try {\n            if (true) {\n                throw new NumberFormatException(\"empty String\");\n            }\n            int i = 0;\n            switch (i) {\n                case '-':\n                case '+':\n                    i++;\n            }\n            if (true) {\n                if (true) {\n                    return;\n                }\n                break parseNumber;\n            }\n            else if (true) {\n                if (true) {\n                    return;\n                }\n                break parseNumber;\n            }\n            else if (true) {\n                if (true) {\n                    if (true) {\n                        return;\n                    }\n                }\n            }\n            skipLeadingZerosLoop:\n            while (i < 15) {\n                if (true) {\n                }\n                else if (true) {\n                    if (true) {\n                        throw new NumberFormatException(\"multiple points\");\n                    }\n                    if (true) {\n                    }\n                }\n                else {\n                    break skipLeadingZerosLoop;\n                }\n                i++;\n            }\n            digitLoop:\n            while (i < 12) {\n                if (true) {\n                }\n                else if (true) {\n                }\n                else if (true) {\n                    if (true) {\n                        throw new NumberFormatException(\"multiple points\");\n                    }\n                    if (true) {\n                    }\n                }\n                else {\n                    break digitLoop;\n                }\n                i++;\n            }\n            if (true) {\n                break parseNumber;\n            }\n            if (true) {\n                decExp = 1;\n            }\n            else {\n                decExp = 2;\n            }\n            if (true) {\n                switch (i) {\n                    case '-':\n                    case '+':\n                        i++;\n                }\n                final int expAt = i;\n                expLoop:\n                while (i < 54) {\n                    if (true) {\n                    }\n                    if (true) {\n                    }\n                    else {\n                        i--;\n                        break expLoop;\n                    }\n                }\n                if (true) {\n                    decExp = 12;\n                }\n                else {\n                    decExp = decExp + 123;\n                }\n                if (i == expAt) {\n                    break parseNumber;\n                }\n            }\n            if (i < 9788) {\n                break parseNumber;\n            }\n            if (true) {\n                return;\n            }\n            return;\n        }\n        catch (StringIndexOutOfBoundsException e) {\n        }\n        throw new NumberFormatException();\n    }\n    private void foo30() {\n        int transx, transy;\n        if (true) {\n            if (true) {\n                if (true) {\n                }\n                else {\n                }\n                transx = 1;\n                transy = 2;\n            }\n            else {\n                transx = 0;\n                transy = 0;\n            }\n        }\n        if (true) {\n            transx = 4;\n            transy = 1;\n        }\n        else {\n            transx = transy = 0;\n        }\n    }\n    private void foo31() throws Exception {\n        String srcIL;\n        if (true) {\n            srcIL = \"\";\n            if (srcIL != null) {\n                return;\n            }\n        }\n        if (true) {\n            try {\n                srcIL = \"\";\n            }\n            catch (Exception e) {\n                throw new Exception(\"Unable to convert rasters\");\n            }\n            for (int y = 0; y < 12; y++) {\n                for (int x = 0; x < 12; x++) {\n                    for (int i = 0; i < 5478; i++) {\n                    }\n                }\n                for (int x = 0; x < 5; x++) {\n                    for (int i = 0; i < 541; i++) {\n                    }\n                }\n            }\n        }\n        else {\n            try {\n                srcIL = \"\";\n            }\n            catch (Exception e) {\n                throw new Exception(\"Unable to convert rasters\");\n            }\n        }\n    }\n    private void foo32() throws Exception {\n       String srcIL, dstIL;\n        try {\n            if (true) {\n                dstIL = \"\";\n                if (dstIL != null) {\n                    srcIL = \"\";\n                    if (srcIL != null) {\n                        return;\n                    }\n                }\n            }\n        }\n        catch (Exception e) {\n            throw new Exception(\"Unable to convert images\");\n        }\n        if (true) {\n            if (true) {\n            }\n            try {\n                srcIL = \"\";\n                dstIL = \"\";\n            }\n            catch (Exception e) {\n                throw new Exception(\"Unable to convert images\");\n            }\n        }\n        else {\n                    dstIL = \"\";\n        }\n    }\n    private void foo33() {\n        float advance;\n        if (true) {\n            advance = 1234;\n            if (advance != Float.MAX_VALUE) {\n                if (true) {\n                    return;\n                }\n                else {\n                    return;\n                }\n            }\n        }\n        else if (true) {\n            if (true) {\n                advance = 123;\n                if (advance != Float.MAX_VALUE) {\n                    if (true) {\n                        return;\n                    }\n                    else {\n                        return;\n                    }\n                }\n            }\n        }\n        if (true) {\n            return;\n        }\n        if (true) {\n            advance = 12435;\n        }\n        else {\n            if (true) {\n            }\n            else {\n            }\n            if (true) {\n                advance = 123;\n            }\n            else {\n                advance = 123414;\n            }\n        }\n        if (true) {\n        }\n        else if (true) {\n            if (true) {\n                for (int i = 0; i < 214; i++) {\n                }\n            }\n        }\n        return;\n    }\n    private void foo34() {\n        final String s = \"\";\n        int etag;\n        if (true) {\n            etag = 1;\n            do {\n                if (true) {\n                }\n                if (true) {\n                }\n            } while (\"\".equals(s));\n            if (true) {\n                etag = 13213;\n            }\n            else {\n            }\n        }\n        else {\n            etag = 12312;\n        }\n    }\n    private void foo35() {\n        final int a = 8;\n        String elem;\n        switch (a) {\n            case 1:\n                switch (a) {\n                    case '-':\n                        while (true) {\n                            if (true) {\n                            }\n                        }\n                    default:\n                }\n            case '/':\n                switch (a) {\n                    case '>':\n                    case '<':\n                        if (true) {\n                        }\n                        elem = \"\";\n                        break;\n                    default:\n                        if (true) {\n                            return;\n                        }\n                        switch (a) {\n                            case '>':\n                            case '<':\n                                break;\n                            default:\n                        }\n                        if (true) {\n                            elem = \"\";\n                        }\n                        else {\n                            elem = \"\";\n                        }\n                        break;\n                }\n                if (true) {\n                    elem = \"\";\n                    if (true) {\n                        return;\n                    }\n                }\n                else {\n                    if (true) {\n                        elem = \"\";\n                    }\n                    else {\n                        elem = \"\";\n                    }\n                }\n                elem = \"\";\n        }\n    }\n    private void foo36() {\n        String attname;\n        if (true) {\n            attname = \"\";\n            if (true) {\n            }\n            else {\n                if (true) {\n                    if (true) {\n                    }\n                    else {\n                    }\n                }\n            }\n        }\n        else if (true) {\n        }\n        else if (true) {\n            if (true) {\n                attname = \"\";\n                if (true) {\n                }\n                if (true) {\n                }\n                else {\n                    if (true) {\n                        if (true) {\n                        }\n                    }\n                }\n            }\n            else {\n            }\n        }\n        else if (true) {\n            attname = \"\";\n        }\n        else if (true) {\n            return;\n        }\n        else {\n            if (true) {\n            }\n            else {\n                return;\n            }\n        }\n        if (true) {\n            attname = \"\";\n        }\n        else {\n        }\n    }\n    private void foo37() {\n        int dot;\n        if (true) {\n            dot = 213213;\n            if (true) {\n                if (true) {\n                }\n            }\n            if (true) {\n                dot += 1;\n                if (true) {\n                    try {\n                    }\n                    catch (Exception ble) {\n                    }\n                }\n            }\n        }\n        else if (true) {\n            dot = 31;\n        }\n    }\n    private void foo38() {\n        String painter;\n        if (true) {\n            if ((painter = \"\").equals(\"\")) {\n                return;\n            }\n        }\n        if ((painter = \"\").equals(\"\")) {\n            return;\n        }\n    }\n    private void foo39() {\n        int spacing;\n        if (true) {\n            if (true) {\n                if (true);\n            }\n            else {\n                spacing = 4;\n                if (true) return;\n            }\n        }\n        if (true) {\n            spacing = 123;\n            if (true) return;\n        }\n        if (true) {\n            spacing = 12;\n        }\n    }\n    private void foo40() {\n        String cBounds;\n        if (true) {\n            if (true) {\n                cBounds = \"\";\n            }\n            if (true) {\n                cBounds = \"\";\n            }\n        }\n        else {\n            if (true) {\n                cBounds = \"\";\n            }\n            if (true) {\n                cBounds = \"\";\n            }\n        }\n    }\n    private void foo41() {\n        String nextInsets;\n        if (true) {\n            nextInsets = \"\";\n        }\n        if (true) {\n            nextInsets = \"\";\n        }\n    }\n    private String foo42() {\n        if (true) {\n            String rowBounds;\n            if (true) {\n                rowBounds = \"\";\n                if (true) {\n                    if (true) {\n                        return \"\";\n                    }\n                    return \"\";\n                }\n                if (true) {\n                    if (true) {\n                        rowBounds = \"\";\n                        return rowBounds;\n                    }\n                }\n                else {\n                    return rowBounds;\n                }\n            }\n            return \"\";\n        }\n        return \"\";\n    }\n    private void foo43() {\n        String providerImpls;\n        try {\n            providerImpls = \"\";\n        }\n        catch (Exception ex) {\n            providerImpls = null;\n        }\n        String strRowsetProperties;\n        try {\n            strRowsetProperties = \"\";\n        }\n        catch (Exception ex) {\n            strRowsetProperties = \"\";\n        }\n    }\n    private void foo45() {\n        String mixer;\n        if (true) {\n            if (true) {\n                if (true) {\n                    mixer = \"\";\n                    if (mixer != null) {\n                        return;\n                    }\n                }\n                else {\n                    mixer = \"\";\n                    if (mixer != null) {\n                        return;\n                    }\n                }\n            }\n        }\n        if (true) {\n            mixer = \"\";\n            if (mixer != null) {\n                return;\n            }\n        }\n    }\n    private void foo46() {\n        String e;\n        if (true) {\n            synchronized (this) {\n                e = \"\";\n            }\n            synchronized (this) {\n                e = \"\";\n            }\n        }\n    }\n    private void foo47() {\n        final String a = \"\";\n        String factory;\n        if (true) {\n            factory = \"\";\n        }\n        if (\"\".equals(a)) {\n            factory = \"\";\n        }\n    }\n    private void foo48() {\n        int ch;\n        if (true) {\n            ch = 1;\n        }\n        if (true) {\n            ch = 2;\n        }\n    }\n    private String foo49() {\n        long next;\n        if (!Thread.interrupted()) {\n            if (true) {\n                if (true) {\n                    if ((next = 5) == 5)\n                        return \"next\";\n                }\n                else if ((next = 5) == 5)\n                    return \"next\";\n            }\n            if (true)\n                return \"0L\";\n            if (true)\n                if ((next = 5) == 5)\n                    return \"next\";\n        }\n        return \"\";\n    }\n    private void foo50() {\n        long nanos;\n        try {\n            nanos = 1L;\n        }\n        catch (Exception ex2) {\n            nanos = 0L;\n        }\n    }\n    private void foo51() {\n        if (true) {\n            int vowel;\n            if (true) {\n                vowel = 1;\n            }\n            if (true) {\n                vowel = 2;\n            }\n        }\n        if (true) {\n            int consonant;\n            if (true) {\n                consonant = 23;\n            }\n            if (true) {\n                consonant =2;\n            }\n        }\n    }\n    private void foo52() {\n        String drivers;\n        try {\n            drivers = \"\";\n        }\n        catch (Exception ex) {\n            drivers = null;\n        }\n    }\n    private void foo53() {\n        String pc;\n        synchronized (this) {\n            pc = \"Hello\";\n        }\n        pc = \"\";\n    }\n    private void foo54() {\n        final int a = 1;\n        final String linkerName;\n        String lambdaName;\n        switch (a) {\n            case 1:\n                linkerName = \"linkToVirtual\";\n                lambdaName = \"DMH\"\n                    + \".invokeVirtual\";\n                break;\n            case 2:\n                linkerName = \"linkToStatic\";\n                lambdaName = \"DMH\"\n                    + \".invokeStatic\";\n                break;\n            case 3:\n                linkerName = \"linkToStatic\";\n                lambdaName = \"DMH.invokeStaticInit\";\n                break;\n            case 4:\n                linkerName = \"linkToSpecial\";\n                lambdaName = \"DMH\"\n                    + \".invokeSpecial\";\n                break;\n            case 5:\n                linkerName = \"linkToInterface\";\n                lambdaName = \"DMH\"\n                    + \".invokeInterface\";\n                break;\n            case 6:\n                linkerName = \"linkToSpecial\";\n                lambdaName = \"DMH\"\n                    + \".newInvokeSpecial\";\n                break;\n            default:\n                throw new InternalError(\"which=\");\n        }\n        lambdaName += \"_\";\n    }\n    private String foo55() {\n        String res;\n        if (true) {\n            res = \"\";\n            if (res != null) return res;\n        }\n        if (true) {\n            res = \"temporaryRes\";\n        }\n        else {\n            res = \"\";\n        }\n        if (true) {\n            if (true) {\n            }\n            else {\n            }\n        }\n        return \"\";\n    }\n    private void foo56() {\n        int num;\n        if (true) {\n            num = 3;\n        }\n        else {\n            num = 1;\n            if (true) {\n                num = 2;\n            }\n        }\n        if (num > 1) {\n            num = 2;\n        }\n    }\n    private void foo57() {\n        final int a = 1;\n        double T01, T10;\n        switch (a) {\n            case 1:\n                break;\n            case 9:\n            case 11:\n            case 12:\n                break;\n            case 123:\n            case 14:\n                break;\n            case 1234:\n            case 12345:\n                break;\n            case 566:\n            case 8678:\n                break;\n            case 534:\n            case 7968:\n            case 86785678:\n            case 86759789:\n                break;\n            case 346547:\n                T01 =1;\n                T10 = 2;\n                break;\n            case 432534523:\n            case 5345235:\n                break;\n            case 235345:\n            case 523452345:\n                break;\n            case 75675467:\n                break;\n        }\n        T01 = 21;\n        T10 = 53;\n    }\n    private void foo58() {\n        final int a = 54;\n        String typeStr;\n        switch (a) {\n            case 1:\n                typeStr = \"WINDOW_OPENED\";\n                break;\n            case 2:\n                typeStr = \"WINDOW_CLOSING\";\n                break;\n            case 3:\n                typeStr = \"WINDOW_CLOSED\";\n                break;\n            case 4:\n                typeStr = \"WINDOW_ICONIFIED\";\n                break;\n            case 5:\n                typeStr = \"WINDOW_DEICONIFIED\";\n                break;\n            case 6:\n                typeStr = \"WINDOW_ACTIVATED\";\n                break;\n            case 7:\n                typeStr = \"WINDOW_DEACTIVATED\";\n                break;\n            case 8:\n                typeStr = \"WINDOW_GAINED_FOCUS\";\n                break;\n            case 9:\n                typeStr = \"WINDOW_LOST_FOCUS\";\n                break;\n            case 10:\n                typeStr = \"WINDOW_STATE_CHANGED\";\n                break;\n            default:\n                typeStr = \"unknown type\";\n        }\n        typeStr += \",\";\n    }\n    private void foo59() {\n        String spec;\n        if (true) {\n            spec = \"\";\n        }\n        if (true) {\n            spec = \"\";\n        }\n    }\n    private void foo60() throws Exception {\n        final int a = 1;\n        String text;\n        switch (a) {\n            case 1:\n                text = \"\";\n                break;\n            case 2:\n                text = \"Warning: \";\n                break;\n            case 3:\n                text = \"Error: \";\n                break;\n            default:\n                throw new Exception();\n        }\n        final String message = \"\";\n        if (message != null) {\n            text += message;\n        }\n    }\n    private void foo61() {\n        String tmaw;\n        if (true) {\n            tmaw = \"\";\n            for (int i = 0; i < 10; i++) {\n                if (true) {\n                    if (true) {\n                        tmaw = \"\";\n                    }\n                }\n                else {\n                    tmaw = \"\";\n                }\n            }\n            if (true) {\n                tmaw = \"\";\n            }\n        }\n        else {\n            tmaw = null;\n        }\n    }\n    private void foo62() {\n        String znode;\n        synchronized (this) {\n            znode = \"\";\n        }\n        if (znode != null) {\n            synchronized (znode) {\n            }\n            if (true) {\n                if (true) {\n                    synchronized (znode) {\n                        if (true) {\n                        }\n                        else if (true) {\n                        }\n                        else {\n                            return;\n                        }\n                    }\n                    if (true) {\n                        return;\n                    }\n                }\n            }\n        }\n        synchronized (this) {\n            znode = \"\";\n        }\n    }\n    private void foo63() {\n        float h;\n        float l;\n        float s;\n        synchronized (this) {\n            h = 1;\n            l = 2;\n            s = 3;\n        }\n        h = 4;\n        l = 5;\n        s = 6;\n    }\n    private void foo64() {\n        int index;\n        if (true) {\n            index = 0;\n        }\n        else if (true) {\n            index = 2;\n        }\n        else {\n            return;\n        }\n        if (true) {\n            index += 1;\n        }\n    }\n    private void foo65() {\n        String name;\n        if (true) {\n            name = \"uri\";\n        }\n        else if (true) {\n            name = \"\";\n        }\n        else if (true) {\n            name = \"\";\n        }\n        else {\n            name = \"\";\n        }\n        if (true) {\n            if (true) {\n                name = \"\";\n            }\n        }\n    }\n    private void foo66() {\n        String cfg;\n        if (true) {\n            if (true) {\n                cfg = \"\";\n            }\n            if (true) {\n                cfg = \"\";\n            }\n            if (true) {\n                cfg = \"\";\n            }\n        }\n    }\n    private void foo67() {\n        String fastClass;\n        try {\n            fastClass = \"\";\n            if (true) {\n                if (fastClass == null) {\n                }\n                else {\n                }\n            }\n        }\n        catch (Throwable t) {\n            fastClass = null;\n        }\n    }\n    private void foo68() {\n        int partsLo;\n        if (true) {\n            partsLo = 1;\n            if ( --partsLo != 0) {\n                return;\n            }\n            if (true) {\n                return;\n            }\n        }\n        else {\n            partsLo = 0;\n        }\n    }\n    private void foo69() {\n        String node;\n        if (true) {\n            node = \"\";\n            if (node == null) {\n                return;\n            }\n            if (true) {\n                node = \"\";\n            }\n        }\n        else {\n            node = \"\";\n        }\n    }\n    private void foo70() {\n        String supplier;\n        try {\n            supplier = \"\";\n        }\n        catch (Throwable t) {\n            supplier = \"\";\n        }\n    }\n    private void foo71() {\n        int priority;\n        if (true) {\n            priority = 1;\n        }\n        else if (true) {\n            priority = 2;\n        }\n        else {\n            return;\n        }\n        if (true) {\n            priority++;\n        }\n        if (true) {\n            priority++;\n        }\n    }\n    private void foo72() {\n        String p;\n        try {\n            p = \"\";\n        }\n        catch (RuntimeException e) {\n            p = \"\";\n        }\n    }\n    private void foo73() {\n        String control;\n        if (true) {\n            if (true) {\n                control = \"\";\n                if (control != null) {\n                }\n            }\n        }\n        if (true) {\n            if (true) {\n            }\n            if (true) {\n                control = \"\";\n                if (control != null) {\n                }\n            }\n        }\n    }\n    private void foo75() {\n        String libPathAsString;\n        try {\n            libPathAsString = \"\";\n            if (libPathAsString == null) {\n            }\n            libPathAsString = \"\";\n            if (libPathAsString == null) {\n            }\n        } catch(Exception ex) {\n        }\n    }\n    private void foo76() {\n        int priority;\n        if (true) {\n            priority = 2;\n        }\n        else if (true) {\n            priority = 3;\n        }\n        else {\n            return;\n        }\n        if (true) {\n            priority++;\n        }\n        if (true) {\n            priority++;\n        }\n    }\n    private void foo77() {\n        if (true) {\n            int docId;\n            if (true) {\n                docId = 21;\n                if (docId != 1254) {\n                }\n                else {\n                }\n            }\n            else {\n                docId = 45234;\n                if (true) {\n                }\n            }\n            if (true) {\n                docId = 3213213;\n            }\n        }\n    }\n    private void foo78() {\n        String injectionPoints;\n        if (true) {\n            try {\n                injectionPoints = \"\";\n            }\n            catch (Exception e) {\n                injectionPoints = \"\";\n            }\n        }\n        else {\n            injectionPoints = \"\";\n        }\n    }\n    private void foo79() {\n        String name;\n        if (true) {\n            name = \"\";\n        }\n        else if (true) {\n            name = \"\";\n        }\n        else if (true) {\n            name = \"\";\n        }\n        else {\n            name = \"\";\n        }\n        if (true) {\n            if (true) {\n                name = \"\";\n            }\n        }\n    }\n    private void foo80() {\n        String names;\n        if (true) {\n            names = \"\";\n            if (true) {\n                names = \"\";\n            }\n        }\n        else {\n            names = \"\";\n        }\n    }\n    private void foo81() {\n        StringBuffer msg;\n        synchronized (this) {\n            msg = new StringBuffer(\"   [\");\n        }\n        synchronized (this) {\n            msg = new StringBuffer(\"   [\");\n        }\n    }\n    private void foo82() {\n       String filesToCompact;\n        try {\n            synchronized (this) {\n                filesToCompact = \"\";\n                filesToCompact = \"\";\n            }\n        }\n        finally {\n        }\n    }\n    private void foo83() {\n        String key;\n        if (true) {\n            try {\n                key = \"\";\n            }\n            catch (Exception e) {\n                if (true) {\n                    try {\n                        key = \"\";\n                    }\n                    catch (Exception ex) {\n                    }\n                }\n            }\n        }\n        else {\n            key = \"\";\n        }\n    }\n    private void foo84() {\n        float newMemstoreSize;\n        float newBlockCacheSize;\n        if (true) {\n            newBlockCacheSize = 354;\n            newMemstoreSize = 534;\n        }\n        else if (true) {\n            newBlockCacheSize = 213213;\n            newMemstoreSize = 53425;\n        }\n        else {\n            return;\n        }\n        if (true) {\n            newMemstoreSize = 2;\n        }\n        else if (true) {\n            newMemstoreSize = 3;\n        }\n        if (true) {\n            newBlockCacheSize = 354;\n        }\n        else if (true) {\n            newBlockCacheSize = 14;\n        }\n    }\n    private void foo85() {\n        boolean needNewPlan;\n        try {\n            if (true) {\n            }\n            if (true) {\n                needNewPlan = true;\n            }\n            else {\n                if (true) {\n                }\n                return;\n            }\n        }\n        catch (Throwable t) {\n            if (t instanceof Object) {\n            }\n            if (true) {\n                if (true) {\n                    if (t instanceof Object) {\n                    }\n                    else {\n                    }\n                }\n                try {\n                    needNewPlan = false;\n                    if (true) {\n                    }\n                    else if (true) {\n                        needNewPlan = true;\n                    }\n                }\n                catch (Exception ie) {\n                    return;\n                }\n            }\n            else if (true) {\n                needNewPlan = false;\n            }\n            else {\n                needNewPlan = true;\n            }\n        }\n    }\n    private void foo86() {\n        String result;\n        try {\n            try {\n                result = \"\";\n                if (true) {\n                    if (true) {\n                    }\n                }\n            }\n            catch (Exception e) {\n                if (true) {\n                }\n                if (true) {\n                }\n                else {\n                }\n                result = \"\";\n            }\n        }\n        catch (Exception ex) {\n        }\n    }\n    private void foo87() {\n        int count;\n        if (true) {\n            return;\n        }\n        try {\n            count = 2;\n        }\n        catch (Exception ieo) {\n            throw ieo;\n        }\n        catch (Error e) {\n            count = -1;\n        }\n    }\n    private void foo88() {\n        String c;\n        synchronized (this) {\n            try {\n                c = \"\";\n            }\n            catch (Exception e) {\n                return;\n            }\n        }\n        if (true) {\n            if (true)\n                c = null;\n        }\n    }\n    private void foo89() {\n        final int a = 8;\n        String b; \n        switch (a) {\n            case 8:\n                b = \"b\";\n                break;\n            default:\n                b = \"c\";\n                break;\n        }\n    }\n    private void foo90() {\n        final int a = 8;\n        String b;\n        switch (a) {\n            default:\n                b = \"c\";\n        }\n        b = \"b\";\n    }\n    private void foo91() {\n        Integer[] s;\n        if (true) {\n            s = new Integer[0];\n        } else {\n            s = new Integer[5];\n            if (true) {\n                final ArrayList<Integer> retain = new ArrayList<>();\n                for (final Integer c : s) {\n                    if (true) {\n                        retain.add(c);\n                    }\n                }\n                s = retain.toArray(new Integer[retain.size()]);\n            }\n            if (true && s.length > 0) {\n                s = new Integer[] {s[0]};\n            }\n        }\n        Arrays.toString(s);\n    }\n    private void foo92() {\n        String tqa;\n        if (true) {\n            tqa = null;\n            if (true) {\n            }\n        }\n        else {\n            if (true) {\n            }\n            tqa = \"a\";\n            if (true) {\n            }\n            if (tqa == null) {\n                if (true) {\n                }\n                tqa = \"b\";\n                if (true) {\n                    if (tqa == \"abc\") {\n                    } else if (tqa != null) {\n                    } else {\n                    }\n                }\n            }\n            if (tqa == \"bcd\") {\n                tqa = null;\n            }\n            if (tqa == null) {\n                if (true) {\n                    if (true) {\n                    }\n                } else {\n                    if (true) {\n                    }\n                    tqa = \"c\";\n                    if (true) {\n                    }\n                }\n            }\n        }\n    }\n    private void foo93() {\n        if (true) {\n            String evictedCopy;\n            if (true) {\n                final String evictedEntry = \"a\";\n                evictedCopy = evictedEntry;\n            } else {\n                evictedCopy = \"c\";\n                for (int i = 0; i < 0; ++i) {\n                    evictedCopy.trim();\n                }\n                evictedCopy = evictedCopy.trim();\n            }\n        }\n    }\n    private void foo94() {\n        String valueClass;\n        if (true) {\n            valueClass = \"a\";\n        }\n        else if (true) {\n            valueClass = \"b\";\n            if (valueClass == null) {\n                if (true) {\n                }\n                if (true) {\n                }\n                valueClass = \"c\";\n            }\n        }\n        else {\n            valueClass = \"d\";\n        }\n    }\n    private void foo95() {\n        String profileValueSource;\n        if (true) {\n            profileValueSource = \"a\";\n        }\n        else {\n            try {\n                profileValueSource = \"b\";\n            }\n            catch (Exception e) {\n                if (true) {\n                }\n                profileValueSource = \"c\";\n            }\n        }\n    }\n    private void foo96() {\n        Object arg;\n        if (true) {\n            arg = \"a\";\n        }\n        else if (true) {\n            arg = \"b\";\n        }\n        else if (true) {\n            arg = \"c\";\n        }\n        else if (true) {\n            arg = \"d\";\n        }\n        else if (true) {\n            arg = \"e\";\n        }\n        else if (true) {\n            arg = \"f\";\n        }\n        else {\n            try {\n                arg = \"g\";\n                if (arg != null) {\n                    if (true) {\n                    }\n                }\n            }\n            catch (Exception ex) {\n                arg = null;\n            }\n        }\n    }\n    private void foo97() {\n        if (true) {\n            String evictedCopy;\n            if (true) {\n                evictedCopy = \"b\";\n            } else {\n                evictedCopy = \"c\";\n                for (int i = 0; i < 0; ++i) {\n                }\n                evictedCopy = \"d\";\n            }\n        }\n    }\n    private void foo98() {\n        if (true) {\n            String evictedCopy;\n            if (true) {\n                evictedCopy = \"b\";\n            } else {\n                evictedCopy = \"c\";\n                for (int i = 0; i < 0; ++i) {\n                }\n                evictedCopy = \"d\";\n            }\n        }\n    }\n    private void foo99() {\n        int insertionPoint;\n        if (true) {\n            insertionPoint = 0;\n        } else if (true) {\n            insertionPoint = 1;\n        } else {\n            insertionPoint = 2;\n            if (insertionPoint < 0) {\n                insertionPoint = -insertionPoint - 1;\n            } else {\n                insertionPoint++;\n            }\n        }\n    }\n    private void foo100() {\n        String result;\n        if (true) {\n            result = \"a\";\n        } else {\n            result = \"b\";\n            if (result != null) {\n            }\n            result = \"c\";\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableFive.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        14,
        25,
        57,
        60,
        81
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableFive {\n    class class5 {\n        public void test1(){\n            final boolean b = false;\n            int shouldBeFinal; \n            if(b){\n                if(b){\n                    shouldBeFinal = 1;\n                } else {\n                    shouldBeFinal = 2;\n                }\n            }\n        }\n        public void test2() {\n            final int b = 10;\n            int shouldBeFinal; \n            switch (b) {\n                case 0:\n                    switch (b) {\n                        case 0:\n                            shouldBeFinal = 1;\n                            break;\n                        default:\n                            shouldBeFinal = 2;\n                            break;\n                    }\n                    break;\n                default:\n                    shouldBeFinal = 3;\n                    break;\n            }\n        }\n        public void test3() {\n            int x;    \n            try {\n                x = 0;\n                try {\n                    x = 0;\n                } catch (final Exception e) {\n                    x = 1;\n                }\n            } catch (final Exception e) {\n                x = 1;\n            }\n        }\n        public void test4() {\n            int shouldBeFinal; \n            class Bar {\n                void bar () {\n                    int shouldBeFinal;\n                    final boolean b = false;\n                    if (b) {\n                        if (b) {\n                            shouldBeFinal = 1;\n                        } else {\n                            shouldBeFinal = 2;\n                        }\n                    } else {\n                        shouldBeFinal = 2;\n                    }\n                }\n            }\n            abstract class Bar2 {\n                abstract void method(String param);\n            }\n        }\n        public void test5() {\n            InputFinalLocalVariableFive table = new InputFinalLocalVariableFive();\n            new Runnable() {\n                @Override\n                public void run() {\n                    InputFinalLocalVariableFive table = null;\n                    table = new InputFinalLocalVariableFive();\n                }\n            };\n        }\n        public void test6() {\n            byte tmpByte[];\n            if (true) {\n                if (true) {\n                    tmpByte = new byte[0];\n                }\n            } else {\n                if (true) {\n                    if (true) {\n                        tmpByte = new byte[1];\n                    }\n                }\n                if (false) {\n                    if (true) {\n                        tmpByte = new byte[2];\n                    }\n                }\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableFour.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        15,
        27,
        71,
        84,
        87
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableFour {\n    class Class3 {\n        public void test1() {\n            final boolean b = true;\n            int shouldBeFinal; \n            if (b) {\n                shouldBeFinal = 1;\n            }\n            else {\n                shouldBeFinal = 2;\n            }\n        }\n        public void test2() {\n            final int b = 10;\n            int shouldBeFinal; \n            switch (b) {\n                case 0:\n                    shouldBeFinal = 1;\n                    break;\n                default:\n                    shouldBeFinal = 2;\n                    break;\n            }\n        }\n        public void test3() {\n            int x;        \n            try {\n                x = 0;\n            } catch (final Exception e) {\n                x = 1;\n            }\n            int y;        \n            try {\n                y = 0;\n            } finally {\n                y = 1;\n            }\n        }\n        public void test4() {\n            final boolean b = false;\n            int x;        \n            if (b) {\n                x = 1;\n            } else {\n                x = 2;\n            }\n            if(b) {\n                x = 3;\n            }\n        }\n        public void test5() {\n            final boolean b = false;\n            int shouldBeFinal;    \n            if(b) {\n            }\n            if (b) {\n                shouldBeFinal = 1;\n            } else {\n                shouldBeFinal = 2;\n            }\n        }\n    }\n    class class4 {\n        public void foo() {\n            int shouldBeFinal;    \n            class Bar {\n                void bar () {\n                    int shouldBeFinal;\n                    final boolean b = false;\n                    if (b) {\n                        shouldBeFinal = 1;\n                    } else {\n                        shouldBeFinal = 2;\n                    }\n                }\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableInterface.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        12,
        13,
        18,
        20,
        27
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableInterface {\n    interface Test {\n        static void test (String param) { \n            String local = \"\"; \n            System.out.println (param);\n        }\n        void method (int aParam);\n        default void init (int aParam) {} \n        static int parseInteger(String num) {\n            int result = 0;\n            try {\n                result = Integer.parseInt(num);\n            }\n            catch (NumberFormatException e) {} \n            return result;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableNameLambda.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        42
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\nimport java.math.BigDecimal;\nimport java.util.function.Function;\npublic class InputFinalLocalVariableNameLambda {\n    private interface Lambda {\n        public Object op(AugmentedOrder a, AugmentedOrder b);\n    }\n    private static class AugmentedOrder {\n        public BigDecimal reduce(final BigDecimal zero, final Lambda l) {\n            return null;\n        }\n        public Object add(final Object amount) {\n            return null;\n        }\n        public Object getAmount() {\n            return null;\n        }\n    }\n    private void addTotalValueOfOrder(final AugmentedOrder order) {\n    final BigDecimal totalValueOfOrder = order\n            .reduce(BigDecimal.ZERO,\n                    (t, u) -> t.add(u.getAmount()));\n }\n    public static void main(final String[] args) {\n        final Function<Integer, Integer> doubleValue = (x) -> { return x * 2; };\n    }\n}\ninterface Operation {\n    public Object apply();\n    public static final Operation OPERATION = () -> {\n        Object result; \n        result = null;\n        return result;\n    };\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableNameShadowing.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        11,
        24
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\nclass InputFinalLocalVariableNameShadowing {\n    public void foo(String text) { \n        System.identityHashCode(text);\n        class Bar {\n            void bar (String text) {\n                text = \"xxx\";\n            }\n        }\n    }\n}\nclass Foo2 {\n    public void foo() {\n        int x; \n        class Bar {\n            void bar () {\n                int x = 1;\n                x++;\n                x++;\n            }\n        }\n    }\n}\nenum InputFinalLocalVariableNameShadowingEnum{\n    test;\n    final String foo1 = \"error\";\n    InputFinalLocalVariableNameShadowingEnum()\n    {\n        String foo = foo1;\n        foo += foo1;\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableOne.java",
      "expected-problems": 13,
      "expected-linenumbers": [
        17,
        28,
        31,
        33,
        37,
        43,
        48,
        64,
        67,
        69,
        73,
        82,
        83
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableOne {\n    private int m_ClassVariable = 0;\n    static\n    {\n        int i, j = 0; \n        Runnable runnable = new Runnable()\n        {\n            public void run()\n            {\n            }\n        };\n    }\n    public InputFinalLocalVariableOne()\n    {\n        int i = 0; \n        final int j = 2;\n        int z; \n        Object obj = new Object(); \n        int k = 0;\n        String x = obj.toString(); \n        k++;\n        k = 2;\n        Runnable runnable = new Runnable()\n        {\n            public void run()\n            {\n                int q = 0; \n            }\n        };\n    }\n    public void method(int aArg, final int aFinal, int aArg2)\n    {\n        int z = 0;\n        z++;\n        aArg2++;\n    }\n    public void aMethod()\n    {\n        int i = 0; \n        final int j = 2;\n        int z; \n        Object obj = new Object(); \n        int k = 0;\n        String x = obj.toString(); \n        k++;\n        final class Inner\n        {\n            public Inner()\n            {\n                int w = 0; \n                Runnable runnable = new Runnable()\n                {\n                    public void run()\n                    {\n                    }\n                };\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableThree.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        13,
        19,
        40,
        46,
        47,
        56,
        57,
        78,
        91,
        101
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableThree {\n    class class2 {\n        public void method1() {\n            int x; \n            x = 3;\n        }\n        public void method2() {\n            for (int i = 0; i < 5; i++) {\n                int x; \n                x = 3;\n            }\n            int y;\n            for (int i = 0; i < 5; i++) {\n                y = 3;\n            }\n            for (int i = 0; i < 5; i++) {\n                int z;\n                for (int j = 0; j < 5; j++) {\n                    z = 3;\n                }\n            }\n        }\n        public void method3() {\n            int m;\n            do {\n                m = 0;\n            } while (false);\n            do {\n                int n; \n                n = 0;\n            } while (true);\n        }\n        private void foo() {\n            int q; \n            int w; \n            int e;\n            q = 1;\n            w = 1;\n            e = 1;\n            e = 2;\n            class Local {\n                void bar() {\n                    int q;\n                    int w; \n                    int e; \n                    q = 1;\n                    q = 2;\n                    w = 1;\n                    e = 1;\n                }\n            }\n            int i;\n            for (; ; i = 1) {\n            }\n        }\n        public void method4() {\n            int m;\n            int i = 5;\n            while (i > 1) {\n                m = 0;\n                i++;\n            }\n            while (true) {\n                int n; \n                n = 0;\n            }\n        }\n        int[] array = new int[10];\n        public void method5() {\n            int r;\n            for (int a : array) {\n                r = 0;\n            }\n            for (int a : array) {\n                int t; \n                t = 0;\n            }\n        }\n    }\n    class classs3 {\n        public void method(final int i) {\n            switch (i) {\n                case 1:\n                    int foo = 1;    \n                    break;\n                default:\n            }\n            switch (i) {\n                case 1:\n                    int foo = 1;    \n                    break;\n                case 2:\n                    foo = 2;\n                    break;\n                default:\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFinalLocalVariableTwo.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        23,
        24,
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.finallocalvariable;\npublic class InputFinalLocalVariableTwo {\n    public void anotherMethod()\n    {\n        boolean aBool = true;\n        for (int i = 0, j = 1, k = 1; j < 10 ; j++)\n        {\n            k++;\n            aBool = false;\n        }\n        int l = 0;\n        {\n            int weird = 0; \n            int j = 0; \n            int k = 0; \n            {\n                l++;\n            }\n        }\n        int weird = 0;\n        weird++;\n        final InputFinalLocalVariableTwo.InnerClass ic\n                = new InputFinalLocalVariableTwo.InnerClass();\n        ic.mInner2 = 1;\n    }\n    class InnerClass\n    {\n        private int mInner = 0;\n        public int mInner2 = 0;\n    }\n}\ninterface Inter\n{\n    void method(int aParam);\n}\nabstract class AbstractClass\n{\n    public abstract void abstractMethod(int aParam);\n}\nclass Blah\n{\n    static\n    {\n        for(int a : getInts())\n        {\n        }\n    }\n    static int[] getInts() {\n        return null;\n    }\n}\nclass test_1241722\n{\n    private Object o_;\n    public void doSomething(Object _o)\n    {\n        System.identityHashCode(_o);\n    }\n    public void doSomething2(Object _o1)\n    {\n        o_ = _o1;\n    }\n}\nclass class1\n{\n    public class1(final int x){\n    }\n}\nclass AA {\n    {\n        int y = 0;\n        y = 9;\n    }\n}\nenum Enum1 {\n    ;\n    {\n        int var = 0;\n        var = 1;\n    }\n}"
    }
  ]
}