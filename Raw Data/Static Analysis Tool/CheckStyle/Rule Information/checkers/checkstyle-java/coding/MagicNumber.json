{
  "name": "MagicNumber",
  "language": "java",
  "description": "<div>\n Checks that there are no\n <a href=\"https://en.wikipedia.org/wiki/Magic_number_%28programming%29\">\n &quot;magic numbers&quot;</a> where a magic\n number is a numeric literal that is not defined as a constant.\n By default, -1, 0, 1, and 2 are not considered to be magic numbers.\n </div>\n\n <p>Constant definition is any variable/field that has 'final' modifier.\n It is fine to have one constant defining multiple numeric literals within one expression:\n </p>\n <pre>\n static final int SECONDS_PER_DAY = 24 * 60 * 60;\n static final double SPECIAL_RATIO = 4.0 / 3.0;\n static final double SPECIAL_SUM = 1 + Math.E;\n static final double SPECIAL_DIFFERENCE = 4 - Math.PI;\n static final Border STANDARD_BORDER = BorderFactory.createEmptyBorder(3, 3, 3, 3);\n static final Integer ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE = new Integer(42);\n </pre>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 219,
  "branches": 19,
  "apis": 38,
  "test": [
    {
      "description": "Auto test from InputMagicNumberAnnotationElement.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        19,
        20
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\n@interface InputMagicNumberAnnotationElement {\n\tint value() default 10; \n\tint[] value2() default {11}; \n}"
    },
    {
      "description": "Auto test from InputMagicNumberDefault1.java",
      "expected-problems": 16,
      "expected-linenumbers": [
        53,
        56,
        58,
        60,
        62,
        67,
        69,
        73,
        74,
        75,
        77,
        80,
        81,
        83,
        84,
        97
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberDefault1 {\n    public void magicMethod() {\n        final int INT_CONST = 101_000;\n        final long LONG_CONST1 = 100_000L;\n        final long LONG_CONST2 = 100l;\n        final float FLOAT_CONST1 = 1.500_0F;\n        final float FLOAT_CONST2 = 1.5f;\n        final double DOUBLE_CONST1 = 1.500_0D;\n        final double DOUBLE_CONST2 = 1.5d;\n        final double DOUBLE_CONST3 = 1.5;\n        int int_var1 = 1;\n        int int_var2 = (2);\n        long long_var1 = 0L;\n        long long_var2 = 0l;\n        double double_var1 = 0D;\n        double double_var2 = 0d;\n        int[] int_array = new int[2];\n        int_var1 = 1 + 2;\n        int_var1 += 1;\n        double_var1 = 1.0 + 2.0;\n        for (int i = 0; i < 2; i++);\n        if (1 < 2);\n        if (1.0 < 2.0);\n        int int_magic1 = 3_000; \n        double double_magic1 = 1.5_0; \n        int int_magic2 = (3 + 4); \n        int_array = new int[3]; \n        int_magic1 += 3;  \n        double_magic1 *= 1.5; \n        for (int j = 3; j < 5; j += 3) { \n            int_magic1++;\n        }\n        if (int_magic1 < 3) { \n            int_magic1 = int_magic1 + 3; \n        }\n        int octalVar0 = 00;\n        int octalVar8 = 010; \n        int octalVar9 = 011; \n        long longOctalVar8 = 0_10L; \n        long longOctalVar9 = 011l;  \n        int hexVar0 = 0x0;\n        int hexVar16 = 0x10; \n        int hexVar17 = 0X011; \n        long longHexVar0 = 0x0L;\n        long longHexVar16 = 0x10L; \n        long longHexVar17 = 0X11l; \n    }\n}\ninterface Blah2Default1\n{\n  int LOW = 5;\n  int HIGH = 78;\n}\nclass ArrayMagicTestDefault1\n{\n    private static final int[] NONMAGIC = {3};\n    private int[] magic = {3}; \n    private static final int[][] NONMAGIC2 = {{1}, {2}, {3}};\n}"
    },
    {
      "description": "Auto test from InputMagicNumberDefault2.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        19,
        29,
        30,
        31,
        32,
        39,
        40,
        43,
        44,
        50
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberDefault2 {\n    long l = 0xffffffffL; \n    public static final int CONST_PLUS_THREE = +3;\n    public static final int CONST_MINUS_TWO = -2;\n    private int mPlusThree = +3; \n    private int mMinusTwo = -2;  \n    private double mPlusDecimal = +3.5; \n    private double mMinusDecimal = -2.5; \n    private int hexIntMinusOne = 0xffffffff;\n    private long hexLongMinusOne = 0xffffffffffffffffL;\n    private long hexIntMinValue = 0x80000000; \n    private long hexLongMinValue = 0x8000000000000000L; \n    private int octalIntMinusOne = 037777777777;\n    private long octalLongMinusOne = 01777777777777777777777L;\n    private long octalIntMinValue = 020000000000; \n    private long octalLongMinValue = 01000000000000000000000L; \n    public static final int TESTINTVAL = (byte) 0x80;\n    public static final java.util.List MYLIST = new java.util.ArrayList() {\n        public int size() {\n            return 378; \n        }\n    };\n    public final double SpecialSum = 2 + 1e10, SpecialDifference = 4 - java.lang.Math.PI;\n    public final Integer DefaultInit = new Integer(27);\n    public final int SpecsPerDay = 24 * 60 * 60, SpecialRatio = 4 / 3;\n    public final javax.swing.border.Border StdBorder =\n            javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3);\n    enum MyEnum2Default2 {\n        A(3),\n        B(54);\n        private MyEnum2Default2(int value) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberDefault3.java",
      "expected-problems": 13,
      "expected-linenumbers": [
        21,
        26,
        31,
        35,
        39,
        43,
        45,
        49,
        53,
        57,
        75,
        76,
        86
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberDefault3 {\n    public int hashCode() {\n        return 31; \n    }\n    public int hashCode(int val) {\n        return 42; \n    }\n    public int hashcode() {\n        return 13; \n    }\n    static {\n        int x=21; \n    }\n    {\n        int y=37; \n    }\n    public InputMagicNumberDefault3() {\n        int z=101; \n    }\n    @InputMagicNumberIntMethodAnnotation(42) \n    public void another() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=43) \n    public void another2() {\n    }\n    @InputMagicNumberIntMethodAnnotation(-44) \n    public void anotherNegative() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=-45) \n    public void anotherNegative2() {\n    }\n}\nclass TestMethodCallDefault3 {\n        public TestMethodCallDefault3(int x){\n    }\n        public void method2() {\n        final TestMethodCallDefault3 dummyObject = new TestMethodCallDefault3(62);\n        }\n}\nclass BinaryDefault3 {\n    int intValue = 0b101; \n    long l = 0b1010000101000101101000010100010110100001010001011010000101000101L; \n}\n@interface AnnotationWithDefaultValueDefault3 {\n    int value() default 101;\n    int[] ar() default {102};\n}\nclass ADefault3 {\n    {\n        switch (Blah2Default1.LOW) {\n        default:\n            int b = 122; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreFieldDeclaration1.java",
      "expected-problems": 15,
      "expected-linenumbers": [
        54,
        57,
        59,
        61,
        63,
        68,
        70,
        75,
        76,
        77,
        79,
        83,
        84,
        86,
        87
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreFieldDeclaration1 {\n    public void magicMethod() {\n        final int INT_CONST = 101_000;\n        final long LONG_CONST1 = 100_000L;\n        final long LONG_CONST2 = 100l;\n        final float FLOAT_CONST1 = 1.500_0F;\n        final float FLOAT_CONST2 = 1.5f;\n        final double DOUBLE_CONST1 = 1.500_0D;\n        final double DOUBLE_CONST2 = 1.5d;\n        final double DOUBLE_CONST3 = 1.5;\n        int int_var1 = 1;\n        int int_var2 = (2);\n        long long_var1 = 0L;\n        long long_var2 = 0l;\n        double double_var1 = 0D;\n        double double_var2 = 0d;\n        int[] int_array = new int[2];\n        int_var1 = 1 + 2;\n        int_var1 += 1;\n        double_var1 = 1.0 + 2.0;\n        for (int i = 0; i < 2; i++);\n        if (1 < 2);\n        if (1.0 < 2.0);\n        int int_magic1 = 3_000; \n        double double_magic1 = 1.5_0; \n        int int_magic2 = (3 + 4); \n        int_array = new int[3]; \n        int_magic1 += 3; \n        double_magic1 *= 1.5; \n        for (int j = 3; j < 5; j += 3) { \n            int_magic1++;\n        }\n        if (int_magic1 < 3) { \n            int_magic1 = int_magic1 + 3; \n        }\n        int octalVar0 = 00;\n        int octalVar8 = 010; \n        int octalVar9 = 011; \n        long longOctalVar8 = 0_10L; \n        long longOctalVar9 = 011l; \n        int hexVar0 = 0x0;\n        int hexVar16 = 0x10; \n        int hexVar17 = 0X011;  \n        long longHexVar0 = 0x0L;\n        long longHexVar16 = 0x10L;  \n        long longHexVar17 = 0X11l; \n    }\n}\ninterface Blah2IgnoreFieldDeclaration1\n{\n  int LOW = 5;\n  int HIGH = 78;\n}\nclass ArrayMagicTestIgnoreFieldDeclaration1\n{\n    private static final int[] NONMAGIC = {3};\n    private int[] magic = {3};\n    private static final int[][] NONMAGIC2 = {{1}, {2}, {3}};\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreFieldDeclaration2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreFieldDeclaration2 {\n    long l = 0xffffffffL;\n    public static final int CONST_PLUS_THREE = +3;\n    public static final int CONST_MINUS_TWO = -2;\n    private int mPlusThree = +3;\n    private int mMinusTwo = -2;\n    private double mPlusDecimal = +3.5;\n    private double mMinusDecimal = -2.5;\n    private int hexIntMinusOne = 0xffffffff;\n    private long hexLongMinusOne = 0xffffffffffffffffL;\n    private long hexIntMinValue = 0x80000000;\n    private long hexLongMinValue = 0x8000000000000000L;\n    private int octalIntMinusOne = 037777777777;\n    private long octalLongMinusOne = 01777777777777777777777L;\n    private long octalIntMinValue = 020000000000;\n    private long octalLongMinValue = 01000000000000000000000L;\n    public static final int TESTINTVAL = (byte) 0x80;\n    public static final java.util.List MYLIST = new java.util.ArrayList() {\n        public int size() {\n            return 378; \n        }\n    };\n    public final double SpecialSum = 2 + 1e10, SpecialDifference = 4 - java.lang.Math.PI;\n    public final Integer DefaultInit = new Integer(27);\n    public final int SpecsPerDay = 24 * 60 * 60, SpecialRatio = 4 / 3;\n    public final javax.swing.border.Border StdBorder =\n            javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3);\n    enum MyEnum2IgnoreFieldDeclaration2 {\n        A_7(3),\n        B_7(54);\n        private MyEnum2IgnoreFieldDeclaration2(int value) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreFieldDeclaration3.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        21,
        26,
        31,
        35,
        39,
        43,
        45,
        49,
        53,
        57,
        87
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nclass InputMagicNumberIgnoreFieldDeclaration3 {\n    public int hashCode() {\n        return 31; \n    }\n    public int hashCode(int val) {\n        return 42; \n    }\n    public int hashcode() {\n        return 13; \n    }\n    static {\n        int x=21; \n    }\n    {\n        int y=37; \n    }\n    public InputMagicNumberIgnoreFieldDeclaration3() {\n        int z=101; \n    }\n    @InputMagicNumberIntMethodAnnotation(42) \n    public void another() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=43) \n    public void another2() {\n    }\n    @InputMagicNumberIntMethodAnnotation(-44) \n    public void anotherNegative() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=-45) \n    public void anotherNegative2() {\n    }\n}\nclass TestMethodCallIgnoreFieldDeclaration3 {\n        public TestMethodCallIgnoreFieldDeclaration3(int x){\n    }\n        public void method2() {\n        final TestMethodCallIgnoreFieldDeclaration3 dummyObject =\n                new TestMethodCallIgnoreFieldDeclaration3(62);\n        }\n}\nclass BinaryIgnoreFieldDeclaration3 {\n    int intValue = 0b101;\n    long l = 0b1010000101000101101000010100010110100001010001011010000101000101L;\n}\n@interface AnnotationWithDefaultValueIgnoreFieldDeclaration3 {\n    int value() default 101;\n    int[] ar() default {102};\n}\nclass AIgnoreFieldDeclaration3 {\n    {\n        switch (Blah2IgnoreFieldDeclaration1.LOW) {\n        default:\n            int b = 122; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreFieldDeclaration4.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        28,
        35,
        44,
        45,
        54,
        61,
        70,
        71
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nimport java.util.concurrent.Callable;\nimport java.util.function.BiFunction;\npublic class InputMagicNumberIgnoreFieldDeclaration4 {\n    public final int radius = 10;\n    public final double area = 22 / 7.0 * radius * radius;\n    public final int a[] = {4, 5};\n    public int x = 10;\n    public int y = 10 * 20;\n    public int[] z = {4, 5};\n    private static final Callable<Void> SLEEP_FOR_A_DAY = () -> {\n        Thread.sleep(86400_000);\n        return null;\n    };\n    private static final BiFunction<Integer, Integer, Integer> ADD_AND_SQUARE = (a, b) -> {\n        int sum = a + b + 5; \n        return sum * sum * 69;\n    };\n    private static final Callable<Void> SLEEP_FOR_A_DAY_EXP = new Callable<Void>() {\n        @Override\n        public Void call() throws InterruptedException {\n            Thread.sleep(86400_000); \n            return null;\n        }\n    };\n    private static final BiFunction<Integer, Integer, Integer>\n            ADD_AND_SQUARE_EXP = new BiFunction<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer a, Integer b) {\n            int sum = a + b + 5; \n            return sum * sum * 69; \n        }\n    };\n    private final Callable<Void> SLEEP_FOR_A_DAY_NS = () -> {\n        Thread.sleep(86400_000);\n        return null;\n    };\n    private final BiFunction<Integer, Integer, Integer> ADD_AND_SQUARE_NS = (a, b) -> {\n        int sum = a + b + 5; \n        return sum * sum * 69;\n    };\n    private final Callable<Void> SLEEP_FOR_A_DAY_EXP_NS = new Callable<Void>() {\n        @Override\n        public Void call() throws InterruptedException {\n            Thread.sleep(86400_000); \n            return null;\n        }\n    };\n    private final BiFunction<Integer, Integer, Integer>\n            ADD_AND_SQUARE_EXP_NS = new BiFunction<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer a, Integer b) {\n            int sum = a + b + 5; \n            return sum * sum * 69; \n        }\n    };\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreFieldDeclaration5.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        21,
        42
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\npublic class InputMagicNumberIgnoreFieldDeclaration5 {\n    public final int radius = 10;\n    public final double area = 22 / 7.0 * radius * radius;\n    public final int a[] = {4, 5};\n    public int x = 10; \n    public int y = 10 * 20;\n    public static int[] z = {4, 5, 6, 7};\n    private static final String TEST_TIME =\n       OffsetDateTime.of(2023, 11, 11, 11,\n               11, 11, 11, ZoneOffset.of(\"Z\")).toString();\n    public static int OFFSETOF_NAME = z[3]; \n    public static Object[] STABLE_OBJECT_ARRAY = new Object[4];\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreFieldDeclaration6.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        14,
        16
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreFieldDeclaration6 {\n    @interface MyAnnotation {\n        int value() default 5; \n        public static int CONSTANT = 10; \n        public static int ANOTHER_CONSTANT = 15; \n    }\n    static int regularField = 42; \n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreFieldDeclarationRecords.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        20,
        26,
        30,
        34
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreFieldDeclarationRecords {\n    @anno(6) \n    public record MyRecord() {\n        private static int myInt = 7;\n        public MyRecord{\n            int i = myInt + 1; \n            int j = myInt + 8; \n        }\n        void foo() {\n            int i = myInt + 1; \n            int j = myInt + 8; \n        }\n        public int hashCode() {\n            return 10;    \n        }\n    }\n    @interface anno {\n        int value() default 10; \n    }\n}\nclass TestClass {\n    static int X = 42;\n}\nrecord TestRecord() {\n    static int X = 42;\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreFieldDeclarationWithAnnotation.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        16,
        21,
        22
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\n@InputMagicNumberIntMethodAnnotation(3) \npublic class InputMagicNumberIgnoreFieldDeclarationWithAnnotation {\n    public void createEvents(Double d, String s) {\n        if ((d != null)  && (s != null && s.equalsIgnoreCase(\"Fiit\"))) {\n            double anotherDouble = d / 60; \n            if (anotherDouble >= 20) { \n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreHashCodeMethod1.java",
      "expected-problems": 16,
      "expected-linenumbers": [
        54,
        57,
        59,
        61,
        63,
        68,
        70,
        75,
        76,
        77,
        79,
        83,
        84,
        86,
        87,
        100
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreHashCodeMethod1 {\n    public void magicMethod() {\n        final int INT_CONST = 101_000;\n        final long LONG_CONST1 = 100_000L;\n        final long LONG_CONST2 = 100l;\n        final float FLOAT_CONST1 = 1.500_0F;\n        final float FLOAT_CONST2 = 1.5f;\n        final double DOUBLE_CONST1 = 1.500_0D;\n        final double DOUBLE_CONST2 = 1.5d;\n        final double DOUBLE_CONST3 = 1.5;\n        int int_var1 = 1;\n        int int_var2 = (2);\n        long long_var1 = 0L;\n        long long_var2 = 0l;\n        double double_var1 = 0D;\n        double double_var2 = 0d;\n        int[] int_array = new int[2];\n        int_var1 = 1 + 2;\n        int_var1 += 1;\n        double_var1 = 1.0 + 2.0;\n        for (int i = 0; i < 2; i++);\n        if (1 < 2);\n        if (1.0 < 2.0);\n        int int_magic1 = 3_000; \n        double double_magic1 = 1.5_0; \n        int int_magic2 = (3 + 4); \n        int_array = new int[3]; \n        int_magic1 += 3; \n        double_magic1 *= 1.5; \n        for (int j = 3; j < 5; j += 3) { \n            int_magic1++;\n        }\n        if (int_magic1 < 3) { \n            int_magic1 = int_magic1 + 3; \n        }\n        int octalVar0 = 00;\n        int octalVar8 = 010; \n        int octalVar9 = 011; \n        long longOctalVar8 = 0_10L; \n        long longOctalVar9 = 011l; \n        int hexVar0 = 0x0;\n        int hexVar16 = 0x10; \n        int hexVar17 = 0X011;  \n        long longHexVar0 = 0x0L;\n        long longHexVar16 = 0x10L;  \n        long longHexVar17 = 0X11l; \n    }\n}\ninterface Blah2IgnoreHashCodeMethod1\n{\n  int LOW = 5;\n  int HIGH = 78;\n}\nclass ArrayMagicTestIgnoreHashCodeMethod1\n{\n    private static final int[] NONMAGIC = {3};\n    private int[] magic = {3}; \n    private static final int[][] NONMAGIC2 = {{1}, {2}, {3}};\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreHashCodeMethod2.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        18,
        28,
        29,
        30,
        31,
        38,
        39,
        42,
        43,
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreHashCodeMethod2 {\n    long l = 0xffffffffL; \n    public static final int CONST_PLUS_THREE = +3;\n    public static final int CONST_MINUS_TWO = -2;\n    private int mPlusThree = +3; \n    private int mMinusTwo = -2; \n    private double mPlusDecimal = +3.5; \n    private double mMinusDecimal = -2.5; \n    private int hexIntMinusOne = 0xffffffff;\n    private long hexLongMinusOne = 0xffffffffffffffffL;\n    private long hexIntMinValue = 0x80000000; \n    private long hexLongMinValue = 0x8000000000000000L; \n    private int octalIntMinusOne = 037777777777;\n    private long octalLongMinusOne = 01777777777777777777777L;\n    private long octalIntMinValue = 020000000000;  \n    private long octalLongMinValue = 01000000000000000000000L; \n    public static final int TESTINTVAL = (byte) 0x80;\n    public static final java.util.List MYLIST = new java.util.ArrayList() {\n        public int size() {\n            return 378; \n        }\n    };\n    public final double SpecialSum = 2 + 1e10, SpecialDifference = 4 - java.lang.Math.PI;\n    public final Integer DefaultInit = new Integer(27);\n    public final int SpecsPerDay = 24 * 60 * 60, SpecialRatio = 4 / 3;\n    public final javax.swing.border.Border StdBorder =\n            javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3);\n    enum MyEnum2IgnoreHashCodeMethod2 {\n        A_2(3),\n        B_2(54);\n        private MyEnum2IgnoreHashCodeMethod2(int value) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreHashCodeMethod3.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        26,
        31,
        35,
        39,
        43,
        76,
        77,
        87
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nclass InputMagicNumberIgnoreHashCodeMethod3 {\n    public int hashCode() {\n        return 31;\n    }\n    public int hashCode(int val) {\n        return 42; \n    }\n    public int hashcode() {\n        return 13; \n    }\n    static {\n        int x=21; \n    }\n    {\n        int y=37; \n    }\n    public InputMagicNumberIgnoreHashCodeMethod3() {\n        int z=101; \n    }\n    @InputMagicNumberIntMethodAnnotation(42)\n    public void another() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=43)\n    public void another2() {\n    }\n    @InputMagicNumberIntMethodAnnotation(-44)\n    public void anotherNegative() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=-45)\n    public void anotherNegative2() {\n    }\n}\nclass TestMethodCallIgnoreHashCodeMethod3 {\n        public TestMethodCallIgnoreHashCodeMethod3(int x){\n    }\n        public void method2() {\n        final TestMethodCallIgnoreHashCodeMethod3 dummyObject =\n                new TestMethodCallIgnoreHashCodeMethod3(62);\n        }\n}\nclass BinaryIgnoreHashCodeMethod3 {\n    int intValue = 0b101; \n    long l = 0b1010000101000101101000010100010110100001010001011010000101000101L; \n}\n@interface AnnotationWithDefaultValueIgnoreHashCodeMethod3{\n    int value() default 101;\n    int[] ar() default {102};\n}\nclass AIgnoreHashCodeMethod3 {\n    {\n        switch (Blah2IgnoreHashCodeMethod1.LOW) {\n        default:\n            int b = 122; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreNegativeOctalHex1.java",
      "expected-problems": 14,
      "expected-linenumbers": [
        54,
        59,
        61,
        68,
        70,
        75,
        76,
        77,
        79,
        83,
        84,
        86,
        87,
        100
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreNegativeOctalHex1 {\n    public void magicMethod() {\n        final int INT_CONST = 101_000;\n        final long LONG_CONST1 = 100_000L;\n        final long LONG_CONST2 = 100l;\n        final float FLOAT_CONST1 = 1.500_0F;\n        final float FLOAT_CONST2 = 1.5f;\n        final double DOUBLE_CONST1 = 1.500_0D;\n        final double DOUBLE_CONST2 = 1.5d;\n        final double DOUBLE_CONST3 = 1.5;\n        int int_var1 = 1;\n        int int_var2 = (2);\n        long long_var1 = 0L;\n        long long_var2 = 0l;\n        double double_var1 = 0D;\n        double double_var2 = 0d;\n        int[] int_array = new int[2];\n        int_var1 = 1 + 2;\n        int_var1 += 1;\n        double_var1 = 1.0 + 2.0;\n        for (int i = 0; i < 2; i++);\n        if (1 < 2);\n        if (1.0 < 2.0);\n        int int_magic1 = 3_000; \n        double double_magic1 = 1.5_0;\n        int int_magic2 = (3 + 4); \n        int_array = new int[3]; \n        int_magic1 += 3; \n        double_magic1 *= 1.5;\n        for (int j = 3; j < 5; j += 3) { \n            int_magic1++;\n        }\n        if (int_magic1 < 3) { \n            int_magic1 = int_magic1 + 3; \n        }\n        int octalVar0 = 00;\n        int octalVar8 = 010; \n        int octalVar9 = 011; \n        long longOctalVar8 = 0_10L; \n        long longOctalVar9 = 011l; \n        int hexVar0 = 0x0;\n        int hexVar16 = 0x10; \n        int hexVar17 = 0X011;  \n        long longHexVar0 = 0x0L;\n        long longHexVar16 = 0x10L;  \n        long longHexVar17 = 0X11l; \n    }\n}\ninterface Blah2IgnoreNegativeOctalHex1\n{\n  int LOW = 5;\n  int HIGH = 78;\n}\nclass ArrayMagicTestIgnoreNegativeOctalHex1\n{\n    private static final int[] NONMAGIC = {3};\n    private int[] magic = {3}; \n    private static final int[][] NONMAGIC2 = {{1}, {2}, {3}};\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreNegativeOctalHex2.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        18,
        29,
        50
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreNegativeOctalHex2 {\n    long l = 0xffffffffL; \n    public static final int CONST_PLUS_THREE = +3;\n    public static final int CONST_MINUS_TWO = -2;\n    private int mPlusThree = +3; \n    private int mMinusTwo = -2;\n    private double mPlusDecimal = +3.5;\n    private double mMinusDecimal = -2.5;\n    private int hexIntMinusOne = 0xffffffff;\n    private long hexLongMinusOne = 0xffffffffffffffffL;\n    private long hexIntMinValue = 0x80000000;\n    private long hexLongMinValue = 0x8000000000000000L;\n    private int octalIntMinusOne = 037777777777;\n    private long octalLongMinusOne = 01777777777777777777777L;\n    private long octalIntMinValue = 020000000000;\n    private long octalLongMinValue = 01000000000000000000000L;\n    public static final int TESTINTVAL = (byte) 0x80;\n    public static final java.util.List MYLIST = new java.util.ArrayList() {\n        public int size() {\n            return 378; \n        }\n    };\n    public final double SpecialSum = 2 + 1e10, SpecialDifference = 4 - java.lang.Math.PI;\n    public final Integer DefaultInit = new Integer(27);\n    public final int SpecsPerDay = 24 * 60 * 60, SpecialRatio = 4 / 3;\n    public final javax.swing.border.Border StdBorder =\n            javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3);\n    enum MyEnum2IgnoreNegativeOctalHex2 {\n        A_2(3),\n        B_2(54);\n        private MyEnum2IgnoreNegativeOctalHex2(int value) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreNegativeOctalHex3.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        21,
        26,
        31,
        35,
        39,
        43,
        76,
        77,
        87
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nclass InputMagicNumberIgnoreNegativeOctalHex3 {\n    public int hashCode() {\n        return 31; \n    }\n    public int hashCode(int val) {\n        return 42; \n    }\n    public int hashcode() {\n        return 13; \n    }\n    static {\n        int x=21; \n    }\n    {\n        int y=37; \n    }\n    public InputMagicNumberIgnoreNegativeOctalHex3() {\n        int z=101; \n    }\n    @InputMagicNumberIntMethodAnnotation(42)\n    public void another() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=43)\n    public void another2() {\n    }\n    @InputMagicNumberIntMethodAnnotation(-44)\n    public void anotherNegative() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=-45)\n    public void anotherNegative2() {\n    }\n}\nclass TestMethodCallIgnoreNegativeOctalHex3 {\n        public TestMethodCallIgnoreNegativeOctalHex3(int x){\n    }\n        public void method2() {\n        final TestMethodCallIgnoreNegativeOctalHex3 dummyObject =\n                new TestMethodCallIgnoreNegativeOctalHex3(62);\n        }\n}\nclass BinaryIgnoreNegativeOctalHex3 {\n    int intValue = 0b101; \n    long l = 0b1010000101000101101000010100010110100001010001011010000101000101L; \n}\n@interface AnnotationWithDefaultValueIgnoreNegativeOctalHex3 {\n    int value() default 101;\n    int[] ar() default {102};\n}\nclass AIgnoreNegativeOctalHex3 {\n    {\n        switch (Blah2IgnoreNegativeOctalHex1.LOW) {\n        default:\n            int b = 122; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreNone1.java",
      "expected-problems": 27,
      "expected-linenumbers": [
        40,
        43,
        44,
        45,
        46,
        47,
        48,
        52,
        60,
        63,
        65,
        67,
        69,
        74,
        76,
        78,
        81,
        82,
        83,
        85,
        86,
        89,
        90,
        91,
        92,
        93,
        106
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreNone1 {\n    public void magicMethod() {\n        final int INT_CONST = 101_000;\n        final long LONG_CONST1 = 100_000L;\n        final long LONG_CONST2 = 100l;\n        final float FLOAT_CONST1 = 1.500_0F;\n        final float FLOAT_CONST2 = 1.5f;\n        final double DOUBLE_CONST1 = 1.500_0D;\n        final double DOUBLE_CONST2 = 1.5d;\n        final double DOUBLE_CONST3 = 1.5;\n        int int_var1 = 1; \n        int int_var2 = (2); \n        long long_var1 = 0L; \n        long long_var2 = 0l; \n        double double_var1 = 0D; \n        double double_var2 = 0d; \n        int[] int_array = new int[2]; \n        int_var1 = 1 + 2; \n        int_var1 += 1;  \n        double_var1 = 1.0 + 2.0; \n        for (int i = 0; i < 2; i++); \n        if (1 < 2); \n        if (1.0 < 2.0); \n        int int_magic1 = 3_000; \n        double double_magic1 = 1.5_0; \n        int int_magic2 = (3 + 4); \n        int_array = new int[3]; \n        int_magic1 += 3; \n        double_magic1 *= 1.5; \n        for (int j = 3; j < 5; j += 3) { \n            int_magic1++;\n        }\n        if (int_magic1 < 3) { \n            int_magic1 = int_magic1 + 3; \n        }\n        int octalVar0 = 00;  \n        int octalVar8 = 010; \n        int octalVar9 = 011; \n        long longOctalVar8 = 0_10L; \n        long longOctalVar9 = 011l; \n        int hexVar0 = 0x0; \n        int hexVar16 = 0x10; \n        int hexVar17 = 0X011;  \n        long longHexVar0 = 0x0L; \n        long longHexVar16 = 0x10L; \n        long longHexVar17 = 0X11l; \n    }\n}\ninterface Blah2IgnoreNone1\n{\n  int LOW = 5;\n  int HIGH = 78;\n}\nclass ArrayMagicTestIgnoreNone1\n{\n    private static final int[] NONMAGIC = {3};\n    private int[] magic = {3}; \n    private static final int[][] NONMAGIC2 = {{1}, {2}, {3}};\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreNone2.java",
      "expected-problems": 14,
      "expected-linenumbers": [
        19,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        47
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreNone2 {\n    long l = 0xffffffffL; \n    public static final int CONST_PLUS_THREE = +3;\n    public static final int CONST_MINUS_TWO = -2;\n    private int mPlusThree = +3; \n    private int mMinusTwo = -2; \n    private double mPlusDecimal = +3.5; \n    private double mMinusDecimal = -2.5; \n    private int hexIntMinusOne = 0xffffffff; \n    private long hexLongMinusOne = 0xffffffffffffffffL; \n    private long hexIntMinValue = 0x80000000; \n    private long hexLongMinValue = 0x8000000000000000L; \n    private int octalIntMinusOne = 037777777777;  \n    private long octalLongMinusOne = 01777777777777777777777L;  \n    private long octalIntMinValue = 020000000000;  \n    private long octalLongMinValue = 01000000000000000000000L; \n    public static final int TESTINTVAL = (byte) 0x80;\n    public static final java.util.List MYLIST = new java.util.ArrayList() {\n        public int size() {\n            return 378; \n        }\n    };\n    public final double SpecialSum = 2 + 1e10, SpecialDifference = 4 - java.lang.Math.PI;\n    public final Integer DefaultInit = new Integer(27);\n    public final int SpecsPerDay = 24 * 60 * 60, SpecialRatio = 4 / 3;\n    public final javax.swing.border.Border StdBorder =\n            javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3);\n    enum MyEnum2IgnoreNone2 {\n        A_3(3),\n        B_3(54);\n        private MyEnum2IgnoreNone2(int value) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreNone3.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        21,
        26,
        31,
        35,
        39,
        43,
        75,
        76,
        86
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nclass InputMagicNumberIgnoreNone3 {\n    public int hashCode() {\n        return 31; \n    }\n    public int hashCode(int val) {\n        return 42; \n    }\n    public int hashcode() {\n        return 13; \n    }\n    static {\n        int x=21; \n    }\n    {\n        int y=37; \n    }\n    public InputMagicNumberIgnoreNone3() {\n        int z=101; \n    }\n    @InputMagicNumberIntMethodAnnotation(42)\n    public void another() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=43)\n    public void another2() {\n    }\n    @InputMagicNumberIntMethodAnnotation(-44)\n    public void anotherNegative() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=-45)\n    public void anotherNegative2() {\n    }\n}\nclass TestMethodCallIgnoreNone3 {\n        public TestMethodCallIgnoreNone3(int x){\n    }\n        public void method2() {\n        final TestMethodCallIgnoreNone3 dummyObject = new TestMethodCallIgnoreNone3(62);\n        }\n}\nclass BinaryIgnoreNone3 {\n    int intValue = 0b101; \n    long l = 0b1010000101000101101000010100010110100001010001011010000101000101L; \n}\n@interface AnnotationWithDefaultValueIgnoreNone3 {\n    int value() default 101;\n    int[] ar() default {102};\n}\nclass AIgnoreNone3 {\n    {\n        switch (Blah2IgnoreNone1.LOW) {\n        default:\n            int b = 122; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreSome1.java",
      "expected-problems": 15,
      "expected-linenumbers": [
        37,
        42,
        44,
        47,
        48,
        50,
        52,
        57,
        58,
        63,
        64,
        76,
        79,
        84,
        87
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreSome1 {\n    public void magicMethod() {\n        final int INT_CONST = 101_000;\n        final long LONG_CONST1 = 100_000L;\n        final long LONG_CONST2 = 100l;\n        final float FLOAT_CONST1 = 1.500_0F;\n        final float FLOAT_CONST2 = 1.5f;\n        final double DOUBLE_CONST1 = 1.500_0D;\n        final double DOUBLE_CONST2 = 1.5d;\n        final double DOUBLE_CONST3 = 1.5;\n        int int_var1 = 1;\n        int int_var2 = (2); \n        long long_var1 = 0L;\n        long long_var2 = 0l;\n        double double_var1 = 0D;\n        double double_var2 = 0d;\n        int[] int_array = new int[2]; \n        int_var1 = 1 + 2; \n        int_var1 += 1;\n        double_var1 = 1.0 + 2.0; \n        for (int i = 0; i < 2; i++); \n        if (1 < 2); \n        if (1.0 < 2.0); \n        int int_magic1 = 3_000;\n        double double_magic1 = 1.5_0; \n        int int_magic2 = (3 + 4); \n        int_array = new int[3];\n        int_magic1 += 3;\n        double_magic1 *= 1.5; \n        for (int j = 3; j < 5; j += 3) { \n            int_magic1++;\n        }\n        if (int_magic1 < 3) {\n            int_magic1 = int_magic1 + 3;\n        }\n        int octalVar0 = 00;\n        int octalVar8 = 010;\n        int octalVar9 = 011; \n        long longOctalVar8 = 0_10L;\n        long longOctalVar9 = 011l; \n        int hexVar0 = 0x0;\n        int hexVar16 = 0x10;\n        int hexVar17 = 0X011;  \n        long longHexVar0 = 0x0L;\n        long longHexVar16 = 0x10L;\n        long longHexVar17 = 0X11l; \n    }\n}\ninterface Blah2IgnoreSome1\n{\n  int LOW = 5;\n  int HIGH = 78;\n}\nclass ArrayMagicTestIgnoreSome1\n{\n    private static final int[] NONMAGIC = {3};\n    private int[] magic = {3};\n    private static final int[][] NONMAGIC2 = {{1}, {2}, {3}};\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreSome2.java",
      "expected-problems": 13,
      "expected-linenumbers": [
        19,
        31,
        32,
        33,
        34,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIgnoreSome2 {\n    long l = 0xffffffffL; \n    public static final int CONST_PLUS_THREE = +3;\n    public static final int CONST_MINUS_TWO = -2;\n    private int mPlusThree = +3;\n    private int mMinusTwo = -2; \n    private double mPlusDecimal = +3.5; \n    private double mMinusDecimal = -2.5; \n    private int hexIntMinusOne = 0xffffffff; \n    private long hexLongMinusOne = 0xffffffffffffffffL; \n    private long hexIntMinValue = 0x80000000; \n    private long hexLongMinValue = 0x8000000000000000L; \n    private int octalIntMinusOne = 037777777777;  \n    private long octalLongMinusOne = 01777777777777777777777L;  \n    private long octalIntMinValue = 020000000000;  \n    private long octalLongMinValue = 01000000000000000000000L; \n    public static final int TESTINTVAL = (byte) 0x80;\n    public static final java.util.List MYLIST = new java.util.ArrayList() {\n        public int size() {\n            return 378; \n        }\n    };\n    public final double SpecialSum = 2 + 1e10, SpecialDifference = 4 - java.lang.Math.PI;\n    public final Integer DefaultInit = new Integer(27);\n    public final int SpecsPerDay = 24 * 60 * 60, SpecialRatio = 4 / 3;\n    public final javax.swing.border.Border StdBorder =\n            javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3);\n    enum MyEnum2IgnoreSome2 {\n        A_2(3),\n        B_2(54);\n        private MyEnum2IgnoreSome2(int value) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIgnoreSome3.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        22,
        27,
        32,
        36,
        40,
        44,
        76,
        77,
        87
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nclass InputMagicNumberIgnoreSome3 {\n    public int hashCode() {\n        return 31; \n    }\n    public int hashCode(int val) {\n        return 42; \n    }\n    public int hashcode() {\n        return 13; \n    }\n    static {\n        int x=21; \n    }\n    {\n        int y=37; \n    }\n    public InputMagicNumberIgnoreSome3() {\n        int z=101; \n    }\n    @InputMagicNumberIntMethodAnnotation(42)\n    public void another() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=43)\n    public void another2() {\n    }\n    @InputMagicNumberIntMethodAnnotation(-44)\n    public void anotherNegative() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=-45)\n    public void anotherNegative2() {\n    }\n}\nclass TestMethodCallIgnoreSome3 {\n        public TestMethodCallIgnoreSome3(int x){\n    }\n        public void method2() {\n        final TestMethodCallIgnoreSome3 dummyObject = new TestMethodCallIgnoreSome3(62);\n        }\n}\nclass BinarySome3 {\n    int intValue = 0b101; \n    long l = 0b1010000101000101101000010100010110100001010001011010000101000101L; \n}\n@interface AnnotationWithDefaultValueIgnoreSome3 {\n    int value() default 101;\n    int[] ar() default {102};\n}\nclass ASome3 {\n    {\n        switch (Blah2IgnoreSome1.LOW) {\n        default:\n            int b = 122; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIntegersOnly1.java",
      "expected-problems": 14,
      "expected-linenumbers": [
        54,
        59,
        61,
        68,
        70,
        75,
        76,
        77,
        79,
        83,
        84,
        86,
        87,
        100
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIntegersOnly1 {\n    public void magicMethod() {\n        final int INT_CONST = 101_000;\n        final long LONG_CONST1 = 100_000L;\n        final long LONG_CONST2 = 100l;\n        final float FLOAT_CONST1 = 1.500_0F;\n        final float FLOAT_CONST2 = 1.5f;\n        final double DOUBLE_CONST1 = 1.500_0D;\n        final double DOUBLE_CONST2 = 1.5d;\n        final double DOUBLE_CONST3 = 1.5;\n        int int_var1 = 1;\n        int int_var2 = (2);\n        long long_var1 = 0L;\n        long long_var2 = 0l;\n        double double_var1 = 0D;\n        double double_var2 = 0d;\n        int[] int_array = new int[2];\n        int_var1 = 1 + 2;\n        int_var1 += 1;\n        double_var1 = 1.0 + 2.0;\n        for (int i = 0; i < 2; i++);\n        if (1 < 2);\n        if (1.0 < 2.0);\n        int int_magic1 = 3_000; \n        double double_magic1 = 1.5_0;\n        int int_magic2 = (3 + 4); \n        int_array = new int[3]; \n        int_magic1 += 3; \n        double_magic1 *= 1.5;\n        for (int j = 3; j < 5; j += 3) { \n            int_magic1++;\n        }\n        if (int_magic1 < 3) { \n            int_magic1 = int_magic1 + 3; \n        }\n        int octalVar0 = 00;\n        int octalVar8 = 010; \n        int octalVar9 = 011; \n        long longOctalVar8 = 0_10L; \n        long longOctalVar9 = 011l; \n        int hexVar0 = 0x0;\n        int hexVar16 = 0x10; \n        int hexVar17 = 0X011;  \n        long longHexVar0 = 0x0L;\n        long longHexVar16 = 0x10L;  \n        long longHexVar17 = 0X11l; \n    }\n}\ninterface Blah2IntegersOnly1\n{\n  int LOW = 5;\n  int HIGH = 78;\n}\nclass ArrayMagicTestIntegersOnly1\n{\n    private static final int[] NONMAGIC = {3};\n    private int[] magic = {3}; \n    private static final int[][] NONMAGIC2 = {{1}, {2}, {3}};\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIntegersOnly2.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        18,
        29,
        30,
        39,
        40,
        43,
        44,
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberIntegersOnly2 {\n    long l = 0xffffffffL; \n    public static final int CONST_PLUS_THREE = +3;\n    public static final int CONST_MINUS_TWO = -2;\n    private int mPlusThree = +3; \n    private int mMinusTwo = -2; \n    private double mPlusDecimal = +3.5;\n    private double mMinusDecimal = -2.5;\n    private int hexIntMinusOne = 0xffffffff;\n    private long hexLongMinusOne = 0xffffffffffffffffL;\n    private long hexIntMinValue = 0x80000000; \n    private long hexLongMinValue = 0x8000000000000000L; \n    private int octalIntMinusOne = 037777777777;\n    private long octalLongMinusOne = 01777777777777777777777L;\n    private long octalIntMinValue = 020000000000;  \n    private long octalLongMinValue = 01000000000000000000000L; \n    public static final int TESTINTVAL = (byte) 0x80;\n    public static final java.util.List MYLIST = new java.util.ArrayList() {\n        public int size() {\n            return 378; \n        }\n    };\n    public final double SpecialSum = 2 + 1e10, SpecialDifference = 4 - java.lang.Math.PI;\n    public final Integer DefaultInit = new Integer(27);\n    public final int SpecsPerDay = 24 * 60 * 60, SpecialRatio = 4 / 3;\n    public final javax.swing.border.Border StdBorder =\n            javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3);\n    enum MyEnum2IntegersOnly2 {\n        A_2(3),\n        B_2(54);\n        private MyEnum2IntegersOnly2(int value) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberIntegersOnly3.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        21,
        26,
        31,
        35,
        39,
        43,
        75,
        76,
        86
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nclass InputMagicNumberIntegersOnly3 {\n    public int hashCode() {\n        return 31; \n    }\n    public int hashCode(int val) {\n        return 42; \n    }\n    public int hashcode() {\n        return 13; \n    }\n    static {\n        int x=21; \n    }\n    {\n        int y=37; \n    }\n    public InputMagicNumberIntegersOnly3() {\n        int z=101; \n    }\n    @InputMagicNumberIntMethodAnnotation(42)\n    public void another() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=43)\n    public void another2() {\n    }\n    @InputMagicNumberIntMethodAnnotation(-44)\n    public void anotherNegative() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=-45)\n    public void anotherNegative2() {\n    }\n}\nclass TestMethodCallIntegersOnly3 {\n        public TestMethodCallIntegersOnly3(int x){\n    }\n        public void method2() {\n        final TestMethodCallIntegersOnly3 dummyObject = new TestMethodCallIntegersOnly3(62);\n        }\n}\nclass BinaryIntegersOnly3 {\n    int intValue = 0b101; \n    long l = 0b1010000101000101101000010100010110100001010001011010000101000101L; \n}\n@interface AnnotationWithDefaultValueIntegersOnly3 {\n    int value() default 101;\n    int[] ar() default {102};\n}\nclass AIntegersOnly3 {\n    {\n        switch (Blah2IntegersOnly1.LOW) {\n        default:\n            int b = 122; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberLocalVariables2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberLocalVariables2 {\n    @SuppressWarnings(\"MagicNumber\")\n    private int A = 8;\n    void method() {\n        int b = 8; \n    }\n    void method2() {\n        @SuppressWarnings(\"MagicNumber\")\n        int c = 8;\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberMagicNumber.java",
      "expected-problems": 32,
      "expected-linenumbers": [
        39,
        40,
        41,
        42,
        50,
        51,
        52,
        53,
        56,
        57,
        58,
        59,
        69,
        70,
        71,
        72,
        79,
        80,
        81,
        82,
        91,
        92,
        93,
        94,
        101,
        102,
        103,
        104,
        113,
        114,
        115,
        116
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\npublic class InputMagicNumberMagicNumber {\n    private static Set<Person> p1 = new HashSet<Person>(5);\n    public Object[] values = new Object[3];\n    private String[] fStrings = new String[3];\n    private Person p = new Person(8);\n    List<Integer> multisets = new ArrayList(0x10000);\n    int i = 78;\n}\nclass Person{\n    Person(int t){}\n}\nclass C1 {\n    public void magicMethod() {\n        double double_var1 = 0D;\n        double_var1 = 1.0 + 3.0; \n        double double_magic1 = 1.5_0; \n        if (1.0 < 3.0); \n        double_magic1 *= 1.5; \n    }\n}\nclass C2 {\n    Person annon = new Person(55);\n    Object anon = new Object() {\n        public void magicMethod() {\n            Set<Person> p1 = new HashSet<Person>(5); \n            Object[] values = new Object[3]; \n            String[] fStrings = new String[3]; \n            Person p12 = new Person(8); \n            double double_var1 = 0D;\n            double_var1 = 1.0 + 3.0; \n            double double_magic1 = 1.5_0; \n            if (1.0 < 3.0); \n            double_magic1 *= 1.5; \n        }\n    };\n}\nclass C3 {\n    C1 c = new C1(){\n        public void magicMethod() {\n            double double_var1 = 0D;\n            double_var1 = 1.0 + 3.0; \n            double double_magic1 = 1.5_0; \n            if (1.0 < 3.0); \n            double_magic1 *= 1.5; \n        }\n    };\n    final Object anon = new Object() {\n        public void magicMethod() {\n            double double_var1 = 0D;\n            double_var1 = 1.0 + 3.0; \n            double double_magic1 = 1.5_0; \n            if (1.0 < 3.0); \n            double_magic1 *= 1.5; \n        }\n    };\n}\nclass C4 {\n    C2 cn = new C2(){\n        public void magicMethod() {\n            double double_var1 = 0D;\n            double_var1 = 1.0 + 3.0; \n            double double_magic1 = 1.5_0; \n            if (1.0 < 3.0); \n            double_magic1 *= 1.5; \n        }\n    };\n    final Object anon = new Object() {\n        public void magicMethod() {\n            double double_var1 = 0D;\n            double_var1 = 1.0 + 3.0; \n            double double_magic1 = 1.5_0; \n            if (1.0 < 3.0); \n            double_magic1 *= 1.5; \n        }\n    };\n}\nclass Class1 {\n    Person person2 = new Person(12) {\n        public void magicMethod() {\n            double double_var1 = 0D;\n            double_var1 = 1.0 + 3.0; \n            double double_magic1 = 1.5_0; \n            if (1.0 < 3.0); \n            double_magic1 *= 1.5; \n        }\n    };\n}"
    },
    {
      "description": "Auto test from InputMagicNumberMagicNumber2.java",
      "expected-problems": 17,
      "expected-linenumbers": [
        26,
        28,
        29,
        34,
        42,
        44,
        45,
        50,
        51,
        52,
        53,
        54,
        67,
        68,
        69,
        70,
        71
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\npublic class InputMagicNumberMagicNumber2 {\n    {\n        int a = 0;\n        int b = 9; \n        double e = 0;\n        double c = 5.5; \n        float d = 12.2f; \n    }\n    void foo(){\n        {\n            int notField = 45; \n            int notField2 = 1;\n        }\n    }\n    void foo2() {\n        {\n            int a = 0;\n            int b = 9; \n            double e = 0;\n            double c = 5.5; \n            float d = 12.2f; \n        }\n    }\n    {\n        Set<Person> p1 = new HashSet<Person>(5); \n        Object[] values = new Object[5]; \n        String[] fStrings = new String[5]; \n        Person p = new Person(5); \n        List<Integer> multisets = new ArrayList(5); \n    }\n    {\n        Set<Person> p1 = new HashSet<Person>(1);\n        Object[] values = new Object[1];\n        String[] fStrings = new String[1];\n        Person p = new Person(1);\n        List<Integer> multisets = new ArrayList(1);\n    }\n    void method() {\n        {\n            Set<Person> p1 = new HashSet<Person>(5); \n            Object[] values = new Object[5]; \n            String[] fStrings = new String[5]; \n            Person p = new Person(5); \n            List<Integer> multisets = new ArrayList(5); \n        }\n        {\n            Set<Person> p1 = new HashSet<Person>(1);\n            Object[] values = new Object[1];\n            String[] fStrings = new String[1];\n            Person p = new Person(1);\n            List<Integer> multisets = new ArrayList(1);\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberRecordsDefault.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        20,
        22,
        26,
        30,
        34
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberRecordsDefault {\n    @anno(6) \n    public record MyRecord() {\n        private static int myInt = 7; \n        public MyRecord{\n            int i = myInt + 1; \n            int j = myInt + 8; \n        }\n        void foo() {\n            int i = myInt + 1; \n            int j = myInt + 8; \n        }\n        public int hashCode() {\n            return 10;    \n        }\n    }\n    @interface anno {\n        int value() default 10; \n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberWaiverParentToken1.java",
      "expected-problems": 16,
      "expected-linenumbers": [
        52,
        55,
        57,
        59,
        61,
        66,
        68,
        73,
        74,
        75,
        77,
        81,
        82,
        84,
        85,
        98
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberWaiverParentToken1 {\n    public void magicMethod() {\n        final int INT_CONST = 101_000;\n        final long LONG_CONST1 = 100_000L;\n        final long LONG_CONST2 = 100l;\n        final float FLOAT_CONST1 = 1.500_0F;\n        final float FLOAT_CONST2 = 1.5f;\n        final double DOUBLE_CONST1 = 1.500_0D;\n        final double DOUBLE_CONST2 = 1.5d;\n        final double DOUBLE_CONST3 = 1.5;\n        int int_var1 = 1;\n        int int_var2 = (2);\n        long long_var1 = 0L;\n        long long_var2 = 0l;\n        double double_var1 = 0D;\n        double double_var2 = 0d;\n        int[] int_array = new int[2];\n        int_var1 = 1 + 2;\n        int_var1 += 1;\n        double_var1 = 1.0 + 2.0;\n        for (int i = 0; i < 2; i++);\n        if (1 < 2);\n        if (1.0 < 2.0);\n        int int_magic1 = 3_000; \n        double double_magic1 = 1.5_0; \n        int int_magic2 = (3 + 4);  \n        int_array = new int[3];  \n        int_magic1 += 3;   \n        double_magic1 *= 1.5; \n        for (int j = 3; j < 5; j += 3) {  \n            int_magic1++;\n        }\n        if (int_magic1 < 3) { \n            int_magic1 = int_magic1 + 3; \n        }\n        int octalVar0 = 00;\n        int octalVar8 = 010;  \n        int octalVar9 = 011;  \n        long longOctalVar8 = 0_10L; \n        long longOctalVar9 = 011l;  \n        int hexVar0 = 0x0;\n        int hexVar16 = 0x10;  \n        int hexVar17 = 0X011; \n        long longHexVar0 = 0x0L;\n        long longHexVar16 = 0x10L; \n        long longHexVar17 = 0X11l; \n    }\n}\ninterface Blah2WaiverParentToken1\n{\n  int LOW = 5;\n  int HIGH = 78;\n}\nclass ArrayMagicTestWaiverParentToken1\n{\n    private static final int[] NONMAGIC = {3};\n    private int[] magic = {3};  \n    private static final int[][] NONMAGIC2 = {{1}, {2}, {3}};\n}"
    },
    {
      "description": "Auto test from InputMagicNumberWaiverParentToken2.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        16,
        27,
        28,
        29,
        30,
        37,
        38,
        41,
        42,
        47,
        53
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberWaiverParentToken2 {\n    long l = 0xffffffffL; \n    public static final int CONST_PLUS_THREE = +3;\n    public static final int CONST_MINUS_TWO = -2;\n    private int mPlusThree = +3; \n    private int mMinusTwo = -2;  \n    private double mPlusDecimal = +3.5; \n    private double mMinusDecimal = -2.5; \n    private int hexIntMinusOne = 0xffffffff;\n    private long hexLongMinusOne = 0xffffffffffffffffL;\n    private long hexIntMinValue = 0x80000000; \n    private long hexLongMinValue = 0x8000000000000000L; \n    private int octalIntMinusOne = 037777777777;\n    private long octalLongMinusOne = 01777777777777777777777L;\n    private long octalIntMinValue = 020000000000; \n    private long octalLongMinValue = 01000000000000000000000L;  \n    public static final int TESTINTVAL = (byte) 0x80;\n    public static final java.util.List MYLIST = new java.util.ArrayList() {\n        public int size() {\n            return 378; \n        }\n    };\n    public final double SpecialSum = 2 + 1e10, SpecialDifference = 4 - java.lang.Math.PI;\n    public final Integer DefaultInit = new Integer(27); \n    public final int SpecsPerDay = 24 * 60 * 60, SpecialRatio = 4 / 3;\n    public final javax.swing.border.Border StdBorder =\n            javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3); \n    enum MyEnum2WaiverParentToken2 {\n        A(3),\n        B(54);\n        private MyEnum2WaiverParentToken2(int value) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberWaiverParentToken3.java",
      "expected-problems": 14,
      "expected-linenumbers": [
        19,
        24,
        29,
        33,
        37,
        41,
        43,
        47,
        51,
        55,
        69,
        74,
        75,
        85
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\nclass InputMagicNumberWaiverParentToken3 {\n    public int hashCode() {\n        return 31; \n    }\n    public int hashCode(int val) {\n        return 42; \n    }\n    public int hashcode() {\n        return 13; \n    }\n    static {\n        int x=21; \n    }\n    {\n        int y=37; \n    }\n    public InputMagicNumberWaiverParentToken3() {\n        int z=101; \n    }\n    @InputMagicNumberIntMethodAnnotation(42) \n    public void another() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=43) \n    public void another2() {\n    }\n    @InputMagicNumberIntMethodAnnotation(-44) \n    public void anotherNegative() {\n    }\n    @InputMagicNumberIntMethodAnnotation(value=-45)  \n    public void anotherNegative2() {\n    }\n}\nclass TestMethodCallWaiverParentToken3 {\n        public TestMethodCallWaiverParentToken3(int x){\n    }\n        public void method2() {\n        final TestMethodCallWaiverParentToken3 dummyObject =\n                new TestMethodCallWaiverParentToken3(62); \n        }\n}\nclass BinaryWaiverParentToken3 {\n    int intValue = 0b101; \n    long l = 0b1010000101000101101000010100010110100001010001011010000101000101L; \n}\n@interface AnnotationWithDefaultValueWaiverParentToken3 {\n    int value() default 101;\n    int[] ar() default {102};\n}\nclass A {\n    {\n        switch (Blah2WaiverParentToken1.LOW) {\n        default:\n            int b = 122; \n        }\n    }\n}\n@interface InputMagicNumberIntMethodAnnotation {\n        int value();\n}"
    },
    {
      "description": "Auto test from InputMagicNumberWithOperatorsWithIgnoreFieldsFalse.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        52,
        54,
        55,
        56,
        57,
        58,
        59,
        60
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberWithOperatorsWithIgnoreFieldsFalse {\n    public static final int BIT0 = 1 << 3; \n    public static final int BIT1 = 1 >> 3;\n    public static final int BIT2 = 1 >>> 3;\n    public static final int BIT3 = 1 | 3;\n    public static final int BIT4 = 1 & 3;\n    public static final int BIT5 = 1 ^ 3;\n    public static final int BIT6 = 1 | 3;\n    public static final int BIT7 = ~3;\n    public static final boolean BIT8 = 1 != 3;\n    public static final boolean BIT9 = 1 > 3;\n    public static final int BIT10 = 1 % 3;\n    public static final int BIT11 = 1 > 3 ? 1 : 3;\n    public static final int BIT12 = 1 % 3;\n    public static int bit0 = 1 << 3; \n    public static int bit1 = 1 >> 3;\n    public static int bit2 = 1 >>> 3;\n    public static int bit3 = 1 | 3;\n    public static int bit4 = 1 & 3;\n    public static int bit5 = 1 ^ 3;\n    public static int bit6 = 1 | 3;\n    public static int bit7 = ~3;\n    void m1() {\n        final int BIT0 = 1 << 3; \n        final int BIT1 = 1 >> 3;\n        final int BIT2 = 1 >>> 3;\n        final int BIT3 = 1 | 3;\n        final int BIT4 = 1 & 3;\n        final int BIT5 = 1 ^ 3;\n        final int BIT6 = 1 | 3;\n        final int BIT7 = ~3;\n        int bit0 = 1 << 3; \n        int bit1 = 1 >> 3; \n        int bit2 = 1 >>> 3; \n        int bit3 = 1 | 3; \n        int bit4 = 1 & 3; \n        int bit5 = 1 ^ 3; \n        int bit6 = 1 | 3; \n        int bit7 = ~3; \n    }\n}"
    },
    {
      "description": "Auto test from InputMagicNumberWithOperatorsWithIgnoreFieldsTrue.java",
      "expected-problems": 16,
      "expected-linenumbers": [
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        52,
        54,
        55,
        56,
        57,
        58,
        59,
        60
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.magicnumber;\npublic class InputMagicNumberWithOperatorsWithIgnoreFieldsTrue {\n    public static final int BIT0 = 1 << 3; \n    public static final int BIT1 = 1 >> 3;\n    public static final int BIT2 = 1 >>> 3;\n    public static final int BIT3 = 1 | 3;\n    public static final int BIT4 = 1 & 3;\n    public static final int BIT5 = 1 ^ 3;\n    public static final int BIT6 = 1 | 3;\n    public static final int BIT7 = ~3;\n    public static final boolean BIT8 = 1 != 3;\n    public static final boolean BIT9 = 1 > 3;\n    public static final int BIT10 = 1 % 3;\n    public static final int BIT11 = 1 > 3 ? 1 : 3;\n    public static final int BIT12 = 1 % 3;\n    public static int bit0 = 1 << 3; \n    public static int bit1 = 1 >> 3; \n    public static int bit2 = 1 >>> 3; \n    public static int bit3 = 1 | 3; \n    public static int bit4 = 1 & 3; \n    public static int bit5 = 1 ^ 3; \n    public static int bit6 = 1 | 3; \n    public static int bit7 = ~3; \n    void m1() {\n        final int BIT0 = 1 << 3; \n        final int BIT1 = 1 >> 3;\n        final int BIT2 = 1 >>> 3;\n        final int BIT3 = 1 | 3;\n        final int BIT4 = 1 & 3;\n        final int BIT5 = 1 ^ 3;\n        final int BIT6 = 1 | 3;\n        final int BIT7 = ~3;\n        int bit0 = 1 << 3; \n        int bit1 = 1 >> 3; \n        int bit2 = 1 >>> 3; \n        int bit3 = 1 | 3; \n        int bit4 = 1 & 3; \n        int bit5 = 1 ^ 3; \n        int bit6 = 1 | 3; \n        int bit7 = ~3; \n    }\n}"
    }
  ]
}