{
  "name": "AvoidDoubleBraceInitialization",
  "language": "java",
  "description": "<div>\n Detects double brace initialization.\n </div>\n\n <p>\n Rationale: Double brace initialization (set of\n <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n and should be avoided.\n This is also can lead to a hard-to-detect memory leak, if the anonymous class instance is\n returned outside and other object(s) hold reference to it.\n Created anonymous class is not static, it holds an implicit reference to the outer class\n instance.\n See this\n <a href=\"https://blog.jooq.org/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n blog post</a> and\n <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n article</a> for more details.\n Check ignores any comments and semicolons in class body.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 44,
  "branches": 1,
  "apis": 14,
  "test": [
    {
      "description": "Auto test from InputAvoidDoubleBraceInitialization.java",
      "expected-problems": 13,
      "expected-linenumbers": [
        13,
        19,
        28,
        34,
        39,
        45,
        50,
        56,
        61,
        69,
        72,
        76,
        77
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.avoiddoublebraceinitialization;\nimport java.io.Serializable;\nimport java.util.ArrayList;\npublic class InputAvoidDoubleBraceInitialization {\n    void m() {\n        ArrayList<?> list = new ArrayList<Object>() {\n            {\n                add(null);\n            }\n        };\n        list = new ArrayList<Object>() { \n            {\n                add(null);\n            }\n            {\n                add(null);\n            }\n        };\n        list = new ArrayList<Object>() { \n            {\n                add(null);\n            }\n        };\n        list = new ArrayList<Object>() { \n            {\n                add(null);\n            } \n        };\n        list = new ArrayList<Object>() { \n            {\n                add(null);\n            }\n        };\n        list = new ArrayList<Object>() { \n                add(null);\n            }\n        };\n        list = new ArrayList<Object>() { \n            {\n                add(null);\n            }\n        };\n        list = new ArrayList<Object>() { \n            {\n                add(null);\n            } \n        };\n        list = new ArrayList<Object>() { \n            ;\n            ;\n            {}\n            ;\n            ;\n            ;\n        };\n        Object obj = new Serializable() { \n            {}\n        };\n        new ArrayList<Object>() {{ \n                add(\"1\");\n                add(\"2\");\n        }};\n        new ArrayList<Object>() {{ add(\"1\");}}; \n        new ArrayList<Object>() {{ add(\"1\");}{ add(\"2\");}};\n        list = new ArrayList<Object>() {\n            {\n                add(null);\n            }\n            public void foo() {\n            }\n        };\n        list = new ArrayList<Object>() {\n            private Object o;\n            {\n                add(null);\n            }\n        };\n        list = new ArrayList<Object>() {\n            private Object o;\n        };\n        list = new ArrayList<Object>() {\n            ;\n        };\n    }\n    {\n    }\n    enum AA {\n        ;\n        {}\n    }\n    class Inner {\n        {}\n    }\n}"
    }
  ]
}