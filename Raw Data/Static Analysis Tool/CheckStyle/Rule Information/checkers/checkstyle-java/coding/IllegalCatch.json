{
  "name": "IllegalCatch",
  "language": "java",
  "description": "<div>\n Checks that certain exception types do not appear in a {@code catch} statement.\n </div>\n\n <p>\n Rationale: catching {@code java.lang.Exception}, {@code java.lang.Error} or\n {@code java.lang.RuntimeException} is almost never acceptable.\n Novice developers often simply catch Exception in an attempt to handle\n multiple exception classes. This unfortunately leads to code that inadvertently\n catches {@code NullPointerException}, {@code OutOfMemoryError}, etc.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 52,
  "branches": 2,
  "apis": 20,
  "test": [
    {
      "description": "Auto test from InputIllegalCatchCheckDefaultTokens.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        13,
        14,
        15,
        22,
        24,
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.illegalcatch;\npublic class InputIllegalCatchCheckDefaultTokens {\n    public void foo() {\n        try { \n        } catch (RuntimeException e) { \n        } catch (Exception e) { \n        } catch (Throwable e) { \n        }\n    }\n    public void bar() {\n        try { \n        } catch (java.lang.RuntimeException e) {\n        } catch (java.lang.Exception e) {\n        } catch (java.lang.Throwable e) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputIllegalCatchCheckSuperclassException.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        14,
        23
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.illegalcatch;\npublic class InputIllegalCatchCheckSuperclassException {\n    public void foo() {\n        try { \n        } catch (RuntimeException e) {\n        } catch (Exception e) { \n        } catch (Throwable e) {\n        }\n    }\n    public void bar() {\n        try { \n        } catch (java.lang.RuntimeException e) {\n        } catch (java.lang.Exception e) {\n        } catch (java.lang.Throwable e) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputIllegalCatchCheckSuperclassThrowable.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        13,
        14,
        22,
        24
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.illegalcatch;\npublic class InputIllegalCatchCheckSuperclassThrowable {\n    public void foo() {\n        try { \n        } catch (RuntimeException e) {\n        } catch (Exception e) { \n        } catch (Throwable e) { \n        }\n    }\n    public void bar() {\n        try { \n        } catch (java.lang.RuntimeException e) {\n        } catch (java.lang.Exception e) {\n        } catch (java.lang.Throwable e) {\n        }\n    }\n}"
    }
  ]
}