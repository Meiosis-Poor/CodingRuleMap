{
  "name": "VariableDeclarationUsageDistance",
  "language": "java",
  "description": "<div>\n Checks the distance between declaration of variable and its first usage.\n Note: Any additional variables declared or initialized between the declaration and\n  the first usage of the said variable are not counted when calculating the distance.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 385,
  "branches": 65,
  "apis": 51,
  "test": [
    {
      "description": "Auto test from InputVariableDeclarationUsageDistance.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        82,
        230,
        490,
        502,
        515,
        902,
        912,
        978,
        1065
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.util.*;\npublic class InputVariableDeclarationUsageDistance {\n    private static int test1 = 0;\n    static {\n        int b = 0;\n        int d = 0;\n        {\n            d = ++b;\n        }\n    }\n    static {\n        int c = 0;\n        int a = 3;\n        int b = 2;\n        {\n            a = a + b;\n            c = b;\n        }\n        {\n            c--;\n        }\n        a = 7;\n    }\n    static {\n        int a = -1;\n        int b = 2;\n        b++;\n        int c = --b;\n        a = b; \n    }\n    public InputVariableDeclarationUsageDistance(int test1) {\n        int temp = -1;\n        this.test1 = test1;\n        temp = test1; \n    }\n    public boolean testMethod() {\n        int temp = 7;\n        new InputVariableDeclarationUsageDistance(2);\n        String.valueOf(temp); \n        boolean result = false;\n        String str = \"\";\n        if (test1 > 1) {\n            str = \"123\";\n            result = true;\n        }\n        return result;\n    }\n    public void testMethod2() {\n        int count;\n        int a = 3;\n        int b = 2;\n        {\n            a = a\n                    + b\n                    - 5\n                    + 2\n                    * a;\n            count = b; \n        }\n    }\n    public void testMethod3() {\n        int count; \n        int a = 3;\n        int b = 3;\n        a = a + b;\n        b = a + a;\n        testMethod2();\n        count = b; \n    }\n    public void testMethod4(int arg) {\n        int d = 0;\n        for (int i = 0; i < 10; i++) {\n            d++;\n            if (i > 5) {\n                d += arg;\n            }\n        }\n        String ar[] = { \"1\", \"2\" };\n        for (String st : ar) {\n            System.identityHashCode(st);\n        }\n    }\n    public void testMethod5() {\n        int arg = 7;\n        boolean b = true;\n        boolean bb = false;\n        if (b)\n            if (!bb)\n                b = false;\n        testMethod4(arg); \n    }\n    public void testMethod6() {\n        int blockNumWithSimilarVar = 3;\n        int dist = 0;\n        int index = 0;\n        int block = 0;\n        if (blockNumWithSimilarVar <= 1) {\n            do {\n                dist++;\n                if (block > 4) {\n                    break;\n                }\n                index++;\n                block++;\n            } while (index < 7);\n        } else {\n            while (index < 8) {\n                dist += block;\n                index++;\n                block++;\n            }\n        }\n    }\n    public boolean testMethod7(int a) {\n        boolean res;\n        switch (a) {\n        case 1:\n            res = true;\n            break;\n        default:\n            res = false;\n        }\n        return res;\n    }\n    public void testMethod8() {\n        int b = 0;\n        int c = 0;\n        int m = 0;\n        int n = 0;\n        {\n            c++;\n            b++;\n        }\n        {\n            n++; \n            m++; \n            b++;\n        }\n    }\n    public void testMethod9() {\n        boolean result = false;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (!b2) {\n                result = true;\n            }\n            result = true;\n        }\n    }\n    public boolean testMethod10() {\n        boolean result;\n        try {\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            result = false;\n        }\n        return result;\n    }\n    public void testMethod11() {\n        int a = 0;\n        int b = 10;\n        boolean result;\n        try {\n            b--;\n        } catch (Exception e) {\n            b++;\n            result = false; \n        } finally {\n            a++;\n        }\n    }\n    public void testMethod12() {\n        boolean result = false;\n        boolean b3 = true;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (b3) {\n                if (!b2) {\n                    result = true;\n                }\n                result = true;\n            }\n        }\n    }\n    public void testMethod13() {\n        int i = 9;\n        int j = 6;\n        int g = i + 8;\n        int k = j + 10;\n    }\n    public void testMethod14() {\n        Session s = openSession();\n        Transaction t = s.beginTransaction(); \n        A a = new A();\n        E d1 = new E();\n        C1 c = new C1();\n        E d2 = new E();\n        a.setForward(d1);\n        d1.setReverse(a);\n        c.setForward(d2); \n        d2.setReverse(c);\n        Serializable aid = s.save(a);\n        Serializable d2id = s.save(d2);\n        t.commit(); \n        s.close();\n    }\n    public boolean isCheckBoxEnabled(int path) {\n        String model = \"\";\n        if (true) {\n            for (int index = 0; index < path; ++index) {\n                int nodeIndex = model.codePointAt(path);\n                if (model.contains(\"\")) {\n                    return false;\n                }\n            }\n        } else {\n            int nodeIndex = model.codePointAt(path);\n            if (model.contains(\"\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public Object readObject(String in) throws Exception {\n        String startDay = new String(\"\");\n        String endDay = new String(\"\");\n        return new String(startDay + endDay);\n    }\n    public int[] getSelectedIndices() {\n        int[] sel = new int[5];\n        String model = \"\";\n        int a = 0;\n        a++;\n        for (int index = 0; index < 5; ++index) {\n            sel[index] = Integer.parseInt(model.valueOf(a)); \n        }\n        return sel;\n    }\n    public void testMethod15() {\n        String confDebug = \"\";\n        if (!confDebug.equals(\"\") && !confDebug.equals(\"null\")) {\n            LogLog.warn(\"The \\\"\" + \"\\\" attribute is deprecated.\");\n            LogLog.warn(\"Use the \\\"\" + \"\\\" attribute instead.\");\n            LogLog.setInternalDebugging(confDebug, true);\n        }\n        int i = 0;\n        int k = 7;\n        boolean b = false;\n        for (; i < k; i++) {\n            b = true;\n            k++;\n        }\n        int sw;\n        switch (i) {\n        case 0:\n            k++;\n            sw = 0; \n            break;\n        case 1:\n            b = false;\n            break;\n        default:\n            b = true;\n        }\n        int wh = 0;\n        b = true;\n        do {\n            k--;\n            i++;\n        } while (wh > 0); \n        if (wh > 0) {\n            k++;\n        } else if (!b) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    public void testMethod16() {\n        int wh = 1, i = 4, k = 0;\n        if (i > 0) {\n            k++;\n        } else if (wh > 0) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    protected JMenuItem createSubMenuItem(LogLevel level) {\n        final JMenuItem result = new JMenuItem(level.toString());\n        final LogLevel logLevel = level;\n        result.setMnemonic(level.toString().charAt(0));\n        result.addActionListener(new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            showLogLevelColorChangeDialog(result, logLevel);\n          }\n        });\n        return result;\n      }\n    public static Color darker(Color color, double fraction) {\n        int red = (int) Math.round(color.getRed() * (1.0 - fraction));\n        int green = (int) Math.round(color.getGreen() * (1.0 - fraction));\n        int blue = (int) Math.round(color.getBlue() * (1.0 - fraction));\n        if (red < 0) {\n            red = 0;\n        } else if (red > 255) {\n            red = 255;\n        }\n        if (green < 0) { \n            green = 0;\n        } else if (green > 255) {\n            green = 255;\n        }\n        if (blue < 0) { \n        }\n        int alpha = color.getAlpha();\n        return new Color(red, green, blue, alpha);\n    }\n    public void testFinal() {\n        AuthUpdateTask task = null;\n        final long intervalMs = 30 * 60000L; \n        Object authCheckUrl = null, authInfo = null;\n        task = new AuthUpdateTask(authCheckUrl, authInfo, new IAuthListener() {\n            @Override\n            public void authTokenChanged(String cookie, String token) {\n                fireAuthTokenChanged(cookie, token);\n            }\n        });\n        Timer timer = new Timer(\"Auth Guard\", true);\n        timer.schedule(task, intervalMs / 2, intervalMs);\n    }\n    public void testForCycle() {\n        int filterCount = 0;\n        for (int i = 0; i < 10; i++, filterCount++) {\n            int abc = 0;\n            System.identityHashCode(abc);\n            for (int j = 0; j < 10; j++) {\n                abc = filterCount;\n                System.identityHashCode(abc);\n            }\n        }\n    }\n    public void testIssue32_1()\n    {\n        Option srcDdlFile = OptionBuilder.create(\"f\");\n        Option logDdlFile = OptionBuilder.create(\"o\");\n        Option help = OptionBuilder.create(\"h\");\n        Options options = new Options();\n        options.something();\n        options.something();\n        options.something();\n        options.something();\n        options.addOption(srcDdlFile, logDdlFile, help); \n    }\n    public void testIssue32_2()\n    {\n        int mm = Integer.parseInt(\"2\");\n        long timeNow = 0;\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        cal.setTimeInMillis(timeNow);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        cal.set(Calendar.HOUR_OF_DAY, mm);\n        cal.set(Calendar.MINUTE, mm); \n    }\n    public void testIssue32_3(MyObject[] objects) {\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        for(int i=0; i<objects.length; i++) {\n            objects[i].setEnabled(true);\n            objects[i].setColor(0x121212);\n            objects[i].setUrl(\"http:\n            objects[i].setSize(789);\n            objects[i].setCalendar(cal); \n        }\n    }\n    public String testIssue32_4(boolean flag) {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"flag is \");\n        builder.append(flag);\n        final String line = \"\";\n        if(flag) {\n            builder.append(\"line of AST is:\");\n            builder.append(\"\\n\");\n            builder.append(String.valueOf(line)); \n            builder.append(\"\\n\");\n        }\n        return builder.toString();\n    }\n    public void testIssue32_5() {\n        Option a = null;\n        Option b = null;\n        Option c = null;\n        boolean isCNull = isNull(c); \n        boolean isBNull = isNull(b); \n        boolean isANull = isNull(a); \n    }\n    public void testIssue32_6() {\n        Option aOpt = null;\n        Option bOpt = null;\n        Option cOpt = null;\n        isNull(cOpt); \n        isNull(bOpt); \n        isNull(aOpt); \n    }\n    public void testIssue32_7() {\n        String line = \"abc\";\n        otherWriter.write(line);\n        line.charAt(1);\n        builder.append(line);\n        test(line, line, line);\n    }\n    public void testIssue32_8(Writer w1, Writer w2, Writer w3) {\n        String l1=\"1\", l2=\"2\", l3=\"3\";\n        w1.write(l3); \n        w2.write(l2); \n        w3.write(l1); \n    }\n    public void testIssue32_9() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        System.identityHashCode(\"message\");\n        myOption.setArgName(\"abc\"); \n    }\n    public void testIssue32_10() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        myOption.setArgName(\"q\"); \n    }\n    public int testIssue32_11(String toDir)\n            throws Exception\n    {\n        int count = 0; \n        String[] files = {};\n        System.identityHashCode(\"Data archival started\");\n        files.notify();\n        System.identityHashCode(\"sss\");\n        if (files == null || files.length == 0) {\n            System.identityHashCode(\"No files on a remote site\");\n        }\n        else {\n            System.identityHashCode(\"Files on remote site: \" + files.length);\n            for (String ftpFile : files) {\n                if (files.length == 0) {\n                    \"\".concat(\"\");\n                    ftpFile.concat(files[2]);\n                    count++;\n                }\n            }\n        }\n        System.lineSeparator();\n        return count;\n    }\n    private TreeMapNode buildTree(Object[][] tree)\n    {\n        int k = 0;\n        tree.notify();\n        TreeMapNode root = null;\n        for (Object[] s : tree) {\n            Integer id = (Integer) s[0];\n            String label = (String) s[1];\n            Integer parentId = (Integer) s[2]; \n            Number weight = (Number) s[3];\n            Number value = (Number) s[4];\n            Integer childCount = (Integer) s[5];\n            TreeMapNode node;\n            if (childCount == 0) {\n                node = new TreeMapNode(label,\n                        weight != null ? weight.doubleValue() : 0.0,\n                        new DefaultValue(value != null ? value.doubleValue()\n                                : 0.0));\n            }\n            else {\n                node = new TreeMapNode(label);\n            }\n            System.identityHashCode(id.toString() + node);\n            System.identityHashCode(node.toString() + id);\n            if (parentId == null || parentId == -1) { \n                root = node;\n            }\n            else {\n                System.identityHashCode(parentId.toString() +node);\n            }\n        }\n        return root;\n    }\n    private Session openSession() {\n        return null;\n    }\n    class Session {\n        public Transaction beginTransaction() {\n            return null;\n        }\n        public void close() {\n        }\n        public Serializable save(E d2) {\n            return null;\n        }\n        public Serializable save(A a) {\n            return null;\n        }\n    }\n    class Transaction {\n        public void commit() {\n        }\n    }\n    class A {\n        public void setForward(E d1) {\n        }\n    }\n    class E {\n        public void setReverse(C1 c) {\n        }\n        public void setReverse(A a) {\n        }\n    }\n    class C1 {\n        public void setForward(E d2) {\n        }\n    }\n    class Serializable {\n    }\n    class JMenuItem {\n        public JMenuItem(String string) {\n        }\n        public void addActionListener(ActionListener actionListener) {\n        }\n        public void setMnemonic(char charAt) {\n        }\n    }\n    class LogLevel {\n    }\n    class ActionListener {\n    }\n    class ActionEvent {\n    }\n    private void showLogLevelColorChangeDialog(JMenuItem j, LogLevel l) {   }\n    static class Color {\n        public Color(int red, int green, int blue, int alpha) {\n        }\n        public double getRed() {\n            return 0;\n        }\n        public int getAlpha() {\n            return 0;\n        }\n        public double getBlue() {\n            return 0;\n        }\n        public double getGreen() {\n            return 0;\n        }\n    }\n    class AuthUpdateTask {\n        public AuthUpdateTask(Object authCheckUrl, Object authInfo,\n                IAuthListener iAuthListener) {\n        }\n    }\n    interface IAuthListener {\n        void authTokenChanged(String cookie, String token);\n    }\n    void fireAuthTokenChanged(String s, String s1) {}\n    class Timer {\n        public Timer(String string, boolean b) {\n        }\n        public void schedule(AuthUpdateTask authUpdateTask, long l,\n                long intervalMs) {\n        }\n    }\n    class Option {\n        public void setArgName(String string) {\n        }\n    }\n    boolean isNull(Option o) {\n        return false;}\n    class Writer {\n        public void write(String l3) {\n        }\n    }\n    class Options {\n        public void addBindFile(Object object) {\n        }\n        public void\n                addOption(Option srcDdlFile, Option logDdlFile, Option help)\n        {\n        }\n        public void something()\n        {\n        }\n    }\n    class TreeMapNode {\n        public TreeMapNode(String label, double d, DefaultValue defaultValue) {\n        }\n        public TreeMapNode(String label) {\n        }\n    }\n    class DefaultValue {\n        public DefaultValue(double d) {\n        }\n    }\n    static class LogLog {\n        public static void warn(String string)\n        {\n        }\n        public static void setInternalDebugging(String confDebug, boolean b)\n        {\n        }\n    }\n    static class OptionBuilder {\n        public static Option create(String string)\n        {\n            return null;\n        }\n    }\n    class MyObject {\n        public void setEnabled(boolean b)\n        {\n        }\n        public void setCalendar(Calendar cal)\n        {\n        }\n        public void setSize(int i)\n        {\n        }\n        public void setUrl(String string)\n        {\n        }\n        public void setColor(int i)\n        {\n        }\n    }\n    static class otherWriter {\n        public static void write(String line)\n        {\n        }\n    }\n    void test(String s, String s1, String s2) {\n    }\n    static class builder {\n        public static void append(String line)\n        {\n        }\n    }\n}\nclass New2 {\n    void a() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void b() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        do {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        } while (true);\n    }\n    void c() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (;;) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void d() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i: new int[]{1,2,3}) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void f() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            System.identityHashCode(a);\n    }\n    void h() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            while (true)\n                a++;\n    }\n    void i() {\n        int a = 1;\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.lineSeparator();\n            break;\n        case 2:\n            System.lineSeparator();\n            break;\n        }\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.identityHashCode(a);\n            break;\n        case 2:\n            System.identityHashCode(a);\n            break;\n        }\n    }\n    void k() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            if (true) {\n                System.lineSeparator();\n            } else if (true) {\n                System.identityHashCode(a);\n            } else {\n                System.lineSeparator();\n            }\n        }\n    }\n    void l() {\n        int a = 1;\n        while (true) {\n            switch (hashCode()){}\n            switch (Math.max(1, 2)) {\n            case 1:\n                System.identityHashCode(a);\n                break;\n            case 2:\n                System.identityHashCode(a);\n                break;\n            }\n        }\n    }\n    void tryWithoutFinally() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        try {\n            a = 2;\n        }\n        catch(Exception e){}\n    }\n    void m() {\n        final int a = 1;\n        int b = 0;\n        if (b == 1) {\n            System.lineSeparator();\n        }\n        final int c = a + 1;\n    }\n    void test() {\n        int a = 0;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i = 0; i < 10; i++) {\n            if (true) {\n                System.identityHashCode(a);\n            }\n            else {\n                System.identityHashCode(a);\n            }\n        }\n        int b = 0;\n        try {\n            for (int i = 0; i < 10; i++) {\n                if (true) {\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    b = i;\n                }\n            }\n            System.lineSeparator();\n            System.lineSeparator();\n        }\n        catch (Exception e) {\n            System.lineSeparator();\n        }\n        finally {\n            System.identityHashCode(b);\n        }\n        int c = 0;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        if (false) {\n        }\n        else if (c == 1) {\n            if (c != 2) {\n                System.lineSeparator();\n            }\n            System.identityHashCode(c);\n        }\n        else if (c == 2) {\n            System.identityHashCode(c);\n        }\n    }\n    private void launch(Integer number ) {\n        String myInt = ( number.toString() + '\\0' );\n        boolean result = false;\n        if (number == 123)\n            result = true;\n    }\n    static int field;\n    private void n() {\n        long a = 0; \n        New2.field = 1;\n        New2.field = 2;\n        New2.field = 3;\n        New2.field = (int)a;\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistance1.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\npublic class InputVariableDeclarationUsageDistance1 {\n    private void foo() {\n        int i = 0;\n        String[][] x = { {\"foo\"} };\n        for (int first = 0; first < 5; first++) {}\n        int j = 0;\n        while (j == 1) {}\n        do {} while (i == 1);\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceAnonymous.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        18
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport javax.swing.JMenuItem;\npublic class InputVariableDeclarationUsageDistanceAnonymous {\n    public void method() {\n        JMenuItem prefs = new JMenuItem(\"Preferences...\"); \n        nothing();\n        nothing();\n        nothing();\n        prefs.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n            }\n        });\n    }\n    public void nothing() {\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceCheckSwitchExpressions.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        34,
        79,
        80,
        112,
        154,
        155,
        176,
        196
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\npublic class InputVariableDeclarationUsageDistanceCheckSwitchExpressions {\n    int howMany1(int k) {\n        return switch (k) {\n            case 1: {\n                int c = 0;\n                int a = 3;\n                int b = 2;\n                {\n                    a = a + b;\n                    c = b;\n                }\n                {\n                    c--;\n                }\n                a = 7;\n                yield 2;\n            }\n            case 2: {\n                int arg = 9; \n                int d = 0;\n                for (int i = 0; i < 10; i++) {\n                    d++;\n                    if (i > 5) {\n                        d += arg;\n                    }\n                }\n                String ar[] = {\"1\", \"2\"};\n                for (String st : ar) {\n                    System.identityHashCode(st);\n                }\n                yield 4;\n            }\n            case 3: {\n                int blockNumWithSimilarVar = 3;\n                int dist = 0;\n                int index = 0;\n                int block = 0;\n                if (blockNumWithSimilarVar <= 1) {\n                    do {\n                        dist++;\n                        if (block > 4) {\n                            break;\n                        }\n                        index++;\n                        block++;\n                    } while (index < 7);\n                } else {\n                    while (index < 8) {\n                        dist += block;\n                        index++;\n                        block++;\n                    }\n                }\n                yield 56;\n            }\n            default: {\n                int b = 0;\n                int c = 0;\n                int m = 0; \n                int n = 0; \n                {\n                    c++;\n                    b++;\n                }\n                {\n                    n++;\n                    m++;\n                    b++;\n                }\n                yield k;\n            }\n        };\n    }\n    int howMany2(int k) {\n        return switch (k) {\n            case 1 -> {\n                int c = 0;\n                int a = 3;\n                int b = 2;\n                {\n                    a = a + b;\n                    c = b;\n                }\n                {\n                    c--;\n                }\n                a = 7;\n                yield 2;\n            }\n            case 2 -> {\n                int arg = 9; \n                int d = 0;\n                for (int i = 0; i < 10; i++) {\n                    d++;\n                    if (i > 5) {\n                        d += arg;\n                    }\n                }\n                String ar[] = {\"1\", \"2\"};\n                for (String st : ar) {\n                    System.identityHashCode(st);\n                }\n                yield 3;\n            }\n            case 3 -> {\n                int blockNumWithSimilarVar = 3;\n                int dist = 0;\n                int index = 0;\n                int block = 0;\n                if (blockNumWithSimilarVar <= 1) {\n                    do {\n                        dist++;\n                        if (block > 4) {\n                            break;\n                        }\n                        index++;\n                        block++;\n                    } while (index < 7);\n                } else {\n                    while (index < 8) {\n                        dist += block;\n                        index++;\n                        block++;\n                    }\n                }\n                yield 4;\n            }\n            default -> {\n                int b = 0;\n                int c = 0;\n                int m = 0; \n                int n = 0; \n                {\n                    c++;\n                    b++;\n                }\n                {\n                    n++;\n                    m++;\n                    b++;\n                }\n                yield k;\n            }\n        };\n    }\n    public boolean equals1(Object obj) {\n        int i = 1;\n        int a = 5;\n        int b = 6;\n        switch (i) {\n            case 1:\n                int count; \n                a = a + b;\n                b = a + a;\n                count = b;\n                break;\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n        }\n        return false;\n    }\n    public boolean equals2(Object obj) {\n        int i = 1;\n        int a = 5;\n        int b = 6;\n        switch (i) {\n            case 1 -> {\n                int count; \n                a = a + b;\n                b = a + a;\n                count = b;\n            }\n        }\n        return false;\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceCheckSwitchExpressions2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\npublic class InputVariableDeclarationUsageDistanceCheckSwitchExpressions2 {\n    void issue11973() {\n        int i = -1; \n        int x = -1;\n        switch (i) {\n            case 1 -> {\n                x++;\n                i++;\n            }\n        };\n        int a = -1;\n        int a123 = switch (a) {\n            case 1 -> {\n                yield 2;\n            }\n            default -> {\n                yield a;\n            }\n        };\n        int b = -1;\n        int b123 = switch (b) {\n            case 1 -> {\n                yield b;\n            }\n            default -> {\n                yield 1;\n            }\n        };\n        int day = 1;\n        int c = -1;\n        int c123 = switch (c) {\n            case 1:\n            case 2:\n            default:\n                c++;\n                c--;\n                yield day++;\n        };\n        int day1 = 1;\n        int cc = -1;\n        int d123 = switch (cc) {\n            case 1 -> {\n                cc++;\n                cc--;\n                yield day1;\n            }\n            default -> {\n                yield 0;\n            }\n        };\n        int day2 = 1;\n        int ccc = -1;\n        int e123 = switch (ccc) {\n            case 1 -> {\n                ccc++;\n                ccc--;\n                yield ccc;\n            }\n            case 2 -> {\n                yield 2;\n            }\n            default -> {\n                ccc++;\n                ccc--;\n                ccc++;\n                day2++;\n                yield 3;\n            }\n        };\n        int u = 0;\n        switch (u) { };\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceCloseToBlock.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        14,
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\npublic class InputVariableDeclarationUsageDistanceCloseToBlock {\n    void method() {\n        int a = 3; \n        int b = 2; \n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        for (int i = 0; i < 10; i++) {\n            a = a + b;\n        }\n    }\n     void method2() {\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        run();\n        int a = 3;\n        int b = 2;\n        for (int i = 0; i < 10; i++) {\n            a = a + b;  \n        }\n    }\n    public void run() {};\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceDefault.java",
      "expected-problems": 16,
      "expected-linenumbers": [
        82,
        230,
        490,
        502,
        515,
        553,
        854,
        866,
        878,
        890,
        902,
        912,
        944,
        1000,
        1034,
        1065
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.util.*;\npublic class InputVariableDeclarationUsageDistanceDefault {\n    private static int test1 = 0;\n    static {\n        int b = 0;\n        int d = 0;\n        {\n            d = ++b;\n        }\n    }\n    static {\n        int c = 0;\n        int a = 3;\n        int b = 2;\n        {\n            a = a + b;\n            c = b;\n        }\n        {\n            c--;\n        }\n        a = 7;\n    }\n    static {\n        int a = -1;\n        int b = 2;\n        b++;\n        int c = --b;\n        a = b; \n    }\n    public InputVariableDeclarationUsageDistanceDefault(int test1) {\n        int temp = -1;\n        this.test1 = test1;\n        temp = test1; \n    }\n    public boolean testMethod() {\n        int temp = 7;\n        new InputVariableDeclarationUsageDistanceDefault(2);\n        String.valueOf(temp); \n        boolean result = false;\n        String str = \"\";\n        if (test1 > 1) {\n            str = \"123\";\n            result = true;\n        }\n        return result;\n    }\n    public void testMethod2() {\n        int count;\n        int a = 3;\n        int b = 2;\n        {\n            a = a\n                    + b\n                    - 5\n                    + 2\n                    * a;\n            count = b; \n        }\n    }\n    public void testMethod3() {\n        int count; \n        int a = 3;\n        int b = 3;\n        a = a + b;\n        b = a + a;\n        testMethod2();\n        count = b; \n    }\n    public void testMethod4(int arg) {\n        int d = 0;\n        for (int i = 0; i < 10; i++) {\n            d++;\n            if (i > 5) {\n                d += arg;\n            }\n        }\n        String ar[] = { \"1\", \"2\" };\n        for (String st : ar) {\n            System.identityHashCode(st);\n        }\n    }\n    public void testMethod5() {\n        int arg = 7;\n        boolean b = true;\n        boolean bb = false;\n        if (b)\n            if (!bb)\n                b = false;\n        testMethod4(arg); \n    }\n    public void testMethod6() {\n        int blockNumWithSimilarVar = 3;\n        int dist = 0;\n        int index = 0;\n        int block = 0;\n        if (blockNumWithSimilarVar <= 1) {\n            do {\n                dist++;\n                if (block > 4) {\n                    break;\n                }\n                index++;\n                block++;\n            } while (index < 7);\n        } else {\n            while (index < 8) {\n                dist += block;\n                index++;\n                block++;\n            }\n        }\n    }\n    public boolean testMethod7(int a) {\n        boolean res;\n        switch (a) {\n        case 1:\n            res = true;\n            break;\n        default:\n            res = false;\n        }\n        return res;\n    }\n    public void testMethod8() {\n        int b = 0;\n        int c = 0;\n        int m = 0;\n        int n = 0;\n        {\n            c++;\n            b++;\n        }\n        {\n            n++; \n            m++; \n            b++;\n        }\n    }\n    public void testMethod9() {\n        boolean result = false;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (!b2) {\n                result = true;\n            }\n            result = true;\n        }\n    }\n    public boolean testMethod10() {\n        boolean result;\n        try {\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            result = false;\n        }\n        return result;\n    }\n    public void testMethod11() {\n        int a = 0;\n        int b = 10;\n        boolean result;\n        try {\n            b--;\n        } catch (Exception e) {\n            b++;\n            result = false; \n        } finally {\n            a++;\n        }\n    }\n    public void testMethod12() {\n        boolean result = false;\n        boolean b3 = true;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (b3) {\n                if (!b2) {\n                    result = true;\n                }\n                result = true;\n            }\n        }\n    }\n    public void testMethod13() {\n        int i = 9;\n        int j = 6;\n        int g = i + 8;\n        int k = j + 10;\n    }\n    public void testMethod14() {\n        Session s = openSession();\n        Transaction t = s.beginTransaction(); \n        A a = new A();\n        E d1 = new E();\n        C1 c = new C1();\n        E d2 = new E();\n        a.setForward(d1);\n        d1.setReverse(a);\n        c.setForward(d2); \n        d2.setReverse(c);\n        Serializable aid = s.save(a);\n        Serializable d2id = s.save(d2);\n        t.commit(); \n        s.close();\n    }\n    public boolean isCheckBoxEnabled(int path) {\n        String model = \"\";\n        if (true) {\n            for (int index = 0; index < path; ++index) {\n                int nodeIndex = model.codePointAt(path);\n                if (model.contains(\"\")) {\n                    return false;\n                }\n            }\n        } else {\n            int nodeIndex = model.codePointAt(path);\n            if (model.contains(\"\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public Object readObject(String in) throws Exception {\n        String startDay = new String(\"\");\n        String endDay = new String(\"\");\n        return new String(startDay + endDay);\n    }\n    public int[] getSelectedIndices() {\n        int[] sel = new int[5];\n        String model = \"\";\n        int a = 0;\n        a++;\n        for (int index = 0; index < 5; ++index) {\n            sel[index] = Integer.parseInt(model.valueOf(a)); \n        }\n        return sel;\n    }\n    public void testMethod15() {\n        String confDebug = \"\";\n        if (!confDebug.equals(\"\") && !confDebug.equals(\"null\")) {\n            LogLog.warn(\"The \\\"\" + \"\\\" attribute is deprecated.\");\n            LogLog.warn(\"Use the \\\"\" + \"\\\" attribute instead.\");\n            LogLog.setInternalDebugging(confDebug, true);\n        }\n        int i = 0;\n        int k = 7;\n        boolean b = false;\n        for (; i < k; i++) {\n            b = true;\n            k++;\n        }\n        int sw;\n        switch (i) {\n        case 0:\n            k++;\n            sw = 0; \n            break;\n        case 1:\n            b = false;\n            break;\n        default:\n            b = true;\n        }\n        int wh = 0;\n        b = true;\n        do {\n            k--;\n            i++;\n        } while (wh > 0); \n        if (wh > 0) {\n            k++;\n        } else if (!b) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    public void testMethod16() {\n        int wh = 1, i = 4, k = 0;\n        if (i > 0) {\n            k++;\n        } else if (wh > 0) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    protected JMenuItem createSubMenuItem(LogLevel level) {\n        final JMenuItem result = new JMenuItem(level.toString());\n        final LogLevel logLevel = level;\n        result.setMnemonic(level.toString().charAt(0));\n        result.addActionListener(new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            showLogLevelColorChangeDialog(result, logLevel);\n          }\n        });\n        return result;\n      }\n    public static Color darker(Color color, double fraction) {\n        int red = (int) Math.round(color.getRed() * (1.0 - fraction));\n        int green = (int) Math.round(color.getGreen() * (1.0 - fraction));\n        int blue = (int) Math.round(color.getBlue() * (1.0 - fraction));\n        if (red < 0) {\n            red = 0;\n        } else if (red > 255) {\n            red = 255;\n        }\n        if (green < 0) { \n            green = 0;\n        } else if (green > 255) {\n            green = 255;\n        }\n        if (blue < 0) { \n        }\n        int alpha = color.getAlpha();\n        return new Color(red, green, blue, alpha);\n    }\n    public void testFinal() {\n        AuthUpdateTask task = null;\n        final long intervalMs = 30 * 60000L; \n        Object authCheckUrl = null, authInfo = null;\n        task = new AuthUpdateTask(authCheckUrl, authInfo, new IAuthListener() {\n            @Override\n            public void authTokenChanged(String cookie, String token) {\n                fireAuthTokenChanged(cookie, token);\n            }\n        });\n        Timer timer = new Timer(\"Auth Guard\", true);\n        timer.schedule(task, intervalMs / 2, intervalMs);\n    }\n    public void testForCycle() {\n        int filterCount = 0;\n        for (int i = 0; i < 10; i++, filterCount++) {\n            int abc = 0;\n            System.identityHashCode(abc);\n            for (int j = 0; j < 10; j++) {\n                abc = filterCount;\n                System.identityHashCode(abc);\n            }\n        }\n    }\n    public void testIssue32_1()\n    {\n        Option srcDdlFile = OptionBuilder.create(\"f\");\n        Option logDdlFile = OptionBuilder.create(\"o\");\n        Option help = OptionBuilder.create(\"h\");\n        Options options = new Options();\n        options.something();\n        options.something();\n        options.something();\n        options.something();\n        options.addOption(srcDdlFile, logDdlFile, help); \n    }\n    public void testIssue32_2()\n    {\n        int mm = Integer.parseInt(\"2\");\n        long timeNow = 0;\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        cal.setTimeInMillis(timeNow);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        cal.set(Calendar.HOUR_OF_DAY, mm);\n        cal.set(Calendar.MINUTE, mm); \n    }\n    public void testIssue32_3(MyObject[] objects) {\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        for(int i=0; i<objects.length; i++) {\n            objects[i].setEnabled(true);\n            objects[i].setColor(0x121212);\n            objects[i].setUrl(\"http:\n            objects[i].setSize(789);\n            objects[i].setCalendar(cal); \n        }\n    }\n    public String testIssue32_4(boolean flag) {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"flag is \");\n        builder.append(flag);\n        final String line = \"\";\n        if(flag) {\n            builder.append(\"line of AST is:\");\n            builder.append(\"\\n\");\n            builder.append(String.valueOf(line)); \n            builder.append(\"\\n\");\n        }\n        return builder.toString();\n    }\n    public void testIssue32_5() {\n        Option a = null;\n        Option b = null;\n        Option c = null;\n        boolean isCNull = isNull(c); \n        boolean isBNull = isNull(b); \n        boolean isANull = isNull(a); \n    }\n    public void testIssue32_6() {\n        Option aOpt = null;\n        Option bOpt = null;\n        Option cOpt = null;\n        isNull(cOpt); \n        isNull(bOpt); \n        isNull(aOpt); \n    }\n    public void testIssue32_7() {\n        String line = \"abc\";\n        otherWriter.write(line);\n        line.charAt(1);\n        builder.append(line);\n        test(line, line, line);\n    }\n    public void testIssue32_8(Writer w1, Writer w2, Writer w3) {\n        String l1=\"1\", l2=\"2\", l3=\"3\";\n        w1.write(l3); \n        w2.write(l2); \n        w3.write(l1); \n    }\n    public void testIssue32_9() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        System.identityHashCode(\"message\");\n        myOption.setArgName(\"abc\"); \n    }\n    public void testIssue32_10() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        myOption.setArgName(\"q\"); \n    }\n    public int testIssue32_11(String toDir)\n            throws Exception\n    {\n        int count = 0;  \n        String[] files = {};\n        System.identityHashCode(\"Data archival started\");\n        files.notify();\n        System.identityHashCode(\"sss\");\n        if (files == null || files.length == 0) {\n            System.identityHashCode(\"No files on a remote site\");\n        }\n        else {\n            System.identityHashCode(\"Files on remote site: \" + files.length);\n            for (String ftpFile : files) {\n                if (files.length == 0) {\n                    \"\".concat(\"\");\n                    ftpFile.concat(files[2]);\n                    count++;\n                }\n            }\n        }\n        System.lineSeparator();\n        return count;\n    }\n    private TreeMapNode buildTree(Object[][] tree)\n    {\n        int k = 0;\n        tree.notify();\n        TreeMapNode root = null;\n        for (Object[] s : tree) {\n            Integer id = (Integer) s[0];\n            String label = (String) s[1];\n            Integer parentId = (Integer) s[2]; \n            Number weight = (Number) s[3];\n            Number value = (Number) s[4];\n            Integer childCount = (Integer) s[5];\n            TreeMapNode node;\n            if (childCount == 0) {\n                node = new TreeMapNode(label,\n                        weight != null ? weight.doubleValue() : 0.0,\n                        new DefaultValue(value != null ? value.doubleValue()\n                                : 0.0));\n            }\n            else {\n                node = new TreeMapNode(label);\n            }\n            System.identityHashCode(id.toString() + node);\n            System.identityHashCode(node.toString() + id);\n            if (parentId == null || parentId == -1) { \n                root = node;\n            }\n            else {\n                System.identityHashCode(parentId.toString() +node);\n            }\n        }\n        return root;\n    }\n    private Session openSession() {\n        return null;\n    }\n    class Session {\n        public Transaction beginTransaction() {\n            return null;\n        }\n        public void close() {\n        }\n        public Serializable save(E d2) {\n            return null;\n        }\n        public Serializable save(A a) {\n            return null;\n        }\n    }\n    class Transaction {\n        public void commit() {\n        }\n    }\n    class A {\n        public void setForward(E d1) {\n        }\n    }\n    class E {\n        public void setReverse(C1 c) {\n        }\n        public void setReverse(A a) {\n        }\n    }\n    class C1 {\n        public void setForward(E d2) {\n        }\n    }\n    class Serializable {\n    }\n    class JMenuItem {\n        public JMenuItem(String string) {\n        }\n        public void addActionListener(ActionListener actionListener) {\n        }\n        public void setMnemonic(char charAt) {\n        }\n    }\n    class LogLevel {\n    }\n    class ActionListener {\n    }\n    class ActionEvent {\n    }\n    private void showLogLevelColorChangeDialog(JMenuItem j, LogLevel l) {   }\n    static class Color {\n        public Color(int red, int green, int blue, int alpha) {\n        }\n        public double getRed() {\n            return 0;\n        }\n        public int getAlpha() {\n            return 0;\n        }\n        public double getBlue() {\n            return 0;\n        }\n        public double getGreen() {\n            return 0;\n        }\n    }\n    class AuthUpdateTask {\n        public AuthUpdateTask(Object authCheckUrl, Object authInfo,\n                IAuthListener iAuthListener) {\n        }\n    }\n    interface IAuthListener {\n        void authTokenChanged(String cookie, String token);\n    }\n    void fireAuthTokenChanged(String s, String s1) {}\n    class Timer {\n        public Timer(String string, boolean b) {\n        }\n        public void schedule(AuthUpdateTask authUpdateTask, long l,\n                long intervalMs) {\n        }\n    }\n    class Option {\n        public void setArgName(String string) {\n        }\n    }\n    boolean isNull(Option o) {\n        return false;}\n    class Writer {\n        public void write(String l3) {\n        }\n    }\n    class Options {\n        public void addBindFile(Object object) {\n        }\n        public void\n                addOption(Option srcDdlFile, Option logDdlFile, Option help)\n        {\n        }\n        public void something()\n        {\n        }\n    }\n    class TreeMapNode {\n        public TreeMapNode(String label, double d, DefaultValue defaultValue) {\n        }\n        public TreeMapNode(String label) {\n        }\n    }\n    class DefaultValue {\n        public DefaultValue(double d) {\n        }\n    }\n    static class LogLog {\n        public static void warn(String string)\n        {\n        }\n        public static void setInternalDebugging(String confDebug, boolean b)\n        {\n        }\n    }\n    static class OptionBuilder {\n        public static Option create(String string)\n        {\n            return null;\n        }\n    }\n    class MyObject {\n        public void setEnabled(boolean b)\n        {\n        }\n        public void setCalendar(Calendar cal)\n        {\n        }\n        public void setSize(int i)\n        {\n        }\n        public void setUrl(String string)\n        {\n        }\n        public void setColor(int i)\n        {\n        }\n    }\n    static class otherWriter {\n        public static void write(String line)\n        {\n        }\n    }\n    void test(String s, String s1, String s2) {\n    }\n    static class builder {\n        public static void append(String line)\n        {\n        }\n    }\n}\nclass New6 {\n    void a() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void b() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        do {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        } while (true);\n    }\n    void c() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (;;) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void d() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i: new int[]{1,2,3}) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void f() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            System.identityHashCode(a);\n    }\n    void h() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            while (true)\n                a++;\n    }\n    void i() {\n        int a = 1;\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.lineSeparator();\n            break;\n        case 2:\n            System.lineSeparator();\n            break;\n        }\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.identityHashCode(a);\n            break;\n        case 2:\n            System.identityHashCode(a);\n            break;\n        }\n    }\n    void k() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            if (true) {\n                System.lineSeparator();\n            } else if (true) {\n                System.identityHashCode(a);\n            } else {\n                System.lineSeparator();\n            }\n        }\n    }\n    void l() {\n        int a = 1;\n        while (true) {\n            switch (hashCode()){}\n            switch (Math.max(1, 2)) {\n            case 1:\n                System.identityHashCode(a);\n                break;\n            case 2:\n                System.identityHashCode(a);\n                break;\n            }\n        }\n    }\n    void tryWithoutFinally() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        try {\n            a = 2;\n        }\n        catch(Exception e){}\n    }\n    void m() {\n        final int a = 1;\n        int b = 0;\n        if (b == 1) {\n            System.lineSeparator();\n        }\n        final int c = a + 1;\n    }\n    void test() {\n        int a = 0; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i = 0; i < 10; i++) {\n            if (true) {\n                System.identityHashCode(a);\n            }\n            else {\n                System.identityHashCode(a);\n            }\n        }\n        int b = 0;\n        try {\n            for (int i = 0; i < 10; i++) {\n                if (true) {\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    b = i;\n                }\n            }\n            System.lineSeparator();\n            System.lineSeparator();\n        }\n        catch (Exception e) {\n            System.lineSeparator();\n        }\n        finally {\n            System.identityHashCode(b);\n        }\n        int c = 0; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        if (false) {\n        }\n        else if (c == 1) {\n            if (c != 2) {\n                System.lineSeparator();\n            }\n            System.identityHashCode(c);\n        }\n        else if (c == 2) {\n            System.identityHashCode(c);\n        }\n    }\n    private void launch(Integer number ) {\n        String myInt = ( number.toString() + '\\0' );\n        boolean result = false;\n        if (number == 123)\n            result = true;\n    }\n    static int field;\n    private void n() {\n        long a = 0; \n        New6.field = 1;\n        New6.field = 2;\n        New6.field = 3;\n        New6.field = (int)a;\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceFinal.java",
      "expected-problems": 32,
      "expected-linenumbers": [
        41,
        49,
        55,
        68,
        82,
        107,
        155,
        156,
        195,
        230,
        233,
        234,
        271,
        272,
        297,
        310,
        354,
        355,
        465,
        466,
        490,
        502,
        515,
        516,
        551,
        553,
        902,
        912,
        978,
        1000,
        1034,
        1065
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.util.*;\npublic class InputVariableDeclarationUsageDistanceFinal {\n    private static int test1 = 0;\n    static {\n        int b = 0;\n        int d = 0;\n        {\n            d = ++b;\n        }\n    }\n    static {\n        int c = 0;\n        int a = 3;\n        int b = 2;\n        {\n            a = a + b;\n            c = b;\n        }\n        {\n            c--;\n        }\n        a = 7;\n    }\n    static {\n        int a = -1; \n        int b = 2;\n        b++;\n        int c = --b;\n        a = b; \n    }\n    public InputVariableDeclarationUsageDistanceFinal(int test1) {\n        int temp = -1; \n        this.test1 = test1;\n        temp = test1; \n    }\n    public boolean testMethod() {\n        int temp = 7; \n        new InputVariableDeclarationUsageDistanceFinal(2);\n        String.valueOf(temp); \n        boolean result = false;\n        String str = \"\";\n        if (test1 > 1) {\n            str = \"123\";\n            result = true;\n        }\n        return result;\n    }\n    public void testMethod2() {\n        int count; \n        int a = 3;\n        int b = 2;\n        {\n            a = a\n                    + b\n                    - 5\n                    + 2\n                    * a;\n            count = b; \n        }\n    }\n    public void testMethod3() {\n        int count; \n        int a = 3;\n        int b = 3;\n        a = a + b;\n        b = a + a;\n        testMethod2();\n        count = b; \n    }\n    public void testMethod4(int arg) {\n        int d = 0;\n        for (int i = 0; i < 10; i++) {\n            d++;\n            if (i > 5) {\n                d += arg;\n            }\n        }\n        String ar[] = { \"1\", \"2\" };\n        for (String st : ar) {\n            System.identityHashCode(st);\n        }\n    }\n    public void testMethod5() {\n        int arg = 7; \n        boolean b = true;\n        boolean bb = false;\n        if (b)\n            if (!bb)\n                b = false;\n        testMethod4(arg); \n    }\n    public void testMethod6() {\n        int blockNumWithSimilarVar = 3;\n        int dist = 0;\n        int index = 0;\n        int block = 0;\n        if (blockNumWithSimilarVar <= 1) {\n            do {\n                dist++;\n                if (block > 4) {\n                    break;\n                }\n                index++;\n                block++;\n            } while (index < 7);\n        } else {\n            while (index < 8) {\n                dist += block;\n                index++;\n                block++;\n            }\n        }\n    }\n    public boolean testMethod7(int a) {\n        boolean res;\n        switch (a) {\n        case 1:\n            res = true;\n            break;\n        default:\n            res = false;\n        }\n        return res;\n    }\n    public void testMethod8() {\n        int b = 0;\n        int c = 0;\n        int m = 0; \n        int n = 0; \n        {\n            c++;\n            b++;\n        }\n        {\n            n++; \n            m++; \n            b++;\n        }\n    }\n    public void testMethod9() {\n        boolean result = false;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (!b2) {\n                result = true;\n            }\n            result = true;\n        }\n    }\n    public boolean testMethod10() {\n        boolean result;\n        try {\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            result = false;\n        }\n        return result;\n    }\n    public void testMethod11() {\n        int a = 0;\n        int b = 10;\n        boolean result; \n        try {\n            b--;\n        } catch (Exception e) {\n            b++;\n            result = false; \n        } finally {\n            a++;\n        }\n    }\n    public void testMethod12() {\n        boolean result = false;\n        boolean b3 = true;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (b3) {\n                if (!b2) {\n                    result = true;\n                }\n                result = true;\n            }\n        }\n    }\n    public void testMethod13() {\n        int i = 9;\n        int j = 6;\n        int g = i + 8;\n        int k = j + 10;\n    }\n    public void testMethod14() {\n        Session s = openSession();\n        Transaction t = s.beginTransaction(); \n        A a = new A();\n        E d1 = new E();\n        C1 c = new C1(); \n        E d2 = new E(); \n        a.setForward(d1);\n        d1.setReverse(a);\n        c.setForward(d2); \n        d2.setReverse(c);\n        Serializable aid = s.save(a);\n        Serializable d2id = s.save(d2);\n        t.commit(); \n        s.close();\n    }\n    public boolean isCheckBoxEnabled(int path) {\n        String model = \"\";\n        if (true) {\n            for (int index = 0; index < path; ++index) {\n                int nodeIndex = model.codePointAt(path);\n                if (model.contains(\"\")) {\n                    return false;\n                }\n            }\n        } else {\n            int nodeIndex = model.codePointAt(path);\n            if (model.contains(\"\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public Object readObject(String in) throws Exception {\n        String startDay = new String(\"\");\n        String endDay = new String(\"\");\n        return new String(startDay + endDay);\n    }\n    public int[] getSelectedIndices() {\n        int[] sel = new int[5]; \n        String model = \"\"; \n        int a = 0;\n        a++;\n        for (int index = 0; index < 5; ++index) {\n            sel[index] = Integer.parseInt(model.valueOf(a)); \n        }\n        return sel;\n    }\n    public void testMethod15() {\n        String confDebug = \"\";\n        if (!confDebug.equals(\"\") && !confDebug.equals(\"null\")) {\n            LogLog.warn(\"The \\\"\" + \"\\\" attribute is deprecated.\");\n            LogLog.warn(\"Use the \\\"\" + \"\\\" attribute instead.\");\n            LogLog.setInternalDebugging(confDebug, true);\n        }\n        int i = 0;\n        int k = 7;\n        boolean b = false;\n        for (; i < k; i++) {\n            b = true;\n            k++;\n        }\n        int sw; \n        switch (i) {\n        case 0:\n            k++;\n            sw = 0; \n            break;\n        case 1:\n            b = false;\n            break;\n        default:\n            b = true;\n        }\n        int wh = 0; \n        b = true;\n        do {\n            k--;\n            i++;\n        } while (wh > 0); \n        if (wh > 0) {\n            k++;\n        } else if (!b) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    public void testMethod16() {\n        int wh = 1, i = 4, k = 0;\n        if (i > 0) {\n            k++;\n        } else if (wh > 0) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    protected JMenuItem createSubMenuItem(LogLevel level) {\n        final JMenuItem result = new JMenuItem(level.toString());\n        final LogLevel logLevel = level;\n        result.setMnemonic(level.toString().charAt(0));\n        result.addActionListener(new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            showLogLevelColorChangeDialog(result, logLevel);\n          }\n        });\n        return result;\n      }\n    public static Color darker(Color color, double fraction) {\n        int red = (int) Math.round(color.getRed() * (1.0 - fraction));\n        int green = (int) Math.round(color.getGreen() * (1.0 - fraction)); \n        int blue = (int) Math.round(color.getBlue() * (1.0 - fraction)); \n        if (red < 0) {\n            red = 0;\n        } else if (red > 255) {\n            red = 255;\n        }\n        if (green < 0) { \n            green = 0;\n        } else if (green > 255) {\n            green = 255;\n        }\n        if (blue < 0) { \n        }\n        int alpha = color.getAlpha();\n        return new Color(red, green, blue, alpha);\n    }\n    public void testFinal() {\n        AuthUpdateTask task = null;\n        final long intervalMs = 30 * 60000L; \n        Object authCheckUrl = null, authInfo = null;\n        task = new AuthUpdateTask(authCheckUrl, authInfo, new IAuthListener() {\n            @Override\n            public void authTokenChanged(String cookie, String token) {\n                fireAuthTokenChanged(cookie, token);\n            }\n        });\n        Timer timer = new Timer(\"Auth Guard\", true);\n        timer.schedule(task, intervalMs / 2, intervalMs);\n    }\n    public void testForCycle() {\n        int filterCount = 0;\n        for (int i = 0; i < 10; i++, filterCount++) {\n            int abc = 0;\n            System.identityHashCode(abc);\n            for (int j = 0; j < 10; j++) {\n                abc = filterCount;\n                System.identityHashCode(abc);\n            }\n        }\n    }\n    public void testIssue32_1()\n    {\n        Option srcDdlFile = OptionBuilder.create(\"f\");\n        Option logDdlFile = OptionBuilder.create(\"o\");\n        Option help = OptionBuilder.create(\"h\");\n        Options options = new Options();\n        options.something();\n        options.something();\n        options.something();\n        options.something();\n        options.addOption(srcDdlFile, logDdlFile, help); \n    }\n    public void testIssue32_2()\n    {\n        int mm = Integer.parseInt(\"2\");\n        long timeNow = 0;\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        cal.setTimeInMillis(timeNow);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        cal.set(Calendar.HOUR_OF_DAY, mm);\n        cal.set(Calendar.MINUTE, mm); \n    }\n    public void testIssue32_3(MyObject[] objects) {\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        for(int i=0; i<objects.length; i++) {\n            objects[i].setEnabled(true);\n            objects[i].setColor(0x121212);\n            objects[i].setUrl(\"http:\n            objects[i].setSize(789);\n            objects[i].setCalendar(cal); \n        }\n    }\n    public String testIssue32_4(boolean flag) {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"flag is \");\n        builder.append(flag);\n        final String line = \"\";\n        if(flag) {\n            builder.append(\"line of AST is:\");\n            builder.append(\"\\n\");\n            builder.append(String.valueOf(line)); \n            builder.append(\"\\n\");\n        }\n        return builder.toString();\n    }\n    public void testIssue32_5() {\n        Option a = null;\n        Option b = null;\n        Option c = null;\n        boolean isCNull = isNull(c); \n        boolean isBNull = isNull(b); \n        boolean isANull = isNull(a); \n    }\n    public void testIssue32_6() {\n        Option aOpt = null; \n        Option bOpt = null; \n        Option cOpt = null;\n        isNull(cOpt); \n        isNull(bOpt); \n        isNull(aOpt); \n    }\n    public void testIssue32_7() {\n        String line = \"abc\";\n        otherWriter.write(line);\n        line.charAt(1);\n        builder.append(line);\n        test(line, line, line);\n    }\n    public void testIssue32_8(Writer w1, Writer w2, Writer w3) {\n        String l1=\"1\", l2=\"2\", l3=\"3\"; \n        w1.write(l3); \n        w2.write(l2); \n        w3.write(l1); \n    }\n    public void testIssue32_9() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        System.identityHashCode(\"message\");\n        myOption.setArgName(\"abc\"); \n    }\n    public void testIssue32_10() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        myOption.setArgName(\"q\"); \n    }\n    public int testIssue32_11(String toDir)\n            throws Exception\n    {\n        int count = 0; \n        String[] files = {}; \n        System.identityHashCode(\"Data archival started\");\n        files.notify();\n        System.identityHashCode(\"sss\");\n        if (files == null || files.length == 0) {\n            System.identityHashCode(\"No files on a remote site\");\n        }\n        else {\n            System.identityHashCode(\"Files on remote site: \" + files.length);\n            for (String ftpFile : files) {\n                if (files.length == 0) {\n                    \"\".concat(\"\");\n                    ftpFile.concat(files[2]);\n                    count++;\n                }\n            }\n        }\n        System.lineSeparator();\n        return count;\n    }\n    private TreeMapNode buildTree(Object[][] tree)\n    {\n        int k = 0;\n        tree.notify();\n        TreeMapNode root = null;\n        for (Object[] s : tree) {\n            Integer id = (Integer) s[0]; \n            String label = (String) s[1];\n            Integer parentId = (Integer) s[2]; \n            Number weight = (Number) s[3];\n            Number value = (Number) s[4];\n            Integer childCount = (Integer) s[5];\n            TreeMapNode node;\n            if (childCount == 0) {\n                node = new TreeMapNode(label,\n                        weight != null ? weight.doubleValue() : 0.0,\n                        new DefaultValue(value != null ? value.doubleValue()\n                                : 0.0));\n            }\n            else {\n                node = new TreeMapNode(label);\n            }\n            System.identityHashCode(id.toString() + node);\n            System.identityHashCode(node.toString() + id);\n            if (parentId == null || parentId == -1) { \n                root = node;\n            }\n            else {\n                System.identityHashCode(parentId.toString() +node);\n            }\n        }\n        return root;\n    }\n    private Session openSession() {\n        return null;\n    }\n    class Session {\n        public Transaction beginTransaction() {\n            return null;\n        }\n        public void close() {\n        }\n        public Serializable save(E d2) {\n            return null;\n        }\n        public Serializable save(A a) {\n            return null;\n        }\n    }\n    class Transaction {\n        public void commit() {\n        }\n    }\n    class A {\n        public void setForward(E d1) {\n        }\n    }\n    class E {\n        public void setReverse(C1 c) {\n        }\n        public void setReverse(A a) {\n        }\n    }\n    class C1 {\n        public void setForward(E d2) {\n        }\n    }\n    class Serializable {\n    }\n    class JMenuItem {\n        public JMenuItem(String string) {\n        }\n        public void addActionListener(ActionListener actionListener) {\n        }\n        public void setMnemonic(char charAt) {\n        }\n    }\n    class LogLevel {\n    }\n    class ActionListener {\n    }\n    class ActionEvent {\n    }\n    private void showLogLevelColorChangeDialog(JMenuItem j, LogLevel l) {   }\n    static class Color {\n        public Color(int red, int green, int blue, int alpha) {\n        }\n        public double getRed() {\n            return 0;\n        }\n        public int getAlpha() {\n            return 0;\n        }\n        public double getBlue() {\n            return 0;\n        }\n        public double getGreen() {\n            return 0;\n        }\n    }\n    class AuthUpdateTask {\n        public AuthUpdateTask(Object authCheckUrl, Object authInfo,\n                IAuthListener iAuthListener) {\n        }\n    }\n    interface IAuthListener {\n        void authTokenChanged(String cookie, String token);\n    }\n    void fireAuthTokenChanged(String s, String s1) {}\n    class Timer {\n        public Timer(String string, boolean b) {\n        }\n        public void schedule(AuthUpdateTask authUpdateTask, long l,\n                long intervalMs) {\n        }\n    }\n    class Option {\n        public void setArgName(String string) {\n        }\n    }\n    boolean isNull(Option o) {\n        return false;}\n    class Writer {\n        public void write(String l3) {\n        }\n    }\n    class Options {\n        public void addBindFile(Object object) {\n        }\n        public void\n                addOption(Option srcDdlFile, Option logDdlFile, Option help)\n        {\n        }\n        public void something()\n        {\n        }\n    }\n    class TreeMapNode {\n        public TreeMapNode(String label, double d, DefaultValue defaultValue) {\n        }\n        public TreeMapNode(String label) {\n        }\n    }\n    class DefaultValue {\n        public DefaultValue(double d) {\n        }\n    }\n    static class LogLog {\n        public static void warn(String string)\n        {\n        }\n        public static void setInternalDebugging(String confDebug, boolean b)\n        {\n        }\n    }\n    static class OptionBuilder {\n        public static Option create(String string)\n        {\n            return null;\n        }\n    }\n    class MyObject {\n        public void setEnabled(boolean b)\n        {\n        }\n        public void setCalendar(Calendar cal)\n        {\n        }\n        public void setSize(int i)\n        {\n        }\n        public void setUrl(String string)\n        {\n        }\n        public void setColor(int i)\n        {\n        }\n    }\n    static class otherWriter {\n        public static void write(String line)\n        {\n        }\n    }\n    void test(String s, String s1, String s2) {\n    }\n    static class builder {\n        public static void append(String line)\n        {\n        }\n    }\n}\nclass New5 {\n    void a() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void b() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        do {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        } while (true);\n    }\n    void c() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (;;) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void d() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i: new int[]{1,2,3}) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void f() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            System.identityHashCode(a);\n    }\n    void h() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            while (true)\n                a++;\n    }\n    void i() {\n        int a = 1;\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.lineSeparator();\n            break;\n        case 2:\n            System.lineSeparator();\n            break;\n        }\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.identityHashCode(a);\n            break;\n        case 2:\n            System.identityHashCode(a);\n            break;\n        }\n    }\n    void k() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            if (true) {\n                System.lineSeparator();\n            } else if (true) {\n                System.identityHashCode(a);\n            } else {\n                System.lineSeparator();\n            }\n        }\n    }\n    void l() {\n        int a = 1;\n        while (true) {\n            switch (hashCode()){}\n            switch (Math.max(1, 2)) {\n            case 1:\n                System.identityHashCode(a);\n                break;\n            case 2:\n                System.identityHashCode(a);\n                break;\n            }\n        }\n    }\n    void tryWithoutFinally() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        try {\n            a = 2;\n        }\n        catch(Exception e){}\n    }\n    void m() {\n        final int a = 1;\n        int b = 0;\n        if (b == 1) {\n            System.lineSeparator();\n        }\n        final int c = a + 1;\n    }\n    void test() {\n        int a = 0; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i = 0; i < 10; i++) {\n            if (true) {\n                System.identityHashCode(a);\n            }\n            else {\n                System.identityHashCode(a);\n            }\n        }\n        int b = 0;\n        try {\n            for (int i = 0; i < 10; i++) {\n                if (true) {\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    b = i;\n                }\n            }\n            System.lineSeparator();\n            System.lineSeparator();\n        }\n        catch (Exception e) {\n            System.lineSeparator();\n        }\n        finally {\n            System.identityHashCode(b);\n        }\n        int c = 0; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        if (false) {\n        }\n        else if (c == 1) {\n            if (c != 2) {\n                System.lineSeparator();\n            }\n            System.identityHashCode(c);\n        }\n        else if (c == 2) {\n            System.identityHashCode(c);\n        }\n    }\n    private void launch(Integer number ) {\n        String myInt = ( number.toString() + '\\0' );\n        boolean result = false;\n        if (number == 123)\n            result = true;\n    }\n    static int field;\n    private void n() {\n        long a = 0; \n        New5.field = 1;\n        New5.field = 2;\n        New5.field = 3;\n        New5.field = (int)a;\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceGeneral.java",
      "expected-problems": 34,
      "expected-linenumbers": [
        41,
        49,
        55,
        68,
        82,
        107,
        155,
        156,
        195,
        230,
        233,
        234,
        271,
        272,
        297,
        310,
        354,
        355,
        378,
        465,
        466,
        490,
        502,
        515,
        516,
        551,
        553,
        902,
        912,
        978,
        989,
        1000,
        1034,
        1065
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.util.*;\npublic class InputVariableDeclarationUsageDistanceGeneral {\n    private static int test1 = 0;\n    static {\n        int b = 0;\n        int d = 0;\n        {\n            d = ++b;\n        }\n    }\n    static {\n        int c = 0;\n        int a = 3;\n        int b = 2;\n        {\n            a = a + b;\n            c = b;\n        }\n        {\n            c--;\n        }\n        a = 7;\n    }\n    static {\n        int a = -1; \n        int b = 2;\n        b++;\n        int c = --b;\n        a = b; \n    }\n    public InputVariableDeclarationUsageDistanceGeneral(int test1) {\n        int temp = -1; \n        this.test1 = test1;\n        temp = test1; \n    }\n    public boolean testMethod() {\n        int temp = 7; \n        new InputVariableDeclarationUsageDistanceGeneral(2);\n        String.valueOf(temp); \n        boolean result = false;\n        String str = \"\";\n        if (test1 > 1) {\n            str = \"123\";\n            result = true;\n        }\n        return result;\n    }\n    public void testMethod2() {\n        int count; \n        int a = 3;\n        int b = 2;\n        {\n            a = a\n                    + b\n                    - 5\n                    + 2\n                    * a;\n            count = b; \n        }\n    }\n    public void testMethod3() {\n        int count; \n        int a = 3;\n        int b = 3;\n        a = a + b;\n        b = a + a;\n        testMethod2();\n        count = b; \n    }\n    public void testMethod4(int arg) {\n        int d = 0;\n        for (int i = 0; i < 10; i++) {\n            d++;\n            if (i > 5) {\n                d += arg;\n            }\n        }\n        String ar[] = { \"1\", \"2\" };\n        for (String st : ar) {\n            System.identityHashCode(st);\n        }\n    }\n    public void testMethod5() {\n        int arg = 7; \n        boolean b = true;\n        boolean bb = false;\n        if (b)\n            if (!bb)\n                b = false;\n        testMethod4(arg); \n    }\n    public void testMethod6() {\n        int blockNumWithSimilarVar = 3;\n        int dist = 0;\n        int index = 0;\n        int block = 0;\n        if (blockNumWithSimilarVar <= 1) {\n            do {\n                dist++;\n                if (block > 4) {\n                    break;\n                }\n                index++;\n                block++;\n            } while (index < 7);\n        } else {\n            while (index < 8) {\n                dist += block;\n                index++;\n                block++;\n            }\n        }\n    }\n    public boolean testMethod7(int a) {\n        boolean res;\n        switch (a) {\n        case 1:\n            res = true;\n            break;\n        default:\n            res = false;\n        }\n        return res;\n    }\n    public void testMethod8() {\n        int b = 0;\n        int c = 0;\n        int m = 0; \n        int n = 0; \n        {\n            c++;\n            b++;\n        }\n        {\n            n++; \n            m++; \n            b++;\n        }\n    }\n    public void testMethod9() {\n        boolean result = false;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (!b2) {\n                result = true;\n            }\n            result = true;\n        }\n    }\n    public boolean testMethod10() {\n        boolean result;\n        try {\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            result = false;\n        }\n        return result;\n    }\n    public void testMethod11() {\n        int a = 0;\n        int b = 10;\n        boolean result; \n        try {\n            b--;\n        } catch (Exception e) {\n            b++;\n            result = false; \n        } finally {\n            a++;\n        }\n    }\n    public void testMethod12() {\n        boolean result = false;\n        boolean b3 = true;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (b3) {\n                if (!b2) {\n                    result = true;\n                }\n                result = true;\n            }\n        }\n    }\n    public void testMethod13() {\n        int i = 9;\n        int j = 6;\n        int g = i + 8;\n        int k = j + 10;\n    }\n    public void testMethod14() {\n        Session s = openSession();\n        Transaction t = s.beginTransaction(); \n        A a = new A();\n        E d1 = new E();\n        C1 c = new C1(); \n        E d2 = new E(); \n        a.setForward(d1);\n        d1.setReverse(a);\n        c.setForward(d2); \n        d2.setReverse(c);\n        Serializable aid = s.save(a);\n        Serializable d2id = s.save(d2);\n        t.commit(); \n        s.close();\n    }\n    public boolean isCheckBoxEnabled(int path) {\n        String model = \"\";\n        if (true) {\n            for (int index = 0; index < path; ++index) {\n                int nodeIndex = model.codePointAt(path);\n                if (model.contains(\"\")) {\n                    return false;\n                }\n            }\n        } else {\n            int nodeIndex = model.codePointAt(path);\n            if (model.contains(\"\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public Object readObject(String in) throws Exception {\n        String startDay = new String(\"\");\n        String endDay = new String(\"\");\n        return new String(startDay + endDay);\n    }\n    public int[] getSelectedIndices() {\n        int[] sel = new int[5]; \n        String model = \"\"; \n        int a = 0;\n        a++;\n        for (int index = 0; index < 5; ++index) {\n            sel[index] = Integer.parseInt(model.valueOf(a)); \n        }\n        return sel;\n    }\n    public void testMethod15() {\n        String confDebug = \"\";\n        if (!confDebug.equals(\"\") && !confDebug.equals(\"null\")) {\n            LogLog.warn(\"The \\\"\" + \"\\\" attribute is deprecated.\");\n            LogLog.warn(\"Use the \\\"\" + \"\\\" attribute instead.\");\n            LogLog.setInternalDebugging(confDebug, true);\n        }\n        int i = 0;\n        int k = 7;\n        boolean b = false;\n        for (; i < k; i++) {\n            b = true;\n            k++;\n        }\n        int sw; \n        switch (i) {\n        case 0:\n            k++;\n            sw = 0; \n            break;\n        case 1:\n            b = false;\n            break;\n        default:\n            b = true;\n        }\n        int wh = 0; \n        b = true;\n        do {\n            k--;\n            i++;\n        } while (wh > 0); \n        if (wh > 0) {\n            k++;\n        } else if (!b) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    public void testMethod16() {\n        int wh = 1, i = 4, k = 0;\n        if (i > 0) {\n            k++;\n        } else if (wh > 0) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    protected JMenuItem createSubMenuItem(LogLevel level) {\n        final JMenuItem result = new JMenuItem(level.toString());\n        final LogLevel logLevel = level;\n        result.setMnemonic(level.toString().charAt(0));\n        result.addActionListener(new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            showLogLevelColorChangeDialog(result, logLevel);\n          }\n        });\n        return result;\n      }\n    public static Color darker(Color color, double fraction) {\n        int red = (int) Math.round(color.getRed() * (1.0 - fraction));\n        int green = (int) Math.round(color.getGreen() * (1.0 - fraction)); \n        int blue = (int) Math.round(color.getBlue() * (1.0 - fraction)); \n        if (red < 0) {\n            red = 0;\n        } else if (red > 255) {\n            red = 255;\n        }\n        if (green < 0) { \n            green = 0;\n        } else if (green > 255) {\n            green = 255;\n        }\n        if (blue < 0) { \n        }\n        int alpha = color.getAlpha();\n        return new Color(red, green, blue, alpha);\n    }\n    public void testFinal() {\n        AuthUpdateTask task = null;\n        final long intervalMs = 30 * 60000L; \n        Object authCheckUrl = null, authInfo = null;\n        task = new AuthUpdateTask(authCheckUrl, authInfo, new IAuthListener() {\n            @Override\n            public void authTokenChanged(String cookie, String token) {\n                fireAuthTokenChanged(cookie, token);\n            }\n        });\n        Timer timer = new Timer(\"Auth Guard\", true);\n        timer.schedule(task, intervalMs / 2, intervalMs);\n    }\n    public void testForCycle() {\n        int filterCount = 0;\n        for (int i = 0; i < 10; i++, filterCount++) {\n            int abc = 0;\n            System.identityHashCode(abc);\n            for (int j = 0; j < 10; j++) {\n                abc = filterCount;\n                System.identityHashCode(abc);\n            }\n        }\n    }\n    public void testIssue32_1()\n    {\n        Option srcDdlFile = OptionBuilder.create(\"f\");\n        Option logDdlFile = OptionBuilder.create(\"o\");\n        Option help = OptionBuilder.create(\"h\");\n        Options options = new Options();\n        options.something();\n        options.something();\n        options.something();\n        options.something();\n        options.addOption(srcDdlFile, logDdlFile, help); \n    }\n    public void testIssue32_2()\n    {\n        int mm = Integer.parseInt(\"2\");\n        long timeNow = 0;\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        cal.setTimeInMillis(timeNow);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        cal.set(Calendar.HOUR_OF_DAY, mm);\n        cal.set(Calendar.MINUTE, mm); \n    }\n    public void testIssue32_3(MyObject[] objects) {\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        for(int i=0; i<objects.length; i++) {\n            objects[i].setEnabled(true);\n            objects[i].setColor(0x121212);\n            objects[i].setUrl(\"http:\n            objects[i].setSize(789);\n            objects[i].setCalendar(cal); \n        }\n    }\n    public String testIssue32_4(boolean flag) {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"flag is \");\n        builder.append(flag);\n        final String line = \"\";\n        if(flag) {\n            builder.append(\"line of AST is:\");\n            builder.append(\"\\n\");\n            builder.append(String.valueOf(line)); \n            builder.append(\"\\n\");\n        }\n        return builder.toString();\n    }\n    public void testIssue32_5() {\n        Option a = null;\n        Option b = null;\n        Option c = null;\n        boolean isCNull = isNull(c); \n        boolean isBNull = isNull(b); \n        boolean isANull = isNull(a); \n    }\n    public void testIssue32_6() {\n        Option aOpt = null; \n        Option bOpt = null; \n        Option cOpt = null;\n        isNull(cOpt); \n        isNull(bOpt); \n        isNull(aOpt); \n    }\n    public void testIssue32_7() {\n        String line = \"abc\";\n        otherWriter.write(line);\n        line.charAt(1);\n        builder.append(line);\n        test(line, line, line);\n    }\n    public void testIssue32_8(Writer w1, Writer w2, Writer w3) {\n        String l1=\"1\", l2=\"2\", l3=\"3\"; \n        w1.write(l3); \n        w2.write(l2); \n        w3.write(l1); \n    }\n    public void testIssue32_9() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        System.identityHashCode(\"message\");\n        myOption.setArgName(\"abc\"); \n    }\n    public void testIssue32_10() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        myOption.setArgName(\"q\"); \n    }\n    public int testIssue32_11(String toDir)\n            throws Exception\n    {\n        int count = 0; \n        String[] files = {}; \n        System.identityHashCode(\"Data archival started\");\n        files.notify();\n        System.identityHashCode(\"sss\");\n        if (files == null || files.length == 0) {\n            System.identityHashCode(\"No files on a remote site\");\n        }\n        else {\n            System.identityHashCode(\"Files on remote site: \" + files.length);\n            for (String ftpFile : files) {\n                if (files.length == 0) {\n                    \"\".concat(\"\");\n                    ftpFile.concat(files[2]);\n                    count++;\n                }\n            }\n        }\n        System.lineSeparator();\n        return count;\n    }\n    private TreeMapNode buildTree(Object[][] tree)\n    {\n        int k = 0;\n        tree.notify();\n        TreeMapNode root = null;\n        for (Object[] s : tree) {\n            Integer id = (Integer) s[0]; \n            String label = (String) s[1];\n            Integer parentId = (Integer) s[2]; \n            Number weight = (Number) s[3];\n            Number value = (Number) s[4];\n            Integer childCount = (Integer) s[5];\n            TreeMapNode node;\n            if (childCount == 0) {\n                node = new TreeMapNode(label,\n                        weight != null ? weight.doubleValue() : 0.0,\n                        new DefaultValue(value != null ? value.doubleValue()\n                                : 0.0));\n            }\n            else {\n                node = new TreeMapNode(label);\n            }\n            System.identityHashCode(id.toString() + node);\n            System.identityHashCode(node.toString() + id);\n            if (parentId == null || parentId == -1) { \n                root = node;\n            }\n            else {\n                System.identityHashCode(parentId.toString() +node);\n            }\n        }\n        return root;\n    }\n    private Session openSession() {\n        return null;\n    }\n    class Session {\n        public Transaction beginTransaction() {\n            return null;\n        }\n        public void close() {\n        }\n        public Serializable save(E d2) {\n            return null;\n        }\n        public Serializable save(A a) {\n            return null;\n        }\n    }\n    class Transaction {\n        public void commit() {\n        }\n    }\n    class A {\n        public void setForward(E d1) {\n        }\n    }\n    class E {\n        public void setReverse(C1 c) {\n        }\n        public void setReverse(A a) {\n        }\n    }\n    class C1 {\n        public void setForward(E d2) {\n        }\n    }\n    class Serializable {\n    }\n    class JMenuItem {\n        public JMenuItem(String string) {\n        }\n        public void addActionListener(ActionListener actionListener) {\n        }\n        public void setMnemonic(char charAt) {\n        }\n    }\n    class LogLevel {\n    }\n    class ActionListener {\n    }\n    class ActionEvent {\n    }\n    private void showLogLevelColorChangeDialog(JMenuItem j, LogLevel l) {   }\n    static class Color {\n        public Color(int red, int green, int blue, int alpha) {\n        }\n        public double getRed() {\n            return 0;\n        }\n        public int getAlpha() {\n            return 0;\n        }\n        public double getBlue() {\n            return 0;\n        }\n        public double getGreen() {\n            return 0;\n        }\n    }\n    class AuthUpdateTask {\n        public AuthUpdateTask(Object authCheckUrl, Object authInfo,\n                IAuthListener iAuthListener) {\n        }\n    }\n    interface IAuthListener {\n        void authTokenChanged(String cookie, String token);\n    }\n    void fireAuthTokenChanged(String s, String s1) {}\n    class Timer {\n        public Timer(String string, boolean b) {\n        }\n        public void schedule(AuthUpdateTask authUpdateTask, long l,\n                long intervalMs) {\n        }\n    }\n    class Option {\n        public void setArgName(String string) {\n        }\n    }\n    boolean isNull(Option o) {\n        return false;}\n    class Writer {\n        public void write(String l3) {\n        }\n    }\n    class Options {\n        public void addBindFile(Object object) {\n        }\n        public void\n                addOption(Option srcDdlFile, Option logDdlFile, Option help)\n        {\n        }\n        public void something()\n        {\n        }\n    }\n    class TreeMapNode {\n        public TreeMapNode(String label, double d, DefaultValue defaultValue) {\n        }\n        public TreeMapNode(String label) {\n        }\n    }\n    class DefaultValue {\n        public DefaultValue(double d) {\n        }\n    }\n    static class LogLog {\n        public static void warn(String string)\n        {\n        }\n        public static void setInternalDebugging(String confDebug, boolean b)\n        {\n        }\n    }\n    static class OptionBuilder {\n        public static Option create(String string)\n        {\n            return null;\n        }\n    }\n    class MyObject {\n        public void setEnabled(boolean b)\n        {\n        }\n        public void setCalendar(Calendar cal)\n        {\n        }\n        public void setSize(int i)\n        {\n        }\n        public void setUrl(String string)\n        {\n        }\n        public void setColor(int i)\n        {\n        }\n    }\n    static class otherWriter {\n        public static void write(String line)\n        {\n        }\n    }\n    void test(String s, String s1, String s2) {\n    }\n    static class builder {\n        public static void append(String line)\n        {\n        }\n    }\n}\nclass New1 {\n    void a() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void b() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        do {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        } while (true);\n    }\n    void c() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (;;) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void d() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i: new int[]{1,2,3}) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void f() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            System.identityHashCode(a);\n    }\n    void h() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            while (true)\n                a++;\n    }\n    void i() {\n        int a = 1;\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.lineSeparator();\n            break;\n        case 2:\n            System.lineSeparator();\n            break;\n        }\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.identityHashCode(a);\n            break;\n        case 2:\n            System.identityHashCode(a);\n            break;\n        }\n    }\n    void k() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            if (true) {\n                System.lineSeparator();\n            } else if (true) {\n                System.identityHashCode(a);\n            } else {\n                System.lineSeparator();\n            }\n        }\n    }\n    void l() {\n        int a = 1;\n        while (true) {\n            switch (hashCode()){}\n            switch (Math.max(1, 2)) {\n            case 1:\n                System.identityHashCode(a);\n                break;\n            case 2:\n                System.identityHashCode(a);\n                break;\n            }\n        }\n    }\n    void tryWithoutFinally() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        try {\n            a = 2;\n        }\n        catch(Exception e){}\n    }\n    void m() {\n        final int a = 1; \n        int b = 0;\n        if (b == 1) {\n            System.lineSeparator();\n        }\n        final int c = a + 1;\n    }\n    void test() {\n        int a = 0; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i = 0; i < 10; i++) {\n            if (true) {\n                System.identityHashCode(a);\n            }\n            else {\n                System.identityHashCode(a);\n            }\n        }\n        int b = 0;\n        try {\n            for (int i = 0; i < 10; i++) {\n                if (true) {\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    b = i;\n                }\n            }\n            System.lineSeparator();\n            System.lineSeparator();\n        }\n        catch (Exception e) {\n            System.lineSeparator();\n        }\n        finally {\n            System.identityHashCode(b);\n        }\n        int c = 0; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        if (false) {\n        }\n        else if (c == 1) {\n            if (c != 2) {\n                System.lineSeparator();\n            }\n            System.identityHashCode(c);\n        }\n        else if (c == 2) {\n            System.identityHashCode(c);\n        }\n    }\n    private void launch(Integer number ) {\n        String myInt = ( number.toString() + '\\0' );\n        boolean result = false;\n        if (number == 123)\n            result = true;\n    }\n    static int field;\n    private void n() {\n        long a = 0; \n        New1.field = 1;\n        New1.field = 2;\n        New1.field = 3;\n        New1.field = (int)a;\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceGeneral2.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        16,
        28
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.util.*;\npublic class InputVariableDeclarationUsageDistanceGeneral2 {\n    private void o() {\n        boolean first = true; \n        do {\n            System.lineSeparator();\n            System.lineSeparator();\n            System.lineSeparator();\n            System.lineSeparator();\n            System.lineSeparator();\n            if (first) {}\n        } while(true);\n    }\n    private static void checkInvariants() {\n        Set<Integer> allInvariants = new HashSet<Integer>(); \n        for (int i = 0; i < 10; i++)\n            for (int j = 0; j < 10; j++) {\n                for (int k = 0; k < 10; k++) {\n                    System.lineSeparator();\n                    allInvariants.add(k);\n                }\n            }\n    }\n    private void p() {\n        float wet_delta = 0;\n        if (wet_delta != 0) {\n            for (int i = 0; i < 10; i++) {\n                System.lineSeparator();\n                System.lineSeparator();\n                System.lineSeparator();\n                System.lineSeparator();\n                float wet = 0;\n                wet += wet_delta;\n            }\n        } else if (false) {\n        } else {\n        }\n    }\n    void method() throws Exception {\n        String a = \"\";\n        try (AutoCloseable i = new java.io.StringReader(a)) {\n        }\n        finally {\n            a.equals(\"\");\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceGeneral3.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        45
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class InputVariableDeclarationUsageDistanceGeneral3 {\n    void nothing() {\n    }\n    class Parent {\n        void mm() {\n        }\n        <T> void xx(List<T> m){}\n    }\n    public void method2() {\n        Integer a = 5;\n        class AClass extends Parent {\n            int i;\n            public AClass(int i) {\n                this.i = i;\n            }\n            @Override\n            void mm() {\n                if (a >= 0) {\n                    System.out.println(\"test\");\n                }\n            }\n        }\n    }\n    public void method3() {\n        Integer a = 5; \n        nothing();\n        InputVariableDeclarationUsageDistanceGeneral3 m =\n                new InputVariableDeclarationUsageDistanceGeneral3() {\n                    @Override\n                    public void method2() {\n                        if (a >= 0) {\n                            System.out.println(\"new test\");\n                        }\n                    }\n                };\n    }\n    public interface Ani {\n        public void method4(Object o);\n    }\n    public void method5() {\n        Object a = new Object();\n        class AClass implements Ani {\n            @Override\n            public void method4(Object o) {\n                if (a.toString().isEmpty()) {\n                    System.out.println(o.toString());\n                }\n            }\n        }\n    }\n    public void method6() {\n        String b = \"\";\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(5);\n        numbers.add(9);\n        numbers.forEach((n) -> {\n            try (AutoCloseable j = new java.io.StringReader(\"\");\n                 final AutoCloseable k = new java.io.StringReader(b);) {\n                String c = b.toString();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        });\n    }\n    public void method7() {\n        Integer t = 5;\n        nothing();\n        System.out.println();\n        class BClass extends Parent {\n            @Override\n            void mm() {\n                System.out.println(t);\n            }\n        }\n    }\n    public void method8() {\n        Integer m = 10;\n        class BClass extends Parent{\n            public BClass getNewInstance(){\n                return new BClass(){\n                    private final int t = m;\n                    @Override\n                    void mm(){\n                        System.out.println();\n                    }\n                };\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceGeneral4.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        24
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\npublic class InputVariableDeclarationUsageDistanceGeneral4 {\n    class Parent {\n        void mm() {\n        }\n        <T> void xx(List<T> m){}\n    }\n    public void method9() {\n        Integer z = 5; \n        Iterator<Integer> mn = new HashSet<Integer>().iterator();\n        class BClass extends Parent {\n            Boolean h = false;\n            @Override\n            public <t> void xx(List<t> a) {\n                if (a.get(0).toString().compareTo(\"1\") > 0) {\n                    System.out.println(\"temp\");\n                }\n            }\n            @Override\n            public void mm() {\n            }\n            void nn(Boolean m) {\n                if(z<0){\n                    System.out.println();\n                }\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceIfStatements.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        17,
        27,
        31,
        37,
        48,
        49,
        50,
        62
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class InputVariableDeclarationUsageDistanceIfStatements {\n    void method2() {\n        int a = 12; \n        if (true) {\n            method2();\n            checkIfStatementWithoutParen();\n            method2();\n            a++;\n        }\n    }\n    void checkIfStatementWithoutParen() {\n        int a = 12; \n        method2();\n        if (true)\n            a++;\n        int b = 12; \n        method2();\n        if (false)\n            method2();\n        else if(true)\n            b++;\n        int c = 12; \n        method2();\n        checkIfStatementWithoutParen();\n        if (true)\n            c++;\n        else\n            method2();\n    }\n    void testConsecutiveIfStatements() {\n        int a = 12;\n        int b = 13; \n        int c = 14; \n        int d = 15; \n        if (true)\n            a++;\n        if (true)\n            b++;\n        if (false)\n            c++;\n        if (true)\n            d++;\n    }\n    int testReturnStatement() {\n        int a = 1; \n        testConsecutiveIfStatements();\n        testConsecutiveIfStatements();\n        testConsecutiveIfStatements();\n        if (true)\n            return a;\n        return 0;\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceLabels.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        14
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\npublic class InputVariableDeclarationUsageDistanceLabels {\n    public void method() {\n        boolean eol = false; \n        nothing();\n        nothing();\n        nothing();\n        nothing();\n        myLoop:\n        for (int i = 0; i < 5; i++) {\n            if (i == 5) {\n                eol = true;\n                break myLoop;\n            }\n        }\n    }\n    public void nothing() {\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceRegExp.java",
      "expected-problems": 23,
      "expected-linenumbers": [
        49,
        55,
        68,
        82,
        107,
        156,
        195,
        234,
        271,
        272,
        297,
        310,
        354,
        355,
        378,
        465,
        466,
        490,
        502,
        515,
        516,
        551,
        553
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.util.*;\npublic class InputVariableDeclarationUsageDistanceRegExp {\n    private static int test1 = 0;\n    static {\n        int b = 0;\n        int d = 0;\n        {\n            d = ++b;\n        }\n    }\n    static {\n        int c = 0;\n        int a = 3;\n        int b = 2;\n        {\n            a = a + b;\n            c = b;\n        }\n        {\n            c--;\n        }\n        a = 7;\n    }\n    static {\n        int a = -1;\n        int b = 2;\n        b++;\n        int c = --b;\n        a = b; \n    }\n    public InputVariableDeclarationUsageDistanceRegExp(int test1) {\n        int temp = -1; \n        this.test1 = test1;\n        temp = test1; \n    }\n    public boolean testMethod() {\n        int temp = 7; \n        new InputVariableDeclarationUsageDistanceRegExp(2);\n        String.valueOf(temp); \n        boolean result = false;\n        String str = \"\";\n        if (test1 > 1) {\n            str = \"123\";\n            result = true;\n        }\n        return result;\n    }\n    public void testMethod2() {\n        int count; \n        int a = 3;\n        int b = 2;\n        {\n            a = a\n                    + b\n                    - 5\n                    + 2\n                    * a;\n            count = b; \n        }\n    }\n    public void testMethod3() {\n        int count; \n        int a = 3;\n        int b = 3;\n        a = a + b;\n        b = a + a;\n        testMethod2();\n        count = b; \n    }\n    public void testMethod4(int arg) {\n        int d = 0;\n        for (int i = 0; i < 10; i++) {\n            d++;\n            if (i > 5) {\n                d += arg;\n            }\n        }\n        String ar[] = { \"1\", \"2\" };\n        for (String st : ar) {\n            System.identityHashCode(st);\n        }\n    }\n    public void testMethod5() {\n        int arg = 7; \n        boolean b = true;\n        boolean bb = false;\n        if (b)\n            if (!bb)\n                b = false;\n        testMethod4(arg); \n    }\n    public void testMethod6() {\n        int blockNumWithSimilarVar = 3;\n        int dist = 0;\n        int index = 0;\n        int block = 0;\n        if (blockNumWithSimilarVar <= 1) {\n            do {\n                dist++;\n                if (block > 4) {\n                    break;\n                }\n                index++;\n                block++;\n            } while (index < 7);\n        } else {\n            while (index < 8) {\n                dist += block;\n                index++;\n                block++;\n            }\n        }\n    }\n    public boolean testMethod7(int a) {\n        boolean res;\n        switch (a) {\n        case 1:\n            res = true;\n            break;\n        default:\n            res = false;\n        }\n        return res;\n    }\n    public void testMethod8() {\n        int b = 0;\n        int c = 0;\n        int m = 0;\n        int n = 0; \n        {\n            c++;\n            b++;\n        }\n        {\n            n++; \n            m++; \n            b++;\n        }\n    }\n    public void testMethod9() {\n        boolean result = false;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (!b2) {\n                result = true;\n            }\n            result = true;\n        }\n    }\n    public boolean testMethod10() {\n        boolean result;\n        try {\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            result = false;\n        }\n        return result;\n    }\n    public void testMethod11() {\n        int a = 0;\n        int b = 10;\n        boolean result; \n        try {\n            b--;\n        } catch (Exception e) {\n            b++;\n            result = false; \n        } finally {\n            a++;\n        }\n    }\n    public void testMethod12() {\n        boolean result = false;\n        boolean b3 = true;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (b3) {\n                if (!b2) {\n                    result = true;\n                }\n                result = true;\n            }\n        }\n    }\n    public void testMethod13() {\n        int i = 9;\n        int j = 6;\n        int g = i + 8;\n        int k = j + 10;\n    }\n    public void testMethod14() {\n        Session s = openSession();\n        Transaction t = s.beginTransaction();\n        A a = new A();\n        E d1 = new E();\n        C1 c = new C1();\n        E d2 = new E(); \n        a.setForward(d1);\n        d1.setReverse(a);\n        c.setForward(d2); \n        d2.setReverse(c);\n        Serializable aid = s.save(a);\n        Serializable d2id = s.save(d2);\n        t.commit(); \n        s.close();\n    }\n    public boolean isCheckBoxEnabled(int path) {\n        String model = \"\";\n        if (true) {\n            for (int index = 0; index < path; ++index) {\n                int nodeIndex = model.codePointAt(path);\n                if (model.contains(\"\")) {\n                    return false;\n                }\n            }\n        } else {\n            int nodeIndex = model.codePointAt(path);\n            if (model.contains(\"\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public Object readObject(String in) throws Exception {\n        String startDay = new String(\"\");\n        String endDay = new String(\"\");\n        return new String(startDay + endDay);\n    }\n    public int[] getSelectedIndices() {\n        int[] sel = new int[5]; \n        String model = \"\"; \n        int a = 0;\n        a++;\n        for (int index = 0; index < 5; ++index) {\n            sel[index] = Integer.parseInt(model.valueOf(a)); \n        }\n        return sel;\n    }\n    public void testMethod15() {\n        String confDebug = \"\";\n        if (!confDebug.equals(\"\") && !confDebug.equals(\"null\")) {\n            LogLog.warn(\"The \\\"\" + \"\\\" attribute is deprecated.\");\n            LogLog.warn(\"Use the \\\"\" + \"\\\" attribute instead.\");\n            LogLog.setInternalDebugging(confDebug, true);\n        }\n        int i = 0;\n        int k = 7;\n        boolean b = false;\n        for (; i < k; i++) {\n            b = true;\n            k++;\n        }\n        int sw; \n        switch (i) {\n        case 0:\n            k++;\n            sw = 0; \n            break;\n        case 1:\n            b = false;\n            break;\n        default:\n            b = true;\n        }\n        int wh = 0; \n        b = true;\n        do {\n            k--;\n            i++;\n        } while (wh > 0); \n        if (wh > 0) {\n            k++;\n        } else if (!b) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    public void testMethod16() {\n        int wh = 1, i = 4, k = 0;\n        if (i > 0) {\n            k++;\n        } else if (wh > 0) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    protected JMenuItem createSubMenuItem(LogLevel level) {\n        final JMenuItem result = new JMenuItem(level.toString());\n        final LogLevel logLevel = level;\n        result.setMnemonic(level.toString().charAt(0));\n        result.addActionListener(new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            showLogLevelColorChangeDialog(result, logLevel);\n          }\n        });\n        return result;\n      }\n    public static Color darker(Color color, double fraction) {\n        int red = (int) Math.round(color.getRed() * (1.0 - fraction));\n        int green = (int) Math.round(color.getGreen() * (1.0 - fraction)); \n        int blue = (int) Math.round(color.getBlue() * (1.0 - fraction)); \n        if (red < 0) {\n            red = 0;\n        } else if (red > 255) {\n            red = 255;\n        }\n        if (green < 0) { \n            green = 0;\n        } else if (green > 255) {\n            green = 255;\n        }\n        if (blue < 0) { \n        }\n        int alpha = color.getAlpha();\n        return new Color(red, green, blue, alpha);\n    }\n    public void testFinal() {\n        AuthUpdateTask task = null;\n        final long intervalMs = 30 * 60000L; \n        Object authCheckUrl = null, authInfo = null;\n        task = new AuthUpdateTask(authCheckUrl, authInfo, new IAuthListener() {\n            @Override\n            public void authTokenChanged(String cookie, String token) {\n                fireAuthTokenChanged(cookie, token);\n            }\n        });\n        Timer timer = new Timer(\"Auth Guard\", true);\n        timer.schedule(task, intervalMs / 2, intervalMs);\n    }\n    public void testForCycle() {\n        int filterCount = 0;\n        for (int i = 0; i < 10; i++, filterCount++) {\n            int abc = 0;\n            System.identityHashCode(abc);\n            for (int j = 0; j < 10; j++) {\n                abc = filterCount;\n                System.identityHashCode(abc);\n            }\n        }\n    }\n    public void testIssue32_1()\n    {\n        Option srcDdlFile = OptionBuilder.create(\"f\");\n        Option logDdlFile = OptionBuilder.create(\"o\");\n        Option help = OptionBuilder.create(\"h\");\n        Options options = new Options();\n        options.something();\n        options.something();\n        options.something();\n        options.something();\n        options.addOption(srcDdlFile, logDdlFile, help); \n    }\n    public void testIssue32_2()\n    {\n        int mm = Integer.parseInt(\"2\");\n        long timeNow = 0;\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        cal.setTimeInMillis(timeNow);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        cal.set(Calendar.HOUR_OF_DAY, mm);\n        cal.set(Calendar.MINUTE, mm); \n    }\n    public void testIssue32_3(MyObject[] objects) {\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        for(int i=0; i<objects.length; i++) {\n            objects[i].setEnabled(true);\n            objects[i].setColor(0x121212);\n            objects[i].setUrl(\"http:\n            objects[i].setSize(789);\n            objects[i].setCalendar(cal); \n        }\n    }\n    public String testIssue32_4(boolean flag) {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"flag is \");\n        builder.append(flag);\n        final String line = \"\";\n        if(flag) {\n            builder.append(\"line of AST is:\");\n            builder.append(\"\\n\");\n            builder.append(String.valueOf(line)); \n            builder.append(\"\\n\");\n        }\n        return builder.toString();\n    }\n    public void testIssue32_5() {\n        Option a = null;\n        Option b = null;\n        Option c = null;\n        boolean isCNull = isNull(c); \n        boolean isBNull = isNull(b); \n        boolean isANull = isNull(a); \n    }\n    public void testIssue32_6() {\n        Option aOpt = null; \n        Option bOpt = null; \n        Option cOpt = null;\n        isNull(cOpt); \n        isNull(bOpt); \n        isNull(aOpt); \n    }\n    public void testIssue32_7() {\n        String line = \"abc\";\n        otherWriter.write(line);\n        line.charAt(1);\n        builder.append(line);\n        test(line, line, line);\n    }\n    public void testIssue32_8(Writer w1, Writer w2, Writer w3) {\n        String l1=\"1\", l2=\"2\", l3=\"3\"; \n        w1.write(l3); \n        w2.write(l2); \n        w3.write(l1); \n    }\n    public void testIssue32_9() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        System.identityHashCode(\"message\");\n        myOption.setArgName(\"abc\"); \n    }\n    public void testIssue32_10() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        myOption.setArgName(\"q\"); \n    }\n    public int testIssue32_11(String toDir)\n            throws Exception\n    {\n        int count = 0; \n        String[] files = {}; \n        System.identityHashCode(\"Data archival started\");\n        files.notify();\n        System.identityHashCode(\"sss\");\n        if (files == null || files.length == 0) {\n            System.identityHashCode(\"No files on a remote site\");\n        }\n        else {\n            System.identityHashCode(\"Files on remote site: \" + files.length);\n            for (String ftpFile : files) {\n                if (files.length == 0) {\n                    \"\".concat(\"\");\n                    ftpFile.concat(files[2]);\n                    count++;\n                }\n            }\n        }\n        System.lineSeparator();\n        return count;\n    }\n    private TreeMapNode buildTree(Object[][] tree)\n    {\n        int k = 0;\n        tree.notify();\n        TreeMapNode root = null;\n        for (Object[] s : tree) {\n            Integer id = (Integer) s[0]; \n            String label = (String) s[1];\n            Integer parentId = (Integer) s[2]; \n            Number weight = (Number) s[3];\n            Number value = (Number) s[4];\n            Integer childCount = (Integer) s[5];\n            TreeMapNode node;\n            if (childCount == 0) {\n                node = new TreeMapNode(label,\n                        weight != null ? weight.doubleValue() : 0.0,\n                        new DefaultValue(value != null ? value.doubleValue()\n                                : 0.0));\n            }\n            else {\n                node = new TreeMapNode(label);\n            }\n            System.identityHashCode(id.toString() + node);\n            System.identityHashCode(node.toString() + id);\n            if (parentId == null || parentId == -1) { \n                root = node;\n            }\n            else {\n                System.identityHashCode(parentId.toString() +node);\n            }\n        }\n        return root;\n    }\n    private Session openSession() {\n        return null;\n    }\n    class Session {\n        public Transaction beginTransaction() {\n            return null;\n        }\n        public void close() {\n        }\n        public Serializable save(E d2) {\n            return null;\n        }\n        public Serializable save(A a) {\n            return null;\n        }\n    }\n    class Transaction {\n        public void commit() {\n        }\n    }\n    class A {\n        public void setForward(E d1) {\n        }\n    }\n    class E {\n        public void setReverse(C1 c) {\n        }\n        public void setReverse(A a) {\n        }\n    }\n    class C1 {\n        public void setForward(E d2) {\n        }\n    }\n    class Serializable {\n    }\n    class JMenuItem {\n        public JMenuItem(String string) {\n        }\n        public void addActionListener(ActionListener actionListener) {\n        }\n        public void setMnemonic(char charAt) {\n        }\n    }\n    class LogLevel {\n    }\n    class ActionListener {\n    }\n    class ActionEvent {\n    }\n    private void showLogLevelColorChangeDialog(JMenuItem j, LogLevel l) {   }\n    static class Color {\n        public Color(int red, int green, int blue, int alpha) {\n        }\n        public double getRed() {\n            return 0;\n        }\n        public int getAlpha() {\n            return 0;\n        }\n        public double getBlue() {\n            return 0;\n        }\n        public double getGreen() {\n            return 0;\n        }\n    }\n    class AuthUpdateTask {\n        public AuthUpdateTask(Object authCheckUrl, Object authInfo,\n                IAuthListener iAuthListener) {\n        }\n    }\n    interface IAuthListener {\n        void authTokenChanged(String cookie, String token);\n    }\n    void fireAuthTokenChanged(String s, String s1) {}\n    class Timer {\n        public Timer(String string, boolean b) {\n        }\n        public void schedule(AuthUpdateTask authUpdateTask, long l,\n                long intervalMs) {\n        }\n    }\n    class Option {\n        public void setArgName(String string) {\n        }\n    }\n    boolean isNull(Option o) {\n        return false;}\n    class Writer {\n        public void write(String l3) {\n        }\n    }\n    class Options {\n        public void addBindFile(Object object) {\n        }\n        public void\n                addOption(Option srcDdlFile, Option logDdlFile, Option help)\n        {\n        }\n        public void something()\n        {\n        }\n    }\n    class TreeMapNode {\n        public TreeMapNode(String label, double d, DefaultValue defaultValue) {\n        }\n        public TreeMapNode(String label) {\n        }\n    }\n    class DefaultValue {\n        public DefaultValue(double d) {\n        }\n    }\n    static class LogLog {\n        public static void warn(String string)\n        {\n        }\n        public static void setInternalDebugging(String confDebug, boolean b)\n        {\n        }\n    }\n    static class OptionBuilder {\n        public static Option create(String string)\n        {\n            return null;\n        }\n    }\n    class MyObject {\n        public void setEnabled(boolean b)\n        {\n        }\n        public void setCalendar(Calendar cal)\n        {\n        }\n        public void setSize(int i)\n        {\n        }\n        public void setUrl(String string)\n        {\n        }\n        public void setColor(int i)\n        {\n        }\n    }\n    static class otherWriter {\n        public static void write(String line)\n        {\n        }\n    }\n    void test(String s, String s1, String s2) {\n    }\n    static class builder {\n        public static void append(String line)\n        {\n        }\n    }\n}\nclass New3 {\n    void a() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void b() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        do {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        } while (true);\n    }\n    void c() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (;;) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void d() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i: new int[]{1,2,3}) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void f() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            System.identityHashCode(a);\n    }\n    void h() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            while (true)\n                a++;\n    }\n    void i() {\n        int a = 1;\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.lineSeparator();\n            break;\n        case 2:\n            System.lineSeparator();\n            break;\n        }\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.identityHashCode(a);\n            break;\n        case 2:\n            System.identityHashCode(a);\n            break;\n        }\n    }\n    void k() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            if (true) {\n                System.lineSeparator();\n            } else if (true) {\n                System.identityHashCode(a);\n            } else {\n                System.lineSeparator();\n            }\n        }\n    }\n    void l() {\n        int a = 1;\n        while (true) {\n            switch (hashCode()){}\n            switch (Math.max(1, 2)) {\n            case 1:\n                System.identityHashCode(a);\n                break;\n            case 2:\n                System.identityHashCode(a);\n                break;\n            }\n        }\n    }\n    void tryWithoutFinally() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        try {\n            a = 2;\n        }\n        catch(Exception e){}\n    }\n    void m() {\n        final int a = 1;\n        int b = 0;\n        if (b == 1) {\n            System.lineSeparator();\n        }\n        final int c = a + 1;\n    }\n    void test() {\n        int a = 0;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i = 0; i < 10; i++) {\n            if (true) {\n                System.identityHashCode(a);\n            }\n            else {\n                System.identityHashCode(a);\n            }\n        }\n        int b = 0;\n        try {\n            for (int i = 0; i < 10; i++) {\n                if (true) {\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    b = i;\n                }\n            }\n            System.lineSeparator();\n            System.lineSeparator();\n        }\n        catch (Exception e) {\n            System.lineSeparator();\n        }\n        finally {\n            System.identityHashCode(b);\n        }\n        int c = 0;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        if (false) {\n        }\n        else if (c == 1) {\n            if (c != 2) {\n                System.lineSeparator();\n            }\n            System.identityHashCode(c);\n        }\n        else if (c == 2) {\n            System.identityHashCode(c);\n        }\n    }\n    private void launch(Integer number ) {\n        String myInt = ( number.toString() + '\\0' );\n        boolean result = false;\n        if (number == 123)\n            result = true;\n    }\n    static int field;\n    private void n() {\n        long a = 0;\n        New3.field = 1;\n        New3.field = 2;\n        New3.field = 3;\n        New3.field = (int)a;\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceScope2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\npublic class InputVariableDeclarationUsageDistanceScope2 {\n    void f() {\n        int i; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (i = 0; i < 10; i++) {\n            i = i + i;\n        }\n        int a = i;\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceScopes.java",
      "expected-problems": 34,
      "expected-linenumbers": [
        41,
        49,
        55,
        82,
        107,
        230,
        233,
        234,
        271,
        272,
        310,
        354,
        355,
        378,
        465,
        466,
        490,
        502,
        515,
        516,
        551,
        553,
        854,
        866,
        878,
        890,
        902,
        912,
        923,
        944,
        989,
        1000,
        1034,
        1065
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.util.*;\npublic class InputVariableDeclarationUsageDistanceScopes {\n    private static int test1 = 0;\n    static {\n        int b = 0;\n        int d = 0;\n        {\n            d = ++b;\n        }\n    }\n    static {\n        int c = 0;\n        int a = 3;\n        int b = 2;\n        {\n            a = a + b;\n            c = b;\n        }\n        {\n            c--;\n        }\n        a = 7;\n    }\n    static {\n        int a = -1; \n        int b = 2;\n        b++;\n        int c = --b;\n        a = b; \n    }\n    public InputVariableDeclarationUsageDistanceScopes(int test1) {\n        int temp = -1; \n        this.test1 = test1;\n        temp = test1; \n    }\n    public boolean testMethod() {\n        int temp = 7; \n        new InputVariableDeclarationUsageDistanceScopes(2);\n        String.valueOf(temp); \n        boolean result = false;\n        String str = \"\";\n        if (test1 > 1) {\n            str = \"123\";\n            result = true;\n        }\n        return result;\n    }\n    public void testMethod2() {\n        int count;\n        int a = 3;\n        int b = 2;\n        {\n            a = a\n                    + b\n                    - 5\n                    + 2\n                    * a;\n            count = b; \n        }\n    }\n    public void testMethod3() {\n        int count; \n        int a = 3;\n        int b = 3;\n        a = a + b;\n        b = a + a;\n        testMethod2();\n        count = b; \n    }\n    public void testMethod4(int arg) {\n        int d = 0;\n        for (int i = 0; i < 10; i++) {\n            d++;\n            if (i > 5) {\n                d += arg;\n            }\n        }\n        String ar[] = { \"1\", \"2\" };\n        for (String st : ar) {\n            System.identityHashCode(st);\n        }\n    }\n    public void testMethod5() {\n        int arg = 7; \n        boolean b = true;\n        boolean bb = false;\n        if (b)\n            if (!bb)\n                b = false;\n        testMethod4(arg); \n    }\n    public void testMethod6() {\n        int blockNumWithSimilarVar = 3;\n        int dist = 0;\n        int index = 0;\n        int block = 0;\n        if (blockNumWithSimilarVar <= 1) {\n            do {\n                dist++;\n                if (block > 4) {\n                    break;\n                }\n                index++;\n                block++;\n            } while (index < 7);\n        } else {\n            while (index < 8) {\n                dist += block;\n                index++;\n                block++;\n            }\n        }\n    }\n    public boolean testMethod7(int a) {\n        boolean res;\n        switch (a) {\n        case 1:\n            res = true;\n            break;\n        default:\n            res = false;\n        }\n        return res;\n    }\n    public void testMethod8() {\n        int b = 0;\n        int c = 0;\n        int m = 0;\n        int n = 0;\n        {\n            c++;\n            b++;\n        }\n        {\n            n++; \n            m++; \n            b++;\n        }\n    }\n    public void testMethod9() {\n        boolean result = false;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (!b2) {\n                result = true;\n            }\n            result = true;\n        }\n    }\n    public boolean testMethod10() {\n        boolean result;\n        try {\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            result = false;\n        }\n        return result;\n    }\n    public void testMethod11() {\n        int a = 0;\n        int b = 10;\n        boolean result;\n        try {\n            b--;\n        } catch (Exception e) {\n            b++;\n            result = false; \n        } finally {\n            a++;\n        }\n    }\n    public void testMethod12() {\n        boolean result = false;\n        boolean b3 = true;\n        boolean b1 = true;\n        boolean b2 = false;\n        if (b1) {\n            if (b3) {\n                if (!b2) {\n                    result = true;\n                }\n                result = true;\n            }\n        }\n    }\n    public void testMethod13() {\n        int i = 9;\n        int j = 6;\n        int g = i + 8;\n        int k = j + 10;\n    }\n    public void testMethod14() {\n        Session s = openSession();\n        Transaction t = s.beginTransaction(); \n        A a = new A();\n        E d1 = new E();\n        C1 c = new C1(); \n        E d2 = new E(); \n        a.setForward(d1);\n        d1.setReverse(a);\n        c.setForward(d2); \n        d2.setReverse(c);\n        Serializable aid = s.save(a);\n        Serializable d2id = s.save(d2);\n        t.commit(); \n        s.close();\n    }\n    public boolean isCheckBoxEnabled(int path) {\n        String model = \"\";\n        if (true) {\n            for (int index = 0; index < path; ++index) {\n                int nodeIndex = model.codePointAt(path);\n                if (model.contains(\"\")) {\n                    return false;\n                }\n            }\n        } else {\n            int nodeIndex = model.codePointAt(path);\n            if (model.contains(\"\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public Object readObject(String in) throws Exception {\n        String startDay = new String(\"\");\n        String endDay = new String(\"\");\n        return new String(startDay + endDay);\n    }\n    public int[] getSelectedIndices() {\n        int[] sel = new int[5]; \n        String model = \"\"; \n        int a = 0;\n        a++;\n        for (int index = 0; index < 5; ++index) {\n            sel[index] = Integer.parseInt(model.valueOf(a)); \n        }\n        return sel;\n    }\n    public void testMethod15() {\n        String confDebug = \"\";\n        if (!confDebug.equals(\"\") && !confDebug.equals(\"null\")) {\n            LogLog.warn(\"The \\\"\" + \"\\\" attribute is deprecated.\");\n            LogLog.warn(\"Use the \\\"\" + \"\\\" attribute instead.\");\n            LogLog.setInternalDebugging(confDebug, true);\n        }\n        int i = 0;\n        int k = 7;\n        boolean b = false;\n        for (; i < k; i++) {\n            b = true;\n            k++;\n        }\n        int sw;\n        switch (i) {\n        case 0:\n            k++;\n            sw = 0; \n            break;\n        case 1:\n            b = false;\n            break;\n        default:\n            b = true;\n        }\n        int wh = 0; \n        b = true;\n        do {\n            k--;\n            i++;\n        } while (wh > 0); \n        if (wh > 0) {\n            k++;\n        } else if (!b) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    public void testMethod16() {\n        int wh = 1, i = 4, k = 0;\n        if (i > 0) {\n            k++;\n        } else if (wh > 0) {\n            i++;\n        } else {\n            i--;\n        }\n    }\n    protected JMenuItem createSubMenuItem(LogLevel level) {\n        final JMenuItem result = new JMenuItem(level.toString());\n        final LogLevel logLevel = level;\n        result.setMnemonic(level.toString().charAt(0));\n        result.addActionListener(new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            showLogLevelColorChangeDialog(result, logLevel);\n          }\n        });\n        return result;\n      }\n    public static Color darker(Color color, double fraction) {\n        int red = (int) Math.round(color.getRed() * (1.0 - fraction));\n        int green = (int) Math.round(color.getGreen() * (1.0 - fraction)); \n        int blue = (int) Math.round(color.getBlue() * (1.0 - fraction)); \n        if (red < 0) {\n            red = 0;\n        } else if (red > 255) {\n            red = 255;\n        }\n        if (green < 0) { \n            green = 0;\n        } else if (green > 255) {\n            green = 255;\n        }\n        if (blue < 0) { \n        }\n        int alpha = color.getAlpha();\n        return new Color(red, green, blue, alpha);\n    }\n    public void testFinal() {\n        AuthUpdateTask task = null;\n        final long intervalMs = 30 * 60000L; \n        Object authCheckUrl = null, authInfo = null;\n        task = new AuthUpdateTask(authCheckUrl, authInfo, new IAuthListener() {\n            @Override\n            public void authTokenChanged(String cookie, String token) {\n                fireAuthTokenChanged(cookie, token);\n            }\n        });\n        Timer timer = new Timer(\"Auth Guard\", true);\n        timer.schedule(task, intervalMs / 2, intervalMs);\n    }\n    public void testForCycle() {\n        int filterCount = 0;\n        for (int i = 0; i < 10; i++, filterCount++) {\n            int abc = 0;\n            System.identityHashCode(abc);\n            for (int j = 0; j < 10; j++) {\n                abc = filterCount;\n                System.identityHashCode(abc);\n            }\n        }\n    }\n    public void testIssue32_1()\n    {\n        Option srcDdlFile = OptionBuilder.create(\"f\");\n        Option logDdlFile = OptionBuilder.create(\"o\");\n        Option help = OptionBuilder.create(\"h\");\n        Options options = new Options();\n        options.something();\n        options.something();\n        options.something();\n        options.something();\n        options.addOption(srcDdlFile, logDdlFile, help); \n    }\n    public void testIssue32_2()\n    {\n        int mm = Integer.parseInt(\"2\");\n        long timeNow = 0;\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        cal.setTimeInMillis(timeNow);\n        cal.set(Calendar.SECOND, 0);\n        cal.set(Calendar.MILLISECOND, 0);\n        cal.set(Calendar.HOUR_OF_DAY, mm);\n        cal.set(Calendar.MINUTE, mm); \n    }\n    public void testIssue32_3(MyObject[] objects) {\n        Calendar cal = Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault());\n        for(int i=0; i<objects.length; i++) {\n            objects[i].setEnabled(true);\n            objects[i].setColor(0x121212);\n            objects[i].setUrl(\"http:\n            objects[i].setSize(789);\n            objects[i].setCalendar(cal); \n        }\n    }\n    public String testIssue32_4(boolean flag) {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"flag is \");\n        builder.append(flag);\n        final String line = \"\";\n        if(flag) {\n            builder.append(\"line of AST is:\");\n            builder.append(\"\\n\");\n            builder.append(String.valueOf(line)); \n            builder.append(\"\\n\");\n        }\n        return builder.toString();\n    }\n    public void testIssue32_5() {\n        Option a = null;\n        Option b = null;\n        Option c = null;\n        boolean isCNull = isNull(c); \n        boolean isBNull = isNull(b); \n        boolean isANull = isNull(a); \n    }\n    public void testIssue32_6() {\n        Option aOpt = null; \n        Option bOpt = null; \n        Option cOpt = null;\n        isNull(cOpt); \n        isNull(bOpt); \n        isNull(aOpt); \n    }\n    public void testIssue32_7() {\n        String line = \"abc\";\n        otherWriter.write(line);\n        line.charAt(1);\n        builder.append(line);\n        test(line, line, line);\n    }\n    public void testIssue32_8(Writer w1, Writer w2, Writer w3) {\n        String l1=\"1\", l2=\"2\", l3=\"3\"; \n        w1.write(l3); \n        w2.write(l2); \n        w3.write(l1); \n    }\n    public void testIssue32_9() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        System.identityHashCode(\"message\");\n        myOption.setArgName(\"abc\"); \n    }\n    public void testIssue32_10() {\n        Options options = new Options();\n        Option myOption = null; \n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        options.addBindFile(null);\n        myOption.setArgName(\"q\"); \n    }\n    public int testIssue32_11(String toDir)\n            throws Exception\n    {\n        int count = 0; \n        String[] files = {}; \n        System.identityHashCode(\"Data archival started\");\n        files.notify();\n        System.identityHashCode(\"sss\");\n        if (files == null || files.length == 0) {\n            System.identityHashCode(\"No files on a remote site\");\n        }\n        else {\n            System.identityHashCode(\"Files on remote site: \" + files.length);\n            for (String ftpFile : files) {\n                if (files.length == 0) {\n                    \"\".concat(\"\");\n                    ftpFile.concat(files[2]);\n                    count++;\n                }\n            }\n        }\n        System.lineSeparator();\n        return count;\n    }\n    private TreeMapNode buildTree(Object[][] tree)\n    {\n        int k = 0;\n        tree.notify();\n        TreeMapNode root = null;\n        for (Object[] s : tree) {\n            Integer id = (Integer) s[0]; \n            String label = (String) s[1];\n            Integer parentId = (Integer) s[2]; \n            Number weight = (Number) s[3];\n            Number value = (Number) s[4];\n            Integer childCount = (Integer) s[5];\n            TreeMapNode node;\n            if (childCount == 0) {\n                node = new TreeMapNode(label,\n                        weight != null ? weight.doubleValue() : 0.0,\n                        new DefaultValue(value != null ? value.doubleValue()\n                                : 0.0));\n            }\n            else {\n                node = new TreeMapNode(label);\n            }\n            System.identityHashCode(id.toString() + node);\n            System.identityHashCode(node.toString() + id);\n            if (parentId == null || parentId == -1) { \n                root = node;\n            }\n            else {\n                System.identityHashCode(parentId.toString() +node);\n            }\n        }\n        return root;\n    }\n    private Session openSession() {\n        return null;\n    }\n    class Session {\n        public Transaction beginTransaction() {\n            return null;\n        }\n        public void close() {\n        }\n        public Serializable save(E d2) {\n            return null;\n        }\n        public Serializable save(A a) {\n            return null;\n        }\n    }\n    class Transaction {\n        public void commit() {\n        }\n    }\n    class A {\n        public void setForward(E d1) {\n        }\n    }\n    class E {\n        public void setReverse(C1 c) {\n        }\n        public void setReverse(A a) {\n        }\n    }\n    class C1 {\n        public void setForward(E d2) {\n        }\n    }\n    class Serializable {\n    }\n    class JMenuItem {\n        public JMenuItem(String string) {\n        }\n        public void addActionListener(ActionListener actionListener) {\n        }\n        public void setMnemonic(char charAt) {\n        }\n    }\n    class LogLevel {\n    }\n    class ActionListener {\n    }\n    class ActionEvent {\n    }\n    private void showLogLevelColorChangeDialog(JMenuItem j, LogLevel l) {   }\n    static class Color {\n        public Color(int red, int green, int blue, int alpha) {\n        }\n        public double getRed() {\n            return 0;\n        }\n        public int getAlpha() {\n            return 0;\n        }\n        public double getBlue() {\n            return 0;\n        }\n        public double getGreen() {\n            return 0;\n        }\n    }\n    class AuthUpdateTask {\n        public AuthUpdateTask(Object authCheckUrl, Object authInfo,\n                IAuthListener iAuthListener) {\n        }\n    }\n    interface IAuthListener {\n        void authTokenChanged(String cookie, String token);\n    }\n    void fireAuthTokenChanged(String s, String s1) {}\n    class Timer {\n        public Timer(String string, boolean b) {\n        }\n        public void schedule(AuthUpdateTask authUpdateTask, long l,\n                long intervalMs) {\n        }\n    }\n    class Option {\n        public void setArgName(String string) {\n        }\n    }\n    boolean isNull(Option o) {\n        return false;}\n    class Writer {\n        public void write(String l3) {\n        }\n    }\n    class Options {\n        public void addBindFile(Object object) {\n        }\n        public void\n                addOption(Option srcDdlFile, Option logDdlFile, Option help)\n        {\n        }\n        public void something()\n        {\n        }\n    }\n    class TreeMapNode {\n        public TreeMapNode(String label, double d, DefaultValue defaultValue) {\n        }\n        public TreeMapNode(String label) {\n        }\n    }\n    class DefaultValue {\n        public DefaultValue(double d) {\n        }\n    }\n    static class LogLog {\n        public static void warn(String string)\n        {\n        }\n        public static void setInternalDebugging(String confDebug, boolean b)\n        {\n        }\n    }\n    static class OptionBuilder {\n        public static Option create(String string)\n        {\n            return null;\n        }\n    }\n    class MyObject {\n        public void setEnabled(boolean b)\n        {\n        }\n        public void setCalendar(Calendar cal)\n        {\n        }\n        public void setSize(int i)\n        {\n        }\n        public void setUrl(String string)\n        {\n        }\n        public void setColor(int i)\n        {\n        }\n    }\n    static class otherWriter {\n        public static void write(String line)\n        {\n        }\n    }\n    void test(String s, String s1, String s2) {\n    }\n    static class builder {\n        public static void append(String line)\n        {\n        }\n    }\n}\nclass New4 {\n    void a() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void b() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        do {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        } while (true);\n    }\n    void c() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (;;) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void d() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i: new int[]{1,2,3}) {\n            System.lineSeparator();\n            System.identityHashCode(a);\n        }\n    }\n    void f() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            System.identityHashCode(a);\n    }\n    void h() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true)\n            while (true)\n                a++;\n    }\n    void i() {\n        int a = 1; \n        switch (Math.max(1, 2)) {\n        case 1:\n            System.lineSeparator();\n            break;\n        case 2:\n            System.lineSeparator();\n            break;\n        }\n        switch (Math.max(1, 2)) {\n        case 1:\n            System.identityHashCode(a);\n            break;\n        case 2:\n            System.identityHashCode(a);\n            break;\n        }\n    }\n    void k() {\n        int a = 1; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        while (true) {\n            System.lineSeparator();\n            if (true) {\n                System.lineSeparator();\n            } else if (true) {\n                System.identityHashCode(a);\n            } else {\n                System.lineSeparator();\n            }\n        }\n    }\n    void l() {\n        int a = 1;\n        while (true) {\n            switch (hashCode()){}\n            switch (Math.max(1, 2)) {\n            case 1:\n                System.identityHashCode(a);\n                break;\n            case 2:\n                System.identityHashCode(a);\n                break;\n            }\n        }\n    }\n    void tryWithoutFinally() {\n        int a = 1;\n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        try {\n            a = 2;\n        }\n        catch(Exception e){}\n    }\n    void m() {\n        final int a = 1; \n        int b = 0;\n        if (b == 1) {\n            System.lineSeparator();\n        }\n        final int c = a + 1;\n    }\n    void test() {\n        int a = 0; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        for (int i = 0; i < 10; i++) {\n            if (true) {\n                System.identityHashCode(a);\n            }\n            else {\n                System.identityHashCode(a);\n            }\n        }\n        int b = 0;\n        try {\n            for (int i = 0; i < 10; i++) {\n                if (true) {\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    System.lineSeparator();\n                    b = i;\n                }\n            }\n            System.lineSeparator();\n            System.lineSeparator();\n        }\n        catch (Exception e) {\n            System.lineSeparator();\n        }\n        finally {\n            System.identityHashCode(b);\n        }\n        int c = 0; \n        System.lineSeparator();\n        System.lineSeparator();\n        System.lineSeparator();\n        if (false) {\n        }\n        else if (c == 1) {\n            if (c != 2) {\n                System.lineSeparator();\n            }\n            System.identityHashCode(c);\n        }\n        else if (c == 2) {\n            System.identityHashCode(c);\n        }\n    }\n    private void launch(Integer number ) {\n        String myInt = ( number.toString() + '\\0' );\n        boolean result = false;\n        if (number == 123)\n            result = true;\n    }\n    static int field;\n    private void n() {\n        long a = 0; \n        New4.field = 1;\n        New4.field = 2;\n        New4.field = 3;\n        New4.field = (int)a;\n    }\n}"
    },
    {
      "description": "Auto test from InputVariableDeclarationUsageDistanceTryResources.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        18,
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.variabledeclarationusagedistance;\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.util.*;\npublic class InputVariableDeclarationUsageDistanceTryResources {\n    public int methodTry() {\n        String a = \"\"; \n        String b = \"abc\"; \n        System.out.println();\n        try (AutoCloseable j = new java.io.StringReader(b);\n             final AutoCloseable i = new java.io.StringReader(a);\n             final AutoCloseable k = new java.io.StringReader(b);) {\n            b.replace(a.charAt(0), 'b');\n            String c = b.toString();\n        } catch (Exception e) {\n            System.out.println(a);\n            throw new RuntimeException(e);\n        }\n        return 0;\n    }\n    String method2() throws Exception {\n        String b = \"\";\n        FileReader fr = new FileReader(b);\n        BufferedReader br = new BufferedReader(fr);\n        try {\n            return br.readLine();\n        } finally {\n            br.close();\n            fr.close();\n        }\n    }\n    void method() {\n        byte[] buf = new byte[10];\n        File b = new File(\"\");\n        try (AutoCloseable j = new java.io.StringReader(b.toString());\n             InputStream finstr = Files.newInputStream(b.toPath());\n             BufferedInputStream in = new BufferedInputStream(finstr, buf.length)) {\n            int length;\n            while ((length = in.read(buf)) != -1) {\n                System.out.println(buf.toString());\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n    String method3() throws Exception {\n        String b = \"\";\n        FileReader fr = new FileReader(\"\");\n        BufferedReader br = new BufferedReader(fr);\n        try {\n            return br.readLine();\n        } catch (Exception e) {\n            FileReader t = new FileReader(b);\n        } finally {\n            br.close();\n            fr.close();\n            return b;\n        }\n    }\n    class myClass {\n        String m, n;\n        myClass(String a, String b) {\n            this.m = a;\n            this.n = b;\n        }\n        AutoCloseable getAutoCloseable(int m) {\n            return new AutoCloseable() {\n                @Override\n                public void close() throws Exception {\n                }\n            };\n        }\n    }\n    void method4() throws Exception {\n        String b = \"abc\";\n        myClass a = new myClass(\"\", b);\n        Scanner scanner = new Scanner(System.in);\n        scanner.nextBigInteger(100);\n        try (final AutoCloseable t = a.getAutoCloseable(3);) {\n            Integer number = 10;\n            for (int i = 0; i < 10; i++) {\n                System.out.println(i);\n            }\n            b.substring(0, a.toString().length());\n        }\n    }\n    private void method5(OutputStream out, HashMap<String, myClass> fieldStatistics)\n            throws IOException {\n        out.write(fieldStatistics.size());\n        final boolean[] states = {fieldStatistics.isEmpty(), fieldStatistics.isEmpty()};\n        Object[] keys = fieldStatistics.keySet().toArray(new String[0]);\n        Object[] values = fieldStatistics.values().toArray(new myClass[0]);\n        for (int i = 0; i < states.length; i++) {\n            if (states[i]) {\n                out.write(((String) keys[i]).getBytes());\n                myClass statistics = (myClass) values[i];\n                assert statistics.hashCode() >= 0;\n                out.write(statistics.hashCode());\n                out.write(statistics.m.getBytes());\n            }\n        }\n    }\n}"
    }
  ]
}