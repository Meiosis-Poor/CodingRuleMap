{
  "name": "ArrayTrailingComma",
  "language": "java",
  "description": "<div>\n Checks that array initialization contains a trailing comma.\n </div>\n\n <pre>\n int[] a = new int[]\n {\n   1,\n   2,\n   3,\n };\n </pre>\n\n <p>\n By default, the check demands a comma at the end if neither left nor right curly braces\n are on the same line as the last element of the array.\n </p>\n <pre>\n return new int[] { 0 };\n return new int[] { 0\n   };\n return new int[] {\n   0 };\n </pre>\n\n <p>\n Rationale: Putting this comma in makes it easier to change the\n order of the elements or add new elements on the end. Main benefit of a trailing\n comma is that when you add new entry to an array, no surrounding lines are changed.\n </p>\n <pre>\n {\n   100000000000000000000,\n   200000000000000000000, // OK\n }\n\n {\n   100000000000000000000,\n   200000000000000000000,\n   300000000000000000000,  // Just this line added, no other changes\n }\n </pre>\n\n <p>\n If closing brace is on the same line as trailing comma, this benefit is gone\n (as the check does not demand a certain location of curly braces the following\n two cases will not produce a violation):\n </p>\n <pre>\n {100000000000000000000,\n  200000000000000000000,} // Trailing comma not needed, line needs to be modified anyway\n\n {100000000000000000000,\n  200000000000000000000, // Modified line\n  300000000000000000000,} // Added line\n </pre>\n\n <p>\n If opening brace is on the same line as trailing comma there's also (more arguable) problem:\n </p>\n <pre>\n {100000000000000000000, // Line cannot be just duplicated to slightly modify entry\n }\n\n {100000000000000000000,\n  100000000000000000001, // More work needed to duplicate\n }\n </pre>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 38,
  "branches": 1,
  "apis": 12,
  "test": [
    {
      "description": "Auto test from InputArrayTrailingComma.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        22,
        42,
        79,
        81
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.arraytrailingcomma;\npublic class InputArrayTrailingComma\n{\n    int[] a1 = new int[]\n    {\n        1,\n        2,\n        3,\n    };\n    int[] a2 = new int[]\n    {\n        1,\n        2,\n        3 \n    };\n    int[] b1 = new int[] {1, 2, 3,};\n    int[] b2 = new int[] {1, 2, 3};\n    int[][] c1 = new int[][] {{1, 2,}, {3, 3,}, {5, 6,},};\n    int[][] c2 = new int[][] {{1, 2}, {3, 3,}, {5, 6,}};\n    int[][] d1 = new int[][]\n    {\n        {1, 2,},\n        {3, 3,},\n        {5, 6,},\n    };\n    int[][] d2 = new int[][]\n    {\n        {1,\n         2},\n        {3, 3,},\n        {5, 6,} \n    };\n    int[] e1 = new int[] {\n    };\n    int[] f1 = new int[] {0, 1\n    };\n    int[][] f2 = new int[][]\n    {\n        {1,\n         2,},\n    };\n    int[] f3 = new int[]{\n            1,\n            2\n            ,\n    };\n    int[] f4 = new int[]{\n            1,\n            2\n            ,};\n    Object[][] g1 = new Object[][]\n    {\n        { 1, 1 },\n        {\n           null,\n           new int[] { 2,\n                   3 }, }, };\n    Object[][] g2 = new Object[][]\n    {\n        { 1, 1 },\n        { \n           null,\n           new int[] { 2, \n                   3 } } };\n}"
    },
    {
      "description": "Auto test from InputArrayTrailingCommaAlwaysDemandTrailingComma.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        14,
        21,
        26,
        28,
        31,
        37,
        46,
        51,
        53,
        55
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.arraytrailingcomma;\npublic class InputArrayTrailingCommaAlwaysDemandTrailingComma {\n    public int[] test() {\n        if (true) {\n            return new int[]{0,};\n        }\n        return new int[]{0}; \n    }\n    public int[] test2() {\n        if (true) {\n            return new int[]{0, 1,};\n        }\n        return new int[]{0, 1}; \n    }\n    public void test3() {\n        int[] a = new int[]\n            {0}; \n        int[] b = new int[]\n            {0, 1}; \n        int[] c = new int[]\n            {0, 1,\n                2, 3 \n            };\n        int[] d = new int[]\n            {\n                1,\n                2,\n                3 \n            };\n        int[] e = new int[]\n            {\n                1,\n                5,\n                6,\n            };\n        int[] f = {1,\n            2 \n        };\n        int[] g = {1,\n            2,\n        };\n        int[][] empty2d = {{}}; \n        int[][] multiDimensionalArray = {\n            {1, 2}, \n            {1,},\n            {3, 2, 1,} \n        };\n    }\n}"
    }
  ]
}