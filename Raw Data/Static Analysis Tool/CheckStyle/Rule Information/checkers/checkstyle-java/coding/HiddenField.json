{
  "name": "HiddenField",
  "language": "java",
  "description": "<div>\n Checks that a local variable or a parameter does not shadow\n a field that is defined in the same class.\n </div>\n\n <p>\n It is possible to configure the check to ignore all property setter methods.\n </p>\n\n <p>\n A method is recognized as a setter if it is in the following form\n </p>\n <pre>\n ${returnType} set${Name}(${anyType} ${name}) { ... }\n </pre>\n\n <p>\n where ${anyType} is any primitive type, class or interface name;\n ${name} is name of the variable that is being set and ${Name} its\n capitalized form that appears in the method name. By default, it is expected\n that setter returns void, i.e. ${returnType} is 'void'. For example\n </p>\n <pre>\n void setTime(long time) { ... }\n </pre>\n\n <p>\n Any other return types will not let method match a setter pattern. However,\n by setting <em>setterCanReturnItsClass</em> property to <em>true</em>\n definition of a setter is expanded, so that setter return type can also be\n a class in which setter is declared. For example\n </p>\n <pre>\n class PageBuilder {\n   PageBuilder setName(String name) { ... }\n }\n </pre>\n\n <p>\n Such methods are known as chain-setters and a common when Builder-pattern\n is used. Property <em>setterCanReturnItsClass</em> has effect only if\n <em>ignoreSetter</em> is set to true.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 310,
  "branches": 33,
  "apis": 56,
  "test": [
    {
      "description": "Auto test from InputHiddenField1.java",
      "expected-problems": 18,
      "expected-linenumbers": [
        29,
        38,
        44,
        58,
        67,
        68,
        74,
        76,
        89,
        90,
        95,
        151,
        156,
        161,
        165,
        212,
        229,
        235
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nclass InputHiddenField1\n{\n    private int hidden = 0;\n    public InputHiddenField1()\n    {\n        int hidden = 0;  \n    }\n    public InputHiddenField1(int hidden) \n    {\n    }\n    public void shadow()\n    {\n        int hidden = 0; \n    }\n    public void shadowFor()\n    {\n        for (int hidden = 0; hidden < 1; hidden++) { \n        }\n    }\n    public void shadowParam(int hidden) \n    {\n    }\n    public class Inner\n    {\n        private int innerHidden = 0;\n        public Inner()\n        {\n            int innerHidden = 0; \n        }\n        public Inner(int innerHidden) \n        {\n        }\n        private void innerShadow()\n        {\n            int innerHidden = 0; \n            int hidden = 0; \n        }\n        private void innerShadowFor()\n        {\n            for (int innerHidden = 0; innerHidden < 1; innerHidden++) {\n            }\n            for (int hidden = 0; hidden < 1; hidden++) { \n            }\n        }\n        private void shadowParam(\n            int innerHidden, \n            int hidden \n        )\n        {\n        }\n        {\n            int innerHidden = 0;\n            int hidden = 0; \n        }\n    }\n    {\n        int hidden = 0;\n    }\n}\ninterface NothingHidden1\n{\n    public static int notHidden = 0;\n    public void noShadow(int notHidden);\n}\nclass PropertySetter11\n{\n    private int prop;\n    public void setProp(int prop)\n    {\n        this.prop = prop;\n    }\n    public void setprop(int prop)\n    {\n        this.prop = prop;\n    }\n    public void setProp(int prop, int extra)\n    {\n        this.prop = prop;\n    }\n}\nclass PropertySetter21\n{\n    private int prop;\n    public int setProp(int prop)\n    {\n        this.prop = prop;\n        return 0;\n    }\n}\nclass StaticFields1\n{\n    private static int hidden;\n    public static void staticMethod()\n    {\n        int hidden; \n    }\n    public void method()\n    {\n        int hidden; \n    }\n    static\n    {\n        int hidden; \n    }\n    {\n        int hidden; \n    }\n}\nclass StaticMethods1\n{\n    private int notHidden;\n    public static void method()\n    {\n        int notHidden;\n    }\n    static\n    {\n        int notHidden;\n    }\n    private int x;\n    private static int y;\n    static class Inner {\n        void useX(int x) {\n            x++;\n        }\n        void useY(int y) {\n            y++;\n        }\n    }\n}\nenum HiddenEnum11\n{\n    A(129),\n    B(283),\n    C(1212)\n    {\n        int hidden;\n        public void doSomething()\n        {\n            int hidden = 0; \n        }\n    };\n    int hidden;\n    static int hiddenStatic;\n    HiddenEnum11(int hidden)\n    {\n    }\n    public void doSomething()\n    {\n        int hidden = 0; \n    }\n    public static void doSomethingStatic()\n    {\n        int hiddenStatic = 0; \n    }\n}\nabstract class InputHiddenFieldBug10845121 {\n    String x;\n    public abstract void methodA(String x);\n}\nclass Bug33709461 {\n    private int xAxis;\n    public void setxAxis(int xAxis) {\n        this.xAxis = xAxis;\n    }\n}\nclass PropertySetter31\n{\n    private int prop;\n    public PropertySetter31 setProp(int prop)\n    {\n        this.prop = prop;\n        return this;\n    }\n}\nenum PropertySetter41 {\n    INSTANCE;\n    private int prop;\n    private int prop2;\n    public void setProp(int prop) {\n        this.prop = prop;\n    }\n    public PropertySetter41 setProp2(int prop2)\n    {\n        this.prop2 = prop2;\n        return this;\n    }\n}\nclass OneLetterField1\n{\n    int i;\n    void setI(int i)\n    {\n        this.i = i;\n    }\n    enum Inner {}\n}\nclass DuplicateFieldFromPreviousClass1\n{\n    public void method() {\n        int i = 0;\n    }\n}\nclass NestedEnum1 {\n    enum Test { A, B, C; int i; }\n    void method(int i) {}\n}"
    },
    {
      "description": "Auto test from InputHiddenField2.java",
      "expected-problems": 35,
      "expected-linenumbers": [
        29,
        33,
        39,
        45,
        50,
        60,
        62,
        69,
        70,
        76,
        78,
        85,
        85,
        92,
        93,
        98,
        114,
        120,
        126,
        138,
        154,
        159,
        164,
        168,
        195,
        215,
        222,
        232,
        238,
        246,
        251,
        261,
        282,
        286,
        305
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nclass InputHiddenField2\n{\n    private int hidden = 0;\n    public InputHiddenField2()\n    {\n        int hidden = 0; \n    }\n    public InputHiddenField2(int hidden) \n    {\n    }\n    public void shadow()\n    {\n        int hidden = 0; \n    }\n    public void shadowFor()\n    {\n        for (int hidden = 0; hidden < 1; hidden++) { \n        }\n    }\n    public void shadowParam(int hidden) \n    {\n    }\n    public class Inner\n    {\n        private int innerHidden = 0;\n        public Inner()\n        {\n            int innerHidden = 0; \n        }\n        public Inner(int innerHidden) \n        {\n        }\n        private void innerShadow()\n        {\n            int innerHidden = 0; \n            int hidden = 0; \n        }\n        private void innerShadowFor()\n        {\n            for (int innerHidden = 0; innerHidden < 1; innerHidden++) {\n            }\n            for (int hidden = 0; hidden < 1; hidden++) { \n            }\n        }\n        private void shadowParam(\n            int innerHidden, \n            int hidden \n        )\n        {\n        }\n        {\n            int innerHidden = 0;\n            int hidden = 0; \n        }\n    }\n    {\n        int hidden = 0;\n    }\n}\ninterface NothingHidden2\n{\n    public static int notHidden = 0;\n    public void noShadow(int notHidden);\n}\nclass PropertySetter12\n{\n    private int prop;\n    public void setProp(int prop) \n    {\n        this.prop = prop;\n    }\n    public void setprop(int prop) \n    {\n        this.prop = prop;\n    }\n    public void setProp(int prop, int extra) \n    {\n        this.prop = prop;\n    }\n}\nclass PropertySetter22\n{\n    private int prop;\n    public int setProp(int prop) \n    {\n        this.prop = prop;\n        return 0;\n    }\n}\nclass StaticFields2\n{\n    private static int hidden;\n    public static void staticMethod()\n    {\n        int hidden; \n    }\n    public void method()\n    {\n        int hidden; \n    }\n    static\n    {\n        int hidden; \n    }\n    {\n        int hidden; \n    }\n}\nclass StaticMethods2\n{\n    private int notHidden;\n    public static void method()\n    {\n        int notHidden;\n    }\n    static\n    {\n        int notHidden;\n    }\n    private int x;\n    private static int y;\n    static class Inner {\n        void useX(int x) {\n            x++;\n        }\n        void useY(int y) { \n            y++;\n        }\n    }\n}\nenum HiddenEnum12\n{\n    A(129),\n    B(283),\n    C(1212)\n    {\n        int hidden;\n        public void doSomething()\n        {\n            int hidden = 0; \n        }\n    };\n    int hidden;\n    static int hiddenStatic;\n    HiddenEnum12(int hidden) \n    {\n    }\n    public void doSomething()\n    {\n        int hidden = 0; \n    }\n    public static void doSomethingStatic()\n    {\n        int hiddenStatic = 0; \n    }\n}\nabstract class InputHiddenFieldBug10845122 {\n    String x;\n    public abstract void methodA(String x); \n}\nclass Bug33709462 {\n    private int xAxis;\n    public void setxAxis(int xAxis) { \n        this.xAxis = xAxis;\n    }\n}\nclass PropertySetter32\n{\n    private int prop;\n    public PropertySetter32 setProp(int prop) \n    {\n        this.prop = prop;\n        return this;\n    }\n}\nenum PropertySetter42 {\n    INSTANCE;\n    private int prop;\n    private int prop2;\n    public void setProp(int prop) { \n        this.prop = prop;\n    }\n    public PropertySetter42 setProp2(int prop2) \n    {\n        this.prop2 = prop2;\n        return this;\n    }\n}\nclass OneLetterField2\n{\n    int i;\n    void setI(int i) \n    {\n        this.i = i;\n    }\n    enum Inner {}\n}\nclass DuplicateFieldFromPreviousClass2\n{\n    public void method() {\n        int i = 0;\n    }\n}\nclass NestedEnum2 {\n    enum Test { A, B, C; int i; }\n    void method(int i) {}\n}"
    },
    {
      "description": "Auto test from InputHiddenField3.java",
      "expected-problems": 28,
      "expected-linenumbers": [
        29,
        33,
        39,
        45,
        50,
        70,
        77,
        84,
        91,
        96,
        112,
        118,
        124,
        136,
        152,
        157,
        162,
        166,
        193,
        213,
        220,
        230,
        236,
        244,
        249,
        259,
        280,
        284
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nclass InputHiddenField3\n{\n    private int hidden = 0;\n    public InputHiddenField3()\n    {\n        int hidden = 0; \n    }\n    public InputHiddenField3(int hidden) \n    {\n    }\n    public void shadow()\n    {\n        int hidden = 0; \n    }\n    public void shadowFor()\n    {\n        for (int hidden = 0; hidden < 1; hidden++) { \n        }\n    }\n    public void shadowParam(int hidden) \n    {\n    }\n    public class Inner\n    {\n        private int innerHidden = 0;\n        public Inner()\n        {\n            int innerHidden = 0; \n        }\n        public Inner(int innerHidden) \n        {\n        }\n        private void innerShadow()\n        {\n            int innerHidden = 0; \n            int hidden = 0; \n        }\n        private void innerShadowFor()\n        {\n            for (int innerHidden = 0; innerHidden < 1; innerHidden++) {\n            }\n            for (int hidden = 0; hidden < 1; hidden++) { \n            }\n        }\n        private void shadowParam(\n            int innerHidden, \n            int hidden \n        )\n        {\n        }\n        {\n            int innerHidden = 0;\n            int hidden = 0; \n        }\n    }\n    {\n        int hidden = 0;\n    }\n}\ninterface NothingHidden3\n{\n    public static int notHidden = 0;\n    public void noShadow(int notHidden);\n}\nclass PropertySetter13\n{\n    private int prop;\n    public void setProp(int prop) \n    {\n        this.prop = prop;\n    }\n    public void setprop(int prop) \n    {\n        this.prop = prop;\n    }\n    public void setProp(int prop, int extra) \n    {\n        this.prop = prop;\n    }\n}\nclass PropertySetter23\n{\n    private int prop;\n    public int setProp(int prop) \n    {\n        this.prop = prop;\n        return 0;\n    }\n}\nclass StaticFields3\n{\n    private static int hidden;\n    public static void staticMethod()\n    {\n        int hidden; \n    }\n    public void method()\n    {\n        int hidden; \n    }\n    static\n    {\n        int hidden; \n    }\n    {\n        int hidden; \n    }\n}\nclass StaticMethods3\n{\n    private int notHidden;\n    public static void method()\n    {\n        int notHidden;\n    }\n    static\n    {\n        int notHidden;\n    }\n    private int x;\n    private static int y;\n    static class Inner {\n        void useX(int x) {\n            x++;\n        }\n        void useY(int y) { \n            y++;\n        }\n    }\n}\nenum HiddenEnum13\n{\n    A(129),\n    B(283),\n    C(1212)\n    {\n        int hidden;\n        public void doSomething()\n        {\n            int hidden = 0; \n        }\n    };\n    int hidden;\n    static int hiddenStatic;\n    HiddenEnum13(int hidden) \n    {\n    }\n    public void doSomething()\n    {\n        int hidden = 0; \n    }\n    public static void doSomethingStatic()\n    {\n        int hiddenStatic = 0; \n    }\n}\nabstract class InputHiddenFieldBug10845123 {\n    String x;\n    public abstract void methodA(String x); \n}\nclass Bug33709463 {\n    private int xAxis;\n    public void setxAxis(int xAxis) { \n        this.xAxis = xAxis;\n    }\n}\nclass PropertySetter33\n{\n    private int prop;\n    public PropertySetter33 setProp(int prop) \n    {\n        this.prop = prop;\n        return this;\n    }\n}\nenum PropertySetter43 {\n    INSTANCE;\n    private int prop;\n    private int prop2;\n    public void setProp(int prop) { \n        this.prop = prop;\n    }\n    public PropertySetter43 setProp2(int prop2) \n    {\n        this.prop2 = prop2;\n        return this;\n    }\n}\nclass OneLetterField3\n{\n    int i;\n    void setI(int i)\n    {\n        this.i = i;\n    }\n    enum Inner {}\n}\nclass DuplicateFieldFromPreviousClass3\n{\n    public void method() {\n        int i = 0;\n    }\n}\nclass NestedEnum3 {\n    enum Test { A, B, C; int i; }\n    void method(int i) {}\n}"
    },
    {
      "description": "Auto test from InputHiddenField4.java",
      "expected-problems": 31,
      "expected-linenumbers": [
        29,
        33,
        39,
        45,
        50,
        60,
        62,
        69,
        70,
        76,
        78,
        85,
        85,
        92,
        93,
        98,
        120,
        126,
        138,
        154,
        159,
        164,
        168,
        195,
        215,
        222,
        232,
        238,
        246,
        261,
        286
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nclass InputHiddenField4\n{\n    private int hidden = 0;\n    public InputHiddenField4()\n    {\n        int hidden = 0; \n    }\n    public InputHiddenField4(int hidden) \n    {\n    }\n    public void shadow()\n    {\n        int hidden = 0; \n    }\n    public void shadowFor()\n    {\n        for (int hidden = 0; hidden < 1; hidden++) { \n        }\n    }\n    public void shadowParam(int hidden) \n    {\n    }\n    public class Inner\n    {\n        private int innerHidden = 0;\n        public Inner()\n        {\n            int innerHidden = 0; \n        }\n        public Inner(int innerHidden) \n        {\n        }\n        private void innerShadow()\n        {\n            int innerHidden = 0; \n            int hidden = 0; \n        }\n        private void innerShadowFor()\n        {\n            for (int innerHidden = 0; innerHidden < 1; innerHidden++) {\n            }\n            for (int hidden = 0; hidden < 1; hidden++) { \n            }\n        }\n        private void shadowParam(\n            int innerHidden, \n            int hidden \n        )\n        {\n        }\n        {\n            int innerHidden = 0;\n            int hidden = 0; \n        }\n    }\n    {\n        int hidden = 0;\n    }\n}\ninterface NothingHidden4\n{\n    public static int notHidden = 0;\n    public void noShadow(int notHidden);\n}\nclass PropertySetter14\n{\n    private int prop;\n    public void setProp(int prop)\n    {\n        this.prop = prop;\n    }\n    public void setprop(int prop) \n    {\n        this.prop = prop;\n    }\n    public void setProp(int prop, int extra) \n    {\n        this.prop = prop;\n    }\n}\nclass PropertySetter24\n{\n    private int prop;\n    public int setProp(int prop) \n    {\n        this.prop = prop;\n        return 0;\n    }\n}\nclass StaticFields4\n{\n    private static int hidden;\n    public static void staticMethod()\n    {\n        int hidden; \n    }\n    public void method()\n    {\n        int hidden; \n    }\n    static\n    {\n        int hidden; \n    }\n    {\n        int hidden; \n    }\n}\nclass StaticMethods4\n{\n    private int notHidden;\n    public static void method()\n    {\n        int notHidden;\n    }\n    static\n    {\n        int notHidden;\n    }\n    private int x;\n    private static int y;\n    static class Inner {\n        void useX(int x) {\n            x++;\n        }\n        void useY(int y) { \n            y++;\n        }\n    }\n}\nenum HiddenEnum14\n{\n    A(129),\n    B(283),\n    C(1212)\n    {\n        int hidden;\n        public void doSomething()\n        {\n            int hidden = 0; \n        }\n    };\n    int hidden;\n    static int hiddenStatic;\n    HiddenEnum14(int hidden) \n    {\n    }\n    public void doSomething()\n    {\n        int hidden = 0; \n    }\n    public static void doSomethingStatic()\n    {\n        int hiddenStatic = 0; \n    }\n}\nabstract class InputHiddenFieldBug10845124 {\n    String x;\n    public abstract void methodA(String x); \n}\nclass Bug33709464 {\n    private int xAxis;\n    public void setxAxis(int xAxis) {\n        this.xAxis = xAxis;\n    }\n}\nclass PropertySetter34\n{\n    private int prop;\n    public PropertySetter34 setProp(int prop) \n    {\n        this.prop = prop;\n        return this;\n    }\n}\nenum PropertySetter44 {\n    INSTANCE;\n    private int prop;\n    private int prop2;\n    public void setProp(int prop) {\n        this.prop = prop;\n    }\n    public PropertySetter44 setProp2(int prop2) \n    {\n        this.prop2 = prop2;\n        return this;\n    }\n}\nclass OneLetterField4\n{\n    int i;\n    void setI(int i)\n    {\n        this.i = i;\n    }\n    enum Inner {}\n}\nclass DuplicateFieldFromPreviousClass4\n{\n    public void method() {\n        int i = 0;\n    }\n}\nclass NestedEnum4 {\n    enum Test { A, B, C; int i; }\n    void method(int i) {}\n}"
    },
    {
      "description": "Auto test from InputHiddenField5.java",
      "expected-problems": 29,
      "expected-linenumbers": [
        29,
        33,
        39,
        45,
        50,
        60,
        62,
        69,
        70,
        76,
        78,
        85,
        85,
        92,
        93,
        98,
        120,
        126,
        138,
        154,
        159,
        164,
        168,
        195,
        215,
        222,
        232,
        238,
        246
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nclass InputHiddenField5\n{\n    private int hidden = 0;\n    public InputHiddenField5()\n    {\n        int hidden = 0; \n    }\n    public InputHiddenField5(int hidden) \n    {\n    }\n    public void shadow()\n    {\n        int hidden = 0; \n    }\n    public void shadowFor()\n    {\n        for (int hidden = 0; hidden < 1; hidden++) { \n        }\n    }\n    public void shadowParam(int hidden) \n    {\n    }\n    public class Inner\n    {\n        private int innerHidden = 0;\n        public Inner()\n        {\n            int innerHidden = 0; \n        }\n        public Inner(int innerHidden) \n        {\n        }\n        private void innerShadow()\n        {\n            int innerHidden = 0; \n            int hidden = 0; \n        }\n        private void innerShadowFor()\n        {\n            for (int innerHidden = 0; innerHidden < 1; innerHidden++) {\n            }\n            for (int hidden = 0; hidden < 1; hidden++) { \n            }\n        }\n        private void shadowParam(\n            int innerHidden, \n            int hidden \n        )\n        {\n        }\n        {\n            int innerHidden = 0;\n            int hidden = 0; \n        }\n    }\n    {\n        int hidden = 0;\n    }\n}\ninterface NothingHidden5\n{\n    public static int notHidden = 0;\n    public void noShadow(int notHidden);\n}\nclass PropertySetter15\n{\n    private int prop;\n    public void setProp(int prop)\n    {\n        this.prop = prop;\n    }\n    public void setprop(int prop) \n    {\n        this.prop = prop;\n    }\n    public void setProp(int prop, int extra) \n    {\n        this.prop = prop;\n    }\n}\nclass PropertySetter25\n{\n    private int prop;\n    public int setProp(int prop) \n    {\n        this.prop = prop;\n        return 0;\n    }\n}\nclass StaticFields5\n{\n    private static int hidden;\n    public static void staticMethod()\n    {\n        int hidden; \n    }\n    public void method()\n    {\n        int hidden; \n    }\n    static\n    {\n        int hidden; \n    }\n    {\n        int hidden; \n    }\n}\nclass StaticMethods5\n{\n    private int notHidden;\n    public static void method()\n    {\n        int notHidden;\n    }\n    static\n    {\n        int notHidden;\n    }\n    private int x;\n    private static int y;\n    static class Inner {\n        void useX(int x) {\n            x++;\n        }\n        void useY(int y) { \n            y++;\n        }\n    }\n}\nenum HiddenEnum15\n{\n    A(129),\n    B(283),\n    C(1212)\n    {\n        int hidden;\n        public void doSomething()\n        {\n            int hidden = 0; \n        }\n    };\n    int hidden;\n    static int hiddenStatic;\n    HiddenEnum15(int hidden) \n    {\n    }\n    public void doSomething()\n    {\n        int hidden = 0; \n    }\n    public static void doSomethingStatic()\n    {\n        int hiddenStatic = 0; \n    }\n}\nabstract class InputHiddenFieldBug10845125 {\n    String x;\n    public abstract void methodA(String x); \n}\nclass Bug33709465 {\n    private int xAxis;\n    public void setxAxis(int xAxis) {\n        this.xAxis = xAxis;\n    }\n}\nclass PropertySetter35\n{\n    private int prop;\n    public PropertySetter35 setProp(int prop)\n    {\n        this.prop = prop;\n        return this;\n    }\n}\nenum PropertySetter45 {\n    INSTANCE;\n    private int prop;\n    private int prop2;\n    public void setProp(int prop) {\n        this.prop = prop;\n    }\n    public PropertySetter45 setProp2(int prop2)\n    {\n        this.prop2 = prop2;\n        return this;\n    }\n}\nclass OneLetterField5\n{\n    int i;\n    void setI(int i)\n    {\n        this.i = i;\n    }\n    enum Inner {}\n}\nclass DuplicateFieldFromPreviousClass5\n{\n    public void method() {\n        int i = 0;\n    }\n}\nclass NestedEnum5 {\n    enum Test { A, B, C; int i; }\n    void method(int i) {}\n}"
    },
    {
      "description": "Auto test from InputHiddenField6.java",
      "expected-problems": 32,
      "expected-linenumbers": [
        28,
        37,
        43,
        48,
        58,
        67,
        68,
        74,
        76,
        83,
        83,
        90,
        91,
        96,
        112,
        118,
        124,
        136,
        152,
        157,
        162,
        166,
        193,
        213,
        230,
        236,
        244,
        249,
        259,
        280,
        284,
        303
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nclass InputHiddenField6\n{\n    private int hidden = 0;\n    public InputHiddenField6()\n    {\n        int hidden = 0; \n    }\n    public InputHiddenField6(int hidden) \n    {\n    }\n    public void shadow()\n    {\n        int hidden = 0; \n    }\n    public void shadowFor()\n    {\n        for (int hidden = 0; hidden < 1; hidden++) { \n        }\n    }\n    public void shadowParam(int hidden) \n    {\n    }\n    public class Inner\n    {\n        private int innerHidden = 0;\n        public Inner()\n        {\n            int innerHidden = 0; \n        }\n        public Inner(int innerHidden) \n        {\n        }\n        private void innerShadow()\n        {\n            int innerHidden = 0; \n            int hidden = 0; \n        }\n        private void innerShadowFor()\n        {\n            for (int innerHidden = 0; innerHidden < 1; innerHidden++) {\n            }\n            for (int hidden = 0; hidden < 1; hidden++) { \n            }\n        }\n        private void shadowParam(\n            int innerHidden, \n            int hidden \n        )\n        {\n        }\n        {\n            int innerHidden = 0;\n            int hidden = 0; \n        }\n    }\n    {\n        int hidden = 0;\n    }\n}\ninterface NothingHidden6\n{\n    public static int notHidden = 0;\n    public void noShadow(int notHidden);\n}\nclass PropertySetter16\n{\n    private int prop;\n    public void setProp(int prop) \n    {\n        this.prop = prop;\n    }\n    public void setprop(int prop) \n    {\n        this.prop = prop;\n    }\n    public void setProp(int prop, int extra) \n    {\n        this.prop = prop;\n    }\n}\nclass PropertySetter26\n{\n    private int prop;\n    public int setProp(int prop) \n    {\n        this.prop = prop;\n        return 0;\n    }\n}\nclass StaticFields6\n{\n    private static int hidden;\n    public static void staticMethod()\n    {\n        int hidden; \n    }\n    public void method()\n    {\n        int hidden; \n    }\n    static\n    {\n        int hidden; \n    }\n    {\n        int hidden; \n    }\n}\nclass StaticMethods6\n{\n    private int notHidden;\n    public static void method()\n    {\n        int notHidden;\n    }\n    static\n    {\n        int notHidden;\n    }\n    private int x;\n    private static int y;\n    static class Inner {\n        void useX(int x) {\n            x++;\n        }\n        void useY(int y) { \n            y++;\n        }\n    }\n}\nenum HiddenEnum16\n{\n    A(129),\n    B(283),\n    C(1212)\n    {\n        int hidden;\n        public void doSomething()\n        {\n            int hidden = 0; \n        }\n    };\n    int hidden;\n    static int hiddenStatic;\n    HiddenEnum16(int hidden)\n    {\n    }\n    public void doSomething()\n    {\n        int hidden = 0; \n    }\n    public static void doSomethingStatic()\n    {\n        int hiddenStatic = 0; \n    }\n}\nabstract class InputHiddenFieldBug10845126 {\n    String x;\n    public abstract void methodA(String x); \n}\nclass Bug33709466 {\n    private int xAxis;\n    public void setxAxis(int xAxis) { \n        this.xAxis = xAxis;\n    }\n}\nclass PropertySetter36\n{\n    private int prop;\n    public PropertySetter36 setProp(int prop) \n    {\n        this.prop = prop;\n        return this;\n    }\n}\nenum PropertySetter46 {\n    INSTANCE;\n    private int prop;\n    private int prop2;\n    public void setProp(int prop) { \n        this.prop = prop;\n    }\n    public PropertySetter46 setProp2(int prop2) \n    {\n        this.prop2 = prop2;\n        return this;\n    }\n}\nclass OneLetterField6\n{\n    int i;\n    void setI(int i) \n    {\n        this.i = i;\n    }\n    enum Inner {}\n}\nclass DuplicateFieldFromPreviousClass6\n{\n    public void method() {\n        int i = 0;\n    }\n}\nclass NestedEnum6 {\n    enum Test { A, B, C; int i; }\n    void method(int i) {}\n}"
    },
    {
      "description": "Auto test from InputHiddenField7.java",
      "expected-problems": 34,
      "expected-linenumbers": [
        29,
        33,
        39,
        45,
        50,
        60,
        62,
        69,
        70,
        76,
        78,
        85,
        85,
        92,
        93,
        98,
        114,
        120,
        126,
        138,
        154,
        159,
        164,
        168,
        195,
        215,
        222,
        232,
        238,
        251,
        261,
        282,
        286,
        305
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nclass InputHiddenField7\n{\n    private int hidden = 0;\n    public InputHiddenField7()\n    {\n        int hidden = 0; \n    }\n    public InputHiddenField7(int hidden) \n    {\n    }\n    public void shadow()\n    {\n        int hidden = 0; \n    }\n    public void shadowFor()\n    {\n        for (int hidden = 0; hidden < 1; hidden++) { \n        }\n    }\n    public void shadowParam(int hidden) \n    {\n    }\n    public class Inner\n    {\n        private int innerHidden = 0;\n        public Inner()\n        {\n            int innerHidden = 0; \n        }\n        public Inner(int innerHidden) \n        {\n        }\n        private void innerShadow()\n        {\n            int innerHidden = 0; \n            int hidden = 0; \n        }\n        private void innerShadowFor()\n        {\n            for (int innerHidden = 0; innerHidden < 1; innerHidden++) {\n            }\n            for (int hidden = 0; hidden < 1; hidden++) { \n            }\n        }\n        private void shadowParam(\n            int innerHidden, \n            int hidden \n        )\n        {\n        }\n        {\n            int innerHidden = 0;\n            int hidden = 0; \n        }\n    }\n    {\n        int hidden = 0;\n    }\n}\ninterface NothingHidden7\n{\n    public static int notHidden = 0;\n    public void noShadow(int notHidden);\n}\nclass PropertySetter17\n{\n    private int prop;\n    public void setProp(int prop) \n    {\n        this.prop = prop;\n    }\n    public void setprop(int prop) \n    {\n        this.prop = prop;\n    }\n    public void setProp(int prop, int extra) \n    {\n        this.prop = prop;\n    }\n}\nclass PropertySetter27\n{\n    private int prop;\n    public int setProp(int prop) \n    {\n        this.prop = prop;\n        return 0;\n    }\n}\nclass StaticFields7\n{\n    private static int hidden;\n    public static void staticMethod()\n    {\n        int hidden; \n    }\n    public void method()\n    {\n        int hidden; \n    }\n    static\n    {\n        int hidden; \n    }\n    {\n        int hidden; \n    }\n}\nclass StaticMethods7\n{\n    private int notHidden;\n    public static void method()\n    {\n        int notHidden;\n    }\n    static\n    {\n        int notHidden;\n    }\n    private int x;\n    private static int y;\n    static class Inner {\n        void useX(int x) {\n            x++;\n        }\n        void useY(int y) { \n            y++;\n        }\n    }\n}\nenum HiddenEnum17\n{\n    A(129),\n    B(283),\n    C(1212)\n    {\n        int hidden;\n        public void doSomething()\n        {\n            int hidden = 0; \n        }\n    };\n    int hidden;\n    static int hiddenStatic;\n    HiddenEnum17(int hidden) \n    {\n    }\n    public void doSomething()\n    {\n        int hidden = 0; \n    }\n    public static void doSomethingStatic()\n    {\n        int hiddenStatic = 0; \n    }\n}\nabstract class InputHiddenFieldBug10845127 {\n    String x;\n    public abstract void methodA(String x);\n}\nclass Bug33709467 {\n    private int xAxis;\n    public void setxAxis(int xAxis) { \n        this.xAxis = xAxis;\n    }\n}\nclass PropertySetter37\n{\n    private int prop;\n    public PropertySetter37 setProp(int prop) \n    {\n        this.prop = prop;\n        return this;\n    }\n}\nenum PropertySetter47 {\n    INSTANCE;\n    private int prop;\n    private int prop2;\n    public void setProp(int prop) { \n        this.prop = prop;\n    }\n    public PropertySetter47 setProp2(int prop2) \n    {\n        this.prop2 = prop2;\n        return this;\n    }\n}\nclass OneLetterField7\n{\n    int i;\n    void setI(int i) \n    {\n        this.i = i;\n    }\n    enum Inner {}\n}\nclass DuplicateFieldFromPreviousClass7\n{\n    public void method() {\n        int i = 0;\n    }\n}\nclass NestedEnum7 {\n    enum Test { A, B, C; int i; }\n    void method(int i) {}\n}"
    },
    {
      "description": "Auto test from InputHiddenFieldClassNestedInRecord.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        21
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\npublic class InputHiddenFieldClassNestedInRecord {\n    record foo(int i) {\n        class foo2 {\n            int a, b;\n            foo setA(int a) { \n                this.a = a;\n                return foo.this;\n            }\n            foo2 setB(int b) {\n                this.b = b;\n                return this;\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputHiddenFieldEnhancedInstanceof.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        25,
        37
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nimport java.util.Locale;\npublic class InputHiddenFieldEnhancedInstanceof {\n    public class Keyboard {\n        private String model = null;\n        private final int price = 2;\n        public boolean doStuff(Object f) {\n            return f instanceof Float price && \n                    price.floatValue() > 0 &&\n                    model != null &&\n                    price.intValue() == 5;\n        }\n    }\n    static final Object OBJ = \"\";\n    static String hiddenStaticField = \"hiddenStaticField\";\n    static {\n        if (OBJ instanceof String hiddenStaticField) {\n            System.out.println(hiddenStaticField\n                    .toLowerCase(Locale.forLanguageTag(hiddenStaticField)));\n            boolean stringCheck = \"test\".equals(hiddenStaticField);\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputHiddenFieldInnerRecordsImplicitlyStatic.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nimport java.time.Clock;\nimport java.time.Instant;\npublic class InputHiddenFieldInnerRecordsImplicitlyStatic {\n}\nclass Scratch {\n    private final Clock clock;\n    Scratch(Clock clock) {\n        this.clock = clock;\n    }\n    public record State(String token, Instant expiresAt) {\n        static int pointer = 0;\n        public boolean isFresh(final Clock clock) {\n            return Instant.now(clock).isBefore(expiresAt);\n        }\n        public int anInt(int pointer) { \n            return pointer;\n        }\n    }\n}\nclass TestOne {\n    String name;\n    record data(String str, int integer) {\n        void method() {\n            String name = str;\n        }\n        public boolean isTrue(String name) {\n            return true;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputHiddenFieldLambdas.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        31,
        64,
        73,
        86,
        115,
        155,
        187,
        214,
        246,
        255
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nimport java.lang.Integer;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\npublic class InputHiddenFieldLambdas {\n    List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\n    Integer value = new Integer(1);\n    {\n        numbers.forEach((Integer value) -> String.valueOf(value));\n    }\n    static List<String> firstNames = Arrays.asList(\"Andrei\", \"Michal\", \"Roman\", \"Vladislav\");\n    String name = new String();\n    static {\n        firstNames.forEach((String name) -> String.valueOf(name));\n    }\n    static List<String> carBrands = Arrays.asList(\"BMW\", \"Mazda\", \"Volkswagen\");\n    String brand = new String();\n    static {\n        carBrands.forEach(brand -> String.valueOf(brand));\n    }\n    static List<String> languageCodes = Arrays.asList(\"de\", \"ja\", \"fr\", \"pt\");\n    static String languageCode = new String();\n    {\n        languageCodes.forEach(languageCode -> String.valueOf(languageCode));\n    }\n    int number = 1;\n    Optional<Object> foo1(int i) {\n        return Optional.of(5).map(number -> { \n            if (number == 1) return true;\n            else if (number == 2) return true;\n            else return false;\n        });\n    }\n    static long id = 1;\n    Optional<Object> foo2(int i) {\n        return Optional.of(5).map(id -> { \n            if (id == 1) return true;\n            else if (id == 2) return true;\n            else return false;\n        });\n    }\n    int age = 21;\n    static Optional<Object> foo3(int i) {\n        return Optional.of(5).map(age -> {\n            if (age == 1) return true;\n            else if (age == 2) return true;\n            else return false;\n        });\n    }\n    static String note = new String();\n    private void foo4() {\n        List<String> acceptableNotes = Arrays.asList(\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\");\n        acceptableNotes.forEach(note -> String.valueOf(note));\n    }\n    String letter = new String(\"a\");\n    private static void foo5() {\n        List<String> acceptableAlphabet = Arrays.asList(\"a\", \"b\", \"c\");\n        acceptableAlphabet.forEach(letter -> String.valueOf(letter));\n    }\n    @FunctionalInterface\n    interface Function <A, B> {\n        public B apply (A a, B b);\n    }\n    String stringValue = \"248.3\";\n    int intValue = 2;\n    {\n        Function <String, Integer> m = (String stringValue, Integer intValue) -> {\n            return Integer.parseInt(stringValue) + intValue;\n        };\n        String.valueOf(m.apply (\"22.4\", 2));\n    }\n    Double doubleValue = 8.5;\n    {\n        Function <Integer, Double> a =(Integer integerValue, Double doubleValue) -> {\n            return  integerValue + doubleValue;\n        };\n        String.valueOf(a.apply(2, 2.2));\n    }\n    String firstString = \"Hello,\";\n    String secondString = \" World!\";\n    {\n        Function <String, String> stringConcat = (firstString, secondString) -> {\n            return firstString + secondString;\n        };\n        String.valueOf(stringConcat.apply(\"A\", \"B\"));\n    }\n    @FunctionalInterface\n    interface SomeFunction<One, Two> {\n        public Two apply(One one, Two two);\n    }\n    Integer first = 1;\n    {\n        Function<Integer, Character> turnToZ = (first, second) -> 'z';\n    }\n    @FunctionalInterface\n    public interface Foo {\n        public String apply();\n    }\n    {\n        Foo foo = () -> \"\";\n    }\n    @FunctionalInterface\n    interface FunctionWithOneParameter<One> {\n        public One apply(One one);\n    }\n    Double mPi = Math.PI;\n    List<Double> simpleNumbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);\n    {\n        simpleNumbers.forEach(digit -> {\n            FunctionWithOneParameter<Double> strangeAdder = (mPi -> mPi+= digit);\n        });\n    }\n    @FunctionalInterface\n    interface FunctionWithComplexGenerics<One, Two> {\n        public Two foo(One one, Two two);\n    }\n    List<Double> justSomeList;\n    Map<String, Object> justSomeMap;\n    {\n        FunctionWithComplexGenerics<List<Double>, Map<String, Object>> someWierdFunc =\n            (List<Double> justSomeList, Map<String, Object> justSomeMap) -> {\n                String.valueOf(justSomeList);\n                String.valueOf(justSomeMap);\n                return new HashMap<>();\n            };\n    }\n    Object someObject = new Object();\n    FunctionWithOneParameter objectToString = (Object someObject) -> {\n        return someObject.toString();\n    };\n    FunctionWithOneParameter otherObjectToString = someObject -> {\n        return someObject.toString();\n    };\n    private final String l = \"\";\n    private interface NestedInterface {\n        void print(String l);\n    }\n}"
    },
    {
      "description": "Auto test from InputHiddenFieldLambdas2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        21
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nimport java.util.Arrays;\nimport java.util.List;\npublic class InputHiddenFieldLambdas2 {\n    List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\n    Integer value = Integer.valueOf(1);\n    {\n        numbers.forEach((Integer value) -> String.valueOf(value));\n    }\n}"
    },
    {
      "description": "Auto test from InputHiddenFieldRecords.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        22,
        27,
        35,
        44,
        58,
        67,
        71,
        81,
        85
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nimport java.util.Locale;\npublic class InputHiddenFieldRecords {\n    public record MyRecord1() {\n        private static int myHiddenInt = 2;\n        public MyRecord1 {\n            int myHiddenInt = 5; \n        }\n        MyRecord1(String string) {\n            this();\n            int myHiddenInt = 6; \n        }\n    }\n    static class MyClass {\n        private static int hiddenField = 5;\n        MyClass(String string) {\n            int hiddenField = 10; \n        }\n        static final Object OBJ = \"\";\n        static String hiddenStaticField = \"hiddenStaticField\";\n        static {\n            if (OBJ instanceof String hiddenStaticField) {\n                System.out.println(hiddenStaticField\n                        .toLowerCase(Locale.forLanguageTag(hiddenStaticField)));\n                boolean stringCheck = \"test\".equals(hiddenStaticField);\n            }\n        }\n    }\n    public record Keyboard() {\n        private static String model = null;\n        private static int price = 2;\n        public boolean doStuff(Object f) {\n            return f instanceof Float price && \n                    price.floatValue() > 0 &&\n                    model != null &&\n                    price.intValue() == 5;\n        }\n    }\n    record MyRecord13(String string, Integer x) {\n        void foo () {\n            Integer x = 8; \n        }\n        void foo2() {\n            String string = \"string\"; \n        }\n    }\n    class MyClass13 {\n        Integer x = 7;\n        String string = \"string\";\n        void foo() {\n            Integer x = 8; \n        }\n        void foo2() {\n            String string = \"string\"; \n        }\n    }\n    record MyTestRecord3(String str, Locale treeSet) {\n        void foo(Locale hashMap) {\n        }\n    }\n    record MyTestRecord4(int x, int y) {\n        public MyTestRecord4(Locale treeSet) { \n            this(4, 5);\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputHiddenFieldRecordsImplicitlyStaticClassComparison.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        45
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nimport java.io.Externalizable;\nimport java.io.IOException;\nimport java.io.ObjectInput;\nimport java.io.ObjectOutput;\npublic class InputHiddenFieldRecordsImplicitlyStaticClassComparison {\n}\nclass Test {\n    private final int x;\n    public Test(int x) {\n        this.x = x;\n    }\n    public record R1() {\n        public void m(int x) {}\n    }\n    public static record R2() {\n        public void m(int x) {}\n    }\n    public static class C1 {\n        public void m(int x) {}\n    }\n    public class C2 {\n        public void m(int x) {} \n    }\n    record Wobble (Foo foo) implements ThrowingExternalizable {\n        @Override\n        public void writeExternal(ObjectOutput objectOutput) throws IOException {\n        }\n        @Override\n        public void readExternal(ObjectInput objectInput)\n                throws IOException, ClassNotFoundException {\n        }\n    }\n    interface ThrowingExternalizable extends Externalizable {\n    }\n    class Foo {}\n    public void test() {\n        Foo foo = new Foo();\n        Wobble wobble = new Wobble(foo);\n        Wobble[] objToSerialize = new Wobble[] { wobble, wobble, wobble, wobble };\n    }\n}"
    },
    {
      "description": "Auto test from InputHiddenFieldReorder.java",
      "expected-problems": 20,
      "expected-linenumbers": [
        29,
        33,
        39,
        45,
        50,
        60,
        62,
        69,
        70,
        76,
        78,
        85,
        85,
        92,
        93,
        99,
        120,
        130,
        140,
        146
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nclass InputHiddenFieldReorder\n{\n    public InputHiddenFieldReorder()\n    {\n        int hidden = 0; \n    }\n    public InputHiddenFieldReorder(int hidden) \n    {\n    }\n    public void shadow()\n    {\n        int hidden = 0; \n    }\n    public void shadowFor()\n    {\n        for (int hidden = 0; hidden < 1; hidden++) { \n        }\n    }\n    public void shadowParam(int hidden) \n    {\n    }\n    public class Inner\n    {\n        public Inner()\n        {\n            int innerHidden = 0; \n        }\n        public Inner(int innerHidden) \n        {\n        }\n        private void innerShadow()\n        {\n            int innerHidden = 0; \n            int hidden = 0; \n        }\n        private void innerShadowFor()\n        {\n            for (int innerHidden = 0; innerHidden < 1; innerHidden++) {\n            }\n            for (int hidden = 0; hidden < 1; hidden++) { \n            }\n        }\n        private void shadowParam(\n            int innerHidden, \n            int hidden \n        )\n        {\n        }\n        {\n            int innerHidden = 0;\n            int hidden = 0; \n        }\n        private int innerHidden = 0;\n    }\n    {\n        int hidden = 0;\n    }\n    private int hidden = 0;\n}\ninterface NothingHiddenReorder\n{\n    public static int notHidden = 0;\n    public void noShadow(int notHidden);\n}\nenum HiddenEnum1\n{\n    A(129),\n    B(283),\n    C(1212)\n    {\n        public void doSomething()\n        {\n            int hidden = 0; \n        }\n        int hidden;\n    };\n    HiddenEnum1(int hidden) \n    {\n    }\n    public void doSomething()\n    {\n        int hidden = 0; \n    }\n    public static void doSomethingStatic()\n    {\n        int hiddenStatic = 0; \n    }\n    int hidden;\n    static int hiddenStatic;\n}"
    },
    {
      "description": "Auto test from InputHiddenFieldStaticVisibility.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        20,
        27,
        35,
        45,
        56
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nimport java.util.Comparator;\npublic class InputHiddenFieldStaticVisibility {\n    static int someField;\n    static Object other = null;\n    Object field = null;\n    static void method(Object field, Object other) { \n    }\n    static class B {\n        void method(Object field, Object other) { \n        }\n    }\n    static Comparator<Object> COMP = new Comparator<Object>() {\n        @Override\n        public int compare(Object field, Object other) { \n            return 0;\n        }\n    };\n    static Comparator<Object> createComp() {\n        return new Comparator<Object>() {\n            @Override\n            public int compare(Object field, Object other) { \n                return 0;\n            }\n        };\n    }\n    static void foo1(int a) {}\n    void foo2(int a) {}\n    static void foo3(int someField) {} \n}"
    },
    {
      "description": "Auto test from InputHiddenFieldSwitchExpression.java",
      "expected-problems": 14,
      "expected-linenumbers": [
        27,
        31,
        33,
        33,
        38,
        42,
        46,
        53,
        57,
        59,
        59,
        64,
        68,
        72
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.hiddenfield;\nimport java.util.stream.Stream;\npublic class InputHiddenFieldSwitchExpression {\n    private int x;\n    private int y;\n    private int z;\n    private int a;\n    private int b;\n    String word;\n    String otherWord;\n    int howMany1(int k, String string) {\n        int x = 2; \n        switch (k) {\n            case 1:\n                Stream.of(string.split(\" \"))\n                        .map(word -> word.trim()) \n                        .anyMatch(otherWord -> \"in\".equals(otherWord));\n                int y = x + 1; \n                x = y;\n                break;\n            case 2:\n                int z = x + 2; \n                x = z;\n                break;\n            case 3:\n                int a = x + 3; \n                x = a;\n                break;\n            default:\n                int b = x + 4; \n                x = b;\n        }\n        return x;\n    }\n    int howMany2(int k, String string) {\n        int x = 2; \n        return switch (k) {\n            case 1 -> {\n                Stream.of(string.split(\" \"))\n                        .map(word -> word.trim()) \n                        .anyMatch(otherWord -> \"in\".equals(otherWord));\n                int y = x + 1; \n                yield y;\n            }\n            case 2 -> {\n                int z = x + 2; \n                yield z;\n            }\n            case 3 -> {\n                int a = x + 3; \n                yield a;\n            }\n            default -> {\n                int b = x + 4; \n                yield b;\n            }\n        };\n    }\n}"
    }
  ]
}