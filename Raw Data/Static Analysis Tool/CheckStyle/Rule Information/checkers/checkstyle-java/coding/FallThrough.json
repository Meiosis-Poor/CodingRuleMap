{
  "name": "FallThrough",
  "language": "java",
  "description": "<div>\n Checks for fall-through in {@code switch} statements.\n Finds locations where a {@code case} <b>contains</b> Java code but lacks a\n {@code break}, {@code return}, {@code yield}, {@code throw} or {@code continue} statement.\n </div>\n\n <p>\n The check honors special comments to suppress the warning.\n By default, the texts\n \"fallthru\", \"fall thru\", \"fall-thru\",\n \"fallthrough\", \"fall through\", \"fall-through\"\n \"fallsthrough\", \"falls through\", \"falls-through\" (case-sensitive).\n The comment containing these words must be all on one line,\n and must be on the last non-empty line before the {@code case} triggering\n the warning or on the same line before the {@code case}(ugly, but possible).\n Any other comment may follow on the same line.\n </p>\n\n <p>\n Note: The check assumes that there is no unreachable code in the {@code case}.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 229,
  "branches": 36,
  "apis": 44,
  "test": [
    {
      "description": "Auto test from InputFallThrough.java",
      "expected-problems": 17,
      "expected-linenumbers": [
        21,
        45,
        54,
        60,
        77,
        94,
        186,
        375,
        378,
        381,
        383,
        423,
        431,
        443,
        452,
        490,
        491
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThrough\n{\n    void method(int i, int j, boolean cond) {\n        while (true) {\n            switch (i) {\n            case 0:\n            case 1:\n                i++;\n                break;\n            case 2:\n                i++;\n            case 3: \n                i++;\n                break;\n            case 4:\n                return;\n            case 5:\n                throw new RuntimeException(\"\");\n            case 6:\n                continue;\n            case 7: {\n                break;\n            }\n            case 8: {\n                return;\n            }\n            case 9: {\n                throw new RuntimeException(\"\");\n            }\n            case 10: {\n                continue;\n            }\n            case 11: {\n                i++;\n            }\n            case 12: \n                if (false)\n                    break;\n                else\n                    break;\n            case 13:\n                if (true) {\n                    return;\n                }\n            case 14: \n                if (true) {\n                    return;\n                } else {\n                }\n            case 15: \n                do {\n                    System.identityHashCode(\"something\");\n                    return;\n                } while(true);\n            case 16:\n                for (int j1 = 0; j1 < 10; j1++) {\n                    String.valueOf(\"something\");\n                    return;\n                }\n            case 17:\n                while (true)\n                    throw new RuntimeException(\"\");\n            case 18:\n                while(cond) {\n                    break;\n                }\n            case 19: \n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                    break;\n                } catch (Error e) {\n                    return;\n                }\n            case 20:\n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                } catch (Error e) {\n                    return;\n                }\n            case 21: \n                try {\n                    i++;\n                } catch (RuntimeException e) {\n                    i--;\n                } finally {\n                    break;\n                }\n            case 22:\n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                    i--;\n                    break;\n                } finally {\n                    i++;\n                }\n            case 23:\n                switch (j) {\n                case 1:\n                    continue;\n                case 2:\n                    return;\n                default:\n                    return;\n                }\n            case 24:\n                switch (j) {\n                case 1:\n                    continue;\n                case 2:\n                    break;\n                default:\n                    return;\n                }\n            default: \n                i++;\n            }\n        }\n    }\n    void methodFallThru(int i, int j, boolean cond) {\n      while (true) {\n          switch (i) {\n          case -1: \n          case 0:\n          case 1:\n              i++;\n              break;\n          case 2:\n              i++;\n          case 3:\n              i++;\n              break;\n          case 4:\n              return;\n          case 5:\n              throw new RuntimeException(\"\");\n          case 6:\n              continue;\n          case 7: {\n              break;\n          }\n          case 8: {\n              return;\n          }\n          case 9: {\n              throw new RuntimeException(\"\");\n          }\n          case 10: {\n              continue;\n          }\n          case 11: {\n              i++;\n          }\n          case 12:\n              if (false)\n                  break;\n              else\n                  break;\n          case 13:\n              if (true) {\n                  return;\n              }\n          case 14: \n              if (true) {\n                  return;\n              } else {\n              }\n          case 15:\n              do {\n                  System.identityHashCode(\"something\");\n                  return;\n              } while(true);\n          case 16:\n              for (int j1 = 0; j1 < 10; j1++) {\n                  String.valueOf(\"something\");\n                  return;\n              }\n          case 17:\n              while (cond)\n                  throw new RuntimeException(\"\");\n          case 18:\n              while(cond) {\n                  break;\n              }\n          case 19:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n                  break;\n              } catch (Error e) {\n                  return;\n              }\n          case 20:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n              } catch (Error e) {\n                  return;\n              }\n          case 21:\n              try {\n                  i++;\n              } catch (RuntimeException e) {\n                  i--;\n              } finally {\n                  break;\n              }\n          case 22:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n                  i--;\n                  break;\n              } finally {\n                  i++;\n              }\n          case 23:\n              switch (j) {\n              case 1:\n                  continue;\n              case 2:\n                  return;\n              default:\n                  return;\n              }\n          case 24:\n              i++;\n              i++;\n              break;\n          case 26:\n              switch (j) {\n              case 1:\n                  continue;\n              case 2:\n                  break;\n              default:\n                  return;\n              }\n          default:\n              i++;\n         }\n      }\n   }\n   void methodFallThruCC(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2: {\n              i++;\n          }\n          case 3:\n              i++;\n                break;\n          case 5:\n              i++;\n          }\n      }\n   }\n   void methodFallThruC(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruC2(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruCOtherWords(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruCCustomWords(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1: \n              i++;\n          case 2: \n              i++;\n                break;\n          case 4: \n              i++;\n          }\n      }\n   }\n   void methodFallThruLastCaseGroup(int i, int j, boolean cond) {\n       while (true) {\n           switch (i){\n           case 0:\n               i++; \n           }\n           switch (i){\n           case 0:\n               i++;\n           }\n           switch (i){\n           case 0:\n               i++;\n       }\n    }\n    void method1472228(int i) {\n        switch(i) {\n        case 2:\n            break;\n        default:\n        }\n    }\n    void nestedSwitches() {\n        switch (hashCode()) {\n            case 1:\n                switch (hashCode()) { \n                    case 1:\n                }\n            default: \n        }\n    }\n    void nextedSwitches2() {\n        switch(hashCode()) {\n        case 1:\n            switch(hashCode()){}\n        case 2: \n            System.lineSeparator();\n            break;\n        }\n    }\n    void ifWithoutBreak() {\n        switch(hashCode()) {\n        case 1:\n            if (true) {\n                System.lineSeparator();\n            }\n        case 2: \n            System.lineSeparator();\n            break;\n        }\n    }\n    void noCommentAtTheEnd() {\n        switch(hashCode()) {\n        case 1: System.lineSeparator();\n        case 2: \n            System.lineSeparator();\n            break;\n        }\n    }\n    void synchronizedStatement() {\n       switch (hashCode()) {\n           case 1:\n               synchronized (this) {\n                   break;\n               }\n           case 2:\n               if (true) {\n                   synchronized (this) {\n                       break;\n                   }\n               } else {\n                   synchronized (this) {\n                       break;\n                   }\n               }\n           case 3:\n               synchronized (this) {\n               }\n           default:\n               break;\n       }\n    }\n    void multipleCasesOnOneLine() {\n        int i = 0;\n        switch (i) {\n        case 0: case 1: i *= i; \n        case 2: case 3: i *= i;\n        case 4: case 5: i *= i; \n        case 6: case 7: i *= i; \n            break;\n        default:\n            throw new RuntimeException();\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThrough2.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        27,
        42,
        46,
        53,
        67,
        74,
        87,
        93,
        95
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThrough2 {\n    enum Test {\n        A, B, C\n    }\n    public static void test() {\n        Test test = Test.A;\n        int variable = 0;\n        switch (test) {\n            case A:\n                break;\n            case B:\n                if (variable == 1) {\n                    break;\n                }\n            case C: \n                break;\n        }\n        int var2 = 1;\n        switch (variable) {\n            case 0:\n            case 1:\n            case 2:\n                System.identityHashCode(var2);\n                break;\n            case 3:\n                if (true) {\n                    return;\n                }\n            case 4: \n                if (var2 == 2) {\n                    break;\n                }\n            case 5: \n                if (var2 == 1) {\n                }\n                else if (true) {\n                    return;\n                }\n            case 6: \n                if (var2 > 1) {\n                    break;\n                }\n                else {\n                    break;\n                }\n            case 7:\n                if (var2 ==1) {\n                    break;\n                }\n                else if (true) {\n                    return;\n                }\n            case 8: \n                if(var2 == 5) {\n                    System.identityHashCode(\"0xB16B00B5\");\n                }\n                else {\n                    break;\n                }\n            case 9: \n                if(var2 == 5) {\n                    System.identityHashCode(\"0xCAFED00D\");\n                }\n                else {\n                    String.CASE_INSENSITIVE_ORDER.equals(\"0x4B1D\");\n                }\n                break;\n            case 10:\n                int var3 = 0xDEADBEEF;\n                switch (var3) {\n                    case 0xCAFEBABE:\n                        String.CASE_INSENSITIVE_ORDER.equals(\"0x1CEB00DA\");\n                    default: \n                        String.CASE_INSENSITIVE_ORDER.equals(\"\");\n                }\n                if(true) {\n                    break;\n                }\n            case 11: \n                if(false) {break;}\n            case 12: \n                if(true);\n                break;\n            default:\n                break;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThrough3.java",
      "expected-problems": 36,
      "expected-linenumbers": [
        21,
        45,
        54,
        60,
        77,
        94,
        130,
        151,
        176,
        186,
        192,
        210,
        228,
        259,
        272,
        287,
        290,
        294,
        297,
        312,
        315,
        318,
        333,
        336,
        339,
        354,
        357,
        360,
        423,
        431,
        443,
        452,
        479,
        489,
        490,
        491
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThrough3\n{\n    void method(int i, int j, boolean cond) {\n        while (true) {\n            switch (i) {\n            case 0:\n            case 1:\n                i++;\n                break;\n            case 2:\n                i++;\n            case 3: \n                i++;\n                break;\n            case 4:\n                return;\n            case 5:\n                throw new RuntimeException(\"\");\n            case 6:\n                continue;\n            case 7: {\n                break;\n            }\n            case 8: {\n                return;\n            }\n            case 9: {\n                throw new RuntimeException(\"\");\n            }\n            case 10: {\n                continue;\n            }\n            case 11: {\n                i++;\n            }\n            case 12: \n                if (false)\n                    break;\n                else\n                    break;\n            case 13:\n                if (true) {\n                    return;\n                }\n            case 14: \n                if (true) {\n                    return;\n                } else {\n                }\n            case 15: \n                do {\n                    System.identityHashCode(\"something\");\n                    return;\n                } while(true);\n            case 16:\n                for (int j1 = 0; j1 < 10; j1++) {\n                    String.valueOf(\"something\");\n                    return;\n                }\n            case 17:\n                while (true)\n                    throw new RuntimeException(\"\");\n            case 18:\n                while(cond) {\n                    break;\n                }\n            case 19: \n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                    break;\n                } catch (Error e) {\n                    return;\n                }\n            case 20:\n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                } catch (Error e) {\n                    return;\n                }\n            case 21: \n                try {\n                    i++;\n                } catch (RuntimeException e) {\n                    i--;\n                } finally {\n                    break;\n                }\n            case 22:\n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                    i--;\n                    break;\n                } finally {\n                    i++;\n                }\n            case 23:\n                switch (j) {\n                case 1:\n                    continue;\n                case 2:\n                    return;\n                default:\n                    return;\n                }\n            case 24:\n                switch (j) {\n                case 1:\n                    continue;\n                case 2:\n                    break;\n                default:\n                    return;\n                }\n            default: \n                i++;\n            }\n        }\n    }\n    void methodFallThru(int i, int j, boolean cond) {\n      while (true) {\n          switch (i) {\n          case -1: \n          case 0:\n          case 1:\n              i++;\n              break;\n          case 2:\n              i++;\n          case 3: \n              i++;\n              break;\n          case 4:\n              return;\n          case 5:\n              throw new RuntimeException(\"\");\n          case 6:\n              continue;\n          case 7: {\n              break;\n          }\n          case 8: {\n              return;\n          }\n          case 9: {\n              throw new RuntimeException(\"\");\n          }\n          case 10: {\n              continue;\n          }\n          case 11: {\n              i++;\n          }\n          case 12: \n              if (false)\n                  break;\n              else\n                  break;\n          case 13:\n              if (true) {\n                  return;\n              }\n          case 14: \n              if (true) {\n                  return;\n              } else {\n              }\n          case 15: \n              do {\n                  System.identityHashCode(\"something\");\n                  return;\n              } while(true);\n          case 16:\n              for (int j1 = 0; j1 < 10; j1++) {\n                  String.valueOf(\"something\");\n                  return;\n              }\n          case 17:\n              while (cond)\n                  throw new RuntimeException(\"\");\n          case 18:\n              while(cond) {\n                  break;\n              }\n          case 19: \n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n                  break;\n              } catch (Error e) {\n                  return;\n              }\n          case 20:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n              } catch (Error e) {\n                  return;\n              }\n          case 21: \n              try {\n                  i++;\n              } catch (RuntimeException e) {\n                  i--;\n              } finally {\n                  break;\n              }\n          case 22:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n                  i--;\n                  break;\n              } finally {\n                  i++;\n              }\n          case 23:\n              switch (j) {\n              case 1:\n                  continue;\n              case 2:\n                  return;\n              default:\n                  return;\n              }\n          case 24:\n              i++;\n              i++;\n              break;\n          case 26:\n              switch (j) {\n              case 1:\n                  continue;\n              case 2:\n                  break;\n              default:\n                  return;\n              }\n          default: \n              i++;\n         }\n      }\n   }\n   void methodFallThruCC(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1: \n              i++;\n          case 2: { \n              i++;\n          }\n          case 3: \n              i++;\n                break;\n          case 5:\n              i++;\n          }\n      }\n   }\n   void methodFallThruC(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1: \n              i++;\n          case 2: \n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruC2(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1: \n              i++;\n          case 2: \n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruCOtherWords(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1: \n              i++;\n          case 2: \n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruCCustomWords(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruLastCaseGroup(int i, int j, boolean cond) {\n       while (true) {\n           switch (i){\n           case 0:\n               i++; \n           }\n           switch (i){\n           case 0:\n               i++;\n           }\n           switch (i){\n           case 0:\n               i++;\n       }\n    }\n    void method1472228(int i) {\n        switch(i) {\n        case 2:\n            break;\n        default:\n        }\n    }\n    void nestedSwitches() {\n        switch (hashCode()) {\n            case 1:\n                switch (hashCode()) { \n                    case 1:\n                }\n            default: \n        }\n    }\n    void nextedSwitches2() {\n        switch(hashCode()) {\n        case 1:\n            switch(hashCode()){}\n        case 2: \n            System.lineSeparator();\n            break;\n        }\n    }\n    void ifWithoutBreak() {\n        switch(hashCode()) {\n        case 1:\n            if (true) {\n                System.lineSeparator();\n            }\n        case 2: \n            System.lineSeparator();\n            break;\n        }\n    }\n    void noCommentAtTheEnd() {\n        switch(hashCode()) {\n        case 1: System.lineSeparator();\n        case 2: \n            System.lineSeparator();\n            break;\n        }\n    }\n    void synchronizedStatement() {\n       switch (hashCode()) {\n           case 1:\n               synchronized (this) {\n                   break;\n               }\n           case 2:\n               if (true) {\n                   synchronized (this) {\n                       break;\n                   }\n               } else {\n                   synchronized (this) {\n                       break;\n                   }\n               }\n           case 3:\n               synchronized (this) {\n               }\n           default: \n               break;\n       }\n    }\n    void multipleCasesOnOneLine() {\n        int i = 0;\n        switch (i) {\n        case 0: case 1: i *= i; \n        case 2: case 3: i *= i; \n        case 4: case 5: i *= i; \n        case 6: case 7: i *= i; \n            break;\n        default:\n            throw new RuntimeException();\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThrough4.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        47,
        82
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThrough4 {\n    void methodFallThru(int i, int j) {\n        while (true) {\n            switch (i) {\n                case -1: \n                case 0:\n                case 26:\n                    switch (j) {\n                        case 1:\n                            continue;\n                        case 2:\n                            break;\n                        default:\n                        return;\n                    }\n            default:\n                i++;\n         }\n      }\n   }\n   void methodFallThruCC(int i, int j) {\n      while (true) {\n          switch (i){\n          case 5:\n              i++;\n          }\n      }\n   }\n   void methodFall(int i, int j) {\n      while (true) {\n          switch (i){\n          case 5: \n              i++;\n          }\n      }\n   }\n   void method(int i, int j) {\n      while (true) {\n          switch (i){\n          case 2: {\n              i++;\n          }\n          case 3:\n              i++;\n                break;\n          case 5:\n              i++;\n          }\n      }\n   }\n   void method2(int i, int j) {\n      while (true) {\n          switch (i){\n          case 2: {\n              i++;\n          }\n          case 3:\n              i++;\n                break;\n          case 5: \n              i++;\n          }\n      }\n   }\n    void method3(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 5:\n              i++;\n          }\n      }\n   }\n   void method4(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 5:\n              i++;\n          }\n      }\n   }\n   void method5(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 5:\n              i++;\n          }\n      }\n   }\n}"
    },
    {
      "description": "Auto test from InputFallThrough5.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        92
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThrough5 {\n    public Object visit(Object node, Void data) {\n        Object operator = null;\n        Object operand = node.toString();\n        Object operandValue = operand.toString();\n        if (operandValue == null) {\n            return null;\n        }\n        switch (operator.toString()) {\n        case \"122\":\n            return unaryPromotion(operandValue);\n        case \"99\": {\n            Number promoted = unaryPromotion(operandValue);\n            if (promoted == null) {\n                return null; \n            } else if (promoted instanceof Integer) {\n                return -promoted.intValue();\n            } else {\n                assert promoted instanceof Double;\n                return -promoted.doubleValue();\n            }\n        }\n        case \"89\": {\n            Number promoted = unaryPromotion(operandValue);\n            if (promoted instanceof Integer) {\n                return ~promoted.intValue();\n            } else if (promoted instanceof Long) {\n                return ~promoted.longValue();\n            } else {\n                return null; \n            }\n        }\n        case \"NEGATION\": {\n            return booleanInvert(operandValue);\n        }\n        case \"19\": {\n            Number promoted = unaryPromotion(operandValue);\n            if (promoted == null) {\n                return null; \n            }\n            else {\n                assert promoted instanceof Double;\n                return -promoted.doubleValue();\n            }\n        }\n        case \"39\": {\n            Number promoted = unaryPromotion(operandValue);\n            if (promoted instanceof Integer) {\n                return ~promoted.intValue();\n            }else {\n                return null;  \n            }\n        }\n        default: \n            throw new AssertionError(\"unreachable\");\n        }\n    }\n    private Object booleanInvert(Object operandValue) {\n        return operandValue;\n    }\n    private Number unaryPromotion(Object operandValue) {\n        return null;\n    }\n}\nclass Test {\n     void method6() {\n        int i=0;\n        switch (i) {\n            case 0:\n                break;\n            case 1: \n                i++;\n            case 2: \n                break;\n        }\n     }\n}"
    },
    {
      "description": "Auto test from InputFallThrough6.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        21,
        26,
        51,
        64,
        79,
        93,
        108
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThrough6 {\n    void foo(int i){\n        switch(i) {\n            case 1:\n                 int fallthru = 2; \n            case 2:\n                 int fallthrough = 2; \n            case 3:\n                 break;\n            case 4:\n                 int fallthru2 = 3;\n            case 5: \n                 int fallthru3 = 4; \n            case 6:\n                 int fallthru4 = 5; \n            default: \n            }\n    }\n     void multipleCasesOnOneLine() {\n         int i = 0;\n         switch (i) {\n         case 0: case 1: i *= i; \n         case 2: case 3: i *= i; \n         case 4: case 5: i *= i; \n         case 6: case 7: i *= i;\n             break;\n         default:\n             throw new RuntimeException();\n         }\n     }\n     void method() {\n        int i=0;\n        switch (i) {\n            case 0:\n                break;\n            case 1:\n                i++;\n            case 2: \n                break;\n        }\n     }\n     void method2() {\n        int i=0;\n        switch (i) {\n            case 0:\n                break;\n            case 1: \n               i++;\n            case 2: \n                break;\n        }\n     }\n     void method3() {\n        int i=0;\n        switch (i) {\n            case 0:\n                break;\n            case 1: \n               i++;\n            case 2: \n                break;\n        }\n     }\n     void method4() {\n        int i=0;\n        switch (i) {\n            case 0:\n                break;\n            case 1: \n               i++;\n            case 2: \n                break;\n        }\n     }\n     void method5() {\n        int i=0;\n        switch (i) {\n            case 0:\n                break;\n            case 1:\n                System.out.println(\"check\");\n            case 2: \n                break;\n        }\n     }\n}"
    },
    {
      "description": "Auto test from InputFallThrough7.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        19,
        35,
        63,
        109
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThrough7 {\n        public void method4() {\n        int c;\n        switch (5) {\n            case 5:\n            case 4:\n            case 3:\n                c = 4;\n            case 2: \n            case 1:\n            default:\n                c = 9;\n        }\n    }\n    public void method() {\n        int c;\n        switch (5) {\n            case 5:\n            case 4:\n            case 3:\n                c = 4;\n                break;\n            case 2: \n            case 1:\n            default:\n                c = 9;\n        }\n    }\n    public void method2() {\n        int c;\n        switch (5) {\n            case 5:\n            case 4:\n            case 3:\n                c = 4;\n            case 2: \n            case 1:\n            default:\n                c = 9;\n        }\n    }\n    public void method3() {\n        int c;\n        switch (5) {\n            case 5:\n            case 4:\n            case 3:\n                c = 4;\n            case 2: \n            case 1:\n            default:\n                c = 9;\n                break;\n        }\n    }\n    public void method5() {\n        int c;\n        switch (5) {\n            case 5:\n            case 4:\n            case 3:\n                c = 4;\n            case 2:\n            case 1:\n            default:\n                c = 9;\n                break;\n        }\n    }\n    public void method6() {\n        int c;\n        switch (5) {\n            case 5:\n            case 4:\n            case 3:\n                c = 4;\n                break;\n            case 2:\n            case 1:\n            default:\n                c = 9;\n                break;\n        }\n    }\n    public void method7() {\n        int c;\n        switch (5) {\n            case 4:\n            case 3:\n                c = 4;\n            case 2: \n            case 1:\n            default:\n                c = 9;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThrough9.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        18
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThrough9\n{\n    int hasYield() {\n        int i = 0;\n        return switch (hashCode()) {\n        case 1:\n            i++;\n        case 2: \n            yield 2;\n        case 3:\n        case 4:\n            yield 5;\n        default:\n            yield -1;\n        };\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThroughCharacterSwitch.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        18,
        29,
        37,
        43,
        47,
        61
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThroughCharacterSwitch\n{\n    void foo(char c, int i) {\n        while (true) {\n            switch (c) {\n            case 'a':\n            case 'b':\n                i++;\n            case 'c': \n                String.valueOf(i);\n                break;\n            case 'd':\n                return;\n            case 'e':\n                continue;\n            case 'f':\n                if (true) {\n                    return;\n                }\n            case 'g': \n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                } catch (Error e) {\n                    return;\n                }\n            case 'h': \n                switch (i) {\n                case 1:\n                    continue;\n                case 2:\n                    i++;\n                case 3: \n                    String.valueOf(i);\n                    return;\n                }\n            case 'i': \n                switch (i) {\n                case 1:\n                    continue;\n                case 2:\n                    i++;\n                    break;\n                case 3:\n                    String.valueOf(i);\n                    return;\n                }\n                break;\n            case 'A':\n                i++;\n            case 'B': \n                i++;\n            default:\n                i++;\n                break;\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThroughDefault.java",
      "expected-problems": 23,
      "expected-linenumbers": [
        21,
        45,
        54,
        60,
        77,
        94,
        130,
        186,
        375,
        378,
        381,
        423,
        431,
        443,
        452,
        489,
        490,
        491,
        528,
        530,
        532,
        534,
        536
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThroughDefault\n{\n    void method(int i, int j, boolean cond) {\n        while (true) {\n            switch (i) {\n            case 0:\n            case 1:\n                i++;\n                break;\n            case 2:\n                i++;\n            case 3: \n                i++;\n                break;\n            case 4:\n                return;\n            case 5:\n                throw new RuntimeException(\"\");\n            case 6:\n                continue;\n            case 7: {\n                break;\n            }\n            case 8: {\n                return;\n            }\n            case 9: {\n                throw new RuntimeException(\"\");\n            }\n            case 10: {\n                continue;\n            }\n            case 11: {\n                i++;\n            }\n            case 12: \n                if (false)\n                    break;\n                else\n                    break;\n            case 13:\n                if (true) {\n                    return;\n                }\n            case 14: \n                if (true) {\n                    return;\n                } else {\n                }\n            case 15: \n                do {\n                    System.identityHashCode(\"something\");\n                    return;\n                } while(true);\n            case 16:\n                for (int j1 = 0; j1 < 10; j1++) {\n                    String.valueOf(\"something\");\n                    return;\n                }\n            case 17:\n                while (true)\n                    throw new RuntimeException(\"\");\n            case 18:\n                while(cond) {\n                    break;\n                }\n            case 19: \n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                    break;\n                } catch (Error e) {\n                    return;\n                }\n            case 20:\n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                } catch (Error e) {\n                    return;\n                }\n            case 21: \n                try {\n                    i++;\n                } catch (RuntimeException e) {\n                    i--;\n                } finally {\n                    break;\n                }\n            case 22:\n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                    i--;\n                    break;\n                } finally {\n                    i++;\n                }\n            case 23:\n                switch (j) {\n                case 1:\n                    continue;\n                case 2:\n                    return;\n                default:\n                    return;\n                }\n            case 24:\n                switch (j) {\n                case 1:\n                    continue;\n                case 2:\n                    break;\n                default:\n                    return;\n                }\n            default: \n                i++;\n            }\n        }\n    }\n    void methodFallThru(int i, int j, boolean cond) {\n      while (true) {\n          switch (i) {\n          case -1: \n          case 0:\n          case 1:\n              i++;\n              break;\n          case 2:\n              i++;\n          case 3:\n              i++;\n              break;\n          case 4:\n              return;\n          case 5:\n              throw new RuntimeException(\"\");\n          case 6:\n              continue;\n          case 7: {\n              break;\n          }\n          case 8: {\n              return;\n          }\n          case 9: {\n              throw new RuntimeException(\"\");\n          }\n          case 10: {\n              continue;\n          }\n          case 11: {\n              i++;\n          }\n          case 12:\n              if (false)\n                  break;\n              else\n                  break;\n          case 13:\n              if (true) {\n                  return;\n              }\n          case 14: \n              if (true) {\n                  return;\n              } else {\n              }\n          case 15:\n              do {\n                  System.identityHashCode(\"something\");\n                  return;\n              } while(true);\n          case 16:\n              for (int j1 = 0; j1 < 10; j1++) {\n                  String.valueOf(\"something\");\n                  return;\n              }\n          case 17:\n              while (cond)\n                  throw new RuntimeException(\"\");\n          case 18:\n              while(cond) {\n                  break;\n              }\n          case 19:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n                  break;\n              } catch (Error e) {\n                  return;\n              }\n          case 20:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n              } catch (Error e) {\n                  return;\n              }\n          case 21:\n              try {\n                  i++;\n              } catch (RuntimeException e) {\n                  i--;\n              } finally {\n                  break;\n              }\n          case 22:\n              try {\n                  i++;\n                  break;\n              } catch (RuntimeException e) {\n                  i--;\n                  break;\n              } finally {\n                  i++;\n              }\n          case 23:\n              switch (j) {\n              case 1:\n                  continue;\n              case 2:\n                  return;\n              default:\n                  return;\n              }\n          case 24:\n              i++;\n              i++;\n              break;\n          case 26:\n              switch (j) {\n              case 1:\n                  continue;\n              case 2:\n                  break;\n              default:\n                  return;\n              }\n          default:\n              i++;\n         }\n      }\n   }\n   void methodFallThruCC(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2: {\n              i++;\n          }\n          case 3:\n              i++;\n                break;\n          case 5:\n              i++;\n          }\n      }\n   }\n   void methodFallThruC(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruC2(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruCOtherWords(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1:\n              i++;\n          case 2:\n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruCCustomWords(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 0:\n              i++; \n          case 1: \n              i++;\n          case 2: \n              i++;\n                break;\n          case 4:\n              i++;\n          }\n      }\n   }\n   void methodFallThruLastCaseGroup(int i, int j, boolean cond) {\n       while (true) {\n           switch (i){\n           case 0:\n               i++; \n           }\n           switch (i){\n           case 0:\n               i++;\n           }\n           switch (i){\n           case 0:\n               i++;\n       }\n    }\n    void method1472228(int i) {\n        switch(i) {\n        case 2:\n            break;\n        default:\n        }\n    }\n    void nestedSwitches() {\n        switch (hashCode()) {\n            case 1:\n                switch (hashCode()) { \n                    case 1:\n                }\n            default: \n        }\n    }\n    void nextedSwitches2() {\n        switch(hashCode()) {\n        case 1:\n            switch(hashCode()){}\n        case 2: \n            System.lineSeparator();\n            break;\n        }\n    }\n    void ifWithoutBreak() {\n        switch(hashCode()) {\n        case 1:\n            if (true) {\n                System.lineSeparator();\n            }\n        case 2: \n            System.lineSeparator();\n            break;\n        }\n    }\n    void noCommentAtTheEnd() {\n        switch(hashCode()) {\n        case 1: System.lineSeparator();\n        case 2: \n            System.lineSeparator();\n            break;\n        }\n    }\n    void synchronizedStatement() {\n       switch (hashCode()) {\n           case 1:\n               synchronized (this) {\n                   break;\n               }\n           case 2:\n               if (true) {\n                   synchronized (this) {\n                       break;\n                   }\n               } else {\n                   synchronized (this) {\n                       break;\n                   }\n               }\n           case 3:\n               synchronized (this) {\n               }\n           default:\n               break;\n       }\n    }\n    void multipleCasesOnOneLine() {\n        int i = 0;\n        switch (i) {\n        case 0: case 1: i *= i;\n        case 2: case 3: i *= i; \n        case 4: case 5: i *= i; \n        case 6: case 7: i *= i; \n            break;\n        default:\n            throw new RuntimeException();\n        }\n    }\n   void methodFallThruWithDash(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n              case 0:\n                  i++; \n              case 1:\n                  i++; \n              case 2:\n                  i++; \n              case 3:\n                  i++; \n              case 4:\n                  i++; \n              case 5:\n                  i++; \n              case 6:\n                  i++; \n              case 7:\n                  i++; \n              case 8:\n                  i++; \n              case 9:\n                  i++; \n              case 10:\n                  i++; \n              case 11:\n                  i++; \n              case 12:\n                  i++; \n              case 13: \n                  i++; \n              case 14: \n                  i++; \n              case 15: \n                  i++; \n              case 16: \n                  i++; \n              default: \n                  throw new RuntimeException();\n          }\n      }\n   }\n}"
    },
    {
      "description": "Auto test from InputFallThroughFallThroughLotsOfComment.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        17,
        42
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThroughFallThroughLotsOfComment {\n    void method(int lineNumber) {\n        switch (lineNumber) {\n            case 3:\n                Object pi = null;\n                int line = 2;\n            case 4: \n            case 5:\n            case 6:\n            case 7: {\n                int lineLength =  2;\n                int startIdx = 9;\n                while (lineLength++ < 2&& (startIdx + 3) <= lineLength) {\n                    String satId;\n                    startIdx += 3;\n                }\n                break;\n            }\n            case 14:\n                break;\n            case 15: {\n            }\n            case 16: \n            case 17:\n            case 18:\n                break;\n            case 19:\n            case 20:\n            case 21:\n            case 22:\n                break;\n            default:\n                break;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThroughInlineSingleCase.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        12
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThroughInlineSingleCase{\n  void method(int a) {\n    switch (a) {case 1:;}\n  }\n}"
    },
    {
      "description": "Auto test from InputFallThroughLabeledBreak.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        50,
        54,
        68,
        77,
        87
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThroughLabeledBreak {\n    int method(int a, int b) {\n        top: switch (a) {\n            case 1:\n                switch (b) {\n                    case 10:\n                        break top; \n                    default:\n                        return 11;\n                }\n            case 2:\n                return 2;\n        }\n        outer: outer2: switch (a) {\n            case 1:\n                inner1: inner2: switch (b) {\n                    case 10:\n                        break outer; \n                    default:\n                        return 11;\n                }\n            case 2:\n                inner: for (int i = 0;i < 3;i++) {\n                    break outer2;\n                }\n            case 3:\n                return 2;\n        }\n        loop_outer: for(int c = 0; c < 2; c++) {\n            outer:switch (a) {\n                case 1:\n                    inner:inner2:switch (b) {\n                        case 10:\n                            break inner;\n                        default:\n                            return 11;\n                    }\n                case 2: \n                    inner: inner2: for (int i = 0; i < 3; i++) {\n                        break inner2;\n                    }\n                case 3: \n                    return 1;\n                case 4:\n                    switch (b) {\n                        case 10:\n                            break outer; \n                        default:\n                            return 11;\n                    }\n                case 5:\n                    inner:{ switch (a) {\n                        case 1: break inner;\n                        }\n                    }\n                case 6: \n                    inner:\n                    while (true) {\n                        break outer;\n                    }\n                case 7:\n                    inner: while (true) {\n                        break inner;\n                    }\n                case 8:  \n                    inner:\n                    while (true) {\n                        continue loop_outer;\n                    }\n                case 9:\n                    loop_inner:\n                    while (true) {\n                        continue loop_inner;\n                    }\n                case 10:  \n                    inner1:\n                    {\n                        switch (a) {\n                            case 1:\n                                break outer;\n                        }\n                    }\n                case 11:\n                    return 1;\n            }\n        }\n        return -1;\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThroughLastLineCommentCheck.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        17,
        98
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThroughLastLineCommentCheck {\n    public void method(int i) {\n        switch (i) {\n            case 1:\n                if (true) {\n                }\n            case 2: \n                break;\n            case 3:\n                break;\n        }\n    }\n    public void method2(int i) {\n        switch (i) {\n            case 1:\n                i++;\n            case 2:\n                i++;\n        }\n    }\n    public void method3(int i) {\n        switch (i) {\n            case 1:\n                break;\n            case 2:\n                i++;\n        }\n    }\n    public void method4(int i) {\n        switch (i) {\n            case 1:\n                break;\n            case 2:\n                i++;\n        }\n    }\n   void methodFallThruCC(int i) {\n      while (true) {\n          switch (i){\n          case 5:\n              i++;\n          }\n      }\n   }\n   void method4(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 5:\n              i++;\n          }\n      }\n   }\n   void method5(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 5:\n              i++;\n          }\n      }\n   }\n    void method6(String str) {\n        switch (str) {\n            case \"9\": String s = \"s🥳d🥳s\";\n            case \"10\": String s2 = \"s🥳d🥳s\";\n        }\n    }\n   void method7(int i, int j, boolean cond) {\n      while (true) {\n          switch (i){\n          case 5:\n              i++;\n          }\n      }\n   }\n}"
    },
    {
      "description": "Auto test from InputFallThroughStringSwitch.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        20
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThroughStringSwitch\n{\n    int method(String arg) {\n        int i = 0;\n        switch (arg) {\n        case \"ok\":\n        case \"break\":\n            break;\n        case \"violation\":\n            i++;\n        case \"fallthru\": \n      }\n      return i;\n   }\n}"
    },
    {
      "description": "Auto test from InputFallThroughTryCatchInSwitch.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        36
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\nimport java.io.IOException;\npublic class InputFallThroughTryCatchInSwitch {\n    public int foo(int x) {\n        switch (x) {\n            case 1:\n                try {\n                    throw new IOException(\"Exception occurred.\");\n                } catch (IOException e) {\n                    if (e.getMessage().contains(\"Exception\")) {\n                        break;\n                    } else {\n                        return 0;\n                    }\n                } catch (Exception e) {\n                    for (int i = 0; i < 3; i++) {\n                        if (i == 1) {\n                            break;\n                        }\n                    }\n                } finally {\n                }\n            default: \n        }\n        return 0;\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThroughWeird.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        14
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThroughWeird {\n        void foo(int i){\n        switch(i) {\n            case 1:\n                 int fallthru = 2; \n            case 2: \n                 break;\n            case 3:\n                 int c = 2; \n            case 4: \n                break;\n            case 5:\n                 String x = \"x\"; \n            case 6: \n            default:\n            }\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThroughWithEmoji.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        22,
        25,
        49,
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThroughWithEmoji {\n    void foo() {\n        while (true) {\n            int i = 0;\n            switch (\"👍\") {\n                case \"ds😂\":\n                case \"\": i++; break;\n                case \"👇🏻\":\n                    i++;\n                case \"😂sda\":\n                    i++;\n                case \"d😂sda\": return;\n                case \"5😆\": throw new RuntimeException(\"\");\n                case \"🧐6\":\n                    do {\n                        System.identityHashCode(\"something\");\n                        return;\n                    } while(true);\n                case \"7🤛🏻\":\n                    for (int j1 = 0; j1 < 10; j1++) {\n                        String.valueOf(\"something\");\n                        \"7🤛🏻\".toString(); return;\n                    }\n                case \"8🥳\": try {\n                        i++;\n                        String s =\"8🥳\"; break;\n                    } catch (RuntimeException e) {\n                        i--;\n                    } finally {\n                        i++;\n                    }\n                case \"9\": String s = \"s🥳d🥳s\";\n                default: \n                    \"🥳\".toString().equals(\"🥳\");\n                    i++;\n            }\n        }\n    }\n    void fooFallThru() {\n        int i = 0;\n        switch (\"\") {\n            case \"ds😂\":\n            case \"\":\n                i++;\n                break;\n            case \"👇🏻\": i++;\n            case \"😂sda\":\n                i++;\n            case \"dsda\":\n                return;\n            case \"5😆\":\n                throw new RuntimeException(\"\");\n            case \"🧐6\":\n                do {\n                    System.identityHashCode(\"something\");\n                } while(true);\n            case \"7🤛🏻\": for (int j1 = 0; j1 < 10; j1++) {\n                    String.valueOf(\"something\");\n                    return;\n                }\n            case \"8🥳\": try { break;\n                } catch (RuntimeException e) {\n                    i--;\n                    break;\n                } finally {\n                    i++;\n                }\n            case \"9\": String s = \"s🥳d🥳s\";\n            case \"10\": String s2 = \"s🥳d🥳s\";\n    }\n    }\n}"
    },
    {
      "description": "Auto test from InputFallThroughWithoutReliefPattern.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        20,
        44,
        53,
        59,
        76,
        93
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.fallthrough;\npublic class InputFallThroughWithoutReliefPattern {\n  void method(int i, boolean cond) {\n    while (true) {\n      switch (i) {\n        case 0:\n        case 1:\n          i++;\n          break;\n        case 2:\n          i++;\n        case 3: \n          i++;\n          break;\n        case 4:\n          return;\n        case 5:\n          throw new RuntimeException(\"\");\n        case 6:\n          continue;\n        case 7: {\n          break;\n        }\n        case 8: {\n          return;\n        }\n        case 9: {\n          throw new RuntimeException(\"\");\n        }\n        case 10: {\n          continue;\n        }\n        case 11: {\n          i++;\n        }\n        case 12: \n          if (false)\n            break;\n          else\n            break;\n        case 13:\n          if (true) {\n            return;\n          }\n        case 14: \n          if (true) {\n            return;\n          } else {\n          }\n        case 15: \n          do {\n            System.identityHashCode(\"something\");\n            return;\n          } while (true);\n        case 16:\n          for (int j1 = 0; j1 < 10; j1++) {\n            String.valueOf(\"something\");\n            return;\n          }\n        case 17:\n          while (true)\n            throw new RuntimeException(\"\");\n        case 18:\n          while (cond) {\n            break;\n          }\n        case 19: \n          try {\n            i++;\n            break;\n          } catch (RuntimeException e) {\n            break;\n          } catch (Error e) {\n            return;\n          }\n        case 20:\n          try {\n            i++;\n            break;\n          } catch (RuntimeException e) {\n          } catch (Error e) {\n            return;\n          }\n        case 21: \n          try {\n            i++;\n          } catch (RuntimeException e) {\n            i--;\n          } finally {\n            break;\n          }\n        case 22:\n          try {\n            i++;\n            break;\n          } catch (RuntimeException e) {\n            i--;\n            break;\n          } finally {\n            i++;\n          }\n        default:\n          i++;\n      }\n    }\n  }\n}"
    }
  ]
}