{
  "name": "NoClone",
  "language": "java",
  "description": "<div>\n Checks that the clone method is not overridden from the\n Object class.\n </div>\n\n <p>\n This check is almost exactly the same as the {@code NoFinalizerCheck}.\n </p>\n\n <p>\n See\n <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#clone()\">\n Object.clone()</a>\n </p>\n\n <p>\n Rationale: The clone method relies on strange, hard to follow rules that\n are difficult to get right and do not work in all situations. In some cases,\n either a copy constructor or a static factory method can be used instead of\n the clone method to return copies of an object. For more information on rules\n for the clone method and its issues, see Effective Java:\n Programming Language Guide First Edition by Joshua Bloch pages 45-52.\n </p>\n\n <p>\n Below are some rules/reasons why the clone method should be avoided.\n </p>\n <ul>\n <li>\n Classes supporting the clone method should implement the Cloneable\n interface but the Cloneable interface does not include the clone method.\n As a result, it doesn't enforce the method override.\n </li>\n <li>\n The Cloneable interface forces the Object's clone method to work\n correctly. Without implementing it, the Object's clone method will\n throw a CloneNotSupportedException.\n </li>\n <li>\n Non-final classes must return the object returned from a call to\n super.clone().\n </li>\n <li>\n Final classes can use a constructor to create a clone which is different\n from non-final classes.\n </li>\n <li>\n If a super class implements the clone method incorrectly all subclasses\n calling super.clone() are doomed to failure.\n </li>\n <li>\n If a class has references to mutable objects then those object\n references must be replaced with copies in the clone method\n after calling super.clone().\n </li>\n <li>\n The clone method does not work correctly with final mutable object\n references because final references cannot be reassigned.\n </li>\n <li>\n If a super class overrides the clone method then all subclasses must\n provide a correct clone implementation.\n </li>\n </ul>\n\n <p>Two alternatives to the clone method, in some cases, is a copy constructor\n or a static factory method to return copies of an object. Both of these\n approaches are simpler and do not conflict with final fields. They do not\n force the calling client to handle a CloneNotSupportedException.  They also\n are typed therefore no casting is necessary. Finally, they are more\n flexible since they can take interface types rather than concrete classes.\n </p>\n\n <p>Sometimes a copy constructor or static factory is not an acceptable\n alternative to the clone method.  The example below highlights the\n limitation of a copy constructor (or static factory). Assume\n Square is a subclass for Shape.\n </p>\n <pre>\n Shape s1 = new Square();\n System.out.println(s1 instanceof Square); //true\n </pre>\n\n <p>\n ...assume at this point the code knows nothing of s1 being a Square\n    that's the beauty of polymorphism but the code wants to copy\n    the Square which is declared as a Shape, its super type...\n </p>\n <pre>\n Shape s2 = new Shape(s1); //using the copy constructor\n System.out.println(s2 instanceof Square); //false\n </pre>\n\n <p>\n The working solution (without knowing about all subclasses and doing many\n casts) is to do the following (assuming correct clone implementation).\n </p>\n <pre>\n Shape s2 = s1.clone();\n System.out.println(s2 instanceof Square); //true\n </pre>\n\n <p>\n Just keep in mind if this type of polymorphic cloning is required\n then a properly implemented clone method may be the best choice.\n </p>\n\n <p>Much of this information was taken from Effective Java:\n Programming Language Guide First Edition by Joshua Bloch\n pages 45-52.  Give Bloch credit for writing an excellent book.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 34,
  "branches": 2,
  "apis": 9,
  "test": [
    {
      "description": "Auto test from InputNoClone.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        15,
        33,
        41,
        45,
        59,
        68,
        107
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.noclone;\npublic class InputNoClone\n{\n    public InputNoClone() throws CloneNotSupportedException\n    { \n        super.equals(new String());\n        super.clone();\n    }\n    public Object clone() throws CloneNotSupportedException \n    {\n        return super.clone();\n    }\n    public void method() throws CloneNotSupportedException\n    {\n        super.clone();\n    }\n    {\n        super.clone();\n    }\n}\nclass NoSuperClone\n{\n    public Object clone() \n    {\n        return null;\n    }\n}\nclass InnerClone\n{\n    public Object clone() \n    {\n        class Inner\n        {\n            public Object clone() throws CloneNotSupportedException\n            {\n                return super.clone();\n            }\n        }\n        return null;\n    }\n}\nclass CloneWithTypeArguments<T> extends CloneWithTypeArgumentsAndNoSuper<T>\n{\n    public CloneWithTypeArguments<T> clone() throws CloneNotSupportedException\n    {\n        return (CloneWithTypeArguments<T>) super.<T>clone();\n    }\n}\nclass CloneWithTypeArgumentsAndNoSuper<T>\n{\n    public CloneWithTypeArgumentsAndNoSuper<T> clone() \n            throws CloneNotSupportedException\n    {\n        return null;\n    }\n}\nclass MyClassWithGenericSuperMethod\n{\n    void someMethod(java.util.List<? super java.util.Map<Object, Object>> l)\n    {\n    }\n    public static Object clone(Object o) {\n        return null;\n    }\n}\nclass AnotherClass {\n    public <T> T clone(T t) {\n        return null;\n    }\n}\nclass NativeTest {\n    public native Object clone(); \n}"
    }
  ]
}