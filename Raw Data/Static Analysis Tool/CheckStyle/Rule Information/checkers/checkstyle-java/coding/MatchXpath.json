{
  "name": "MatchXpath",
  "language": "java",
  "description": "<div>\n Evaluates Xpath query and report violation on all matching AST nodes. This check allows\n user to implement custom checks using Xpath. If Xpath query is not specified explicitly,\n then the check does nothing.\n </div>\n\n <p>\n It is recommended to define custom message for violation to explain what is not allowed and what\n to use instead, default message might be too abstract. To customize a message you need to\n add {@code message} element with <b>matchxpath.match</b> as {@code key} attribute and\n desired message as {@code value} attribute.\n </p>\n\n <p>\n Please read more about Xpath syntax at\n <a href=\"https://www.saxonica.com/html/documentation10/expressions/index.html\">Xpath Syntax</a>.\n Information regarding Xpath functions can be found at\n <a href=\"https://www.saxonica.com/html/documentation10/functions/fn/index.html\">\n     XSLT/XPath Reference</a>.\n Note, that <b>@text</b> attribute can be used only with token types that are listed in\n <a href=\"https://github.com/checkstyle/checkstyle/search?q=%22TOKEN_TYPES_WITH_TEXT_ATTRIBUTE+%3D+Arrays.asList%22\">\n     XpathUtil</a>.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 71,
  "branches": 4,
  "apis": 24,
  "test": [
    {
      "description": "Auto test from InputMatchXpath3.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        10,
        11
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\npublic class InputMatchXpath3 {\n    public void test() { } \n    public void foo() { } \n    public void correct() { }\n}"
    },
    {
      "description": "Auto test from InputMatchXpathAvoidInstanceCreationWithoutVar.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        12
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\npublic class InputMatchXpathAvoidInstanceCreationWithoutVar {\n    public void test() {\n        SomeObject a = new SomeObject(); \n        var b = new SomeObject();\n    }\n    class SomeObject {}\n}"
    },
    {
      "description": "Auto test from InputMatchXpathBlockComments.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        11,
        11
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\npublic class InputMatchXpathBlockComments {\n}"
    },
    {
      "description": "Auto test from InputMatchXpathDoubleBrace.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        17
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\nimport java.util.ArrayList;\npublic class InputMatchXpathDoubleBrace {\n    public void test() {\n        new ArrayList<Integer>() {{ \n            add(2);\n            add(4);\n            add(6);\n        }};\n    }\n}"
    },
    {
      "description": "Auto test from InputMatchXpathExecutableStatementCount.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        23
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\npublic class InputMatchXpathExecutableStatementCount {\n    public void test() {\n        while (true) {\n            Runnable runnable = new Runnable() {\n                public void run() {\n                    while (true) {\n                    }\n                }\n            };\n            new Thread(runnable).start();\n        }\n    }\n    public void test2() { \n        test();\n        \"HELLO WORLD\".toString();\n        int a = 123;\n    }\n}"
    },
    {
      "description": "Auto test from InputMatchXpathForbidParameterizedConstructor.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        11,
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\npublic class InputMatchXpathForbidParameterizedConstructor {\n    public InputMatchXpathForbidParameterizedConstructor(Object c) { } \n    public InputMatchXpathForbidParameterizedConstructor(int a, String b) { } \n    public InputMatchXpathForbidParameterizedConstructor() { }\n}"
    },
    {
      "description": "Auto test from InputMatchXpathForbidPrintStackTrace.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        17
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\nimport java.io.IOException;\npublic class InputMatchXpathForbidPrintStackTrace {\n   public void test() {\n      try {\n         throw new IOException();\n      } catch (IOException e) {\n         e.printStackTrace(); \n      }\n   }\n   public void test2() {\n      try {\n         throw new IOException();\n      } catch (IOException e) {\n      }\n   }\n}"
    },
    {
      "description": "Auto test from InputMatchXpathIllegalThrows.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        12,
        14,
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\npublic class InputMatchXpathIllegalThrows {\n    public void func1() throws RuntimeException {} \n    public void func2() throws Exception {}\n    public void func3() throws Error {}  \n    public void func4() throws Throwable {} \n    public void func5() throws NullPointerException {}\n}"
    },
    {
      "description": "Auto test from InputMatchXpathMultilineComments.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        12,
        18
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\npublic class InputMatchXpathMultilineComments {\n    void foo1() {}\n    void foo2() {}\n}"
    },
    {
      "description": "Auto test from InputMatchXpathSingleLineComments.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        11,
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.coding.matchxpath;\npublic class InputMatchXpathSingleLineComments {\n    void foo() {\n        int num; \n        boolean isTrue; \n        double pi = 3.14; \n    }\n}"
    }
  ]
}