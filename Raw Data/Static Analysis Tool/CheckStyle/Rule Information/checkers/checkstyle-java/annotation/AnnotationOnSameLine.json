{
  "name": "AnnotationOnSameLine",
  "language": "java",
  "description": "<div>\n Checks that annotations are located on the same line with their targets.\n Verifying with this check is not good practice, but it is using by some style guides.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 80,
  "branches": 9,
  "apis": 15,
  "test": [
    {
      "description": "Auto test from InputAnnotationOnSameLineCheckInterfaceAndEnum.java",
      "expected-problems": 16,
      "expected-linenumbers": [
        12,
        15,
        19,
        21,
        24,
        26,
        28,
        32,
        37,
        41,
        43,
        45,
        48,
        55,
        63,
        66
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationonsameline;\nimport java.util.List;\n@Ann        \n@Ann2 interface TestInterface {\n    @Ann    \n    @Ann2 Integer getX();\n}\npublic @Ann     \n@Ann2 class InputAnnotationOnSameLineCheckInterfaceAndEnum implements @Ann\n        @Ann2 TestInterface {\n    @Ann        \n    @Ann2 private Integer x = new @Ann \n            @Ann2 Integer(0);\n    private List<@Ann\n            @Ann2 Integer> integerList;\n    @Ann        \n    @Ann2 enum TestEnum {\n        A1, A2\n    }\n    @Ann        \n    @Ann2 public InputAnnotationOnSameLineCheckInterfaceAndEnum() {}\n    @Ann        \n    @Ann2 public void setX(@Ann\n            @Ann2 int x) throws @Ann \n                    @Ann2 Exception {\n        this.<@Ann \n                @Ann2 Integer> getXAs();\n        this.x = x;\n    }\n    @Override public Integer getX() {\n        return (@Ann \n                @Ann2 Integer) x;\n    }\n    public <@Ann T> T getXAs() {\n        return (T) x;\n    }\n}\n@Ann        \n@Ann2 @interface TestAnnotation {\n    @Ann    \n    @Ann2 int x();\n}"
    },
    {
      "description": "Auto test from InputAnnotationOnSameLineCheckPrivateAndDeprecatedVar.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        17,
        22,
        26,
        30
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationonsameline;\nimport static java.lang.annotation.ElementType.*;\nimport java.lang.annotation.Target;\nimport java.util.List;\nimport java.util.ArrayList;\npublic class InputAnnotationOnSameLineCheckPrivateAndDeprecatedVar {\n    @Ann        \n    private List<String> names = new ArrayList<>();\n    @Ann private List<String> names2 = new ArrayList<>();\n    @SuppressWarnings(\"deprecation\")\n    @Ann Integer x;\n    @SuppressWarnings(\"deprecation\")\n    @Ann\n    Integer x2;\n    @SuppressWarnings(\"deprecation\") @Ann @Ann2 @Ann3 @Ann4 Integer x3;\n}\n@Target({CONSTRUCTOR, FIELD, METHOD, PARAMETER, TYPE, TYPE_PARAMETER, TYPE_USE}) @interface Ann {}\n@Target({CONSTRUCTOR, FIELD, METHOD, PARAMETER, TYPE, TYPE_PARAMETER, TYPE_USE}) @interface Ann2 {}\n@interface Ann3 {}\n@interface Ann4 {}"
    },
    {
      "description": "Auto test from InputAnnotationOnSameLineCheckPublicMethodAndVariable.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        15,
        15,
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationonsameline;\npublic class InputAnnotationOnSameLineCheckPublicMethodAndVariable {\n    @Annotation int x;\n    int y;\n    @Annotation\n    @SomeClass.Annotation\n    @java.lang.Deprecated\n    public int getX() {\n        return (int) x;\n    }\n    @Annotation2 @Annotation\n    public int field;\n    public\n    @Annotation int field2;\n}\nclass SomeClass {\n    @interface Annotation {}\n}\n@interface Annotation {}\n@interface Annotation2 {}"
    },
    {
      "description": "Auto test from InputAnnotationOnSameLineCheckTokensOnMethodAndVar.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        16,
        20,
        21
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationonsameline;\npublic class InputAnnotationOnSameLineCheckTokensOnMethodAndVar {\n    @Annotation3 int x;\n    int y;\n    @Annotation3 \n    @SomeClass2.Annotation \n    @java.lang.Deprecated \n    public int getX() {\n        return (int) x;\n    }\n    @Annotation4 @Annotation3\n    public int field;\n    public\n    @Annotation3 int field2;\n}\nclass SomeClass2 {\n    @interface Annotation {}\n}\n@interface Annotation3 {}\n@interface Annotation4 {}"
    },
    {
      "description": "Auto test from InputAnnotationOnSameLineOne.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        17,
        20,
        34
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationonsameline;\nimport static java.lang.annotation.ElementType.TYPE_USE;\nimport java.lang.annotation.Target;\nimport java.util.List;\npublic class InputAnnotationOnSameLineOne {\n    @Ann public\n    @Ann2 class E {}\n    @Ann private\n    @Ann2 class A {}\n    public void wildcardCase() {\n        List<@Ann ?> list;\n    }\n    public String typeCastCase() {\n        Object s = new String();\n        return (@Ann String) s;\n    }\n    public void wildcardCase1() {\n        List<@Ann\n                ?> list;\n    }\n    @Deprecated @SuppressWarnings(\"unchecked\")\n    public void proceed(int parameter1,  int parameter2,  int parameter3,\n                        int parameter4,  int parameter5) { }\n    @Deprecated @SuppressWarnings(\"unchecked\") public void proceedGood(int parameter1,\n                                                      int parameter2, int parameter3,\n                                                      int parameter4,  int parameter5) { }\n    int[][][] i = new @Ann3(integer = 1) int[0][][];\n    @Target({TYPE_USE}) @interface Ann {}\n    @Target({TYPE_USE}) @interface Ann2 {}\n    @Target({TYPE_USE}) @interface Ann3 { int integer();}\n}"
    },
    {
      "description": "Auto test from InputAnnotationOnSameLineRecordsAndCompactCtors.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        12,
        15,
        21,
        27,
        32,
        45,
        55
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationonsameline;\npublic class InputAnnotationOnSameLineRecordsAndCompactCtors {\n    @NonNull1 \n    public record MyRecord1() {\n    }\n    @SuppressWarnings(\"deprecation\")\n    public record MyRecord2() {\n    }\n    @SuppressWarnings(\"deprecation\")\n            record MyRecord3() {\n    }\n    @SuppressWarnings(\"deprecation\") public record MyRecord4() {\n        @SuppressWarnings(\"deprecation\")\n        public MyRecord4 {\n        }\n    }\n    @SuppressWarnings(\"deprecation\")\n    public record MyRecord5() {\n        record MyInnerRecord() {\n            @NonNull1 @SuppressWarnings(\"Annotation\")\n            public MyInnerRecord {\n            }\n        }\n    }\n    @SuppressWarnings(\"deprecation\")\n    public record MyRecord6() {\n        record MyInnerRecord() {@SuppressWarnings(\"Annotation\")public MyInnerRecord {}\n        }\n    }\n    @SuppressWarnings(\"deprecation\")\n    public record MyRecord7() {\n    }\n}\n@interface NonNull1 {\n}"
    },
    {
      "description": "Auto test from InputAnnotationOnSameLineTwo.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        16,
        19,
        23,
        27
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationonsameline;\nimport java.lang.annotation.Target;\nimport static java.lang.annotation.ElementType.TYPE_USE;\npublic class InputAnnotationOnSameLineTwo {\n    @Ann public\n    @Ann2 class E {}\n    @Ann private\n    @Ann2 class A {}\n    @Ann sealed\n    @Ann2 class B permits C {}\n    @Ann final\n    @Ann2 class C extends B {}\n    @Ann public @Ann2 class Egood {}\n    @Ann private @Ann2 class Agood {}\n    @Ann sealed @Ann2 class Bgood permits Cgood {}\n    @Ann final @Ann2 class Cgood extends Bgood {}\n    @Target({TYPE_USE}) @interface Ann {}\n    @Target({TYPE_USE}) @interface Ann2 {}\n}"
    }
  ]
}