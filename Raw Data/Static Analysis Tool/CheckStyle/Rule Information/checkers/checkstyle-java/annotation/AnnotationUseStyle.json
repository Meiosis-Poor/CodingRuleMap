{
  "name": "AnnotationUseStyle",
  "language": "java",
  "description": "<div>\n Checks the style of elements in annotations.\n </div>\n\n <p>\n Annotations have three element styles starting with the least verbose.\n </p>\n <ul>\n <li>\n {@code ElementStyleOption.COMPACT_NO_ARRAY}\n </li>\n <li>\n {@code ElementStyleOption.COMPACT}\n </li>\n <li>\n {@code ElementStyleOption.EXPANDED}\n </li>\n </ul>\n\n <p>\n To not enforce an element style a {@code ElementStyleOption.IGNORE} type is provided.\n The desired style can be set through the {@code elementStyle} property.\n </p>\n\n <p>\n Using the {@code ElementStyleOption.EXPANDED} style is more verbose.\n The expanded version is sometimes referred to as \"named parameters\" in other languages.\n </p>\n\n <p>\n Using the {@code ElementStyleOption.COMPACT} style is less verbose.\n This style can only be used when there is an element called 'value' which is either\n the sole element or all other elements have default values.\n </p>\n\n <p>\n Using the {@code ElementStyleOption.COMPACT_NO_ARRAY} style is less verbose.\n It is similar to the {@code ElementStyleOption.COMPACT} style but single value arrays are\n flagged.\n With annotations a single value array does not need to be placed in an array initializer.\n </p>\n\n <p>\n The ending parenthesis are optional when using annotations with no elements.\n To always require ending parenthesis use the {@code ClosingParensOption.ALWAYS} type.\n To never have ending parenthesis use the {@code ClosingParensOption.NEVER} type.\n To not enforce a closing parenthesis preference a {@code ClosingParensOption.IGNORE} type is\n provided.\n Set this through the {@code closingParens} property.\n </p>\n\n <p>\n Annotations also allow you to specify arrays of elements in a standard format.\n As with normal arrays, a trailing comma is optional.\n To always require a trailing comma use the {@code TrailingArrayCommaOption.ALWAYS} type.\n To never have a trailing comma use the {@code TrailingArrayCommaOption.NEVER} type.\n To not enforce a trailing array comma preference a {@code TrailingArrayCommaOption.IGNORE} type\n is provided. Set this through the {@code trailingArrayComma} property.\n </p>\n\n <p>\n By default, the {@code ElementStyleOption} is set to {@code },\n the {@code TrailingArrayCommaOption} is set to {@code },\n and the {@code ClosingParensOption} is set to {@code }.\n </p>\n\n <p>\n According to the JLS, it is legal to include a trailing comma\n in arrays used in annotations but Sun's Java 5 &amp; 6 compilers will not\n compile with this syntax. This may in be a bug in Sun's compilers\n since eclipse 3.4's built-in compiler does allow this syntax as\n defined in the JLS. Note: this was tested with compilers included with\n JDK versions 1.5.0.17 and 1.6.0.11 and the compiler included with eclipse 3.4.1.\n </p>\n\n <p>\n See <a href=\"https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-9.7\">\n Java Language specification, &#167;9.7</a>.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 184,
  "branches": 22,
  "apis": 34,
  "test": [
    {
      "description": "Auto test from InputAnnotationUseStyleCompact.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        51,
        54,
        74,
        81,
        86
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationusestyle;\n@Deprecated\n@SomeArraysDiffStyle(pooches={DOGS.LEO})\n@SuppressWarnings({\"\"})\npublic class InputAnnotationUseStyleCompact\n{\n}\n@SomeArraysDiffStyle(pooches={DOGS.LEO}, um={}, duh={\"bleh\"})\n@SuppressWarnings(\"\") \n@Deprecated()\nclass Dep5 {\n}\n@Deprecated\n@SomeArraysDiffStyle(pooches={DOGS.LEO})\n@SuppressWarnings({\"\"})\nenum SON5 {\n    @Deprecated\n    @SomeArraysDiffStyle(pooches={DOGS.LEO}, um={\"\"}, duh={\"bleh\"})\n    @APooch(dog=DOGS.HERBIE)\n    @Another(\"\") \n    ETHAN\n}\n@InputAnnotationUseStyleCustomAnnotation()\nenum DOGS5 {\n    @Deprecated()\n    LEO,\n    HERBIE\n}\n@interface SomeArrays5 {\n    @Another(\"\") \n    String[] um() default {};\n    @Another({\"\"}) \n    String[] duh() default {};\n    @Another(value={\"\"}) \n    DOGS[] pooches();\n}\n@Another(value={\"\"}) \nenum E5 {\n}\n@interface APooch5 {\n    DOGS dog();\n}\n@interface Another5 {\n    String[] value() default {};\n    @Another({\"foo\", \"bar\"}) \n    String value1() default \"\";\n}\n@SomeArraysDiffStyle(pooches = {})\n@Another({})\nclass Closing5 {\n    static final String UN_U = \"UN_U\";\n    @SuppressWarnings(value = UN_U) \n    int d;\n}\n@AnnotationWithAnnotationValue(@Another)\nclass Example17 {}\n@AnnotationWithAnnotationValue(value = @Another)\nclass Example18 {}\n@AnnotationWithAnnotationValue(@Another())\nclass Example19 {}\n@AnnotationWithAnnotationValue(value = @Another())\nclass Example20 {}\nclass Foo5 {\n   Foo5(@Another String par1, @Another int par2) {}\n}\n@interface AnnotationWithAnnotationValue5 {\n    Another value();\n}\n@interface InputAnnotationUseStyleCustomAnnotation {}"
    },
    {
      "description": "Auto test from InputAnnotationUseStyleCompactNoArray.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        12,
        13,
        18,
        28,
        29,
        33,
        51,
        53,
        56
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationusestyle;\n@Deprecated\n@SomeArraysDiffStyle(pooches={DOGS.LEO}) \n@SuppressWarnings({\"\"}) \npublic class InputAnnotationUseStyleCompactNoArray\n{\n}\n@SomeArraysDiffStyle(pooches={DOGS.LEO},um={}, duh={\"bleh\"})\n@SuppressWarnings(\"\") \n@Deprecated()\nclass Dep6 {\n}\n@Deprecated\n@SomeArraysDiffStyle(pooches={DOGS.LEO}) \n@SuppressWarnings({\"\"}) \nenum SON6 {\n    @Deprecated\n    @SomeArraysDiffStyle(pooches={DOGS.LEO},um={\"\"}, duh={\"bleh\"})\n    @APooch(dog=DOGS.HERBIE)\n    @Another(\"\") \n    ETHAN\n}\n@InputAnnotationUseStyleCustomAnnotation2()\nenum DOGS6 {\n    @Deprecated()\n    LEO,\n    HERBIE\n}\n@interface SomeArrays6 {\n    @Another(\"\") \n    String[] um() default {};\n    @Another({\"\"}) \n    String[] duh() default {};\n    @Another(value={\"\"}) \n    DOGS[] pooches();\n}\n@Another(value={\"\"}) \nenum E6 {\n}\n@interface APooch6 {\n    DOGS dog();\n}\n@interface Another6 {\n    String[] value() default {};\n    @Another({\"foo\", \"bar\"}) \n    String value1() default \"\";\n}\n@SomeArraysDiffStyle(pooches = {})\n@Another({})\nclass Closing6 {\n    static final String UN_U = \"UN_U\";\n    @SuppressWarnings(value = UN_U)\n    int d;\n}\n@AnnotationWithAnnotationValue(@Another)\nclass Example21 {}\n@AnnotationWithAnnotationValue(value = @Another)\nclass Example22 {}\n@AnnotationWithAnnotationValue(@Another())\nclass Example23 {}\n@AnnotationWithAnnotationValue(value = @Another())\nclass Example24 {}\nclass Foo6 {\n   Foo6(@Another String par1, @Another int par2) {}\n}\n@interface AnnotationWithAnnotationValue6 {\n    Another value();\n}\n@interface InputAnnotationUseStyleCustomAnnotation2 {}"
    },
    {
      "description": "Auto test from InputAnnotationUseStyleDifferentStyles.java",
      "expected-problems": 14,
      "expected-linenumbers": [
        12,
        13,
        18,
        22,
        28,
        29,
        33,
        39,
        43,
        52,
        54,
        57,
        86,
        89
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationusestyle;\n@Deprecated\n@SomeArraysDiffStyle(pooches={DOGS.LEO}) \n@SuppressWarnings({\"\"}) \npublic class InputAnnotationUseStyleDifferentStyles\n{\n}\n@SomeArraysDiffStyle(pooches={DOGS.LEO},um={}, duh={\"bleh\"})\n@SuppressWarnings(\"\") \n@Deprecated() \nclass Dep {\n}\n@Deprecated\n@SomeArraysDiffStyle(pooches={DOGS.LEO}) \n@SuppressWarnings({\"\"}) \nenum SON {\n    @Deprecated\n    @SomeArraysDiffStyle(pooches={DOGS.LEO},um={\"\"}, duh={\"bleh\"})\n    @APooch(dog=DOGS.HERBIE)\n    @Another(\"\") \n    ETHAN\n}\n@InputAnnotationUseStyleCustomAnnotation3()\nenum DOGS {\n    @Deprecated() \n    LEO,\n    HERBIE\n}\n@interface SomeArraysDiffStyle {\n    @Another(\"\") \n    String[] um() default {};\n    @Another({\"\"}) \n    String[] duh() default {};\n    @Another(value={\"\"}) \n    DOGS[] pooches();\n}\n@Another(value={\"\"}) \nenum E {\n}\n@interface APooch {\n    DOGS dog();\n}\n@interface Another {\n    String[] value() default {};\n    @Another({\"foo\", \"bar\"}) \n    String value1() default \"\";\n}\n@SomeArraysDiffStyle(pooches = {})\n@Another({})\nclass Closing {\n    static final String UN_U = \"UN_U\";\n    @SuppressWarnings(value = UN_U)\n    int d;\n}\n@AnnotationWithAnnotationValue(@Another)\nclass ExampleA {}\n@AnnotationWithAnnotationValue(value = @Another)\nclass ExampleB {}\n@AnnotationWithAnnotationValue(@Another())\nclass ExampleC {}\n@AnnotationWithAnnotationValue(value = @Another())\nclass ExampleD {}\nclass Foo {\n   Foo(@Another String par1, @Another int par2) {}\n}\n@interface AnnotationWithAnnotationValue {\n    Another value();\n}\n@interface InputAnnotationUseStyleCustomAnnotation3 {}"
    },
    {
      "description": "Auto test from InputAnnotationUseStyleExpanded.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        13,
        20,
        28,
        34,
        47,
        49,
        66,
        71,
        78,
        83
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationusestyle;\n@Deprecated\n@SomeArraysDiffStyle(pooches={DOGS.LEO})\n@SuppressWarnings({\"\"}) \npublic class InputAnnotationUseStyleExpanded\n{\n}\n@SomeArraysDiffStyle(pooches={DOGS.LEO}, um={}, duh={\"bleh\"})\n@SuppressWarnings(\"\") \n@Deprecated()\nclass Dep4 {\n}\n@Deprecated\n@SomeArraysDiffStyle(pooches={DOGS.LEO})\n@SuppressWarnings({\"\"}) \nenum SON4 {\n    @Deprecated\n    @SomeArraysDiffStyle(pooches={DOGS.LEO}, um={\"\"}, duh={\"bleh\"})\n    @APooch(dog=DOGS.HERBIE)\n    @Another(\"\") \n    ETHAN\n}\n@InputAnnotationUseStyleCustomAnnotation5()\nenum DOGS4 {\n    @Deprecated()\n    LEO,\n    HERBIE\n}\n@interface SomeArrays4 {\n    @Another(\"\") \n    String[] um() default {};\n    @Another({\"\"}) \n    String[] duh() default {};\n    @Another(value={\"\"}) \n    DOGS[] pooches();\n}\n@Another(value={\"\"}) \nenum E4 {\n}\n@interface APooch4 {\n    DOGS dog();\n}\n@interface Another4 {\n    String[] value() default {};\n    @Another({\"foo\", \"bar\"}) \n    String value1() default \"\";\n}\n@SomeArraysDiffStyle(pooches = {})\n@Another({}) \nclass Closing4 {\n    static final String UN_U = \"UN_U\";\n    @SuppressWarnings(value = UN_U)\n    int d;\n}\n@AnnotationWithAnnotationValue(@Another) \nclass Example13 {}\n@AnnotationWithAnnotationValue(value = @Another)\nclass Example14 {}\n@AnnotationWithAnnotationValue(@Another()) \nclass Example15 {}\n@AnnotationWithAnnotationValue(value = @Another())\nclass Example16 {}\nclass Foo4 {\n   Foo4(@Another String par1, @Another int par2) {}\n}\n@interface AnnotationWithAnnotationValue4 {\n    Another value();\n}\n@interface InputAnnotationUseStyleCustomAnnotation5 {}"
    },
    {
      "description": "Auto test from InputAnnotationUseStyleNoParens.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        21,
        37,
        41,
        84,
        87
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationusestyle;\n@Deprecated\n@SomeArraysDiffStyle(pooches={DOGS.LEO})\n@SuppressWarnings({\"\"})\npublic class InputAnnotationUseStyleNoParens\n{\n}\n@SomeArraysDiffStyle(pooches={DOGS.LEO}, um={}, duh={\"bleh\"})\n@SuppressWarnings(\"\") \n@Deprecated() \nclass Dep3 {\n}\n@Deprecated\n@SomeArraysDiffStyle(pooches={DOGS.LEO})\n@SuppressWarnings({\"\"})\nenum SON3 {\n    @Deprecated\n    @SomeArraysDiffStyle(pooches={DOGS.LEO}, um={\"\"}, duh={\"bleh\"})\n    @APooch(dog=DOGS.HERBIE)\n    @Another(\"\") \n    ETHAN\n}\n@InputAnnotationUseStyleCustomAnnotation6()\nenum DOGS3 {\n    @Deprecated() \n    LEO,\n    HERBIE\n}\n@interface SomeArrays3 {\n    @Another(\"\") \n    String[] um() default {};\n    @Another({\"\"}) \n    String[] duh() default {};\n    @Another(value={\"\"}) \n    DOGS[] pooches();\n}\n@Another(value={\"\"}) \nenum E3 {\n}\n@interface APooch3 {\n    DOGS dog();\n}\n@interface Another3 {\n    String[] value() default {};\n    @Another({\"foo\", \"bar\"}) \n    String value1() default \"\";\n}\n@SomeArraysDiffStyle(pooches = {})\n@Another({})\nclass Closing3 {\n    static final String UN_U = \"UN_U\";\n    @SuppressWarnings(value = UN_U)\n    int d;\n}\n@AnnotationWithAnnotationValue(@Another)\nclass Example9 {}\n@AnnotationWithAnnotationValue(value = @Another)\nclass Example10 {}\n@AnnotationWithAnnotationValue(@Another())\nclass Example11 {}\n@AnnotationWithAnnotationValue(value = @Another())\nclass Example12 {}\nclass Foo3 {\n   Foo3(@Another String par1, @Another int par2) {}\n}\n@interface AnnotationWithAnnotationValue3 {\n    Another value();\n}\n@interface InputAnnotationUseStyleCustomAnnotation6 {}"
    },
    {
      "description": "Auto test from InputAnnotationUseStyleNoTrailingComma.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        10,
        14,
        16,
        21,
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationusestyle;\n@SuppressWarnings({}) \npublic class InputAnnotationUseStyleNoTrailingComma\n{\n  @SuppressWarnings({\"common\"}) \n  public void foo() {\n      @SuppressWarnings({\"common\",\"foo\"})\n      Object o = new Object() {\n          @SuppressWarnings(value ={\"common\"})\n          public String toString() {\n              @SuppressWarnings( value={\"leo\",\"herbie\"})\n              final String pooches = \"leo.herbie\";\n              return pooches;\n          }\n      };\n  }\n  @Test2(value={\"foo\"}, more={\"bar\"}) \n  @Pooches2(tokens={},other={}) \n  enum P {\n      @Pooches2(tokens={Pooches2.class},other={1}) \n      L, \n      @Test2(value={}, more={\"unchecked\"}) \n      Y;\n  }\n}\n@interface Test2 {\n  String[] value();\n  String[] more() default {};\n}\n@interface Pooches2 {\n  Class<?>[] tokens();\n  int[] other();\n}"
    },
    {
      "description": "Auto test from InputAnnotationUseStyleWithParens.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        10,
        25,
        30,
        78,
        81
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationusestyle;\n@Deprecated \n@SomeArraysDiffStyle(pooches={DOGS.LEO})\n@SuppressWarnings({\"\"})\npublic class InputAnnotationUseStyleWithParens\n{\n}\n@SomeArraysDiffStyle(pooches={DOGS.LEO}, um={}, duh={\"bleh\"})\n@SuppressWarnings(\"\") \n@Deprecated()\nclass Dep2 {\n}\n@Deprecated \n@SomeArraysDiffStyle(pooches={DOGS.LEO})\n@SuppressWarnings({\"\"})\nenum SON2 {\n    @Deprecated \n    @SomeArraysDiffStyle(pooches={DOGS.LEO}, um={\"\"}, duh={\"bleh\"})\n    @APooch(dog=DOGS.HERBIE)\n    @Another(\"\") \n    ETHAN\n}\n@InputAnnotationUseStyleCustomAnnotation7()\nenum DOGS2 {\n    @Deprecated()\n    LEO,\n    HERBIE\n}\n@interface SomeArrays2 {\n    @Another(\"\") \n    String[] um() default {};\n    @Another({\"\"}) \n    String[] duh() default {};\n    @Another(value={\"\"}) \n    DOGS[] pooches();\n}\n@Another(value={\"\"}) \nenum E2 {\n}\n@interface APooch2 {\n    DOGS dog();\n}\n@interface Another2 {\n    String[] value() default {};\n    @Another({\"foo\", \"bar\"}) \n    String value1() default \"\";\n}\n@SomeArraysDiffStyle(pooches = {})\n@Another({})\nclass Closing2 {\n    static final String UN_U = \"UN_U\";\n    @SuppressWarnings(value = UN_U)\n    int d;\n}\n@AnnotationWithAnnotationValue(@Another) \nclass Example5 {}\n@AnnotationWithAnnotationValue(value = @Another)\nclass Example6 {}\n@AnnotationWithAnnotationValue(@Another())\nclass Example7 {}\n@AnnotationWithAnnotationValue(value = @Another())\nclass Example8 {}\nclass Foo2 {\n   Foo2(@Another String par1, @Another int par2) {} \n}\n@interface AnnotationWithAnnotationValue2 {\n    Another value();\n}\n@interface InputAnnotationUseStyleCustomAnnotation7 {}"
    },
    {
      "description": "Auto test from InputAnnotationUseStyleWithTrailingCommaIgnore.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        14,
        20,
        32,
        39
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationusestyle;\npublic class InputAnnotationUseStyleWithTrailingCommaIgnore\n{\n    @SuppressWarnings({\"common\",}) \n    public void foo() {\n        @SuppressWarnings({\"common\",\"foo\",})\n        Object o = new Object() {\n            @SuppressWarnings(value={\"common\",})\n            public String toString() {\n                @SuppressWarnings(value={\"leo\",\"herbie\",})\n                final String pooches = \"leo.herbie\";\n                return pooches;\n            }\n        };\n    }\n    @Test3(value={\"foo\",}, more={\"bar\",})\n    enum P {\n        @Pooches3(tokens={Pooches3.class,},other={1,})\n        L,\n        Y;\n    }\n}\n@interface Test3 {\n    String[] value();\n    String[] more() default {};\n}\n@interface Pooches3 {\n    Class<?>[] tokens();\n    int[] other();\n}"
    },
    {
      "description": "Auto test from InputAnnotationUseStyleWithTrailingCommaNever.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        14,
        17,
        22,
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.annotation.annotationusestyle;\npublic class InputAnnotationUseStyleWithTrailingCommaNever\n{\n    @SuppressWarnings({\"common\",})\n    public void foo() {\n        @SuppressWarnings({\"common\",\"foo\",})\n        Object o = new Object() {\n            @SuppressWarnings(value={\"common\",})\n            public String toString() {\n                @SuppressWarnings(value={\"leo\",\"herbie\",})\n                final String pooches = \"leo.herbie\";\n                return pooches;\n            }\n        };\n    }\n    @Test4(value={\"foo\",}, more={\"bar\",}) \n    enum P {\n        @Pooches4(tokens={Pooches4.class,},other={1,}) \n        L,\n        Y;\n    }\n}\n@interface Test4 {\n    String[] value();\n    String[] more() default {};\n}\n@interface Pooches4 {\n    Class<?>[] tokens();\n    int[] other();\n}"
    }
  ]
}