{
  "name": "RegexpSinglelineJava",
  "language": "java",
  "description": "<div>\n Checks that a specified pattern matches a single-line in Java files.\n </div>\n\n <p>\n This class is variation on\n <a href=\"https://checkstyle.org/checks/regexp/regexpsingleline.html#RegexpSingleline\">\n RegexpSingleline</a>\n for detecting single-lines that match a supplied regular expression in Java files.\n It supports suppressing matches in Java comments.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 66,
  "branches": 5,
  "apis": 27,
  "test": [
    {
      "description": "Auto test from InputRegexpSinglelineJavaSemantic.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        75
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexpsinglelinejava;\nimport java.awt.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nclass InputRegexpSinglelineJavaSemantic\n{\n    static {\n        Boolean x = new Boolean(true);\n    }\n    {\n        Boolean x = new Boolean(true);\n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) { \n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpSinglelineJavaSemantic2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        76
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexpsinglelinejava;\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nclass InputRegexpSinglelineJavaSemantic2\n{\n    static {\n        Boolean x = new Boolean(true);\n    }\n    {\n        Boolean x = new Boolean(true);\n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) { \n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpSinglelineJavaSemantic3.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        76
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexpsinglelinejava;\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nclass InputRegexpSinglelineJavaSemantic3\n{\n    static {\n        Boolean x = new Boolean(true);\n    }\n    {\n        Boolean x = new Boolean(true);\n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) { \n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpSinglelineJavaTrailingComment2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexpsinglelinejava;\npublic class InputRegexpSinglelineJavaTrailingComment2 { \n    int i; \n    int j; \n    void method1() { /* some c-style multi-line\n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            }); \n    } \n    void method2(long ms ) {\n    }\n    final static public String NAME=\"Some Name\"; \n}"
    },
    {
      "description": "Auto test from InputRegexpSinglelineJavaTrailingComment4.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexpsinglelinejava;\npublic class InputRegexpSinglelineJavaTrailingComment4 {\n    int i; \n    int j; \n    void method1() { /* some c-style multi-line\n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            }); \n    } \n    void method2(long ms ) {\n    }\n    final static public String NAME=\"Some Name\"; \n}"
    },
    {
      "description": "Auto test from InputRegexpSinglelineJavaTrailingComment8.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexpsinglelinejava;\npublic class InputRegexpSinglelineJavaTrailingComment8 {\n    int i; \n    int j; \n    void method1() { /* some c-style multi-line\n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            }); \n    } \n    void method2(long ms ) { \n    }\n    final static public String NAME=\"Some Name\"; \n}"
    },
    {
      "description": "Auto test from InputRegexpSinglelineJavaTrailingComment9.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexpsinglelinejava;\npublic class InputRegexpSinglelineJavaTrailingComment9 {\n    int i; \n    int j; \n    void method1() { /* some c-style multi-line\n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            }); \n    } \n    void method2(long ms ) {\n    }\n    final static public String NAME=\"Some Name\"; \n}"
    }
  ]
}