{
  "name": "Regexp",
  "language": "java",
  "description": "<div>\n Checks that a specified pattern exists, exists less than\n a set number of times, or does not exist in the file.\n </div>\n\n <p>\n This check combines all the functionality provided by\n <a href=\"https://checkstyle.org/checks/header/regexpheader.html#RegexpHeader\">RegexpHeader</a>\n except supplying the regular expression from a file.\n </p>\n\n <p>\n It differs from them in that it works in multiline mode. Its regular expression\n can span multiple lines and it checks this against the whole file at once.\n The others work in single-line mode. Their single or multiple regular expressions\n can only span one line. They check each of these against each line in the file in turn.\n </p>\n\n <p>\n <b>Note:</b> Because of the different mode of operation there may be some\n changes in the regular expressions used to achieve a particular end.\n </p>\n\n <p>\n In multiline mode...\n </p>\n <ul>\n <li>\n {@code ^} means the beginning of a line, as opposed to beginning of the input.\n </li>\n <li>\n For beginning of the input use {@code \\A}.\n </li>\n <li>\n {@code $} means the end of a line, as opposed to the end of the input.\n </li>\n <li>\n For end of input use {@code \\Z}.\n </li>\n <li>\n Each line in the file is terminated with a line feed character.\n </li>\n </ul>\n\n <p>\n <b>Note:</b> Not all regular expression engines are created equal.\n Some provide extra functions that others do not and some elements\n of the syntax may vary. This check makes use of the\n <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/package-summary.html\">\n java.util.regex package</a>; please check its documentation for details\n of how to construct a regular expression to achieve a particular goal.\n </p>\n\n <p>\n <b>Note:</b> When entering a regular expression as a parameter in\n the XML config file you must also take into account the XML rules. e.g.\n if you want to match a &lt; symbol you need to enter &amp;lt;.\n The regular expression should be entered on one line.\n </p>\n\n <p>\n <b>Note:</b> To search for parentheses () in a regular expression\n you must escape them like \\(\\). This is required by the regexp engine,\n otherwise it will think they are special instruction characters.\n </p>\n\n <p>\n <b>Note:</b> To search for things that mean something in XML, like\n &lt; you need to escape them like &amp;lt;. This is required so the\n XML parser does not act on them, but instead passes the correct\n character to the regexp engine.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 129,
  "branches": 13,
  "apis": 33,
  "test": [
    {
      "description": "Auto test from InputRegexpCheckB1.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        10
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\nimport java.awt.*; \npublic class InputRegexpCheckB1 {\n}"
    },
    {
      "description": "Auto test from InputRegexpCheckB2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        10
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\nimport java.awt.*; \npublic class InputRegexpCheckB2 {\n}"
    },
    {
      "description": "Auto test from InputRegexpSemantic10.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        76
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\nimport java.awt.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nclass InputRegexpSemantic10\n{\n    static {\n        Boolean x = new Boolean(true);\n    }\n    {\n        Boolean x = new Boolean(true);\n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) {\n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpSemantic11.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        76
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\nimport java.awt.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nclass InputRegexpSemantic11\n{\n    static {\n        Boolean x = new Boolean(true);\n    }\n    {\n        Boolean x = new Boolean(true);\n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) {\n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpSemantic12.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        76
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\nimport java.awt.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nclass InputRegexpSemantic12\n{\n    static {\n        Boolean x = new Boolean(true);\n    }\n    {\n        Boolean x = new Boolean(true);\n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) {\n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpSemantic13.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        76
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\nimport java.awt.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nclass InputRegexpSemantic13\n{\n    static {\n        Boolean x = new Boolean(true);\n    }\n    {\n        Boolean x = new Boolean(true);\n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) {\n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpSemantic5.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        26,
        31
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\nimport java.awt.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nclass InputRegexpSemantic5\n{\n    static {\n        Boolean x = new Boolean(true); \n    }\n    {\n        Boolean x = new Boolean(true); \n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) {\n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpSemantic7.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        13,
        15,
        16
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\nimport java.awt.*; \nimport java.io.ByteArrayOutputStream; \nimport java.io.File; \nclass InputRegexpSemantic7\n{\n    static {\n        Boolean x = new Boolean(true);\n    }\n    {\n        Boolean x = new Boolean(true);\n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) {\n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpSemantic8.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        13,
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\nimport java.awt.*; \nimport java.io.ByteArrayOutputStream; \nimport java.io.File;\nclass InputRegexpSemantic8\n{\n    static {\n        Boolean x = new Boolean(true);\n    }\n    {\n        Boolean x = new Boolean(true);\n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) {\n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpSemantic9.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        76
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\nimport java.awt.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nclass InputRegexpSemantic9\n{\n    static {\n        Boolean x = new Boolean(true);\n    }\n    {\n        Boolean x = new Boolean(true);\n        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};\n    }\n    Boolean getBoolean()\n    {\n        return new Boolean(true);\n    }\n    void otherInstantiations()\n    {\n        Object o1 = new InputBraces();\n        Object o2 = new InputModifier();\n        ByteArrayOutputStream s = new ByteArrayOutputStream();\n        File f = new File(\"/tmp\");\n        Dimension dim = new Dimension();\n        Color col = new Color(0, 0, 0);\n    }\n    void exHandlerTest()\n    {\n        try {\n            ; \n        }\n        catch (IllegalStateException emptyCatchIsAlwaysAnError) {\n        }\n        catch (NullPointerException ex) {\n        }\n        catch (ArrayIndexOutOfBoundsException ex) {\n            ;\n        }\n        catch (NegativeArraySizeException ex) {\n            {\n            }\n        }\n        catch (UnsupportedOperationException handledException) {\n            System.out.println(handledException.getMessage());\n        }\n        catch (SecurityException ex) {  }\n        catch (StringIndexOutOfBoundsException ex) {}\n        catch (IllegalArgumentException ex) { }\n        try {\n        }\n        finally {\n        }\n        try {\n        }\n        finally {\n        }\n        try {\n            ; \n        }\n        finally {\n            ; \n        }\n    }\n    private static final long IGNORE = 666l + 666L;\n    public class EqualsVsHashCode1\n    {\n        public boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode2\n    {\n        public boolean equals(String a) \n        {\n            return true;\n        }\n    }\n    public class EqualsVsHashCode3\n    {\n        public boolean equals(Object a) \n        {\n            return true;\n        }\n        public int hashCode()\n        {\n            return 0;\n        }\n    }\n    public class EqualsVsHashCode4\n    {\n        ByteArrayOutputStream bos1 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n            public int hashCode()\n            {\n                return 0;\n            }\n        };\n        ByteArrayOutputStream bos2 = new ByteArrayOutputStream()\n        {\n            public boolean equals(Object a) \n            {\n                return true;\n            }\n        };\n    }\n    public void triggerEmptyBlockWithoutBlock()\n    {\n        if (true)\n            return;\n    }\n    {\n    }\n    public class EqualsVsHashCode5\n    {\n        public <A> boolean equals(int a) \n        {\n            return a == 1;\n        }\n    }\n    public class EqualsVsHashCode6\n    {\n        public <A> boolean equals(Comparable<A> a) \n        {\n            return true;\n        }\n    }\n    private class InputBraces {\n    }\n    private class InputModifier {\n    }\n    synchronized void foo() {\n        synchronized (this) {} \n        synchronized (Class.class) {\n            synchronized (new Object()) {\n            }\n        }\n    }\n    static {\n    int a = 0;}\n    static {\n    }\n}"
    },
    {
      "description": "Auto test from InputRegexpTrailingComment2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\npublic class InputRegexpTrailingComment2 {\n    int i; \n    int j; \n    void method1() { /* some c-style multi-line\n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            }); \n    } \n    void method2(long ms ) {\n    }\n    final static public String NAME=\"Some Name\"; \n}"
    },
    {
      "description": "Auto test from InputRegexpTrailingComment4.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\npublic class InputRegexpTrailingComment4 {\n    int i; \n    int j; \n    void method1() { /* some c-style multi-line\n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            }); \n    } \n    void method2(long ms ) {\n    }\n    final static public String NAME=\"Some Name\"; \n}"
    },
    {
      "description": "Auto test from InputRegexpTrailingComment8.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\npublic class InputRegexpTrailingComment8 {\n    int i; \n    int j; \n    void method1() { /* some c-style multi-line\n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            }); \n    } \n    void method2(long ms ) {\n    }\n    final static public String NAME=\"Some Name\"; \n}"
    },
    {
      "description": "Auto test from InputRegexpTrailingComment9.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.regexp.regexp;\npublic class InputRegexpTrailingComment9 {\n    int i; \n    int j; \n    void method1() { /* some c-style multi-line\n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            }); \n    } \n    void method2(long ms ) {\n    }\n    final static public String NAME=\"Some Name\"; \n}"
    }
  ]
}