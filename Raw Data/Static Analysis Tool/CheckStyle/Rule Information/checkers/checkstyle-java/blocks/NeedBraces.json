{
  "name": "NeedBraces",
  "language": "java",
  "description": "<div>\n Checks for braces around code blocks.\n </div>\n\n <p>\n Attention: The break in case blocks is not counted to allow compact view.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 207,
  "branches": 28,
  "apis": 38,
  "test": [
    {
      "description": "Auto test from InputNeedBracesLoopBodyFalse.java",
      "expected-problems": 17,
      "expected-linenumbers": [
        18,
        22,
        26,
        27,
        31,
        36,
        41,
        47,
        53,
        58,
        62,
        68,
        75,
        97,
        101,
        105,
        116
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\npublic class InputNeedBracesLoopBodyFalse {\n    private int value;\n    private InputNeedBracesLoopBodyFalse fco = new InputNeedBracesLoopBodyFalse();\n    {\n        value = 0;\n        while(incrementValue() < 5);; \n    }\n    public void foo() {\n        while(incrementValue() < 5); \n    }\n    public void foo2() {\n        for(int i = 0; i < 10; incrementValue()); \n        for(int i = 0; incrementValue() < 8; i++); \n    }\n    public void foo3() {\n        while(incrementValue() \n            < 5);\n    }\n    public void foo4() {\n        while(incrementValue() < 5) \n            ;\n    }\n    public void foo5() {\n        while(incrementValue() \n            < 5)\n            ;\n    }\n    public void foo6() {\n        while( \n            incrementValue() < 5\n            );\n    }\n    public void foo7() {\n        while( \n            incrementValue() < 5);\n    }\n    public void foo8() {\n        for(int i = 0; incrementValue() < 8; i++); \n    }\n    public void foo9() {\n        for(int i = 0; \n            incrementValue() < 8;\n            i++);\n    }\n    public void foo10() {\n        for( \n            int i = 0;\n            incrementValue() < 8;\n            i++);\n    }\n    public void foo11() {\n        for \n            (\n            int i = 0;\n            incrementValue() < 8;\n            i++\n            )\n            ;\n    }\n    public void foo12() {\n        for (int i = 0; incrementValue() < 8; i++) {\n            int a = 5;\n        }\n    }\n    public void foo14() {\n        while (incrementValue() < 5) {\n            return;\n        }\n    }\n    public void foo15() {\n        while (true); \n    }\n    public void foo16() {\n        for (;;); \n    }\n    public void foo17() {\n        if(true); \n    }\n    public void foo18() {\n        if(true) {\n            int a;\n        }\n    }\n    @Override\n    public String toString(){\n        while(fco.removeAssignedRole(this)); \n        return \"\";\n    }\n    private boolean removeAssignedRole(InputNeedBracesLoopBodyFalse inputNeedBracesNoBodyLoops) {\n        return true;\n    }\n    private int incrementValue() {\n        return value++;\n    }\n    private void decrementValue() {\n        value--;\n    }\n}"
    },
    {
      "description": "Auto test from InputNeedBracesLoopBodyTrue.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        105
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\npublic class InputNeedBracesLoopBodyTrue {\n    private int value;\n    private InputNeedBracesLoopBodyTrue fco = new InputNeedBracesLoopBodyTrue();\n    {\n        value = 0;\n        while(incrementValue() < 5);;\n    }\n    public void foo() {\n        while(incrementValue() < 5);\n    }\n    public void foo2() {\n        for(int i = 0; i < 10; incrementValue());\n        for(int i = 0; incrementValue() < 8; i++);\n    }\n    public void foo3() {\n        while(incrementValue()\n            < 5);\n    }\n    public void foo4() {\n        while(incrementValue() < 5)\n            ;\n    }\n    public void foo5() {\n        while(incrementValue()\n            < 5)\n            ;\n    }\n    public void foo6() {\n        while(\n            incrementValue() < 5\n            );\n    }\n    public void foo7() {\n        while(\n            incrementValue() < 5);\n    }\n    public void foo8() {\n        for(int i = 0; incrementValue() < 8; i++);\n    }\n    public void foo9() {\n        for(int i = 0;\n            incrementValue() < 8;\n            i++);\n    }\n    public void foo10() {\n        for(\n            int i = 0;\n            incrementValue() < 8;\n            i++);\n    }\n    public void foo11() {\n        for\n            (\n            int i = 0;\n            incrementValue() < 8;\n            i++\n            )\n            ;\n    }\n    public void foo12() {\n        for (int i = 0; incrementValue() < 8; i++) {\n            int a = 5;\n        }\n    }\n    public void foo14() {\n        while (incrementValue() < 5) {\n            return;\n        }\n    }\n    public void foo15() {\n        while (true);\n    }\n    public void foo16() {\n        for (;;);\n    }\n    public void foo17() {\n        if(true); \n    }\n    public void foo18() {\n        if(true) {\n            int a;\n        }\n    }\n    @Override\n    public String toString(){\n        while(fco.removeAssignedRole(this));\n        return \"\";\n    }\n    private boolean removeAssignedRole(InputNeedBracesLoopBodyTrue inputNeedBracesNoBodyLoops) {\n        return true;\n    }\n    private int incrementValue() {\n        return value++;\n    }\n    private void decrementValue() {\n        value--;\n    }\n}"
    },
    {
      "description": "Auto test from InputNeedBracesSingleLineStatements.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        31,
        37,
        47,
        55,
        62,
        65,
        71,
        100,
        104,
        116,
        124
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\npublic class InputNeedBracesSingleLineStatements\n{\n    private static class SomeClass {\n        boolean flag = true;\n        private static boolean test(boolean k) {\n            return k;\n        }\n    }\n    private int foo() {\n        if (SomeClass.test(true) == true) return 4; \n        return 0;\n    }\n    private int foo1() {\n        if (SomeClass.test(true)) return 4; int k = 3; \n        return 0;\n    }\n    private int foo2() {\n        if (SomeClass.test(true) == true) \n            return 4;\n        return 0;\n    }\n    private int foo3() {\n        if (SomeClass.test(true) == true) if (true) return 4;\n        return 0;\n    }\n    private void foo(Object o) {\n        if (o != null) this.notify();\n    }\n    private void foo2(Object o) {\n        if (o != null) \n            this.notify();\n    }\n    private void loopTest(Object o) {\n        while (o != null) {\n            this.notify();\n        }\n        while (o != null) \n            this.notify();\n        while (o != null) this.notify();\n        do {\n            this.notify();\n        } while (o != null);\n        do this.notify(); while (o != null);\n        do \n            this.notify();\n        while (o != null);\n        for (;;) \n            break;\n        for (;;) break;\n        for (int i = 0; i < 10; i++) {\n             this.notify();\n        }\n        for (int i = 0; i < 10; i++) \n             this.notify();\n        for (int i = 0; ; ) this.notify();\n    }\n    private int getSmth(int num)\n    {\n        int counter = 0;\n        switch (num) {\n            case 1: counter++; break;\n            case 2:\n                counter += 2;\n                break;\n            case 3:\n                counter += 3;\n                break;\n            case 6: counter += 10; break;\n            default: counter = 100; break;\n        }\n        return counter;\n    }\n    private void testElse(int k) {\n        if (k == 4) System.identityHashCode(\"yes\");\n        else System.identityHashCode(\"no\");\n        for (;;);\n    }\n    private int testMissingWarnings() {\n        if (true) \n            throw new RuntimeException();\n        if (true) {\n            return 1;\n        } else \n            return 2;\n    }\n    void enhancedForLoop(int[] array) {\n        for (int value: array) return;\n    }\n    int[] sourceLocators;\n    private class StateInfo {\n        public boolean isInitial() {\n            for (int locator: sourceLocators) if (locator != 0) return false;\n            return true;\n        }\n    }\n    private void forEachLoop() {\n        for (String s: new String[]{\"\"}) break;\n        for (String s: new String[]{\"\"}) \n            break;\n        for (;;)\n        ;\n    }\n    private void method(){\n        if(false) {\n            switch (0) {\n                case -1:\n                    return;\n                default:\n                    return;\n            }\n        }\n        switch(1){\n            case 1: return;\n            default: throw new RuntimeException(\"\");\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputNeedBracesTestCaseDefaultNoSingleLine.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        17,
        18,
        21,
        24,
        32,
        33
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\npublic class InputNeedBracesTestCaseDefaultNoSingleLine {\n    public String aMethod(int val) {\n        switch (val){\n        default:\n        case 0:\n        case -1: break; \n        case -2: Math.random(); \n        }\n        switch (val){\n        default: break; \n        }\n        switch (val){\n        default: Math.random(); \n        }\n        switch (val){\n        case 1: {}\n        default:\n        }\n        if(false) {\n            switch (1) {\n                case 1: return \"1\"; \n                default: return \"2\"; \n                case 0: {return \"2\";}\n                case 2: {break;}\n            }\n        }\n        switch (val) {\n        case 0: {\n            return \"zero\";\n        }\n        case 1: {\n            return \"one\";\n        }\n        default: {\n            return \"non-binary\";\n        }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputNeedBracesTestConditions.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        48,
        51,
        64
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\npublic class InputNeedBracesTestConditions\n{\n    public void method() {\n        if (false)\n            while(true)\n            {\n            }\n        if (true)\n            do {\n                int a = 1;\n            }\n            while(true);\n        if (true)\n            for(;;){\n             assert true;}\n        if (true){\n        }else {\n        }\n        switch(1) {\n            case 1: {\n                break;\n            }\n        }\n        switch(1) {\n        case 1:  System.lineSeparator();\n        case 2: { break;}\n        case 3: {\n            break;}\n        case 4: \n            break;\n        case 5:  System.lineSeparator(); \n            break;\n        }\n        switch(1) {\n            default:\n            {\n            }\n        }\n        switch(1) {\n        default: \n         break;\n    }\n    }\n}"
    },
    {
      "description": "Auto test from InputNeedBracesTestIt.java",
      "expected-problems": 23,
      "expected-linenumbers": [
        27,
        39,
        42,
        44,
        45,
        56,
        59,
        61,
        63,
        80,
        83,
        85,
        87,
        89,
        97,
        99,
        100,
        102,
        104,
        105,
        106,
        107,
        108
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\nclass InputNeedBracesTestIt\n{\n    boolean condition()\n    {\n        return false;\n    }\n    void testDoWhile()\n    {\n        do {\n            testDoWhile();\n        }\n        while (condition());\n        do testDoWhile(); while (condition()); \n    }\n    void testWhile()\n    {\n        while (condition()) {\n            testWhile();\n        }\n        while(condition()); \n        while (condition()) \n            testWhile();\n        while (condition()) \n            if (condition()) \n                testWhile();\n    }\n    void testFor()\n    {\n        for (int i = 1; i < 5; i++) {\n            testFor();\n        }\n        for(int i = 1;i < 5;i++); \n        for (int i = 1; i < 5; i++) \n            testFor();\n        for (int i = 1; i < 5; \n             i++)\n            if (i > 2) \n                testFor();\n    }\n    public void testIf()\n    {\n        if (condition()) {\n            testIf();\n        }\n        else if (condition()) {\n            testIf();\n        }\n        else {\n            testIf();\n        }\n        if (condition()); \n        if (condition()) \n            testIf();\n        if (condition()) \n            testIf();\n        else \n            testIf();\n        if (condition()) \n            testIf();\n        else {\n            testIf();\n        }\n        if (condition()) {\n            testIf();\n        }\n        else \n            testIf();\n        if (condition()) \n            if (condition()) \n                testIf();\n        if (condition()) \n            while (condition()) testWhile(); \n        if (condition()) \n            do testDoWhile(); while (condition()); \n        if (condition()) \n            for (int i = 0; i < 1; i++) testFor(); \n        int a = 0;\n        switch (a) {default: {}}\n    }\n    void whitespaceAfterSemi()\n    {\n        int i = 1;int j = 2;\n        for (;;) {\n        }\n    }\n    public InputNeedBracesTestIt() {}\n    public void emptyImplementation() {}\n}"
    },
    {
      "description": "Auto test from InputNeedBracesTestItWithAllowsOn.java",
      "expected-problems": 18,
      "expected-linenumbers": [
        43,
        46,
        60,
        62,
        64,
        84,
        86,
        88,
        90,
        98,
        100,
        101,
        103,
        105,
        106,
        107,
        108,
        109
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\nclass InputNeedBracesTestItWithAllowsOn\n{\n    boolean condition()\n    {\n        return false;\n    }\n    void testDoWhile()\n    {\n        do {\n            testDoWhile();\n        }\n        while (condition());\n        do testDoWhile(); while (condition());\n    }\n    void testWhile()\n    {\n        while (condition()) {\n            testWhile();\n        }\n        while(condition());\n        while (condition()) \n            testWhile();\n        while (condition())\n            if (condition()) \n                testWhile();\n    }\n    void testFor()\n    {\n        for (int i = 1; i < 5; i++) {\n            testFor();\n        }\n        for(int i = 1;i < 5;i++);\n        for (int i = 1; i < 5; i++) \n            testFor();\n        for (int i = 1; i < 5; \n             i++)\n            if (i > 2) \n                testFor();\n    }\n    public void testIf()\n    {\n        if (condition()) {\n            testIf();\n        }\n        else if (condition()) {\n            testIf();\n        }\n        else {\n            testIf();\n        }\n        if (condition());\n        if (condition()) \n            testIf();\n        if (condition()) \n            testIf();\n        else \n            testIf();\n        if (condition()) \n            testIf();\n        else {\n            testIf();\n        }\n        if (condition()) {\n            testIf();\n        }\n        else \n            testIf();\n        if (condition()) \n            if (condition()) \n                testIf();\n        if (condition()) \n            while (condition()) testWhile(); \n        if (condition()) \n            do testDoWhile(); while (condition()); \n        if (condition()) \n            for (int i = 0; i < 1; i++) testFor(); \n        int a = 0;\n        switch (a) {default: {}}\n    }\n    void whitespaceAfterSemi()\n    {\n        int i = 1;int j = 2;\n        for (;;) {\n        }\n    }\n    public InputNeedBracesTestItWithAllowsOn() {}\n    public void emptyImplementation() {}\n    public void method() {\n        if (true\n            || true || true) return;\n    }\n}"
    },
    {
      "description": "Auto test from InputNeedBracesTestNotAllowSingleLineLambda.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        12,
        15,
        17,
        20,
        25,
        27
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\npublic class InputNeedBracesTestNotAllowSingleLineLambda {\n    static Runnable r1 = ()->String.CASE_INSENSITIVE_ORDER.equals(\"Hello world one!\");\n    static Runnable r2 = () -> String.CASE_INSENSITIVE_ORDER.equals(\"Hello world two!\");\n    static Runnable r3 = () -> \n        String.CASE_INSENSITIVE_ORDER.equals(\"Hello world two!\");\n    static Runnable r4 = () -> {String.CASE_INSENSITIVE_ORDER.equals(\"Hello world two!\");};\n    Runnable r5 = () -> java.util.Objects.hash(1, 2, \n        3,4);\n    Runnable r6 = () -> {java.util.Objects.hash(1, 2,\n        3,4);};\n    {\n        java.util.concurrent.CompletableFuture.runAsync(() -> System.out.println(\n            (Runnable) () -> System.out.println( \n                123)));\n    }\n    {\n        java.util.concurrent.CompletableFuture.runAsync(() -> {System.out.println(\n            (Runnable) () -> {System.out.println(\n                123);});});\n    }\n}"
    },
    {
      "description": "Auto test from InputNeedBracesTestSingleLineCaseDefault.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        80,
        83,
        130,
        132
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\npublic class InputNeedBracesTestSingleLineCaseDefault\n{\n    private static class SomeClass {\n        boolean flag = true;\n        private static boolean test(boolean k) {\n            return k;\n        }\n    }\n    private int foo() {\n        if (SomeClass.test(true) == true) return 4; \n        return 0;\n    }\n    private int foo1() {\n        if (SomeClass.test(true)) return 4; int k = 3; \n        return 0;\n    }\n    private int foo2() {\n        if (SomeClass.test(true) == true)\n            return 4;\n        return 0;\n    }\n    private int foo3() {\n        if (SomeClass.test(true) == true) if (true) return 4;\n        return 0;\n    }\n    private void foo(Object o) {\n        if (o != null) this.notify();\n    }\n    private void foo2(Object o) {\n        if (o != null)\n            this.notify();\n    }\n    private void loopTest(Object o) {\n        while (o != null) {\n            this.notify();\n        }\n        while (o != null)\n            this.notify();\n        while (o != null) this.notify();\n        do {\n            this.notify();\n        } while (o != null);\n        do this.notify(); while (o != null);\n        do\n            this.notify();\n        while (o != null);\n        for (;;)\n            break;\n        for (;;) break;\n        for (int i = 0; i < 10; i++) {\n             this.notify();\n        }\n        for (int i = 0; i < 10; i++)\n             this.notify();\n        for (int i = 0; ; ) this.notify();\n    }\n    private int getSmth(int num)\n    {\n        int counter = 0;\n        switch (num) {\n            case 1: counter++; break;\n            case 2: \n                counter += 2;\n                break;\n            case 3: \n                counter += 3;\n                break;\n            case 6: counter += 10; break;\n            default: counter = 100; break;\n        }\n        return counter;\n    }\n    private void testElse(int k) {\n        if (k == 4) System.identityHashCode(\"yes\");\n        else System.identityHashCode(\"no\");\n        for (;;);\n    }\n    private int testMissingWarnings() {\n        if (true)\n            throw new RuntimeException();\n        if (true) {\n            return 1;\n        } else\n            return 2;\n    }\n    void enhancedForLoop(int[] array) {\n        for (int value: array) return;\n    }\n    int[] sourceLocators;\n    private class StateInfo {\n        public boolean isInitial() {\n            for (int locator: sourceLocators) if (locator != 0) return false;\n            return true;\n        }\n    }\n    private void forEachLoop() {\n        for (String s: new String[]{\"\"}) break;\n        for (String s: new String[]{\"\"})\n            break;\n        for (;;)\n        ;\n    }\n    private void method(){\n        if(false) {\n            switch (0) {\n                case -1: \n                    return;\n                default: \n                    return;\n            }\n        }\n        switch(1){\n            case 1: return;\n            default: throw new RuntimeException(\"\");\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputNeedBracesTestSingleLineLambda.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        15,
        18,
        23,
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\npublic class InputNeedBracesTestSingleLineLambda {\n    static Runnable r1 = ()->String.CASE_INSENSITIVE_ORDER.equals(\"Hello world one!\");\n    static Runnable r2 = () -> String.CASE_INSENSITIVE_ORDER.equals(\"Hello world two!\");\n    static Runnable r3 = () -> \n        String.CASE_INSENSITIVE_ORDER.equals(\"Hello world two!\");\n    static Runnable r4 = () -> {String.CASE_INSENSITIVE_ORDER.equals(\"Hello world two!\");};\n    Runnable r5 = () -> java.util.Objects.hash(1, 2, \n        3,4);\n    Runnable r6 = () -> {java.util.Objects.hash(1, 2,\n        3,4);};\n    {\n        java.util.concurrent.CompletableFuture.runAsync(() -> System.out.println(\n            (Runnable) () -> System.out.println( \n                123)));\n    }\n    {\n        java.util.concurrent.CompletableFuture.runAsync(() -> {System.out.println(\n            (Runnable) () -> {System.out.println(\n                123);});});\n    }\n}"
    },
    {
      "description": "Auto test from InputNeedBracesTestSwitchExpression.java",
      "expected-problems": 15,
      "expected-linenumbers": [
        15,
        17,
        19,
        21,
        24,
        32,
        34,
        37,
        40,
        48,
        49,
        52,
        54,
        57,
        72
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\npublic class InputNeedBracesTestSwitchExpression {\n    void howMany1(NumsTwo k) {\n        switch (k) {\n            case ONE: \n                System.out.println(\"case two\");\n                MathOperationTwo case5 = (a, b) -> \n                        (a + b);\n            case TWO, THREE: \n                System.out.println(\"case two\");\n            case FOUR: \n                System.out.println(\"case three\");\n            default: \n                throw new IllegalStateException(\"Not a nums\");\n        }\n    }\n    void howMany2(NumsTwo k) {\n        switch (k) { \n            case ONE -> \n                    System.out.println(\"case one\");\n            case TWO, THREE -> \n                    System.out.println(\"case two\");\n            case FOUR -> \n                    System.out.println(\"case three\");\n            default -> \n                    throw new IllegalStateException(\"Not a nums\");\n        }\n    }\n    int howMany3(NumsTwo k) {\n        return switch (k) {\n            case ONE: \n                MathOperationTwo case5 = (a, b) -> \n                        (a + b);\n                yield 3;\n            case TWO, THREE: \n                yield 5;\n            case FOUR: \n                yield 9;\n            default: \n                throw new IllegalStateException(\"Not a Nums\");\n        };\n    }\n    int howMany4(NumsTwo k) {\n        return switch (k) {\n            case ONE -> {\n                yield 4;\n            }\n            case TWO, THREE -> {\n                MathOperationTwo case5 = (a, b) -> \n                        (a + b);\n                yield 42;\n            }\n            case FOUR -> {\n                yield 99;\n            }\n            default -> throw new IllegalStateException(\"Not a Nums\");\n        };\n    }\n    int howMany5(NumsTwo k) {\n        return switch (k) {\n            case ONE -> 1; \n            case TWO, THREE -> 3; \n            case FOUR -> 4; \n            default -> {throw new IllegalStateException(\"Not a Nums\");}\n        };\n    }\n    void howMany6(NumsTwo k) {\n        switch (k) {\n            case ONE: System.out.println(\"case two\");\n            case TWO, THREE: System.out.println(\"case two\");\n            case FOUR: System.out.println(\"case three\");\n            default: throw new IllegalStateException(\"Not a nums\");\n        }\n    }\n    void howMany7(NumsTwo k) {\n        switch (k) {\n            case ONE -> System.out.println(\"case one\");\n            case TWO, THREE -> System.out.println(\"case two\");\n            case FOUR -> System.out.println(\"case three\");\n            default -> throw new IllegalStateException(\"Not a nums\");\n        }\n    }\n}\nenum NumsTwo {ONE, TWO, THREE, FOUR}\ninterface MathOperationTwo {\n    int operation(int a, int b);\n}"
    },
    {
      "description": "Auto test from InputNeedBracesTestSwitchExpressionNoSingleLine.java",
      "expected-problems": 19,
      "expected-linenumbers": [
        15,
        17,
        19,
        21,
        24,
        32,
        34,
        37,
        40,
        48,
        49,
        52,
        54,
        57,
        72,
        79,
        87,
        88,
        89
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.needbraces;\npublic class InputNeedBracesTestSwitchExpressionNoSingleLine {\n    void howMany1(NumsOne k) {\n        switch (k) {\n            case ONE: \n                System.out.println(\"case two\");\n                MathOperationOne case5 = (a, b) -> \n                    (a + b);\n            case TWO, THREE: \n                System.out.println(\"case two\");\n            case FOUR: \n                System.out.println(\"case three\");\n            default: \n                throw new IllegalStateException(\"Not a nums\");\n        }\n    }\n    void howMany2(NumsOne k) {\n        switch (k) { \n            case ONE -> \n                System.out.println(\"case one\");\n            case TWO, THREE -> \n                System.out.println(\"case two\");\n            case FOUR -> \n                System.out.println(\"case three\");\n            default -> \n                throw new IllegalStateException(\"Not a nums\");\n        }\n    }\n    int howMany3(NumsOne k) {\n        return switch (k) {\n            case ONE: \n                MathOperationOne case5 = (a, b) -> \n                    (a + b);\n                yield 3;\n            case TWO, THREE: \n                yield 5;\n            case FOUR: \n                yield 9;\n            default: \n                throw new IllegalStateException(\"Not a Nums\");\n        };\n    }\n    int howMany4(NumsOne k) {\n        return switch (k) {\n            case ONE -> {\n                yield 4;\n            }\n            case TWO, THREE -> {\n                MathOperationOne case5 = (a, b) -> \n                    (a + b);\n                yield 42;\n            }\n            case FOUR -> {\n                yield 99;\n            }\n            default -> throw new IllegalStateException(\"Not a Nums\");\n        };\n    }\n    int howMany5(NumsOne k) {\n        return switch (k) {\n            case ONE -> 1; \n            case TWO, THREE -> 3; \n            case FOUR -> 4; \n            default -> {\n                throw new IllegalStateException(\"Not a Nums\");\n            }\n        };\n    }\n}\nenum NumsOne {ONE, TWO, THREE, FOUR}\ninterface MathOperationOne {\n    int operation(int a, int b);\n}"
    }
  ]
}