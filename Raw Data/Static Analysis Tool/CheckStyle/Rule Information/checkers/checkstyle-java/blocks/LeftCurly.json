{
  "name": "LeftCurly",
  "language": "java",
  "description": "<div>\n Checks for the placement of left curly braces (<code>'{'</code>) for code blocks.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 214,
  "branches": 53,
  "apis": 33,
  "test": [
    {
      "description": "Auto test from InputLeftCurlyCommentBeforeLeftCurly.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        31
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nimport java.io.IOException;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.regex.Pattern;\npublic class InputLeftCurlyCommentBeforeLeftCurly {\n    void method1 ()\n    InputLeftCurlyCommentBeforeLeftCurly()\n        System.out.println(\"Hello CheckStyle\");\n    }\n    InputLeftCurlyCommentBeforeLeftCurly(String name)\n    { \n        System.out.println(\"I am int\" + name);\n    }\n    private void some() throws Exception {\n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException ex)\n        }\n    }\n    public void multipleBlock()\n    }\n    private class Node {\n        int value;\n        Node next;\n        public\n            this.value=value;\n        }\n        public Node(int value, Node next)\n            this.value = value;\n            this.next = next;\n        }\n    }\n    public void array() {\n        Integer[] array = null;\n        }\n    }\n}\nclass checks implements check\n    public static Set<String> processJavadocTag() {\n        final Set<String> references = new HashSet<>();\n        final String identifier = references.toString();\n        for (Pattern pattern : new Pattern[]\n                {Pattern.compile(\".*\"), Pattern.compile(\".*\")}) {\n        }\n        return references;\n    }\n    class C {\n        void method1 ()\n        void method2 ()\n        }\n    private void method() {\n        String b = \"üßêüßêüßêccvb\";\n        if (b.equals(\"üßêüßê\")) {\n        }\n        if (b.equals(\"süßêdüßêa\")) {\n        }\n        while (b == \"üòÇü•≥\") {  }\n    }\n}\ninterface check {\n}\n        Integer[] array = null;\n        }\n        return line;\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyCommentBeforeLeftCurly2.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        53,
        65
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nimport org.junit.jupiter.api.function.ThrowingConsumer;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.*;\nimport java.util.List;\npublic class InputLeftCurlyCommentBeforeLeftCurly2 {\n    private long[] countList;\n    void method1() /* comment\n    comment */ { \n    }\n    void method2() /********\n    comment */ {\n        if (!Arrays.equals(this.countList, countList)\n        }\n    }\n    void method3() /*****\n    ********/ { } \n    InputLeftCurlyCommentBeforeLeftCurly2()  { }\n    InputLeftCurlyCommentBeforeLeftCurly2(int data) /*\n     ****** comment *********/ { } \n}\nclass Class {\n    private\n    class Node {\n        int data;\n        Node next;\n        Node(int data) \n        { \n            this.data = data;\n        }\n    }\n    String s = \"üßê  üßê\";\n    private void foo3(String s) {\n        }\n    }\n    List<ThrowingConsumer<InetSocketAddress>> targets = List.of(\n                Socket s = new Socket();\n            }\n    );\n}\nclass Nothing {\n    void method() {\n        int a = 9;int b = 9;\n        if(a == 0 && b == 0\n    }\n    public void test2(String\n    }\n    public void test3(String line) {\n        int index=0;\n        if (line.regionMatches(index, \"/**\", 0, \"/**\".length())) {\n            index += 2;\n        }\n        else if (line.regionMatches(index, \"*/\", 0, 2)) {\n            index++;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyDefaultTestNl.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        35,
        39,
        44,
        48,
        53,
        58,
        63,
        65,
        67,
        68
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyDefaultTestNl\n{\n    private interface PrivateInterface\n    {\n    }\n    interface PackageInnerInterface\n    {\n    }\n    protected interface ProtectedInnerInterface\n    {\n    }\n    public interface PublicInnerInterface\n    {\n    }\n    private\n    class\n    MyClass1 { \n    }\n    class\n    MyClass2 { \n    }\n    private\n    interface\n    MyInterface1 { \n    }\n    interface\n    MyInterface2 { \n    }\n    protected\n    enum\n    MyEnum { \n    }\n    private\n    @interface\n    MyAnnotation { \n    }\n    @Deprecated\n    public\n    class MyClass3 { \n    }\n    public class MyClass4 { \n        void method() { \n            while(true) {} \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyDefaultTestNlow.java",
      "expected-problems": 12,
      "expected-linenumbers": [
        16,
        18,
        22,
        26,
        30,
        35,
        39,
        44,
        48,
        53,
        58,
        63
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyDefaultTestNlow\n{ \n    private interface PrivateInterface\n    { \n    }\n    interface PackageInnerInterface\n    { \n    }\n    protected interface ProtectedInnerInterface\n    { \n    }\n    public interface PublicInnerInterface\n    { \n    }\n    private\n    class\n    MyClass1 { \n    }\n    class\n    MyClass2 { \n    }\n    private\n    interface\n    MyInterface1 { \n    }\n    interface\n    MyInterface2 { \n    }\n    protected\n    enum\n    MyEnum { \n    }\n    private\n    @interface\n    MyAnnotation { \n    }\n    @Deprecated\n    public\n    class MyClass3 { \n    }\n    public class MyClass4 {\n        void method() {\n            while(true) {}\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyEnumConstantDef.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        13,
        18
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic enum InputLeftCurlyEnumConstantDef {\n    FIRST()\n    { \n    },\n    SECOND\n        ()\n    { \n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyIgnoreEnumsOptFalse.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        16,
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyIgnoreEnumsOptFalse {\n    enum Colors {RED, \n        BLUE,\n        GREEN;\n        @Override public String toString() { return \"\"; };\n    }\n    enum Languages {\n        JAVA,\n        PHP,\n        SCALA,\n        C,\n        PASCAL\n    }\n    void method1(int a) {\n        switch (a) {case 1: ; }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyIgnoreEnumsOptTrue.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyIgnoreEnumsOptTrue {\n    enum Colors {RED,\n        BLUE,\n        GREEN;\n        @Override public String toString() { return \"\"; };\n    }\n    enum Languages {\n        JAVA,\n        PHP,\n        SCALA,\n        C,\n        PASCAL\n    }\n    void method1(int a) {\n        switch (a) {case 1: ; }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyMethod.java",
      "expected-problems": 15,
      "expected-linenumbers": [
        16,
        21,
        28,
        31,
        35,
        43,
        45,
        50,
        53,
        57,
        69,
        73,
        81,
        84,
        88
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nclass InputLeftCurlyMethod\n{ \n    InputLeftCurlyMethod() {}\n    InputLeftCurlyMethod(String aOne) {\n    }\n    InputLeftCurlyMethod(int aOne)\n    { \n    }\n    void method1() {}\n    void method2() {\n    }\n    void method3()\n    { \n    }\n    void                                                               method4()\n    { \n    }\n    void method5(String aOne,\n                 String aTwo)\n    { \n    }\n    void method6(String aOne,\n                 String aTwo) {\n    }\n}\nenum InputLeftCurlyMethodEnum\n{ \n    CONSTANT1(\"hello\")\n    { \n        void method1() {}\n        void method2() {\n        }\n        void method3()\n        { \n        }\n        void                                                               method4()\n        { \n        }\n        void method5(String aOne,\n                     String aTwo)\n        { \n        }\n        void method6(String aOne,\n                     String aTwo) {\n        }\n    },\n    CONSTANT2(\"hello\") {\n    },\n    CONSTANT3(\"hellohellohellohellohellohellohellohellohellohellohellohellohellohello\")\n    { \n    };\n    private InputLeftCurlyMethodEnum(String value)\n    { \n    }\n    void method1() {}\n    void method2() {\n    }\n    void method3()\n    { \n    }\n    void                                                               method4()\n    { \n    }\n    void method5(String aOne,\n                 String aTwo)\n    { \n    }\n    void method6(String aOne,\n                 String aTwo) {\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyMethodTestNewLine2.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        18,
        25,
        38,
        47,
        60,
        63,
        78,
        91
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nclass InputLeftCurlyMethodTestNewLine2\n{\n    void InputLeftCurlyMethod() {}\n    void InputLeftCurlyMethod(String aOne) { \n    }\n    void InputLeftCurlyMethod(int aOne)\n    {\n    }\n    void method1() {}\n    void method2() { \n    }\n    void method3()\n    {\n    }\n    void                                                               method4()\n    {\n    }\n    void method5(String aOne,\n                 String aTwo)\n    {\n    }\n    void method6(String aOne,\n                 String aTwo) { \n    }\n}\nenum InputLeftCurlyMethodEnumTestNewLine2\n{\n    CONSTANT1()\n    {\n        void method1() {}\n        void method2() { \n        }\n        void method3()\n        {\n        }\n        void                                                               method4()\n        {\n        }\n        void method5(String aOne,\n                     String aTwo)\n        {\n        }\n        void method6(String aOne,\n                     String aTwo) { \n        }\n    },\n    CONSTANT2() { \n    },\n    CONSTANT3()\n    {\n    };\n    private void InputLeftCurlyMethodEnum(String value)\n    {\n    }\n    void method1() {}\n    void method2() { \n    }\n    void method3()\n    {\n    }\n    void                                                               method4()\n    {\n    }\n    void method5(String aOne,\n                 String aTwo)\n    {\n    }\n    void method6(String aOne,\n                 String aTwo) { \n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestCoverageIncrease.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        20,
        29,
        38,
        47,
        61,
        66,
        70,
        75,
        80
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyTestCoverageIncrease {\n    private interface PrivateInterface\n    { \n        public String CA = \"CONST A\";\n        String CB = \"CONST b\";\n        public void ma();\n        void mb();\n    }\n    interface PackageInnerInterface\n    { \n        public String CA = \"CONST A\";\n        String CB = \"CONST b\";\n        public void ma();\n        void mb();\n    }\n    protected interface ProtectedInnerInterface\n    { \n        public String CA = \"CONST A\";\n        String CB = \"CONST b\";\n        public void ma();\n        void mb();\n    }\n    public interface PublicInnerInterface\n    { \n        public String CA = \"CONST A\";\n        String CB = \"CONST b\";\n        public void ma();\n        void mb();\n    }\n    private\n    class\n MyClass1\n  {\n    }\n    class\n    MyClass2 { \n    }\n    private\n    interface\n    MyInterface1 { \n    }\n    interface\n    MyInterface2 { \n    }\n    protected\n    enum\n    MyEnum { \n    }\n    private\n    @interface\n    MyAnnotation { \n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestDefault.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        16,
        18,
        22,
        26,
        30
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyTestDefault\n{ \n    private interface PrivateInterface\n    { \n    }\n    interface PackageInnerInterface\n    { \n    }\n    protected interface ProtectedInnerInterface\n    { \n    }\n    public interface PublicInnerInterface\n    { \n    }\n    private\n    class\n    MyClass1 {\n    }\n    class\n    MyClass2 {\n    }\n    private\n    interface\n    MyInterface1 {\n    }\n    interface\n    MyInterface2 {\n    }\n    protected\n    enum\n    MyEnum {\n    }\n    private\n    @interface\n    MyAnnotation {\n    }\n    @Deprecated\n    public\n    class MyClass3 {\n    }\n    public class MyClass4 {\n        void method() {\n            while(true) {}\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestDefault3.java",
      "expected-problems": 26,
      "expected-linenumbers": [
        16,
        19,
        23,
        25,
        27,
        34,
        38,
        46,
        50,
        56,
        58,
        67,
        80,
        87,
        93,
        99,
        110,
        113,
        122,
        124,
        133,
        135,
        137,
        152,
        161,
        168
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nclass InputLeftCurlyTestDefault3\n{ \n    int foo() throws InterruptedException\n    { \n        int x = 1;\n        int a = 2;\n        while (true)\n        { \n            try\n            { \n                if (x > 0)\n                { \n                    break;\n                }\n                else if (x < 0) {\n                    ;\n                }\n                else\n                { \n                    break;\n                }\n                switch (a)\n                { \n                case 0:\n                    break;\n                default:\n                    break;\n                }\n            }\n            catch (Exception e)\n            { \n                break;\n            }\n            finally\n            { \n                break;\n            }\n        }\n        synchronized (this)\n        { \n            do\n            { \n                x = 2;\n            } while (x == 2);\n        }\n        this.wait(666\n                 ); \n        for (int k = 0; k < 1; k++)\n        { \n            String innerBlockVariable = \"\";\n        }\n        if (System.currentTimeMillis() > 1000)\n            return 1;\n        else\n            return 2;\n    }\n    static\n    { \n        int x = 1; \n    }\n    public enum GreetingsEnum\n    { \n        HELLO,\n        GOODBYE\n    };\n    void method2()\n    { \n        boolean flag = true;\n        if (flag) {\n            System.identityHashCode(\"heh\");\n            flag = !flag; } String.CASE_INSENSITIVE_ORDER.\n              equals(\"Xe-xe\");\n        if (flag) { String.CASE_INSENSITIVE_ORDER.equals(\"it is ok.\"); }\n    }\n}\nclass FooCtor\n{ \n        int i;\n        public FooCtor()\n    { \n                i = 1;\n    }}\nclass FooMethod\n{ \n        public void fooMethod()\n    { \n                int i = 1;\n    }}\nclass FooInner\n{ \n        class InnerFoo\n    { \n                public void fooInnerMethod ()\n        { \n                }\n    }}\nclass Absent_CustomFieldSerializer3 {\n    public static void serialize() {} \n}\nclass Absent_CustomFieldSerializer4\n{ \n    public Absent_CustomFieldSerializer4() {}\n}\nclass EmptyClass2 {}\ninterface EmptyInterface3 {}\nclass ClassWithStaticInitializers\n{ \n    static {\n    }\n    static\n    {}\n    static class Inner\n    { \n        static {\n            int i = 1;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestDefaultLambda.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        16,
        22,
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyTestDefaultLambda\n{ \n    static Runnable r1 = () -> {\n        String.valueOf(\"Hello world one!\");\n    };\n    static Runnable r2 = () -> String.valueOf(\"Hello world two!\");\n    static Runnable r3 = () -> {String.valueOf(\"ok\");};\n    static Runnable r4 = () ->\n    { \n        String.valueOf(\"Hello world one!\");\n    };\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestDefaultWithAnnotations.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        22,
        26,
        33,
        39,
        62,
        70
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Target;\nimport java.util.ArrayList;\nimport java.util.List;\n@TestClassAnnotation\nclass InputLeftCurlyTestDefaultWithAnnotations\n{ \n    private static final int X = 10;\n    @Override\n    public boolean equals(Object other)\n    { \n        return false;\n    }\n    @Override\n    @SuppressWarnings(\"unused\")\n    public int hashCode()\n    { \n        int a = 10;\n        return 1;\n    }\n    @Override @SuppressWarnings({\"unused\", \"unchecked\", \"static-access\"}) public String toString()\n    { \n        Integer i = this.X;\n        List<String> l = new ArrayList();\n        return \"SomeString\";\n    }\n}\n@TestClassAnnotation\n class InputLeftCurlyAnnotations2 {\n    private static final int X = 10;\n    @Override\n    public boolean equals(Object other) {\n        return false;\n    }\n    @Override\n    @SuppressWarnings(\"unused\")\n    public int hashCode() {\n        int a = 10;\n        return 1;\n    }\n    @Override @SuppressWarnings({\"unused\", \"unchecked\", \"static-access\"}) public String toString()\n    { \n        Integer i = this.X;\n        List<String> l = new ArrayList();\n        return \"SomeString\";\n    }\n    @Deprecated\n    @SuppressWarnings({\"unused\", \"unchecked\", \"static-access\"}) public String toString2()\n    { \n        Integer i = this.X;\n        List<String> l = new ArrayList();\n        return \"SomeString\";\n    }\n}\n@Target(ElementType.TYPE)\n@interface TestClassAnnotation {\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestEolSwitch.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        21,
        25,
        32,
        46,
        51
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyTestEolSwitch {\n    public void doStuff() {\n        int x = 1;\n        switch (x) {\n            case 0:\n            { \n                break;\n            }\n            case (1+0):\n            { \n                break;\n            }\n            case 2: {\n                break;\n            }\n            default:\n            { \n                break;\n            }\n            case 3:\n            case 4:\n                x++;\n                { \n                }\n                break;\n            case 5: {\n                }\n                break;\n            case (5\n                +1):\n            { \n                break;\n            }\n            case 7\n                :\n            { \n                break;\n            }\n        }\n        switch (x) {\n            case 0: {\n                break;\n            }\n            default:\n        }\n    }\n    public @interface SomeAnnotation {\n        String value() default \"\";\n    }\n    public interface SomeInterface {\n        default String method() {\n            return null;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestLineBreakAfter.java",
      "expected-problems": 14,
      "expected-linenumbers": [
        21,
        24,
        28,
        30,
        32,
        38,
        40,
        47,
        48,
        56,
        62,
        66,
        68,
        78
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Target;\nimport java.util.ArrayList;\nimport java.util.List;\nclass InputLeftCurlyTestLineBreakAfter\n{ \n    int foo() throws InterruptedException\n    { \n        int x = 1;\n        int a = 2;\n        while (true)\n        { \n            try\n            { \n                if (x > 0)\n                { \n                    break;\n                }\n                else if (x < 0) {\n                    ;\n                }\n                else { break; } \n                switch (a)\n                { \n                case 0:\n                    break;\n                default:\n                    break;\n                }\n            }\n            catch (Exception e) { ; } \n            finally { break; } \n        }\n        synchronized (this) { do { x = 2; } while (x == 2); } \n        synchronized (this) {\n            do {} while (x == 2);\n        }\n        for (int k = 0; k < 1; k++) { String innerBlockVariable = \"\"; }\n        for (int k = 0; k < 1; k++) {}\n                return a;\n    }\n    static { int x = 1; } \n    void method2()\n    { \n        boolean flag = false;\n        if (flag) { int k = 0; } \n    }\n}\nclass Absent_CustomFieldSerializer1 {\n    public static void serialize() {}\n}\nclass Absent_CustomFieldSerializer2\n{ \n    public Absent_CustomFieldSerializer2() {}\n}\nclass EmptyClass1 {}\ninterface EmptyInterface1 {}\nenum KnownOrder { KNOWN_ORDER, UNKNOWN_ORDER }"
    },
    {
      "description": "Auto test from InputLeftCurlyTestMissingBraces.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        16,
        19,
        25,
        38,
        55,
        73,
        109
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nclass InputLeftCurlyTestMissingBraces\n{ \n    boolean condition()\n    { \n        return false;\n    }\n    void testDoWhile()\n    { \n        do {\n            testDoWhile();\n        }\n        while (condition());\n        do testDoWhile(); while (condition());\n    }\n    void testWhile()\n    { \n        while (condition()) {\n            testWhile();\n        }\n        while(condition());\n        while (condition())\n            testWhile();\n        while (condition())\n            if (condition())\n                testWhile();\n    }\n    void testFor()\n    { \n        for (int i = 1; i < 5; i++) {\n            testFor();\n        }\n        for(int i = 1;i < 5;i++);\n        for (int i = 1; i < 5; i++)\n            testFor();\n        for (int i = 1; i < 5;\n             i++)\n            if (i > 2)\n                testFor();\n    }\n    public void testIf()\n    { \n        if (condition()) {\n            testIf();\n        }\n        else if (condition()) {\n            testIf();\n        }\n        else {\n            testIf();\n        }\n        if (condition());\n        if (condition())\n            testIf();\n        if (condition())\n            testIf();\n        else\n            testIf();\n        if (condition())\n            testIf();\n        else {\n            testIf();\n        }\n        if (condition()) {\n            testIf();\n        }\n        else\n            testIf();\n        if (condition())\n            if (condition())\n                testIf();\n    }\n    void whitespaceAfterSemi()\n    { \n        int i = 1;int j = 2;\n        for (;;) {\n        }\n    }\n    public InputLeftCurlyTestMissingBraces() {}\n    public void emptyImplementation() {}\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestNewLine3.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        30,
        95,
        99,
        147,
        162,
        169
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nclass InputLeftCurlyTestNewLine3\n{\n    int foo() throws InterruptedException\n    {\n        int x = 1;\n        int a = 2;\n        while (true)\n        {\n            try\n            {\n                if (x > 0)\n                {\n                    break;\n                }\n                else if (x < 0) { \n                    ;\n                }\n                else\n                {\n                    break;\n                }\n                switch (a)\n                {\n                case 0:\n                    break;\n                default:\n                    break;\n                }\n            }\n            catch (Exception e)\n            {\n                break;\n            }\n            finally\n            {\n                break;\n            }\n        }\n        synchronized (this)\n        {\n            do\n            {\n                x = 2;\n            } while (x == 2);\n        }\n        this.wait(666\n                 ); \n        for (int k = 0; k < 1; k++)\n        {\n            String innerBlockVariable = \"\";\n        }\n        if (System.currentTimeMillis() > 1000)\n            return 1;\n        else\n            return 2;\n    }\n    static\n    {\n        int x = 1; \n    }\n    public enum GreetingsEnum\n    {\n        HELLO,\n        GOODBYE\n    };\n    void method2()\n    {\n        boolean flag = true;\n        if (flag) { \n            System.identityHashCode(\"heh\");\n            flag = !flag; } String.CASE_INSENSITIVE_ORDER.\n              equals(\"Xe-xe\");\n        if (flag) { String.valueOf(\"ok\"); } \n    }\n}\nclass FooCtorTestNewLine3\n{\n        int i;\n        public void FooCtor()\n    {\n                i = 1;\n    }}\nclass FooMethodTestNewLine3\n{\n        public void fooMethod()\n    {\n                int i = 1;\n    }}\nclass FooInnerTestNewLine3\n{\n        class InnerFoo\n    {\n                public void fooInnerMethod ()\n        {\n                }\n    }}\nclass Absent_CustomFieldSerializer3TestNewLine3 {\n    public static void serialize() {} \n}\nclass Absent_CustomFieldSerializer4TestNewLine3\n{\n    public void Absent_CustomFieldSerializer4() {}\n}\nclass EmptyClass2TestNewLine3 {}\ninterface EmptyInterface3TestNewLine3 {}\nclass ClassWithStaticInitializersTestNewLine3\n{\n    static { \n    }\n    static\n    {}\n    static class Inner\n    {\n        static { \n            int i = 1;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestNewLineOptionWithLambda.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        17,
        22
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyTestNewLineOptionWithLambda\n{\n    static Runnable r1 = () -> { \n        String.valueOf(\"Hello world one!\");\n    };\n    static Runnable r2 = () -> String.valueOf(\"Hello world two!\");\n    static Runnable r3 = () -> {String.valueOf(\"ok\");};\n    static Runnable r4 = () ->\n    {\n        String.valueOf(\"Hello world one!\");\n    };\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestNlowSwitch.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        21
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyTestNlowSwitch {\n    public void doStuff() {\n        int x = 1;\n        switch (x) {\n            case 0:\n            { \n                break;\n            }\n            case (1\n                + 0):\n            { \n                break;\n            }\n            case 2: {\n                break;\n            }\n            default\n                :\n            { \n                break;\n            }\n            case 3:\n            case 4:\n                x++;\n                { \n                }\n                break;\n            case 5: {\n                    x++;\n                }\n                x++;\n                break;\n        }\n        switch (x) {\n            case\n                0:\n            { \n                break;\n            }\n            default:\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestNlowWithAnnotations.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        22,
        26,
        33,
        39,
        62,
        70
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Target;\nimport java.util.ArrayList;\nimport java.util.List;\n@TestClassAnnotation\nclass InputLeftCurlyTestNlowWithAnnotations\n{ \n    private static final int X = 10;\n    @Override\n    public boolean equals(Object other)\n    { \n        return false;\n    }\n    @Override\n    @SuppressWarnings(\"unused\")\n    public int hashCode()\n    { \n        int a = 10;\n        return 1;\n    }\n    @Override @SuppressWarnings({\"unused\", \"unchecked\", \"static-access\"}) public String toString()\n    { \n        Integer i = this.X;\n        List<String> l = new ArrayList();\n        return \"SomeString\";\n    }\n}\n@TestClassAnnotation\nclass InputLeftCurlyAnnotations2TestNlowWithAnnotations {\n    private static final int X = 10;\n    @Override\n    public boolean equals(Object other) {\n        return false;\n    }\n    @Override\n    @SuppressWarnings(\"unused\")\n    public int hashCode() {\n        int a = 10;\n        return 1;\n    }\n    @Override @SuppressWarnings({\"unused\", \"unchecked\", \"static-access\"}) public String toString()\n    { \n        Integer i = this.X;\n        List<String> l = new ArrayList();\n        return \"SomeString\";\n    }\n    @Deprecated\n    @SuppressWarnings({\"unused\", \"unchecked\", \"static-access\"}) public String toString2()\n    { \n        Integer i = this.X;\n        List<String> l = new ArrayList();\n        return \"SomeString\";\n    }\n}\n@Target(ElementType.TYPE)\n@interface TestClassTestNlowWithAnnotation {\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestNlSwitch.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        23,
        55
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyTestNlSwitch\n{\n    public void doStuff()\n    {\n        int x = 1;\n        switch (x)\n        {\n            case 0: { \n                break;\n            }\n            case (1\n                + 0):\n            {\n                break;\n            }\n            case 2:\n            {\n                break;\n            }\n            default\n                :\n            {\n                break;\n            }\n            case 3:\n            case 4:\n                x++; { \n                }\n                break;\n            case 5:\n                {\n                    x++;\n                }\n                x++;\n                break;\n        }\n        switch (x)\n        {\n            case 0\n            :{ \n                break;\n            }\n            default:\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestNlWithAnnotations.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        45,
        50,
        56,
        78
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Target;\nimport java.util.ArrayList;\nimport java.util.List;\n@TestClassAnnotation\nclass InputLeftCurlyTestNlWithAnnotations\n{\n    private static final int X = 10;\n    @Override\n    public boolean equals(Object other)\n    {\n        return false;\n    }\n    @Override\n    @SuppressWarnings(\"unused\")\n    public int hashCode()\n    {\n        int a = 10;\n        return 1;\n    }\n    @Override @SuppressWarnings({\"unused\", \"unchecked\", \"static-access\"}) public String toString()\n    {\n        Integer i = this.X;\n        List<String> l = new ArrayList();\n        return \"SomeString\";\n    }\n}\n@TestClassAnnotation \nclass InputLeftCurlyAnnotations2TestNlWithAnnotations {\n    private static final int X = 10;\n    @Override\n    public boolean equals(Object other) { \n        return false;\n    }\n    @Override\n    @SuppressWarnings(\"unused\")\n    public int hashCode() { \n        int a = 10;\n        return 1;\n    }\n    @Override @SuppressWarnings({\"unused\", \"unchecked\", \"static-access\"}) public String toString()\n    {\n        Integer i = this.X;\n        List<String> l = new ArrayList();\n        return \"SomeString\";\n    }\n    @Deprecated\n    @SuppressWarnings({\"unused\", \"unchecked\", \"static-access\"}) public String toString2()\n    {\n        Integer i = this.X;\n        List<String> l = new ArrayList();\n        return \"SomeString\";\n    }\n}\n@Target(ElementType.TYPE)\n@interface TestClassTestNlWithAnnotation { \n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestRecordsAndCompactCtors.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        21,
        23,
        33,
        35,
        42,
        55
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\nimport org.w3c.dom.Node;\npublic class InputLeftCurlyTestRecordsAndCompactCtors {\n    record MyTestRecord(String string, Record rec)\n    { \n        private boolean inRecord(Object obj)\n        { \n            int value = 0;\n            if (obj instanceof Integer i) {\n                value = i;\n            }\n            return value > 10;\n        }\n    }\n    record MyTestRecord2()\n    { \n        MyTestRecord2(String one, String two, String three)\n    { \n            this();\n        }\n    }\n    record MyTestRecord3(Integer i, Node node) {\n        public MyTestRecord3\n        { \n            int x = 5;\n        }\n        public static void main(String... args) {\n            System.out.println(\"works!\");\n        }\n    }\n    record MyTestRecord4() {\n    }\n    record MyTestRecord5()\n    { \n        static MyTestRecord mtr =\n                new MyTestRecord(\"my string\", new MyTestRecord4());\n    }\n    class MyTestClass {\n        private MyTestRecord mtr =\n                new MyTestRecord(\"my string\", new MyTestRecord4());\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestSwitchExpressions.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        19,
        21,
        26,
        31,
        35,
        44,
        46,
        50,
        54,
        58
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyTestSwitchExpressions {\n    int howMany1(int k) {\n        switch (k)\n        { \n            case 1:\n                { \n            }\n            case 2:\n                { \n            }\n            case 3:\n                { \n            }\n            default:\n                {   \n            }\n        }\n        return k;\n    }\n    int howMany2(int k) {\n        return switch (k)\n                { \n            case 1 ->\n                    { \n                yield 2;\n            }\n            case 2 ->\n                    { \n                yield 3;\n            }\n            case 3 ->\n                    { \n                yield 4;\n            }\n            default ->\n                    { \n                yield k;\n            }\n        };\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyTestSwitchExpressionsNewLine.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        15,
        17,
        41,
        53
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyTestSwitchExpressionsNewLine {\n    int howMany1(int k) { \n        switch (k)\n        {\n            case 1:\n                {\n            }\n            case 2:\n                {\n            }\n            case 3:\n                {\n            }\n            default:\n                {\n            }\n        }\n        return k;\n    }\n    int howMany2(int k) { \n        return switch (k)\n                {\n            case 1 ->\n                    {\n                yield 2;\n            }\n            case 2 ->\n                    {\n                yield 3;\n            }\n            case 3 -> { \n                yield 4;\n            }\n            default ->\n                    {\n                yield k;\n            }\n        };\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyWithEmoji.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        17,
        36,
        38,
        45,
        49,
        53,
        59,
        66,
        71,
        77,
        80
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyWithEmoji {\n    static Runnable r1 = () -> {String.valueOf(\"ü•≥ üéÑ!\");};\n    private void method() {\n        String a = \"üßêüßêüßê\";\n        String b = \"üßêüßêüßêccvb\";\n        if (b.equals(\"üßêüßê\")) {\n        }\n        if (b.equals(\"süßêdüßêa\")) {\n        }\n        while (b == \"üòÇü•≥\") {  }\n    }\n    private void method2() {\n        String x = \"üéÑü§£\";\n        try\n        { \n            if (x.equals(\"üéÑü§£\"))\n            { \n            }\n            else if (!x.equals(\"üéÑü§£\")) {\n                ;\n            }\n            else\n            { \n            }\n            switch (x)\n            { \n                case \"\\uD83C\\uDF84\\uD83E\\uDD23\":\n                    break;\n                default:\n                { \n                    break;\n                }\n            }\n            if (x.equals(\"üéÑü§£üéÑ     ü§£\"))  switch (\"ü§£üéÑü§£üéÑü§£\") {\n                    case \"qw\": { return; } \n                    default: {\n                        return;\n                    }\n                }\n        }\n        catch (Exception e)\n        { \n        }\n    }\n}\n    enum InputLeftCurlyMethodEnumWithEmoji\n    { \n        CONSTANT1(\"üßêüßêdsdsüßê\") {\n            void method1() {}\n            void method2() {\n            }\n            void method3()\n            { \n            }\n            void                                         method4()\n            { \n            }\n        };\n        private InputLeftCurlyMethodEnumWithEmoji (String s) {\n        }\n    }"
    },
    {
      "description": "Auto test from InputLeftCurlyWithEmojiNl.java",
      "expected-problems": 13,
      "expected-linenumbers": [
        18,
        18,
        24,
        27,
        29,
        32,
        42,
        58,
        60,
        74,
        75,
        76,
        89
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyWithEmojiNl\n{\n    static Runnable r1 = () -> {String.valueOf(\"ü•≥üéÑ!\");};\n    private void method() { \n        String a = \"üßêüßêüßê\";\n        String b = \"üßêüßêüßêccvb\";\n        if (b.equals(\"üßêüßê\")) { \n        }\n        if (b.equals(\"süßêdüßêa\")) { \n        }\n        while (b == \"üßêüßêüßê\") { } \n    }\n    private void method2() { \n        String x = \"üéÑü§£\";\n        try\n        {\n            if (x.equals(\"üéÑü§£\"))\n            {\n            }\n            else if (!x.equals(\"üéÑü§£\")) { \n                ;\n            }\n            else\n            {\n            }\n            switch (x)\n            {\n                case \"ü§£ü§£ü§£\":\n                    break;\n                default:\n                {\n                    break;\n                }\n            }\n            switch(\"ü§£ü§£ü§£\") { \n                case \"qw\": {return; } \n                default:\n                {\n                    return;\n                }\n            }\n        }\n        catch (Exception e)\n        {\n        }\n    }\n}\nenum InputLeftCurlyMethodEnumWithEmojiNl\n{\n    CONSTANT1(\"üßêüßêdsdsüßê\") { \n        String method1() { return \"sdsüßê\"; } \n        void method2() { \n        }\n        String method3()\n        {\n            return \"sdsüßê\";\n        }\n        boolean                                                              method4()\n        {\n            return \"sdsüßê\".equals(\"üßêüßêdsdsüßê\");\n        }\n    };\n    InputLeftCurlyMethodEnumWithEmojiNl (String b) {\n    }\n}"
    },
    {
      "description": "Auto test from InputLeftCurlyWithTrimOptionProperty.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        11,
        19
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.leftcurly;\npublic class InputLeftCurlyWithTrimOptionProperty {\n    static { \n    }\n    static\n    {}\n    static class Inner\n    {\n        static { \n            int i = 1;\n        }\n    }\n}"
    }
  ]
}