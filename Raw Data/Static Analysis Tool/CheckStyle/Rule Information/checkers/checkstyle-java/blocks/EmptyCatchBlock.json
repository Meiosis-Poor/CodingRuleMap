{
  "name": "EmptyCatchBlock",
  "language": "java",
  "description": "<div>\n Checks for empty catch blocks.\n By default, check allows empty catch block with any comment inside.\n </div>\n\n <p>\n There are two options to make validation more precise: <b>exceptionVariableName</b> and\n <b>commentFormat</b>.\n If both options are specified - they are applied by <b>any of them is matching</b>.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 95,
  "branches": 10,
  "apis": 27,
  "test": [
    {
      "description": "Auto test from InputEmptyCatchBlockDefault.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        24,
        32
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.emptycatchblock;\nimport java.io.IOException;\npublic class InputEmptyCatchBlockDefault\n{\n    private void foo() {\n        try {\n            throw new RuntimeException();\n        } catch (Exception expected) {\n        }\n    }\n    private void foo1() {\n        try {\n            throw new RuntimeException();\n        } catch (Exception e) {} \n    }\n    private void foo2() {\n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException ignore) {\n        } \n    }\n    private void foo3() { \n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException e) { \n        }\n    }\n    private void foo4() {\n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException e) { \n        }\n    }\n    private void foo5() {\n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException e) { \n        }\n    }\n    private void foo6() {\n        try {\n            throw new IOException();\n        } catch (IOException expected) { \n            int k = 0;\n        }\n    }\n    public void testTryCatch()\n    {\n        try {\n            int y=0;\n            int u=8;\n            int e=u-y;\n            return;\n        }\n        catch (Exception e) {\n            System.identityHashCode(e);\n            return;\n        }\n        finally\n        {\n            return;\n        }\n    }\n    public void testTryCatch2()\n    {\n        try {\n        }\n        catch (Exception e) {\n        }\n        finally\n        {\n        }\n    }\n    public void testTryCatch3()\n    {\n        try {\n            int y=0;\n            int u=8;\n            int e=u-y;\n        }\n        catch (IllegalArgumentException e) {\n            System.identityHashCode(e); \n            return;\n        }\n        catch (IllegalStateException ex) {\n                System.identityHashCode(ex);\n                return;\n        }\n    }\n    public void testTryCatch4()\n    {\n        int y=0;\n        int u=8;\n        try {\n            int e=u-y;\n        }\n        catch (IllegalArgumentException e) {\n            System.identityHashCode(e);\n            return;\n        }\n    }\n    public void setFormats() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null)\n                k = \"ss\";\n            else {\n                return;\n            }\n        }\n    }\n    public void setFormats1() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null) {\n                k = \"ss\";\n            } else {\n                return;\n            }\n        }\n    }\n    public void setFormats2() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null) {\n                k = \"ss\";\n                return;\n            }\n        }\n    }\n    public void setFormats3() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null) {\n                k = \"ss\";\n            }\n        }\n    }\n    private void some() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n    private void some1() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n    private void some2() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n    private void some3() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n    private void some4() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n    private void some5() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n    private void emptyMultilineComment() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputEmptyCatchBlockDefault2.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        25,
        54,
        87,
        176,
        185,
        204,
        220,
        229
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.emptycatchblock;\nimport java.io.IOException;\npublic class InputEmptyCatchBlockDefault2\n{\n    private void foo() {\n        try {\n            throw new RuntimeException();\n        } catch (Exception expected) {\n        }\n    }\n    private void foo1() {\n        try {\n            throw new RuntimeException();\n        } catch (Exception e) {} \n    }\n    private void foo2() {\n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException ignore) {\n        }\n    }\n    private void foo3() { \n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException e) { \n        }\n    }\n    private void foo4() {\n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException e) { \n        }\n    }\n    private void foo5() {\n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException e) {\n        } \n    }\n    private void foo6() {\n        try {\n            throw new IOException();\n        } catch (IOException expected) { \n            int k = 0;\n        }\n    }\n    public void testTryCatch()\n    {\n        try {\n            int y=0;\n            int u=8;\n            int e=u-y;\n            return;\n        }\n        catch (Exception e) {\n            System.identityHashCode(e);\n            return;\n        }\n        finally\n        {\n            return;\n        }\n    }\n    public void testTryCatch2()\n    {\n        try {\n        }\n        catch (Exception e) { \n        }\n        finally\n        {\n        }\n    }\n    public void testTryCatch3()\n    {\n        try {\n            int y=0;\n            int u=8;\n            int e=u-y;\n        }\n        catch (IllegalArgumentException e) {\n            System.identityHashCode(e); \n            return;\n        }\n        catch (IllegalStateException ex) {\n                System.identityHashCode(ex);\n                return;\n        }\n    }\n    public void testTryCatch4()\n    {\n        int y=0;\n        int u=8;\n        try {\n            int e=u-y;\n        }\n        catch (IllegalArgumentException e) {\n            System.identityHashCode(e);\n            return;\n        }\n    }\n    public void setFormats() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null)\n                k = \"ss\";\n            else {\n                return;\n            }\n        }\n    }\n    public void setFormats1() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null) {\n                k = \"ss\";\n            } else {\n                return;\n            }\n        }\n    }\n    public void setFormats2() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null) {\n                k = \"ss\";\n                return;\n            }\n        }\n    }\n    public void setFormats3() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null) {\n                k = \"ss\";\n            }\n        }\n    }\n    private void some() {\n        try {\n            throw new IOException();\n        } catch (IOException e) { /* \n             * ololo\n             * blalba\n             */\n        }\n    }\n    private void some1() {\n        try {\n            throw new IOException();\n        } catch (IOException e) { /* \n             * lalala\n             * This is expected\n             */\n        }\n    }\n    private void some2() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n    private void some3() {\n        try {\n            throw new IOException();\n        } catch (IOException e) { \n        }\n    }\n    private void some4() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n    private void some5() {\n        try {\n            throw new IOException();\n        } catch (IOException e) { \n        }\n    }\n    private void emptyMultilineComment() {\n        try {\n            throw new IOException();\n        } catch (IOException e) { \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputEmptyCatchBlockDefaultLF.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        24,
        53,
        86,
        175,
        184,
        203,
        219,
        228
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.emptycatchblock;\nimport java.io.IOException;\npublic class InputEmptyCatchBlockDefaultLF\n{\n    private void foo() {\n        try {\n            throw new RuntimeException();\n        } catch (Exception expected) {\n        }\n    }\n    private void foo1() {\n        try {\n            throw new RuntimeException();\n        } catch (Exception e) {} \n    }\n    private void foo2() {\n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException ignore) {\n        }\n    }\n    private void foo3() { \n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException e) { \n        }\n    }\n    private void foo4() {\n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException e) { \n        }\n    }\n    private void foo5() {\n        try {\n            throw new IOException();\n        } catch (IOException | NullPointerException | ArithmeticException e) {\n        } \n    }\n    private void foo6() {\n        try {\n            throw new IOException();\n        } catch (IOException expected) { \n            int k = 0;\n        }\n    }\n    public void testTryCatch()\n    {\n        try {\n            int y=0;\n            int u=8;\n            int e=u-y;\n            return;\n        }\n        catch (Exception e) {\n            System.identityHashCode(e);\n            return;\n        }\n        finally\n        {\n            return;\n        }\n    }\n    public void testTryCatch2()\n    {\n        try {\n        }\n        catch (Exception e) {  \n        }\n        finally\n        {\n        }\n    }\n    public void testTryCatch3()\n    {\n        try {\n            int y=0;\n            int u=8;\n            int e=u-y;\n        }\n        catch (IllegalArgumentException e) {\n            System.identityHashCode(e); \n            return;\n        }\n        catch (IllegalStateException ex) {\n                System.identityHashCode(ex);\n                return;\n        }\n    }\n    public void testTryCatch4()\n    {\n        int y=0;\n        int u=8;\n        try {\n            int e=u-y;\n        }\n        catch (IllegalArgumentException e) {\n            System.identityHashCode(e);\n            return;\n        }\n    }\n    public void setFormats() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null)\n                k = \"ss\";\n            else {\n                return;\n            }\n        }\n    }\n    public void setFormats1() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null) {\n                k = \"ss\";\n            } else {\n                return;\n            }\n        }\n    }\n    public void setFormats2() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null) {\n                k = \"ss\";\n                return;\n            }\n        }\n    }\n    public void setFormats3() {\n        try {\n            int k = 4;\n        } catch (Exception e) {\n            Object k = null;\n            if (k != null) {\n                k = \"ss\";\n            }\n        }\n    }\n    private void some() {\n        try {\n            throw new IOException();\n        } catch (IOException e) { \n        }\n    }\n    private void some1() {\n        try {\n            throw new IOException();\n        } catch (IOException e) { \n        }\n    }\n    private void some2() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n    private void some3() {\n        try {\n            throw new IOException();\n        } catch (IOException e) { \n        }\n    }\n    private void some4() {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n        }\n    }\n    private void some5() {\n        try {\n            throw new IOException();\n        } catch (IOException e) { \n        }\n    }\n    private void emptyMultilineComment() {\n        try {\n            throw new IOException();\n        } catch (IOException e) { \n        }\n    }\n}"
    }
  ]
}