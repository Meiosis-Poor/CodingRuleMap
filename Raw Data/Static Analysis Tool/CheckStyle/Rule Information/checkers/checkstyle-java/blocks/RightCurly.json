{
  "name": "RightCurly",
  "language": "java",
  "description": "<div>\n Checks the placement of right curly braces (<code>'}'</code>) for code blocks. This check\n supports if-else, try-catch-finally blocks, switch statements, switch cases, while-loops,\n  for-loops, method definitions, class definitions, constructor definitions,\n instance, static initialization blocks, annotation definitions and enum definitions.\n For right curly brace of expression blocks of arrays, lambdas and class instances\n please follow issue\n <a href=\"https://github.com/checkstyle/checkstyle/issues/5945\">#5945</a>.\n For right curly brace of enum constant please follow issue\n <a href=\"https://github.com/checkstyle/checkstyle/issues/7519\">#7519</a>.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 337,
  "branches": 47,
  "apis": 56,
  "test": [
    {
      "description": "Auto test from InputRightCurlyCaseBlocksInSwitchStatementAlone.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        32,
        43,
        72,
        78,
        89,
        96,
        106
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyCaseBlocksInSwitchStatementAlone {\n    public static void test0() {\n        int mode = 0;\n        switch (mode) {\n            case 1: {\n                int x = 1;\n                break;\n            }\n            case 2:\n            default:  {\n                int x = 0;\n            }break;\n            case 3: {\n                int x = 3;\n            }\n        }\n    }\n    public static void test() {\n        int mode = 0;\n        switch (mode) {\n            case 1:{\n                int x = 1;\n                break;\n            } default :          \n                int x = 0;\n        }\n    }\n    public static void test1() {\n        int k = 0;\n        switch (k) {\n            case 1:{\n                 int x = 1;\n                 break;\n            } case 2:        \n                 int x = 2;\n                 break;\n        }\n    }\n    public static void test2() {\n         int k = 0;\n         switch (k) {\n            case 1:{\n                 int x = 1;\n                 break;\n            }\n            case 2:\n                 int x = 2;\n                 break;\n         }\n    }\n    public static void test3() {\n         int k = 0;\n         switch (k) {\n            case 1:{\n                 int x = 1;\n                 break;\n            }\n            case 2:{\n                    int x = 2;\n                    break;\n            } }      \n    }\n    public static void test4() {\n        int mode = 0;\n        switch (mode) { case 0: {int x = 1;} break; default : int x = 5; }\n    }\n    public static void test5() {\n        int mode = 0;\n        switch (mode) { case 0: }\n    }\n    public static void test6() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {int x = 1; break;}  \n            default : break;\n        }\n    }\n    public static void test7() {\n        int mode = 0;\n        switch (mode) {case 0:{int x = 1;} \n            break; default : break; }\n    }\n    public static void test8() {\n        int mode = 0;\n        int x = 0;\n        switch (mode) {\n            case 0:\n            case 1: x = 1; break;\n            case 2: {x = 1; break;} \n            default : x = 5;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyCaseBlocksInSwitchStatementAlone2.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        16,
        24,
        36,
        39,
        55,
        82,
        100
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyCaseBlocksInSwitchStatementAlone2 {\n     public static void test9() {\n        int mode = 0;\n        switch (mode) {\n            case 0: int x = 1;\n            case 1: x = 1; break;\n            case 2: {\n                x =\n            1;} default : x = 5;         \n        }\n    }\n    public static void test10() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            } case 1: int x = 1; break;    \n            case 2: {\n            }\n            default : x = 5;\n        }\n    }\n     public static void test11() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            } case 1: int x = 1; break;   \n            case 2: {\n            } default : x = 5;            \n        }\n    }\n    public static void test12() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            int x = 1; } case 1: {int x = 1;} break;  \n        }\n    }\n    public static void test13() {\n        int mode = 0;\n        switch (mode) {\n            case 0: { int x = 1;\n            } case 1: { \n            }\n            default : break;\n        }\n    }\n    public static void test14() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            } case 1: {  }         \n            default : {break;}\n        }\n    }\n    public static void test15() {\n        int mode = 0;\n        switch (mode) {case 0: { } case 1: {  } } \n    }\n    public static void test16() {\n        int mode = 0;\n        switch (mode) {\n            case 0: int x = 1; { } break;  \n            case 1: { } int y = 1; break;\n            case 2: int t = 1; { };\n        }\n    }\n    public static void test17() {\n        int mode = 0;\n        switch (mode) {\n            case 0:\n            int x = 1;\n            {  }  \n            case 1:\n            mode++;\n            {\n            } int y; \n            case 3:\n            {\n            } int z = 1;  \n        }\n    }\n    public static void test18() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            }\n            int x;\n            case 1:\n            int z;\n            {\n            }break; default: break; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyCaseBlocksInSwitchStatementAloneOrSingleline.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        32,
        43,
        72,
        78
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyCaseBlocksInSwitchStatementAloneOrSingleline {\n    public static void test0() {\n        int mode = 0;\n        switch (mode) {\n            case 1: {\n                int x = 1;\n                break;\n            }\n            case 2: {\n                int x = 0;\n                break;\n            }\n            case 3: {\n                break;\n            }\n        }\n    }\n    public static void test() {\n        int mode = 0;\n        switch (mode) {\n            case 1:{\n                int x = 1;\n                break;\n            } default :          \n                int x = 0;\n        }\n    }\n    public static void test1() {\n        int k = 0;\n        switch (k) {\n            case 1:{\n                 int x = 1;\n                 break;\n            } case 2:        \n                 int x = 2;\n                 break;\n        }\n    }\n    public static void test2() {\n         int k = 0;\n         switch (k) {\n            case 1:{\n                 int x = 1;\n                 break;\n            }\n            case 2:\n                 int x = 2;\n                 break;\n         }\n    }\n    public static void test3() {\n         int k = 0;\n         switch (k) {\n            case 1:{\n                 int x = 1;\n                 break;\n            }\n            case 2:{\n                    int x = 2;\n                    break;\n            } }      \n    }\n    public static void test4() {\n        int mode = 0;\n        switch (mode) { case 0: {int x = 1; break;} default : int x = 5; }\n    }\n    public static void test5() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; }\n    }\n    public static void test6() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {int x = 1; break;}  \n            default : break;\n        }\n    }\n    public static void test7() {\n        int mode = 0;\n        switch (mode) { case 0: {int x = 1;}     \n            break; default : break; }\n    }\n    public static void test8() {\n        int mode = 0;\n        switch (mode) {\n            case 0: int x = 1;\n            case 1: x = 1; break;\n            case 2: {x = 1; break;} \n            default : x = 5;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyCaseBlocksInSwitchStatementAloneOrSingleline2.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        17,
        25,
        37,
        41,
        50,
        69,
        79,
        98
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyCaseBlocksInSwitchStatementAloneOrSingleline2 {\n    public static void test9() {\n        int mode = 0;\n        switch (mode) {\n            case 0: int x = 1;\n            case 1: x = 1; break;\n            case 2: {\n                x =\n            1;} default : x = 5;         \n        }\n    }\n    public static void test10() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            } case 1: int x = 1; break;    \n            case 2: {\n            }\n            default : x = 5;\n        }\n    }\n     public static void test11() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            } case 1: int x = 1; break;   \n            case 2: {\n                int\n            y;} default : x = 5;         \n        }\n    }\n    public static void test12() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            int x = 1;} case 1: {int x = 1; break;}\n        }\n    }\n    public static void test13() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            }\n            case 1: {\n            }\n            default : break;\n        }\n    }\n     public static void test14() {\n        int mode = 0;\n        switch (mode) {\n            case 0: { int x = 1;\n            } case 1: {  }         \n            default : {break;}\n        }\n    }\n     public static void test15() {\n        int mode = 0;\n        switch (mode) {\n            case 0: int x = 1; { } break;\n            case 1: { } int y = 1; break; \n            case 2: int t = 1; { };\n        }\n    }\n    public static void test17() {\n        int mode = 0;\n        switch (mode) {\n            case 0:\n            int x = 1;\n            {  }\n            case 1:\n            mode++;\n            {\n            } int y; \n            case 3:\n            {\n            } int z = 1;  \n        }\n    }\n    public static void test18() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            }\n            case 1:\n            int z;\n            {\n            } break; default: break; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyCaseBlocksInSwitchStatementSame.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        31,
        43,
        72,
        78,
        105
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyCaseBlocksInSwitchStatementSame {\n    public static void test0() {\n        int mode = 0;\n        switch (mode) {\n            case 1: {\n                int x = 1;\n                break;\n            }\n            case 2: {\n                int x = 0;\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n    public static void test() {\n        int mode = 0;\n        switch (mode) {\n            case 1:{\n                int x\n            =1;} default :          \n                int x = 0;\n        }\n    }\n    public static void test1() {\n        int k = 0;\n        switch (k) {\n            case 1:{\n                 int x = 1;\n                 break;\n            } case 2:        \n                 int x = 2;\n                 break;\n        }\n    }\n    public static void test2() {\n         int k = 0;\n         switch (k) {\n            case 1:{\n                 int x = 1;\n                 break;\n            }\n            case 2:\n                 int x = 2;\n                 break;\n         }\n    }\n    public static void test3() {\n         int k = 0;\n         switch (k) {\n            case 1:{\n                 int x = 1;\n                 break;\n            }\n            case 2:{\n                    int x = 2;\n                    break;\n            } }      \n    }\n    public static void test4() {\n        int mode = 0;\n        switch (mode) { case 0: {int x = 1; break;} default : int x = 5; }\n    }\n    public static void test5() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1;}\n    }\n    public static void test6() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {int x = 1; break;}  \n            default : break;\n        }\n    }\n    public static void test7() {\n        int mode = 0;\n        switch (mode) { case 0: {int x = 1;}     \n            break; default : break; }\n    }\n    public static void test8() {\n        int mode = 0;\n        int x = 0;\n        switch (mode) {\n            case 0:{\n            int y = 1;} \n            case 1: {x = 1;\n            }\n            case 2: {x = 1; break;} \n            default : x = 5;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyCaseBlocksInSwitchStatementSame2.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        17,
        25,
        37,
        40,
        48,
        68,
        84,
        101
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyCaseBlocksInSwitchStatementSame2 {\n     public static void test9() {\n        int mode = 0;\n        switch (mode) {\n            case 0: int x = 1;\n            case 1: x = 1; break;\n            case 2: {\n                x = 1; break;\n            } default : x = 5;         \n        }\n    }\n    public static void test10() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            } case 1: int x = 1; break;    \n            case 2: {\n            }\n            default : x = 5;\n        }\n    }\n     public static void test11() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            } case 1: int x = 1; break;   \n            case 2: {\n            } default : x = 5;            \n        }\n    }\n    public static void test12() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            } case 1: {int x = 1; break;} \n        }\n    }\n    public static void test13() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            }\n            case 1: {\n            }\n            default : break;\n        }\n    }\n     public static void test14() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            } case 1: {  }         \n            default : {break;}\n        }\n    }\n    public static void test15() {\n        int mode = 0;\n        switch (mode) {case 0: { } case 1: {  } } \n    }\n    public static void test16() {\n        int mode = 0;\n        switch (mode) {\n            case 0: int x = 1; { } break;\n            case 1: { } int y = 1; break; \n            case 2: int t = 1; { };\n        }\n    }\n    public static void test17() {\n        int mode = 0;\n        switch (mode) {\n            case 0:\n            int x = 1;\n            {  }\n            case 1:\n            mode++;\n            {\n            } int y; \n            case 3:\n            {\n            } int z = 1; \n        }\n    }\n    public static void test18() {\n        int mode = 0;\n        switch (mode) {\n            case 0: {\n            }\n            int x;\n            case 1:\n            int z;\n            {\n            } break; default: break; \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyCaseBlocksWithSwitchExpressionAlone.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        62,
        85
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyCaseBlocksWithSwitchExpressionAlone {\n    int foo(int yield) {\n        return switch (yield) {\n            case 1 -> 2;\n            case 2 -> 3;\n            case 3 -> 4;\n            default -> 5;\n        };\n    }\n    void test() {\n        int x = 1;\n        String s = switch (x) {\n            case 1 -> {\n                yield \"and that's it\";\n            }  case 2 -> \"x is 2\";\n            default -> \"x is neither 1 nor 2\";\n        };\n    }\n    void test2() {\n        int x = 1;\n        String s = switch (x) {\n            case 1 -> {\n                yield \"and that's it\";\n            }  case 2 -> { yield \"x is 2\";}\n            default -> \"x is neither 1 nor 2\";\n        };\n    }\n    void test3() {\n        int x = 1;\n         String s = switch (x) {\n            case 1 -> {\n                String s1 = \"and that's it\";\n                yield s1;\n            } case 2 -> { yield \"x is 2\";}\n            default -> \"x is neither 1 nor 2\";\n        };\n    }\n    void test4() throws Exception {\n           int a = 0;\n           int b = switch (a) {\n                case 0 -> {\n                    int x = 5;\n                    int y = 6;\n                    if (a == 2) {\n                        y = 7;}   \n                    throw new Exception();\n                }  default -> 2;\n            };\n    }\n    void test5() throws Exception {\n        int a = 0;\n        int b = switch (a) {\n            case 0 -> {throw new Exception();}\n            default -> 2;\n        };\n    }\n    void test6() throws Exception {\n         int y = 0;\n         int x = 0;\n         final boolean a = switch (y) {\n             case 1 -> {x = 1; yield true;}\n             case 2 -> {\n                 x = 1;\n                 yield true;} case 3 -> {\n                 x = 1;\n                 if (x == 1) {yield true;} \n                 yield false;}\n             default -> throw new RuntimeException();\n         };\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyCaseBlocksWithSwitchExpressionAloneOrSingleline.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        62
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyCaseBlocksWithSwitchExpressionAloneOrSingleline {\n    int foo(int yield) {\n        return switch (yield) {\n            case 1 -> 2;\n            case 2 -> 3;\n            case 3 -> 4;\n            default -> 5;\n        };\n    }\n    void test() {\n        int x = 1;\n        String s = switch (x) {\n            case 1 -> {\n                yield \"and that's it\";\n            }  case 2 -> \"x is 2\";\n            default -> \"x is neither 1 nor 2\";\n        };\n    }\n    void test2() {\n        int x = 1;\n        String s = switch (x) {\n            case 1 -> {\n                yield \"and that's it\";\n            }  case 2 -> { yield \"x is 2\";}\n            default -> \"x is neither 1 nor 2\";\n        };\n    }\n    void test3() {\n        int x = 1;\n         String s = switch (x) {\n            case 1 -> {\n                String s1 = \"and that's it\";\n                yield s1;\n            } case 2 -> { yield \"x is 2\";}\n            default -> \"x is neither 1 nor 2\";\n        };\n    }\n    void test4() throws Exception {\n           int a = 0;\n           int b = switch (a) {\n                case 0 -> {\n                    int x = 5;\n                    int y = 6;\n                    if (a == 2) {\n                        y = 7;}   \n                    throw new Exception();\n                }  default -> 2;\n            };\n    }\n    void test5() throws Exception {\n        int a = 0;\n        int b = switch (a) {\n            case 0 -> {throw new Exception();}\n            default -> 2;\n        };\n    }\n    void test6() {\n         int y = 0;\n         int x = 0;\n         final boolean a = switch (y) {\n             case 1 -> {x = 1; yield true;\n             }case 2 -> {\n                 x = 1;\n                 yield true;} case 3 -> {\n                 x = 1;\n                 if (x == 1) {yield true;} \n                 yield false;\n             }\n             default -> throw new RuntimeException();\n         };\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyCaseBlocksWithSwitchRuleAlone.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        30,
        42,
        44,
        56,
        68,
        74,
        92,
        93
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyCaseBlocksWithSwitchRuleAlone {\n    public static void test0() {\n        int mode = 0;\n        switch (mode) {\n            case 1 -> {\n                int x = 1;\n            }\n            case 2 -> {\n                int x = 0;\n            }\n            case 3 -> System.out.println(\"x is 3\");\n        }\n    }\n    public static void test() {\n        int mode = 0;\n        switch (mode) {\n            case 1 -> {\n                int x = 1;\n            } default -> {          \n                int x = 0;\n            }\n        }\n    }\n    public static void test1() {\n        int k = 0;\n        switch (k) {\n            case 1 -> {\n                 int x = 1;\n            } case 2 -> {       \n                int x = 2;}     \n        }\n    }\n    public static void test2() {\n         int k = 0;\n         switch (k) {\n            case 1 -> {\n                 int x = 1;\n            }case 2 -> throw new RuntimeException();\n         }\n    }\n    public static void test3() {\n         int k = 0;\n         switch (k) {\n            case 1 -> {\n                 int x = 1;\n            }\n            case 2 -> {\n                    int x = 2;\n            } }      \n    }\n    public static void test4() {\n        int mode = 0;\n        switch (mode) { case 0 -> {int x = 1;} }\n    }\n    public static void test5() {\n        int mode = 0;\n        switch (mode) {\n            case 0 -> {\n                int x = 1;\n            } case 1 -> {int x = 2;}  \n        }\n    }\n    public static void test8() {\n        int mode = 0;\n        int x = 0;\n        switch (mode) {\n            case 0 -> throw new RuntimeException();\n            case 1 -> x = 1;\n            case 2 -> {x = 1; }      \n            case 3 -> {x = 5; } }   \n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyCaseBlocksWithSwitchRuleAloneOrSingleline.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        26,
        39,
        50,
        53,
        64,
        76,
        82,
        90,
        101
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyCaseBlocksWithSwitchRuleAloneOrSingleline {\n    public void testt0() {\n        int mode = 0;\n        switch (mode) {\n            case 1 -> {int x = 1;}   \n            case 2 -> {int x = 0;}\n            case 3 -> System.out.println(\"x is 3\");\n        }\n    }\n    public static void test0() {\n        int mode = 0;\n        switch (mode) {\n            case 1 -> {\n                int\n            x = 1;} \n            case 2 -> {\n                int x = 0;\n            }\n            case 3 -> System.out.println(\"x is 3\");\n        }\n    }\n    public static void test() {\n        int mode = 0;\n        switch (mode) {\n            case 1 -> {\n                int x = 1;\n            } default -> {          \n                int x = 0;\n            }\n        }\n    }\n    public static void test1() {\n        int k = 0;\n        switch (k) {\n            case 1 -> {\n           int x = 1; } case 2 -> {       \n                int x = 2;}     \n        }\n    }\n    public static void test2() {\n         int k = 0;\n         switch (k) {\n            case 1 -> {int x = 1;\n            }case 2 -> throw new RuntimeException();\n         }\n    }\n    public static void test3() {\n         int k = 0;\n         switch (k) {\n            case 1 -> {\n                 int x = 1;\n            }\n            case 2 -> {\n                    int x = 2;\n            } }      \n    }\n    public static void test4() {\n        int mode = 0;\n        switch (mode) { case 0 -> {int x = 1;} default -> {int x = 0;} }\n    }\n    public static void test5() {\n        int mode = 0;\n        switch (mode) {\n            case 0 -> {\n                int x = 1;\n            } case 1 -> {int x = 2;}  \n        }\n    }\n    public static void test8() {\n        int mode = 0;\n        int x = 0;\n        switch (mode) {\n            case 0 -> throw new RuntimeException();\n            case 1 -> x = 1;\n            case 2 -> {x = 1; }      \n            case 3 -> {x = 5; } }   \n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyLeftTestAlone.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        56,
        93,
        95,
        172,
        175,
        176,
        178,
        183,
        188,
        190
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nclass InputRightCurlyLeftTestAlone\n{\n    int foo() throws InterruptedException\n    {\n        int x = 1;\n        int a = 2;\n        while (true)\n        {\n            try\n            {\n                if (x > 0)\n                {\n                    break;\n                }\n                else if (x < 0) {\n                    ;\n                }\n                else\n                {\n                    break;\n                }\n                switch (a)\n                {\n                case 0:\n                    break;\n                default:\n                    break;\n                }\n            }\n            catch (Exception e)\n            {\n                break;\n            }\n            finally\n            {\n                break;\n            }\n        }\n        synchronized (this)\n        {\n            do\n            {\n                x = 2;\n            } while (x == 2); \n        }\n        this.wait(666\n                 ); \n        for (int k = 0; k < 1; k++)\n        {\n            String innerBlockVariable = \"\";\n        }\n        if (System.currentTimeMillis() > 1000)\n            return 1;\n        else\n            return 2;\n    }\n    static\n    {\n        int x = 1; \n    }\n    public enum GreetingsEnum\n    {\n        HELLO,\n        GOODBYE\n    };\n    void method2()\n    {\n        boolean flag = true;\n        if (flag) {\n            System.identityHashCode(\"heh\");\n            flag = !flag; } String. \n                CASE_INSENSITIVE_ORDER.equals(\"Xe-xe\");\n        if (flag) { String.valueOf(\"\"); } \n    }\n}\nclass FooCtorTestAlone\n{\n        int i;\n        public void FooCtor()\n    {\n                i = 1;\n    }}\nclass FooMethodTestAlone\n{\n        public void fooMethod()\n    {\n                int i = 1;\n    }}\nclass FooInnerTestAlone\n{\n        class InnerFoo\n    {\n                public void fooInnerMethod ()\n        {\n                }\n    }}\nclass Absent_CustomFieldSerializer3TestAlone {\n    public static void serialize() {}\n}\nclass Absent_CustomFieldSerializer4TestAlone\n{\n    public void Absent_CustomFieldSerializer4() {}\n}\nclass EmptyClass2TestAlone {}\ninterface EmptyInterface3TestAlone {}\nclass ClassWithStaticInitializersTestAlone\n{\n    static {\n    }\n    static\n    {}\n    static class Inner\n    {\n        static {\n            int i = 1;\n        }\n    }\n    public void emptyBlocks() {\n        try {\n        } catch (RuntimeException e) { \n            new Object();\n        } catch (Exception e) { \n        } catch (Throwable e) { \n        } finally { \n        }\n        do {\n        } while (true); \n    }\n    public void codeAfterLastRightCurly() {\n        while (new Object().equals(new Object())) {\n        }; \n        for (int i = 0; i < 1; i++) { new Object(); };\n    }\n    static final java.util.concurrent.ThreadFactory threadFactory\n            = new java.util.concurrent.ThreadFactory() {\n        @Override\n        public Thread newThread(final Runnable r) {\n            return new Thread(r);\n        }};\n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); }\n    interface Interface2\n    { int i = 1; public void meth1(); }\n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            void myMethod();\n        }}\n}"
    },
    {
      "description": "Auto test from InputRightCurlyLeftTestDefault.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        24,
        27,
        39,
        43,
        92
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nclass InputRightCurlyLeftTestDefault\n{\n    int foo() throws InterruptedException\n    {\n        int x = 1;\n        int a = 2;\n        while (true)\n        {\n            try\n            {\n                if (x > 0)\n                {\n                    break;\n                } \n                else if (x < 0) {\n                    ;\n                } \n                else\n                {\n                    break;\n                }\n                switch (a)\n                {\n                case 0:\n                    break;\n                default:\n                    break;\n                }\n            } \n            catch (Exception e)\n            {\n                break;\n            } \n            finally\n            {\n                break;\n            }\n        }\n        synchronized (this)\n        {\n            do\n            {\n                x = 2;\n            } while (x == 2);\n        }\n        this.wait(666\n                 ); \n        for (int k = 0; k < 1; k++)\n        {\n            String innerBlockVariable = \"\";\n        }\n        if (System.currentTimeMillis() > 1000)\n            return 1;\n        else\n            return 2;\n    }\n    static\n    {\n        int x = 1; \n    }\n    public enum GreetingsEnum\n    {\n        HELLO,\n        GOODBYE\n    };\n    void method2()\n    {\n        boolean flag = true;\n        if (flag) {\n            System.identityHashCode(\"heh\");\n            flag = !flag; } String. \n                CASE_INSENSITIVE_ORDER.equals(\"Xe-xe\");\n        if (flag) { String.CASE_INSENSITIVE_ORDER.equals(\"it is ok.\"); }\n    }\n}\nclass FooCtor\n{\n        int i;\n        public FooCtor()\n    {\n                i = 1;\n    }}\nclass FooMethod\n{\n        public void fooMethod()\n    {\n                int i = 1;\n    }}\nclass FooInner\n{\n        class InnerFoo\n    {\n                public void fooInnerMethod ()\n        {\n                }\n    }}\nclass Absent_CustomFieldSerializer3 {\n    public static void serialize() {}\n}\nclass Absent_CustomFieldSerializer4\n{\n    public Absent_CustomFieldSerializer4() {}\n}\nclass EmptyClass2 {}\ninterface EmptyInterface3 {}\nclass ClassWithStaticInitializers\n{\n    static {\n    }\n    static\n    {}\n    static class Inner\n    {\n        static {\n            int i = 1;\n        }\n    }\n    public void emptyBlocks() {\n        try {\n        } catch (RuntimeException e) {\n            new Object();\n        } catch (Exception e) {\n        } catch (Throwable e) {\n        } finally {\n        }\n        do {\n        } while (true);\n    }\n    public void codeAfterLastRightCurly() {\n        while (new Object().equals(new Object())) {\n        };\n        for (int i = 0; i < 1; i++) { new Object(); };\n    }\n    static final java.util.concurrent.ThreadFactory threadFactory\n            = new java.util.concurrent.ThreadFactory() {\n        @Override\n        public Thread newThread(final Runnable r) {\n            return new Thread(r);\n        }};\n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); }\n    interface Interface2\n    { int i = 1; public void meth1(); }\n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            void myMethod();\n        }}\n}"
    },
    {
      "description": "Auto test from InputRightCurlyLeftTestNewLine.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        85,
        142,
        148,
        150,
        152,
        196,
        201,
        204
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nclass InputRightCurlyLeftTestNewLine\n{\n    int foo() throws InterruptedException\n    {\n        int x = 1;\n        int a = 2;\n        while (true)\n        {\n            try\n            {\n                if (x > 0)\n                {\n                    break;\n                }\n                else if (x < 0) {\n                    ;\n                }\n                else\n                {\n                    break;\n                }\n                switch (a)\n                {\n                case 0:\n                    break;\n                default:\n                    break;\n                }\n            }\n            catch (Exception e)\n            {\n                break;\n            }\n            finally\n            {\n                break;\n            }\n        }\n        synchronized (this)\n        {\n            do\n            {\n                x = 2;\n            } while (x == 2);\n        }\n        this.wait(666\n                 ); \n        for (int k = 0; k < 1; k++)\n        {\n            String innerBlockVariable = \"\";\n        }\n        if (System.currentTimeMillis() > 1000)\n            return 1;\n        else\n            return 2;\n    }\n    static\n    {\n        int x = 1; \n    }\n    public enum GreetingsEnum\n    {\n        HELLO,\n        GOODBYE\n    }; \n    void method2()\n    {\n        boolean flag = true;\n        if (flag) {\n            System.identityHashCode(\"heh\");\n            flag = !flag; } String.CASE_INSENSITIVE_ORDER.\n              equals(\"Xe-xe\");\n        if (flag) { String.CASE_INSENSITIVE_ORDER.equals(\"it is ok.\"); }\n    }\n}\nclass FooCtorTestNewLine\n{\n        int i;\n        public void FooCtor()\n    {\n                i = 1;\n    }} \nclass FooMethodTestNewLine\n{\n        public void fooMethod()\n    {\n                int i = 1;\n    }} \nclass FooInnerTestNewLine\n{\n        class InnerFoo\n    {\n                public void fooInnerMethod ()\n        {\n                }\n    }} \nclass Absent_CustomFieldSerializer3TestNewLine {\n    public static void serialize() {} \n}\nclass Absent_CustomFieldSerializer4TestNewLine\n{\n  void Absent_CustomFieldSerializer4() {} \n}\nclass EmptyClass2TestNewLine {} \ninterface EmptyInterface3TestNewLine {} \nclass ClassWithStaticInitializersTestNewLine\n{\n    static {\n    }\n    static\n    {}\n    static class Inner\n    {\n        static {\n            int i = 1;\n        }\n    }\n    public void emptyBlocks() {\n        try {\n        } catch (RuntimeException e) {\n            new Object();\n        } catch (Exception e) {\n        } catch (Throwable e) {\n        } finally {\n        }\n        do {\n        } while (true);\n    }\n    public void codeAfterLastRightCurly() {\n        while (new Object().equals(new Object())) {\n        };\n        for (int i = 0; i < 1; i++) { new Object(); };\n    }\n    static final java.util.concurrent.ThreadFactory threadFactory\n            = new java.util.concurrent.ThreadFactory() {\n        @Override\n        public Thread newThread(final Runnable r) {\n            return new Thread(r);\n        }}; \n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); } \n    interface Interface2\n    { int i = 1; public void meth1(); } \n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            void myMethod();\n        }} \n}"
    },
    {
      "description": "Auto test from InputRightCurlyLeftTestSame.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        25,
        28,
        40,
        44,
        86,
        93,
        188,
        189
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nclass InputRightCurlyLeftTestSame\n{\n    int foo() throws InterruptedException\n    {\n        int x = 1;\n        int a = 2;\n        while (true)\n        {\n            try\n            {\n                if (x > 0)\n                {\n                    break;\n                } \n                else if (x < 0) {\n                    ;\n                } \n                else\n                {\n                    break;\n                }\n                switch (a)\n                {\n                case 0:\n                    break;\n                default:\n                    break;\n                }\n            } \n            catch (Exception e)\n            {\n                break;\n            } \n            finally\n            {\n                break;\n            }\n        }\n        synchronized (this)\n        {\n            do\n            {\n                x = 2;\n            } while (x == 2);\n        }\n        this.wait(666\n                 ); \n        for (int k = 0; k < 1; k++)\n        {\n            String innerBlockVariable = \"\";\n        }\n        if (System.currentTimeMillis() > 1000)\n            return 1;\n        else\n            return 2;\n    }\n    static\n    {\n        int x = 1; \n    }\n    public enum GreetingsEnum\n    {\n        HELLO,\n        GOODBYE\n    }; \n    void method2()\n    {\n        boolean flag = true;\n        if (flag) {\n            System.identityHashCode(\"heh\");\n            flag = !flag; } String. \n                CASE_INSENSITIVE_ORDER.equals(\"Xe-xe\");\n        if (flag) { String.CASE_INSENSITIVE_ORDER.equals(\"it is ok.\"); }\n    }\n}\nclass FooCtorTestSame\n{\n        int i;\n        public void FooCtor()\n    {\n                i = 1;\n    }}\nclass FooMethodTestSame\n{\n        public void fooMethod()\n    {\n                int i = 1;\n    }}\nclass FooInnerTestSame\n{\n        class InnerFoo\n    {\n                public void fooInnerMethod ()\n        {\n                }\n    }}\nclass Absent_CustomFieldSerializer3TestSame {\n    public static void serialize() {}\n}\nclass Absent_CustomFieldSerializer4TestSame\n{\n    public void Absent_CustomFieldSerializer4() {}\n}\nclass EmptyClass2TestSame {}\ninterface EmptyInterface3TestSame {}\nclass ClassWithStaticInitializersTestSame\n{\n    static {\n    }\n    static\n    {}\n    static class Inner\n    {\n        static {\n            int i = 1;\n        }\n    }\n    public void emptyBlocks() {\n        try {\n        } catch (RuntimeException e) {\n            new Object();\n        } catch (Exception e) {\n        } catch (Throwable e) {\n        } finally {\n        }\n        do {\n        } while (true);\n    }\n    public void codeAfterLastRightCurly() {\n        while (new Object().equals(new Object())) {\n        }; \n        for (int i = 0; i < 1; i++) { ; }; \n    }\n    static final java.util.concurrent.ThreadFactory threadFactory\n            = new java.util.concurrent.ThreadFactory() {\n        @Override\n        public Thread newThread(final Runnable r) {\n            return new Thread(r);\n        }};\n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); }\n    interface Interface2\n    { int i = 1; public void meth1(); }\n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            void myMethod();\n        }}\n}"
    },
    {
      "description": "Auto test from InputRightCurlyLeftTestShouldStartLine2.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        85,
        196,
        201
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nclass InputRightCurlyLeftTestShouldStartLine2\n{\n    int foo() throws InterruptedException\n    {\n        int x = 1;\n        int a = 2;\n        while (true)\n        {\n            try\n            {\n                if (x > 0)\n                {\n                    break;\n                }\n                else if (x < 0) {\n                    ;\n                }\n                else\n                {\n                    break;\n                }\n                switch (a)\n                {\n                case 0:\n                    break;\n                default:\n                    break;\n                }\n            }\n            catch (Exception e)\n            {\n                break;\n            }\n            finally\n            {\n                break;\n            }\n        }\n        synchronized (this)\n        {\n            do\n            {\n                x = 2;\n            } while (x == 2);\n        }\n        this.wait(666\n                 ); \n        for (int k = 0; k < 1; k++)\n        {\n            String innerBlockVariable = \"\";\n        }\n        if (System.currentTimeMillis() > 1000)\n            return 1;\n        else\n            return 2;\n    }\n    static\n    {\n        int x = 1; \n    }\n    public enum GreetingsEnum\n    {\n        HELLO,\n        GOODBYE\n    }; \n    void method2()\n    {\n        boolean flag = true;\n        if (flag) {\n            System.identityHashCode(\"heh\");\n            flag = !flag; } String.CASE_INSENSITIVE_ORDER.\n              equals(\"Xe-xe\");\n        if (flag) { String.CASE_INSENSITIVE_ORDER.equals(\"it is ok.\"); }\n    }\n}\nclass FooCtorTestShouldStartLine2\n{\n        int i;\n        public void FooCtor()\n    {\n                i = 1;\n    }} \nclass FooMethodTestShouldStartLine2\n{\n        public void fooMethod()\n    {\n                int i = 1;\n    }} \nclass FooInnerTestShouldStartLine2\n{\n        class InnerFoo\n    {\n                public void fooInnerMethod ()\n        {\n                }\n    }} \nclass Absent_CustomFieldSerializer3TestShouldStartLine2 {\n    public static void serialize() {}\n}\nclass Absent_CustomFieldSerializer4TestShouldStartLine2\n{\n    public void Absent_CustomFieldSerializer4() {}\n}\nclass EmptyClass2TestShouldStartLine2 {}\ninterface EmptyInterface3TestShouldStartLine2 {}\nclass ClassWithStaticInitializersTestShouldStartLine2\n{\n    static {\n    }\n    static\n    {}\n    static class Inner\n    {\n        static {\n            int i = 1;\n        }\n    }\n    public void emptyBlocks() {\n        try {\n        } catch (RuntimeException e) {\n            new Object();\n        } catch (Exception e) {\n        } catch (Throwable e) {\n        } finally {\n        }\n        do {\n        } while (true);\n    }\n    public void codeAfterLastRightCurly() {\n        while (new Object().equals(new Object())) {\n        };\n        for (int i = 0; i < 1; i++) { new Object(); };\n    }\n    static final java.util.concurrent.ThreadFactory threadFactory\n            = new java.util.concurrent.ThreadFactory() {\n        @Override\n        public Thread newThread(final Runnable r) {\n            return new Thread(r);\n        }}; \n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); } \n    interface Interface2\n    { int i = 1; public void meth1(); }\n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            void myMethod();\n        }} \n}"
    },
    {
      "description": "Auto test from InputRightCurlyNewTokensAloneOrSingleLine.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyNewTokensAloneOrSingleLine {\n    enum TestEnum{}\n    enum TestEnum1{\n        SOME_VALUE;} \n    enum TestEnum2 { SOME_VALUE; }\n    enum TestEnum3{\n        SOME_VALUE;\n    }\n    enum TestEnum4{ SOME_VALUE;\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestAloneOrSingleline.java",
      "expected-problems": 25,
      "expected-linenumbers": [
        69,
        82,
        86,
        93,
        96,
        106,
        108,
        118,
        122,
        131,
        138,
        153,
        188,
        194,
        197,
        200,
        205,
        208,
        209,
        211,
        216,
        221,
        222,
        230,
        242
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestAloneOrSingleline {\n    public boolean equals(Object other) { boolean flag = true; return flag; }\n    public int hashCode()\n    {\n        int a = 10;\n        return 1;\n    }\n    private void foo()\n    { int var1 = 5; var2 = 6; }\n    private void foo1() { return; }\n    private String foo2() { return toString();\n    }\n    private void foo3() { ; return; }\n    private int var1;\n    private int var2;\n    public InputRightCurlyTestAloneOrSingleline() { this.var1 = 1; }\n    public InputRightCurlyTestAloneOrSingleline(int v1, int v2) { this.var1 = v1; this.var2 = v2; }\n    private void foo4() { ;; }\n    private void foo5() { ; }\n    private void foo6() {  }\n    private void foo12() {\n        try { int i = 5; int b = 10; }\n        catch (Exception e) { }\n    }\n    private void foo13() {\n        for (int i = 0; i < 10; i++) { int a = 5; int b = 6; }\n        do\n        {\n            var1 = 2;\n        }\n        while (var2 == 2);\n    }\n    static { int a; int b; }\n    { int c; int d;}\n    private void foo14() {\n        if (var1 > 0) {\n            return;\n        }\n    }\n    private void foo15() {\n        class A { int a; } var1++; \n        class B {  }\n        if(true) {\n        }\n        else;\n    }\n    private void foo16() {\n        if (true) { return; } else { }\n        if (false) {\n        }\n    }\n    void f17() { int var1 = 5; var2 = 6; } private void f18() {int var1 = 5; var2 = 6; }\n    private void foo19() {int var1 = 5;\n        var2 = 6;} \n    private String foo20() {\n        do { var2 ++; }\n        while (var2 < 15);\n        while (var1 < 10) { var1++; }\n        do { var2++; var1++; } while (var2 < 15); return \"\"+0xCAFEBABE;\n    }\n    private void foo21() { \n        new Object() { @Override protected void finalize() { \"\".toString(); }};\n    }\n    void foo22() {\n        long startTime = System.nanoTime();\n        try {\n            int a = 5;\n            toString();\n        } catch (Exception e) { \n            throw new RuntimeException(e);\n        } finally { toString(); } \n    }\n    void doDoubleBraceInitialization() {\n        java.util.Map<String, String> map = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");\n        }}; \n        Thread t = new Thread() {@Override public void run() {super.run();}};\n        new Object() { @Override protected void finalize() { \"\".toString(); }  { int a = 5; }};\n        new Object() { @Override protected void finalize() { \"\".toString(); }  int b = 10; };\n        new Object() { protected void finalize() { hashCode(); }  { int c = 5; } int d = 8; };\n        java.util.Map<String, String> map2 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");}  \n        };\n        java.util.Map<String, String> map3 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");}}; \n        java.util.Map<String, String> map4 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");\n        }\n        };\n        foo23(new java.util.HashSet<String>() {{\n            add(\"XZ13s\");\n            add(\"AB21/X\");\n            add(\"YYLEX\");\n            add(\"AR5E\");\n        }});  \n        foo23(new java.util.HashSet<String>() {{\n            add(\"XZ13s\");\n            add(\"AB21/X\");\n            add(\"YYLEX\");\n            add(\"AR5E\");\n        }});} \n    void foo23(java.util.HashSet<String> set) {\n    }\n    void foo25() {\n        for (int i = 0; i < 10; i++) {\n            System.identityHashCode(\"Hello, world!\");\n        }} \n    void foo26() {\n        for (int i = 0; i < 10; i++) {\n            System.identityHashCode(\"Hello, world!\");}} \n    void foo27() {\n        for (int i = 0; i < 10; i++) {for (int j = 0; j < 15; j++) {int a;}}} \n    private java.util.ArrayList<Integer> foo28(int delta) {\n        return new java.util.ArrayList<Integer>() {\n            @Override public int size() { return Math.max(0, super.size() + 1);};\n        };\n    }\n    private void foo29() {\n        boolean flag = true;\n        if (flag) {\n            System.identityHashCode(\"heh\");\n            flag = !flag; } String. \n                CASE_INSENSITIVE_ORDER.equals(\"Xe-xe\");\n    }\n    void foo30() {\n        if (true) {\n            getClass();} \n        for (int i = 0; i == 0; i++) {\n            getClass();} \n        while (true) {\n            getClass();} \n    }\n    public void emptyBlocks() {\n        try {\n        } catch (RuntimeException e) { \n            new Object();\n        } catch (Exception e) { \n        } catch (Throwable e) { \n        } finally { \n        }\n        do {\n        } while (true); \n    }\n    public void codeAfterLastRightCurly() {\n        while (new Object().equals(new Object())) {\n        }; \n        for (int i = 0; i < 1; i++) { }; \n    }\n    public @interface TestAnnotation {}\n    public @interface TestAnnotation1{ String value(); }\n    public @interface TestAnnotation2 {\n        String value();} \n    public @interface TestAnnotation3 {\n        String value();\n    }\n    public @interface TestAnnottation4 { String value();\n    }\n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); } \n    interface Interface2\n    { int i = 1; public void meth1(); }\n    private void foo28() {\n        if (true) { return; } else { } if (false) { \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestForceLineBreakBefore.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        36,
        40,
        42,
        44,
        48
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nclass InputRightCurlyTestForceLineBreakBefore\n{\n    int foo() throws InterruptedException\n    {\n        int x = 1;\n        int a = 2;\n        while (true)\n        {\n            try\n            {\n                if (x > 0)\n                {\n                    break;\n                } else if (x < 0) {\n                    ;\n                } else { break; }\n                switch (a)\n                {\n                case 0:\n                    break;\n                default:\n                    break;\n                }\n            } catch (Exception e) { break; } finally { break; }\n        }\n        synchronized (this) { do { x = 2; } while (x == 2); }\n        synchronized (this) {\n            do {} while (x == 2); \n        }\n        for (int k = 0; k < 1; k++) { String innerBlockVariable = \"\"; }\n        for (int k = 0; k < 1; k++) {} \n                return a;\n    }\n    static { int x = 1; } \n    void method2()\n    {\n        boolean flag = false;\n        if (flag) { String.valueOf(\"foo\"); }\n    }\n}\nclass Absent_CustomFieldSerializer {\n    public static void serialize() {}\n}\nclass Absent_CustomFieldSerializer10\n{\n    public Absent_CustomFieldSerializer10() {}\n}\nclass EmptyClass {}\ninterface EmptyInterface {}"
    },
    {
      "description": "Auto test from InputRightCurlyTestIfElseAlone.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        18,
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestIfElseAlone {\n    public void test() {\n       int id = 0;\n       switch (id) {\n           case 0: break;\n           case 1: if (1 == 0) {\n               break;\n           }; \n           case 2: break;\n       }\n    }\n    public void test2() {\n        if(true) {\n        } if(false) { \n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestNewTokensAlone.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        11,
        15,
        16
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestNewTokensAlone {\n    enum TestEnum{} \n    enum TestEnum1{\n        SOME_VALUE;} \n    enum TestEnum2 { SOME_VALUE; } \n    enum TestEnum3{\n        SOME_VALUE;\n    }\n    enum TestEnum4{ SOME_VALUE;\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestOptAloneBlocksWithSemi.java",
      "expected-problems": 18,
      "expected-linenumbers": [
        11,
        15,
        16,
        20,
        23,
        26,
        34,
        35,
        40,
        43,
        44,
        46,
        50,
        51,
        56,
        59,
        64,
        74
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestOptAloneBlocksWithSemi {\n    public void testMethod() {}; \n    public void testMethod1() {\n    }; \n    public class TestClass {}; \n    public class TestClass1 {\n    }; \n    public class TestClass2 {\n        public TestClass2() {}; \n        public TestClass2(String someValue) {\n        }; \n    }\n    public void testMethod11() {\n    }\n    ;\n    public @interface TestAnnnotation5 {\n        String someValue(); }; \n    public @interface TestAnnotation6 {}; \n    public @interface TestAnnotation7 {\n        String someValue();\n    }; \n    public @interface TestAnnotation8 { String someValue();\n    }; \n    public @interface TestAnnotation9 { String someValue(); };\n    enum TestEnum{}; \n    enum TestEnum1{\n        SOME_VALUE;}; \n    enum TestEnum2 { SOME_VALUE; }; \n    enum TestEnum3{\n        SOME_VALUE;\n    }; \n    enum TestEnum4{ SOME_VALUE;\n    }; \n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); }; \n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            void myMethod();\n        };}; \n    interface InterfaceEndingWithSemiColon2 {\n        public void fooEmpty();\n    }; \n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestOptAloneOrSingleLineBlocksWithSemi.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        15,
        20,
        26,
        34,
        40,
        43,
        50,
        56,
        59,
        64,
        77
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestOptAloneOrSingleLineBlocksWithSemi {\n    public void testMethod() {};\n    public void testMethod1() {\n    }; \n    public class TestClass {};\n    public class TestClass1 {\n    }; \n    public class TestClass2 {\n        public TestClass2() {};\n        public TestClass2(String someValue) {\n        }; \n    }\n    public void testMethod11() {\n    }\n    ;\n    public @interface TestAnnnotation5 {\n        String someValue(); }; \n    public @interface TestAnnotation6 {};\n    public @interface TestAnnotation7 {\n        String someValue();\n    }; \n    public @interface TestAnnotation8 { String someValue();\n    }; \n    public @interface TestAnnotation9 { String someValue(); };\n    enum TestEnum{};\n    enum TestEnum1{\n        SOME_VALUE;}; \n    enum TestEnum2 { SOME_VALUE; };\n    enum TestEnum3{\n        SOME_VALUE;\n    }; \n    enum TestEnum4{ SOME_VALUE;\n    }; \n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); }; \n    interface Interface2\n    { int i = 1; public void meth1(); };\n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            void myMethod();\n        };}; \n    interface InterfaceEndingWithSemiColon2 {\n        public void fooEmpty();\n    }; \n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestOptionAlone.java",
      "expected-problems": 15,
      "expected-linenumbers": [
        15,
        16,
        20,
        29,
        46,
        50,
        53,
        54,
        56,
        58,
        77,
        79,
        83,
        95,
        98
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestOptionAlone {\n    private int a;\n    private static int b;\n    {  a = 2; } \n    static { b = 3; } \n    void method1() {\n        Thread t = new Thread() {@Override public void run() {\n            int a; int b;} \n        };\n    }\n    void method2(java.util.HashSet<String> set) {\n        java.util.Map<String, String> map1 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");} \n        };\n        java.util.Map<String, String> map2 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");\n        }};\n    }\n    void method3() {\n        method2(new java.util.HashSet<String>() {{\n            add(\"XZ13s\");\n            add(\"AB21/X\");\n            add(\"YYLEX\");\n            add(\"AR5E\");\n        }}); \n    }\n    int method4(int a) {\n        if (a>2) a*=10; return ++a; } \n    void method5(int a) {\n        while (a > 5) { a--; } \n        if (a > 4) { a++; } \n        do {a--;} while (a > 3); \n        for (int i = 1; i < 10; i++) { byte b = 10; }\n        if (a < 2) { --a; } else if (a > 3) { a++; } \n        java.util.List<String> list = new java.util.ArrayList<>();\n        list.stream()\n                .filter(e -> {return !e.isEmpty() && !\"null\".equals(e);} )\n                .collect(java.util.stream.Collectors.toList());\n    }\n    void method6(int a) {\n        java.util.Map<String, String> map3 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n        }{}; \n        };\n    }\n    public @interface TestAnnotation {} \n    public @interface TestAnnotation1{ String value(); }\n    public @interface TestAnnotation2 {\n        String value();} \n    public @interface TestAnnotation3 {\n        String value();\n    }\n    public @interface TestAnnottation4 { String value();\n    }\n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); } \n    interface Interface2\n    { int i = 1; public void meth1(); } \n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            void myMethod();\n        }} \n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestOptionAloneOrSingleLine.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        20,
        29,
        37,
        46,
        50,
        70,
        76
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestOptionAloneOrSingleLine {\n    private int a;\n    private static int b;\n    {  a = 2; }\n    static { b = 3; }\n    void method1() {\n        Thread t = new Thread() {@Override public void run() {\n            int a; int b;} \n        };\n    }\n    void method2(java.util.HashSet<String> set) {\n        java.util.Map<String, String> map1 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");} \n        };\n        java.util.Map<String, String> map2 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");\n        }};; \n    }\n    void method3() {\n        method2(new java.util.HashSet<String>() {{\n            add(\"XZ13s\");\n            add(\"AB21/X\");\n            add(\"YYLEX\");\n            add(\"AR5E\");\n        }}); \n    }\n    int method4(int a) {\n        if (a>2) a*=10; return ++a; } \n    void method5(int a) {\n        while (a > 5) { a--; }\n        if (a > 4) { a++; }\n        do {a--;} while (a > 3);\n        for (int i = 1; i < 10; i++) { byte b = 10; }\n        if (a < 2) { --a; } else if (a > 3) { a++; }\n        java.util.List<String> list = new java.util.ArrayList<>();\n        list.stream()\n                .filter(e -> {return !e.isEmpty() && !\"null\".equals(e);} )\n                .collect(java.util.stream.Collectors.toList());\n    }\n    class TestClass4 { }\n    class TestClass5 { } { } \n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); } \n    interface Interface2\n    { int i = 1; public void meth1(); }\n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            void myMethod();\n        }} \n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestOptSameBlocksWithSemi.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        15,
        20,
        26,
        34,
        40,
        43,
        50,
        56,
        59,
        64,
        77
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestOptSameBlocksWithSemi {\n    public void testMethod() {};\n    public void testMethod1() {\n    }; \n    public class TestClass {};\n    public class TestClass1 {\n    }; \n    public class TestClass2 {\n        public TestClass2() {};\n        public TestClass2(String someValue) {\n        }; \n    }\n    public void testMethod11() {\n    }\n    ;\n    public @interface TestAnnnotation5 {\n        String someValue(); }; \n    public @interface TestAnnotation6 {};\n    public @interface TestAnnotation7 {\n        String someValue();\n    }; \n    public @interface TestAnnotation8 { String someValue();\n    }; \n    public @interface TestAnnotation9 { String someValue(); };\n    enum TestEnum{};\n    enum TestEnum1{\n        SOME_VALUE;}; \n    enum TestEnum2 { SOME_VALUE; };\n    enum TestEnum3{\n        SOME_VALUE;\n    }; \n    enum TestEnum4{ SOME_VALUE;\n    }; \n    interface Interface1\n    {\n        int i = 1;\n        public void meth1(); }; \n    interface Interface2\n    { int i = 1; public void meth1(); };\n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            void myMethod();\n        };}; \n    interface InterfaceEndingWithSemiColon2 {\n        public void fooEmpty();\n    }; \n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestRecordsAndCompactCtors.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        26,
        31,
        33,
        41
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nimport org.w3c.dom.Node;\npublic class InputRightCurlyTestRecordsAndCompactCtors {\n    record MyTestRecord(String string, Record rec) {\n        private boolean inRecord(Object obj) {\n            int value = 0;\n            if (obj instanceof Integer i) {\n                value = i;\n            }\n            return value > 10;\n        } } \n    record MyTestRecord2() {\n        MyTestRecord2(String one, String two, String three) {\n            this(); } \n    }\n    record MyTestRecord3(Integer i, Node node) {\n        public MyTestRecord3{\n            int x = 5;} \n        public static void main(String... args) {\n            System.out.print(\"ok\"); } \n    }\n    record MyTestRecord4() {} \n    record MyTestRecord5() {\n        static MyTestRecord mtr =\n                new MyTestRecord(\"my string\", new MyTestRecord4());}\n    class MyTestClass {\n        private MyTestRecord mtr =\n                new MyTestRecord(\"my string\", new MyTestRecord4());}\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSameAndLiteralDo.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        69,
        74,
        89
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nimport java.util.Scanner;\npublic class InputRightCurlyTestSameAndLiteralDo {\n    public void foo1() {\n        do {\n        } while (true);\n    }\n    public void foo2() {\n        int i = 1;\n        while (i < 5) {\n            String.CASE_INSENSITIVE_ORDER.equals(i + \" \");\n            i++;\n        }\n    }\n    public void foo3() {\n        int i = 1;\n        do {\n            i++;\n            String.CASE_INSENSITIVE_ORDER.equals(i + \" \");\n        } while (i < 5);\n    }\n    public void foo4() {\n        int prog, user;\n        prog = (int)(Math.random() * 10) + 1;\n        Scanner input = new Scanner(System.in, \"utf-8\");\n        if( input.hasNextInt() ) {\n            do {\n                user = input.nextInt();\n                if(user == prog) {\n                    String.CASE_INSENSITIVE_ORDER.equals(\"Good!\");\n                } else {\n                    if (user > 0 && user <= 10) {\n                        String.CASE_INSENSITIVE_ORDER.equals(\"Bad! \");\n                        if( prog < user ) {\n                            String.CASE_INSENSITIVE_ORDER.equals(\"My number is less than yours.\");\n                        } else {\n                            String.CASE_INSENSITIVE_ORDER.equals(\"My number is greater than yours\");\n                        }\n                    } else {\n                        String.CASE_INSENSITIVE_ORDER.equals(\"Error!\");\n                    }\n                }\n            } while( user != prog );\n        } else {\n            String.CASE_INSENSITIVE_ORDER.equals(\"Error!\");\n        }\n        String.CASE_INSENSITIVE_ORDER.equals(\"Goodbye!\");\n    }\n    public void foo5() {\n        do {\n        } \n        while (true);\n    }\n    public void foo6() {\n        do {} \n        while (true);\n    }\n    public void foo7() {\n        do\n        {\n        } while (true);\n    }\n    public void foo8() {\n        do\n        {\n        } \n        while\n        (true);\n    }\n    public void foo9() {\n        do {} while (true);\n    }\n    public void foo10() {\n        do ; while (true);\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSameNewTokens.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestSameNewTokens {\n    enum TestEnum{}\n    enum TestEnum1{\n        SOME_VALUE;} \n    enum TestEnum2 { SOME_VALUE; }\n    enum TestEnum3{\n        SOME_VALUE;\n    }\n    enum TestEnum4{ SOME_VALUE;\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSingleLineClass.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        27
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nclass InputRightCurlyTestSingleLineClass\n{\n    void foo() throws InterruptedException\n    {\n            try\n            {\n            }\n            catch (Exception e)\n            {\n                return;\n            }\n        }\n    }\nclass UniqEmptyClassTestSingleLineClass {private int a;}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSinglelineIfBlocks.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        12
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestSinglelineIfBlocks {\n    void foo1() {\n        if (true) { int a = 5; } \n        if (true) { if (false) { int b = 6; } } \n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSwitchCase.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        19,
        26,
        51,
        69,
        75,
        111,
        115
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestSwitchCase {\n    public static void method0() {\n        int mode = 0;\n        switch (mode) {\n            case 1:\n                int x = 1;\n                break;\n            default :\n                x = 0; } \n    }\n    public static void method1() {\n        int mode = 0;\n        switch (mode) {\n        default :\n               int x = 0; } \n    }\n    public static void method2() {\n        int mode = 0;\n        switch (mode) {\n            case 1:\n                int x = 1;\n                break;\n            default:\n                x = 0;\n        }\n    }\n    public static void method3() {\n        int mode = 0;\n        switch (mode) {\n        default :\n               int x = 0;\n        }\n    }\n    public static void method4() {\n        int mode = 0;\n        switch (mode) { default : int x = 0; }\n    }\n    public static void method5() {\n        int mode = 0;\n        switch (mode) { default : int x = 0;\n        }\n    }\n    public static void method6() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; break; default : x = 5;\n        }\n    }\n    public static void method7() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; break; default : x = 5; }\n    }\n    public static void method8() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; break; case 80: x = 1; break; }\n    }\n    public static void method9() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; break; default : x = 5;\n        }\n    }\n    public static void method10() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; break; case 80: x = 1; break;\n        }\n    }\n    public static void method11() {\n        int mode = 0;\n        int x = 0;\n        switch (mode) {\n            case 0:\n                if(0>9) {\n                    x = 9;\n                }\n                break;\n            case 80:\n                x = 1;\n                break;\n        }\n    }\n    public static void method12() {\n        int mode = 0;\n        int x = 0;\n        switch (mode) {\n            case 0:\n                if(0>9) {\n                    x = 9;\n                } else { \n                }\n                break;\n        }\n        switch (x) {}; \n        switch (x) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSwitchCase2.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        19,
        26,
        113
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestSwitchCase2 {\n    public static void method0() {\n        int mode = 0;\n        switch (mode) {\n            case 1:\n                int x = 1;\n                break;\n            default :\n                x = 0; } \n    }\n    public static void method1() {\n        int mode = 0;\n        switch (mode) {\n        default :\n               int x = 0; } \n    }\n    public static void method2() {\n        int mode = 0;\n        switch (mode) {\n            case 1:\n                int x = 1;\n                break;\n            default:\n                x = 0;\n        }\n    }\n    public static void method3() {\n        int mode = 0;\n        switch (mode) {\n        default :\n               int x = 0;\n        }\n    }\n    public static void method4() {\n        int mode = 0;\n        switch (mode) { default : int x = 0; }\n    }\n    public static void method5() {\n        int mode = 0;\n        switch (mode) { default : int x = 0;\n        }\n    }\n    public static void method6() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; break; default : x = 5;\n        }\n    }\n    public static void method7() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; break; default : x = 5; }\n    }\n    public static void method8() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; break; case 80: x = 1; break; }\n    }\n    public static void method9() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; break; default : x = 5;\n        }\n    }\n    public static void method10() {\n        int mode = 0;\n        switch (mode) { case 0: int x = 1; break; case 80: x = 1; break;\n        }\n    }\n    public static void method11() {\n        int mode = 0;\n        int x = 0;\n        switch (mode) {\n            case 0:\n                if(0>9) {\n                    x = 9;\n                }\n                break;\n            case 80:\n                x = 1;\n                break;\n        }\n    }\n    public static void method12() {\n        int num = 5;\n        try {\n            switch (num) {\n                case 1:\n                try {\n                        System.out.println(\"Number is 1\");\n                        break;\n                }\n                catch (Exception ignored) {}\n            }\n        } catch (IllegalArgumentException e) { \n            System.err.println(e.getMessage());\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSwitchCase3.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        14,
        16,
        18,
        24,
        26,
        26,
        28,
        48
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestSwitchCase3 {\n    public void method() {\n        int x = 0;\n        switch (x) { } \n        switch (x) {\n        } int a; \n        switch (x) {\n            case(1): x = 0; break; } \n        switch (x)\n        {\n        }\n        switch (x)\n        {case(1): x=1;break;\n        } int b; \n        switch (x) {case(2): break; } int c;\n        switch (x) { } int d; \n        switch (x) { } \n    }\n    public void someMethod() {\n        int x = 90;\n        if (7>x) {\n           switch (x) {\n               case(1):\n                   break;}} \n    }\n    public void someMethod2() {\n        int x = 90;\n        if (7>x) {\n           switch (x) { case(1): break;}} \n    }\n    public void someMethod3() {\n        int x = 90;\n        if (7>x) {switch (x) {case(1): break;}\n        } \n        if (7>x) {switch (x) { }} \n        if (7>x) {switch (x) {\n            }} \n        if (7>x) {switch (x) {\n            }\n       }\n       if (7>x) {switch (x) {\n            }\n       }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSwitchCase4.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        16,
        18,
        24,
        26,
        26,
        40,
        40
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestSwitchCase4 {\n    public void method() {\n        int x = 0;\n        switch (x) { }\n        switch (x) {\n        } int a; \n        switch (x) {\n            case(1): x = 0; break; } \n        switch (x)\n        {\n        }\n        switch (x)\n        {case(1): x=1;break;\n        } int b; \n        switch (x) {case(2): break; } int c;\n        switch (x) { } int d; \n        switch (x) { }\n    }\n    public void someMethod2() {\n        int x = 90;\n        if (7>x) {\n            switch (x) { case(1): break;}} \n    }\n    public void someMethod3() {\n        int x = 90;\n        if (7>x) {switch (x) {case(1): break;}}\n        if (7>x) {switch (x) { }} \n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSwitchCase5.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        16,
        18,
        24,
        26,
        26,
        40,
        40,
        65
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestSwitchCase5 {\n    public void method() {\n        int x = 0;\n        switch (x) { }\n        switch (x) {\n        } int a; \n        switch (x) {\n            case(1): x = 0; break; } \n        switch (x)\n        {\n        }\n        switch (x)\n        {case(1): x=1;break;\n        } int b; \n        switch (x) {case(2): break; } int c;\n        switch (x) { } int d; \n        switch (x) { }\n    }\n    public void someMethod2() {\n        int x = 90;\n        if (7>x) {\n            switch (x) { case(1): break;}} \n    }\n    public void someMethod3() {\n        int x = 90;\n        if (7>x) {switch (x) {case(1): break;}}\n        if (7>x) {switch (x) { }} \n    }\n}\nclass NoViolationOnInputRightCurlyTestSwitchCase5 {\n    public void method() {\n        int x = 0;\n        switch (x) { }\n        switch (x) { default: }\n        switch (x) { case(1): x = 0; break; }\n        switch (x)\n        {\n        }\n        switch (x)\n        {case(1): x=1;break;\n        }\n        int b;\n        switch (x) {case(2): break; }\n        switch (x) { }\n    }\n    public void someMethod2() {\n        int x = 90;\n        if (7>x) { switch (x) { case(1): break; } }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSwitchExpression.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        47,
        55,
        91
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestSwitchExpression {\n    public void test() {\n        int day = 3;\n        String check =\n            switch (day) {\n                case 1 -> \"Monday\";\n                case 2 -> \"Tuesday\";\n                case 3 -> \"Wednesday\";\n                default -> \"Invalid day\";\n            }; }\n    public void test1() {\n        int day = 3;\n        String check =\n            switch (day) {\n                case 1 -> \"Monday\";\n                default -> \"Invalid day\";\n            };\n    }\n    public void test2() {\n        int day = 3;\n        String check =\n            switch (day) {\n                case 1 -> \"Monday\";\n                default -> \"Invalid day\";\n            }; System.out.println(check);\n    }\n    public void test3() {\n        int num = 2;\n        switch (num) {\n            case 1 -> System.out.println(\"One\");\n            default -> System.out.println(\"Other\");\n    } int a; } \n    public void test4() {\n        int num = 2;\n        switch (num) {\n            case 1 -> System.out.println(\"One\");\n            default -> System.out.println(\"Other\");\n    } } \n    public void test5() {\n        int num = 0;\n        switch (num) {\n            case 1 -> System.out.println(\"One\");\n            default -> System.out.println(\"Other\");\n        }\n    }\n    public void test6() {\n        int num = 2;\n        switch (num) {\n        }\n    }\n    public void test7() {\n        int num = 2;\n        switch (num) {\n        }\n    }\n    public void test8() {\n        int expression = 2;\n        switch (expression) {\n            case 1 -> {\n                Runnable result1 = () -> System.out.println(\"result1\");\n            }\n            default -> {\n                Runnable defaultResult = () -> System.out.println(\"defaultResult\");\n            }\n        } int a; \n    }\n    public void test9() {\n        int expression = 2;\n        switch (expression) {\n            case 1 -> {\n                Runnable result1 = () -> System.out.println(\"result1\");\n            }\n            default -> {\n                Runnable defaultResult = () -> System.out.println(\"defaultResult\");\n            }\n        }\n    }\n    public void test10() {\n        int expression = 2;\n        switch (expression) { case 1 -> { Runnable result1 = () -> System.out.println(\"r1\"); }\n        }\n        switch (expression) {\n            case 1 -> {\n                Runnable result1 = () -> System.out.println(\"r1\");\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSwitchExpression2.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        45,
        53,
        75,
        89
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestSwitchExpression2 {\n    public void test() {\n        int day = 3;\n        String check =\n            switch (day) {\n                case 1 -> \"Monday\";\n                default -> \"Invalid day\";\n            }; }\n    public void test1() {\n        int day = 3;\n        String check =\n            switch (day) {\n                case 1 -> \"Monday\";\n                default -> \"Invalid day\";\n            };\n    }\n    public void test2() {\n        int day = 3;\n        String check =\n            switch (day) {\n                case 1 -> \"Monday\";\n                default -> \"Invalid day\";\n            }; System.out.println(check);\n    }\n    public void test3() {\n        int num = 2;\n        switch (num) {\n            case 1 -> System.out.println(\"One\");\n            default -> System.out.println(\"Other\");\n    } int a; } \n    public void test4() {\n        int num = 2;\n        switch (num) {\n            case 1 -> System.out.println(\"One\");\n            default -> System.out.println(\"Other\");\n    } } \n    public void test5() {\n        int num = 0;\n        switch (num) {\n            case 1 -> System.out.println(\"One\");\n            default -> System.out.println(\"Other\");\n        }\n    }\n    public void test6() {\n        int num = 2;\n        switch (num) {\n        }\n    }\n    public void test7() {\n        int num = 2;\n        switch (num) {\n        } int a; \n    }\n    public void test8() {\n        int expression = 2;\n        switch (expression) {\n            case 1 -> {\n                Runnable result1 = () -> System.out.println(\"result1\");\n            }\n            default -> {\n                Runnable defaultResult = () -> System.out.println(\"defaultResult\");\n            }\n        } int a; \n    }\n    public void test9() {\n        int expression = 2;\n        switch (expression) {\n            case 1 -> {\n                Runnable result1 = () -> System.out.println(\"result1\");\n            }\n            default -> {\n                Runnable defaultResult = () -> System.out.println(\"defaultResult\");\n            }\n        }\n    }\n    public void test10() {\n        int expression = 2;\n        switch (expression)\n        { case 1 -> { Runnable result1 = () -> System.out.println(\"r1\"); } }\n        switch (expression)\n        { case 1 -> { Runnable result1 = () -> System.out.println(\"r1\"); } }\n        switch (expression) {\n            case 1 -> {\n                Runnable result1 = () -> System.out.println(\"r1\");\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestSwitchExpression4.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        116
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestSwitchExpression4 {\n    public class InputFinalLocalVariableCheckSwitchAssignment {\n        private static final int staticValue = 2;\n        public InputFinalLocalVariableCheckSwitchAssignment() throws Exception {\n            int a = 0;\n            final int b = 0;\n            int c = 10;\n            int d = 0;\n            c = switch (a) {\n                case 0 -> 5;\n                case 1 -> 10;\n                default -> switch (b) {\n                    case 2 -> {\n                        if (a == 0) {\n                            d = 1; \n                        }\n                        throw new Exception();\n                    }\n                    default -> 2;\n                };\n            };\n        }\n        public void foo() throws Exception {\n            final int a = 0;\n            int b = switch (a) {\n                case 0 -> {\n                    int x = 5;\n                    int y = 6;\n                    if (a == 2) {\n                        y = 7;\n                    }\n                    throw new Exception();\n                }\n                default -> 2;\n            };\n            int c = switch (b) {\n                case 0 -> 1;\n                default -> 2;\n            };\n            c = switch (a) {\n                case 0 -> switch (b) {\n                    case 0 -> 1;\n                    case 1 -> 2;\n                    default -> 3;\n                };\n                default -> 1;\n            };\n        }\n    }\n}\nclass InputMissingSwitchDefaultCheckSwitchExpressionsThree {\n    public enum Options {\n        ONE,\n        TWO,\n        THREE\n    }\n    public enum Day {\n        SUN,\n    }\n    public void foo2(Options option) {\n        assert Integer.valueOf(1).equals(switch (option) {\n            case ONE -> 1;\n            case TWO -> 2;\n            case THREE -> 3;\n        });\n    }\n}\nclass InputExecutableStatementCountRecords {\n      private int id(int i) {\n          return i;\n      }\n      private final int value = 2;\n      private final int field = id(switch(value) {\n          case 0 -> -1;\n          case 2 -> {\n              int temp = 0;\n              temp += 3;\n              yield temp;\n          }\n          default -> throw new IllegalStateException();\n      });\n    void commentBeforeRightCurly() {\n        int i = 20;\n        while (true) {\n            switch (i) {\n                case 0:\n                    i++;\n            }\n            switch (i) {\n                case 0:\n                    i++;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestTryWithResourceAlone.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        26,
        31,
        33,
        42,
        45,
        47
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nclass InputRightCurlyTestTryWithResourceAlone {\n    void test() throws IOException {\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) {\n            ;\n        }\n        catch (IOException e) {\n            ;\n        }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1))\n        {\n            ;\n        } catch (IOException e) \n        {\n            ;\n        }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) { ; }\n        catch (IOException e) { ; } \n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) {} catch (IOException e) { ; }\n        try (BufferedReader br1 = new BufferedReader(null); \n                BufferedReader br2 = new BufferedReader(br1)) {\n            ;\n        }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) { ; }\n        try (BufferedReader br1 = new BufferedReader(null)) {\n            ; } \n        try (BufferedReader br1 = new BufferedReader(null)) {\n            } int i; \n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestTryWithResourceSame.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        18,
        31,
        43,
        45
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nclass InputRightCurlyTestTryWithResourceSame {\n    void test() throws IOException {\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) {\n            ;\n        } \n        catch (IOException e) {\n            ;\n        }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1))\n        {\n            ;\n        } catch (IOException e)\n        {\n            ;\n        }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) { ; }\n        catch (IOException e) { ; }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) {} catch (IOException e) { ; }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) {\n            ;\n        }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) { ; }\n        try (BufferedReader br1 = new BufferedReader(null)) {\n            ; } \n        try (BufferedReader br1 = new BufferedReader(null)) {\n            } int i; \n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestWithAnnotations.java",
      "expected-problems": 49,
      "expected-linenumbers": [
        18,
        21,
        32,
        35,
        38,
        41,
        46,
        48,
        55,
        58,
        60,
        63,
        66,
        70,
        71,
        78,
        85,
        87,
        89,
        91,
        103,
        104,
        124,
        128,
        130,
        132,
        135,
        146,
        159,
        163,
        170,
        177,
        192,
        219,
        226,
        229,
        233,
        234,
        238,
        241,
        244,
        246,
        248,
        252,
        262,
        263,
        268,
        271,
        274
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nclass InputRightCurlyTestWithAnnotations\n{\n    @Deprecated\n    @Override\n    public boolean equals(Object other) { boolean flag = true; return flag; }\n    @Override\n    public String toString() { String s = \"toString\"; return s; }\n    @Override\n    @SuppressWarnings(\"unused\")\n    public int hashCode()\n    {\n        int a = 10;\n        return 1;\n    }\n    @SuppressWarnings(\"unused\")\n    private void foo2() { int a = 9; return; }\n    @SuppressWarnings(\"unused\")\n    private void foo3()\n    { int var1 = 5; var2 = 6; } \n    @Deprecated\n    private void foo4() { return; } \n    @SuppressWarnings(\"unused\")\n    private int foo5() { return 1; } \n    @SuppressWarnings(\"unused\")\n    private String foo6() { return toString();\n    }\n    private String foo7() { String s = toString(); return s.toString(); }\n    private void foo8() { ; return; } \n    private int var1; private int v1;\n    private int var2; private int v2;\n    @SuppressWarnings(\"unused\")\n    public InputRightCurlyTestWithAnnotations() { this.var1 = 1; }\n    @SuppressWarnings(\"unused\")\n    public InputRightCurlyTestWithAnnotations(int v1, int v2) {this.var1 = v1; this.var2 = v2; }\n    @SuppressWarnings(\"unused\")\n    private void foo9() { ;; } \n    @SuppressWarnings(\"unused\")\n    private void foo10() { ; } \n    @SuppressWarnings(\"unused\")\n    private void foo11() {  } \n    @SuppressWarnings(\"unused\")\n    private void foo12() {\n        try { int i = 5; int b = 10; } \n        catch (Exception e) { } \n    }\n    @Deprecated\n    @SuppressWarnings(\"unused\")\n    private void foo13() {\n        for (int i = 0; i < 10; i++) { int a = 5; int b = 6; }\n        do\n        {\n            var1 = 2;\n        }\n        while (var2 == 2);\n    }\n    static { int a; int b; } \n    static { int a; } \n    { int c; int d;} \n    { int c; } \n    @Deprecated\n    private void foo14() {\n        if (var1 > 0) {\n            return;\n        }\n    }\n    @Deprecated\n    private void foo15() {\n        class A { int a; } var1++; \n        class B {  } \n        if(true) {\n        }\n        else;\n    }\n    @Deprecated\n    private void foo16() {\n        if (true) { return; } else { } \n        if (false) {\n        }\n        if (true) { return; } else { } \n    }\n    @Deprecated\n    void foo17() { int v1 = 5; v2 = 6; } @Deprecated void foo18() {int v1 = 5; v2 = 6; }\n    private void foo19() {int var1 = 5;\n        var2 = 6;} \n    @SuppressWarnings(\"Hello, world!\")\n    private String foo20() {\n        do { var2 ++; } \n        while (var2 < 15);\n        while (var1 < 10) { var1++; } \n        do { var2++; var1++; } while (var2 < 15); return \"\"+0xCAFEBABE;\n    }\n    private void foo21() { \n        new Object() { @Override protected void finalize() { \"\".toString(); }};\n    }\n    @SuppressWarnings(\"All\")\n    void foo22() {\n        long startTime = System.nanoTime();\n        try {\n            int a = 5;\n            toString();\n        } catch (Exception e) { \n            throw new RuntimeException(e);\n        } finally { toString(); } \n    }\n    @SuppressWarnings(\"\")\n    void doDoubleBraceInitialization() {\n        java.util.Map<String, String> map = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");\n        }}; \n        Thread t = new Thread() {@Override public void run() {super.run();}};\n        new Object() { public int hashCode() { return 1; }  { int a = 5; }}; \n        new Object() { public int hashCode() { return 1; }  int b = 10; };\n        new Object() { public int hashCode() { return 1; } { int c = 5; } int d = 8; };\n        java.util.Map<String, String> map2 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");}  \n        };\n        java.util.Map<String, String> map3 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");}};  \n        java.util.Map<String, String> map4 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"World\");\n            put(\"first\", \"second\");\n            put(\"polygene\", \"lubricants\");\n            put(\"alpha\", \"betical\");\n            }\n        };\n        foo23(new java.util.HashSet<String>() {{\n            add(\"XZ13s\");\n            add(\"AB21/X\");\n            add(\"YYLEX\");\n            add(\"AR5E\");\n        }}); \n        foo23(new java.util.HashSet<String>() {{\n            add(\"XZ13s\");\n            add(\"AB21/X\");\n            add(\"YYLEX\");\n            add(\"AR5E\");\n        }});} \n    void foo23(java.util.HashSet<String> set) {\n    }\n    void foo25() {\n        for (int i = 0; i < 10; i++) {\n            System.identityHashCode(\"Hello, world!\");\n        }} \n    void foo26() {\n        for (int i = 0; i < 10; i++) {\n            System.identityHashCode(\"Hello, world!\");}} \n    void foo27() {\n        for (int i = 0; i < 10; i++) {for (int j = 0; j < 15; j++) {int a;}}} \n    private java.util.ArrayList<Integer> foo28(int delta) {\n        return new java.util.ArrayList<Integer>() {\n        @Override public int size() { return Math.max(0, super.size() + 1);};\n        }; \n    }\n    private void foo29() {\n        boolean flag = true;\n        if (flag) {\n            System.identityHashCode(\"heh\");\n            flag = !flag; } String. \n                CASE_INSENSITIVE_ORDER.equals(\"Xe-xe\");\n    }\n    public void testMethod() {}; \n    public void testMethod1() {\n    }; \n    public class TestClass {}; \n    public class TestClass1 {\n    }; \n    public class TestClass2 {\n        public TestClass2() {}; \n        public TestClass2(String someValue) {\n        }; \n    }\n    public @interface TestAnnotation {} \n    public @interface TestAnnotation1{ String value(); }\n    public @interface TestAnnotation2 {\n        String value();} \n    public @interface TestAnnotation3 {\n        String value();\n    }\n    public @interface TestAnnottation4 { String value();\n    }\n    public @interface TestAnnnotation5 {\n        String someValue(); }; \n    public @interface TestAnnotation6 {}; \n    public @interface TestAnnotation7 {\n        String someValue();\n    }; \n    public @interface TestAnnotation8 { String someValue();\n    }; \n    public @interface TestAnnotation9 { String someValue(); };\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestWithComment.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        14,
        21,
        22,
        30,
        30,
        36,
        36
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyTestWithComment {\n    void m1(int mode) {\n        switch (mode) {\n            default:\n                int x = 0; \n    }\n    void m2() {\n        int a = 0;\n        if (a > 2) {\n            System.out.println();  \n    void method() {\n        int a = 0;\n        if (a > 2) {\n            System.out.println(\"no\");\n    void loop() {\n        while(true) {\n            System.out.println(\"Checkstyle\");\n}"
    },
    {
      "description": "Auto test from InputRightCurlyTestWithoutFinally.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        17
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nclass InputRightCurlyTestWithoutFinally\n{\n    void foo() throws InterruptedException\n    {\n        try\n        {\n        } \n        catch (Exception e)\n        {\n            return;\n        }\n        }\n    }\nclass UniqEmptyClassTestWithoutFinally {private int a;}"
    },
    {
      "description": "Auto test from InputRightCurlyTryWithResourceAloneSingle.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        26,
        42,
        44
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nclass InputRightCurlyTryWithResourceAloneSingle {\n    void test() throws IOException {\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) {\n            ;\n        }\n        catch (IOException e) {\n            ;\n        }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1))\n        {\n            ;\n        } catch (IOException e) \n        {\n            ;\n        }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) { ; }\n        catch (IOException e) { ; }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) {} catch (IOException e) { ; }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) {\n            ;\n        }\n        try (BufferedReader br1 = new BufferedReader(null);\n                BufferedReader br2 = new BufferedReader(br1)) { ; }\n        try (BufferedReader br1 = new BufferedReader(null)) {\n            ; } \n        try (BufferedReader br1 = new BufferedReader(null)) {\n            } int i; \n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyWithEmoji.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        22,
        27,
        49,
        69,
        78,
        81
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyWithEmoji {\n    static Runnable r = () -> {\n        String.valueOf(\"Hello world 🥳 🎄 !!\");\n    };\n    private void method2() {\n        String x = \"🎄🤣\";\n        { String y = \"🎄🤣🎄🤣\";}\n        try {\n            if (x.equals(\"🎄🤣\")) {\n            } \n            else if (!x.equals(\"🎄🤣\")) {\n                ;\n            } \n            else {\n                x = \"🎄🤣\";\n            }\n            switch (x) {\n                case \"\\uD83C\\uDF84\\uD83E\\uDD23\":\n                    break;\n                default: {\n                    break;\n                }\n            }\n            switch (\"🤣\") {\n                case \"qw\": {\n                    return;\n                }\n                default: {\n                    return;\n                }\n            }\n        }\n        catch (Exception e) {\n        }\n        while (x == \"🎄\") {\n        }\n    }\n    public void foo3() {\n        String a = \"😆🤩\";\n        int i = 1;\n        do {\n            i++;\n            String.CASE_INSENSITIVE_ORDER.equals(i + \" \");\n        } while (a.equals(\"🧐\"));\n    }\n    String method4(String a) {\n        if (a.equals(\"🎄\")) a = \"😆\"; return \"😆🤩\"; }\n    public void foo4() {String a = \"😆🤩\";}\n    interface Interface3 {\n        void display();\n        interface Interface4 {\n            default boolean foo5(){\n                return \"qwwe\".equals(\"🎄🤣\");}}\n    }\n    public void foo5() {\n        do { \n            String a = new String(\"🤣🤣\");}\n         while (true);\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyWithEmojiAloneOrSingleLine.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        23,
        30,
        40,
        50,
        54
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyWithEmojiAloneOrSingleLine {\n    private String a;\n    private static String b;\n    {  a = \"🧐😏\"; }\n    static { b = \"😧🤩\"; }\n    void method2(java.util.HashSet<String> set) {\n        java.util.Map<String, String> map1 = new java.util.LinkedHashMap<String, String>() {{\n            put(\"Hello\", \"😧🤩\");\n            put(\"😧🤩\", \"second\" + \"😧🤩\");\n            put(\"polysa😧🤩gene\", \"lubricants\");\n            put(\"alpha\", \"betical🎄\");} \n        };\n    }\n    String method4(String a) {\n        if (a.equals(\"🎄\")) ; return \"😆🤩\"; }\n    void method5(String a, int b) {\n        while (\"👈🏻🧐\".length() > 5) { ; }\n        if (\"👉🏻👉🏼\".isEmpty()) { ; }\n        do {b--;} while (a.equals(\"🤩\"));\n        for (int i = 1; i < 10; i++) {\n            if(\"🎄🎄🎄\".charAt(i) == 's') i++; }\n        java.util.List<String> list = new java.util.ArrayList<>();\n        list.stream()\n                .filter(e -> {return !e.isEmpty() && !\"🤩🎄\".equals(e);} )\n                .collect(java.util.stream.Collectors.toList());\n    }\n    public void foo5() {\n        do {\n            String a = new String(\"🤣🤣\");} \n        while (false);\n        if(true) {\n            String a = (\"🤣🤣\");}  else{\n                return;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRightCurlyWithUppercaseOptionProperty.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        16,
        20
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.blocks.rightcurly;\npublic class InputRightCurlyWithUppercaseOptionProperty {\n    @SuppressWarnings(\"unused\")\n    private void foo2() { int a = 9; return; }\n    @SuppressWarnings(\"unused\")\n    private void foo3()\n    { int var1 = 5; int var2 = 6; } \n}"
    }
  ]
}