{
  "name": "RecordComponentNumber",
  "language": "java",
  "description": "<div>\n Checks the number of record components in the\n <a href=\"https://docs.oracle.com/javase/specs/jls/se14/preview/specs/records-jls.html#jls-8.10.1\">\n header</a> of a record definition.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 61,
  "branches": 16,
  "apis": 16,
  "test": [
    {
      "description": "Auto test from InputRecordComponentNumberMax1.java",
      "expected-problems": 14,
      "expected-linenumbers": [
        26,
        30,
        34,
        50,
        55,
        63,
        67,
        71,
        75,
        88,
        90,
        100,
        104,
        115
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\nimport java.awt.Point;\nimport java.awt.Shape;\nimport java.util.ArrayDeque;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport org.w3c.dom.Node;\npublic class InputRecordComponentNumberMax1 {\n    public record TestRecord1(int x){\n        public TestRecord1{\n        }\n    }\n    public record TestRecord2(int x, int y){ \n    }\n    public record TestRecord3(String str, int x, int y){ \n    }\n    public record TestRecord4(Node node, \n                              Point x,\n                              Point y,\n                              int translation,\n                              Shape square){\n        private static ArrayDeque<String> myDeque = new ArrayDeque<>();\n        public TestRecord4 {\n            try {\n                myDeque.add(x.toString());\n                myDeque.add(y.toString());\n            } catch (Exception ignored) {\n            }\n        }\n    }\n    public record TestRecord5(int x, int y, int z, \n                              int a, int b, int c, int d){\n    }\n    public record TestRecord6(int x, int y, int z, \n                              int a, int b, int c, int d, int e,\n                              int f, int g, int h, int i, int j,\n                              int k){\n    }\n    public record TestRecord7(int y){\n        record InnerRecordOk(int x, int y, int z){ \n        }\n        private record InnerRecordBad(int x, int y, int z, \n                                      int a, int b, int c, int d, int e,\n                                      int f, int g, int h, int i, int j, int k){\n            private record InnerRecordCeptionBad(int x, int y, int z, \n                                      int a, int b, int c, int d, int e,\n                                      int f, int g, int h, int i, int j, int k){\n                public record InnerPublicBad(int[] arr, \n                                             LinkedHashMap<String, Node> linkedHashMap,\n                                             int x,\n                                             ArrayDeque<Node> arrayDeque,\n                                             List<String> myList,\n                                             List<String> myOtherList) {\n                }\n            }\n        }\n    }\n    public record TestRecord8(int x, int y, int z, String... myVarargs){} \n    public record TestRecord9(int x, int y, int z, \n                              int a, int b, int c,\n                              int d, int e, int f,\n                              int g, int h, int i,\n                              int j, int k, String... myVarargs){\n    }\n    public record TestRecord10(String... myVarargs){}\n    public record TestRecord11(int[] arr, \n                               LinkedHashMap<String, Node> linkedHashMap,\n                               int x){}\n    public record TestRecord12(int[] arr, \n                               LinkedHashMap<String, Node> linkedHashMap,\n                               int x,\n                               ArrayDeque<Node> arrayDeque,\n                               List<String> myList,\n                               List<String> myOtherList){\n    }\n    private static record MyPrivateRecord1() {}\n    private static record MyPrivateRecord2(int x, int y) {} \n}"
    },
    {
      "description": "Auto test from InputRecordComponentNumberOne.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        55,
        68,
        74,
        80,
        99
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\nimport java.awt.Point;\nimport java.awt.Shape;\nimport java.util.ArrayDeque;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport org.w3c.dom.Node;\npublic class InputRecordComponentNumberOne {\n    public record TestRecord1(int x){\n        public TestRecord1{\n        }\n    }\n    public record TestRecord2(int x, int y){\n    }\n    public record TestRecord3(String str, int x, int y){\n    }\n    public record TestRecord4(Node node,\n                              Point x,\n                              Point y,\n                              int translation,\n                              Shape square){\n        private static ArrayDeque<String> myDeque = new ArrayDeque<>();\n        public TestRecord4 {\n            try {\n                myDeque.add(x.toString());\n                myDeque.add(y.toString());\n            } catch (Exception ignored) {\n            }\n        }\n    }\n    public record TestRecord5(int x, int y, int z,\n                              int a, int b, int c, int d){\n    }\n    public record TestRecord6(int x, int y, int z, \n                              int a, int b, int c,\n                              int d, int e, int f,\n                              int g, int h, int i,\n                              int j, int k){\n    }\n    public record TestRecord7(int y){\n        record InnerRecordOk(int x, int y, int z){\n        }\n        private record InnerRecordBad(int x, int y, int z, \n                                      int a, int b, int c,\n                                      int d, int e, int f,\n                                      int g, int h, int i,\n                                      int j, int k){\n            private record InnerRecordCeptionBad(int x, int y, int z, \n                                                 int a, int b, int c,\n                                                 int d, int e, int f,\n                                                 int g, int h, int i,\n                                                 int j, int k) {\n                public record InnerPublicBad(int[] arr, \n                                             LinkedHashMap<String, Node> linkedHashMap,\n                                             int x,\n                                             ArrayDeque<Node> arrayDeque,\n                                             List<String> myList,\n                                             List<String> myOtherList,\n                                             int a, int b, int c, int d, int e) {\n                }\n            }\n        }\n    }\n    public record TestRecord8(int x, int y, int z, String... myVarargs){\n    }\n    public record TestRecord9(int x, int y, int z, \n                              int a, int b, int c,\n                              int d, int e, int f,\n                              int g, int h, int i,\n                              int j, int k, String... myVarargs){\n    }\n    class LocalRecordHelper {\n        Class<?> m(int x) {\n            record R76 (int x) { }\n            return R76.class;\n        }\n        private class R {\n            public R(int x) {\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRecordComponentNumberPrivateModifierOne.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        68,
        74
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\nimport java.awt.Point;\nimport java.awt.Shape;\nimport java.util.ArrayDeque;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport org.w3c.dom.Node;\npublic class InputRecordComponentNumberPrivateModifierOne {\n    public record TestRecord1(int x){\n        public TestRecord1{\n        }\n    }\n    public record TestRecord2(int x, int y){\n    }\n    public record TestRecord3(String str, int x, int y){\n    }\n    public record TestRecord4(Node node,\n                              Point x,\n                              Point y,\n                              int translation,\n                              Shape square){\n        private static ArrayDeque<String> myDeque = new ArrayDeque<>();\n        public TestRecord4 {\n            try {\n                myDeque.add(x.toString());\n                myDeque.add(y.toString());\n            } catch (Exception ignored) {\n            }\n        }\n    }\n    public record TestRecord5(int x, int y, int z,\n                              int a, int b, int c, int d){\n    }\n    public record TestRecord6(int x, int y, int z,\n                              int a, int b, int c,\n                              int d, int e, int f,\n                              int g, int h, int i,\n                              int j, int k){\n    }\n    public record TestRecord7(int y){\n        record InnerRecordOk(int x, int y, int z){\n        }\n        private record InnerRecordBad(int x, int y, int z, \n                                      int a, int b, int c,\n                                      int d, int e, int f,\n                                      int g, int h, int i,\n                                      int j, int k){\n            private record InnerRecordCeptionBad(int x, int y, int z, \n                                                 int a, int b, int c,\n                                                 int d, int e, int f,\n                                                 int g, int h, int i,\n                                                 int j, int k) {\n                public record InnerPublicBad(int[] arr,\n                                             LinkedHashMap<String, Node> linkedHashMap,\n                                             int x,\n                                             ArrayDeque<Node> arrayDeque,\n                                             List<String> myList,\n                                             List<String> myOtherList,\n                                             int a, int b, int c, int d, int e) {\n                }\n            }\n        }\n    }\n    public record TestRecord8(int x, int y, int z, String... myVarargs){\n    }\n    class LocalRecordHelper {\n        Class<?> m(int x) {\n            record R76 (int x) { }\n            return R76.class;\n        }\n        private class R {\n            public R(int x) {\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputRecordComponentNumberPrivateModifierTwo.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        46
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\nimport java.util.ArrayDeque;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport org.w3c.dom.Node;\npublic class InputRecordComponentNumberPrivateModifierTwo {\n  public record TestRecord2(int x){\n        public TestRecord2{\n        }\n  }\n  public record TestRecord9(int x, int y, int z,\n                              int a, int b, int c,\n                              int d, int e, int f,\n                              int g, int h, int i,\n                              int j, int k, String... myVarargs){\n  }\n    public record TestRecord10(String... myVarargs){}\n    public record TestRecord11(int[] arr, LinkedHashMap<String, Node> linkedHashMap, int x){}\n    public record TestRecord12(int[] arr,\n                               LinkedHashMap<String, Node> linkedHashMap,\n                               int x,\n                               ArrayDeque<Node> arrayDeque,\n                               List<String> myList,\n                               List<String> myOtherList){\n    }\n    private static record MyPrivateRecord1(int x, int y, int z, \n                                           int a, int b, int c,\n                                           int d, int e, int f,\n                                           int g, int h, int i,\n                                           int j, int k, String... myVarargs) {}\n    private static record MyPrivateRecord2(int x, int y) {}\n    protected static record MyProtectedRecord1(int x, int y) {}\n    protected static record MyProtectedRecord2(int x, int y, int z,\n                                               int a, int b, int c,\n                                               int d, int e, int f,\n                                               int g, int h, int i,\n                                               int j, int k, String... myVarargs) {}\n}"
    },
    {
      "description": "Auto test from InputRecordComponentNumberTopLevel1.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        10
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\npublic record InputRecordComponentNumberTopLevel1(int x, int y, int z, \n                                                int a, int b, int c,\n                                                int d, int e, int f,\n                                                int g, int h, int i,\n                                                int j, int k,\n                                                 String... myVarargs) {\n}"
    },
    {
      "description": "Auto test from InputRecordComponentNumberTwo.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        36,
        46
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.recordcomponentnumber;\nimport java.util.ArrayDeque;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport org.w3c.dom.Node;\npublic class InputRecordComponentNumberTwo {\n  public record TestRecord2(int x){\n        public TestRecord2{\n        }\n  }\n  public record TestRecord10(String... myVarargs){}\n  public record TestRecord11(int[] arr, LinkedHashMap<String, Node> linkedHashMap, int x){}\n  public record TestRecord12(int[] arr,\n                               LinkedHashMap<String, Node> linkedHashMap,\n                               int x,\n                               ArrayDeque<Node> arrayDeque,\n                               List<String> myList,\n                               List<String> myOtherList){\n  }\n  private static record MyPrivateRecord1(int x, int y, int z, \n                                           int a, int b, int c,\n                                           int d, int e, int f,\n                                           int g, int h, int i,\n                                           int j, int k, String... myVarargs) {}\n  private static record MyPrivateRecord2(int x, int y) {}\n  protected static record MyProtectedRecord1(int x, int y) {}\n  protected static record MyProtectedRecord2(int x, int y, int z, \n                                               int a, int b, int c,\n                                               int d, int e, int f,\n                                               int g, int h, int i,\n                                               int j, int k, String... myVarargs) {}\n}"
    }
  ]
}