{
  "name": "MethodLength",
  "language": "java",
  "description": "<div>\n Checks for long methods and constructors.\n </div>\n\n <p>\n Rationale: If a method becomes very long it is hard to understand.\n Therefore, long methods should usually be refactored into several\n individual methods that focus on a specific task.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 83,
  "branches": 6,
  "apis": 24,
  "test": [
    {
      "description": "Auto test from InputMethodLengthComments.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        32
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.methodlength;\npublic class InputMethodLengthComments {\n    static class DetailClass {\n        public DetailClass find(int type) {\n            return null;\n        }\n    }\n    static class Tokens {\n        public static int ZERO = 0;\n        public static int ONE = 1;\n    }\n    public void visitToken(DetailClass ast) {\n        final DetailClass openingBrace = ast.find(Tokens.ZERO);\n        if (openingBrace != null) {\n            final DetailClass closingBrace =\n                    openingBrace.find(Tokens.ONE);\n        }\n    }\n    public DetailClass visit(DetailClass ast) {\n        final DetailClass openingBrace = ast.find(Tokens.ZERO);\n        DetailClass closingBrace = null;\n        if (openingBrace != null) {\n            closingBrace = openingBrace.find(Tokens.ONE);\n        }\n        return closingBrace;\n    }\n}"
    },
    {
      "description": "Auto test from InputMethodLengthCompactCtorsCountEmpty.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        24,
        31,
        37,
        54,
        56
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.methodlength;\npublic class InputMethodLengthCompactCtorsCountEmpty {\n    record MyTestRecord() {\n        static {\n            System.out.println(\"test\");\n            System.out.println(\"test\");\n            System.out.println(\"test\");\n        }\n    }\n    record MyTestRecord2() {\n        public MyTestRecord2 { \n            System.out.println(\"test\");\n        }\n    }\n    record MyTestRecord3(String str) {\n        void foo() { \n            System.out.println(\"test\");\n        }\n    }\n    record MyTestRecord4(int x, int y) {\n        public MyTestRecord4() { \n            this(4, 5);\n        }\n    }\n    record MyTestRecord5() {\n        public MyTestRecord5() {\n        }\n    }\n    class LocalRecordHelper {\n        Class<?> m(int x) { \n            record R76(int x) {\n                public R76 { \n                    int y = 5;\n                    int z = 10;\n                    String newString = String.valueOf(y);\n                    System.out.println(newString);\n                    System.out.println(\"Value of y: \" + newString);\n                    System.out.println(y + z);\n                }\n            }\n            return R76.class;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMethodLengthCountEmptySmallSize.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        22,
        39,
        43,
        51,
        61
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.methodlength;\npublic class InputMethodLengthCountEmptySmallSize {}\nclass AA {\n    AA() { \n    }\n    AA(int a) { \n    }\n    AA(String a) {  \n        oneLine();\n    }\n    void twoLines() {\n    }\n    void twoLines2() {\n        oneLine();}\n    void twoLinesAndComment() {\n    }\n    void oneLine() { oneLine();}\n    void threeLines() { \n        oneLine();\n    }\n    void threeLinesAndComments() { \n        oneLine();\n    }\n    void threeLinesWrap() \n    {\n        oneLine();\n    }\n    void m2() { \n        String a = \"1\";\n        a.concat(\"\")\n            .concat(\"\")\n            .concat(\"\")\n            .concat(\"\")\n            .concat(\"\")\n            .concat(\"\")\n            .concat(\"\");\n    }\n}"
    },
    {
      "description": "Auto test from InputMethodLengthRecordsAndCompactCtors.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        24,
        34,
        42,
        64,
        66
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.methodlength;\npublic class InputMethodLengthRecordsAndCompactCtors {\n    record MyTestRecord() {\n        static {\n            System.out.println(\"test\");\n            System.out.println(\"test\");\n            System.out.println(\"test\");\n        }\n    }\n    record MyTestRecord2() {\n        public MyTestRecord2 {\n            System.out.println(\"test\");\n            System.out.println(\"test\");\n            System.out.println(\"test\");\n        }\n    }\n    record MyTestRecord3(String str) {\n        void foo() { \n            System.out.println(\"test\");\n            System.out.println(\"test\");\n            System.out.println(\"test\");\n        }\n    }\n    record MyTestRecord4(int x, int y) {\n        public MyTestRecord4() {\n            this(4, 5);\n            System.out.println(\"test\");\n            System.out.println(\"test\");\n            System.out.println(\"test\");\n        }\n    }\n    record MyTestRecord5() {\n        static {\n            int y = 5;\n            int z = 10;\n            String newString = String.valueOf(y);\n            System.out.println(newString);\n            System.out.println(\"Value of y: \" + newString);\n            System.out.println(y + z);\n        }\n    }\n    class LocalRecordHelper {\n        Class<?> m(int x) { \n            record R76(int x) {\n                public R76 { \n                    int y = 5;\n                    int z = 10;\n                    String newString = String.valueOf(y);\n                    System.out.println(newString);\n                    System.out.println(\"Value of y: \" + newString);\n                    System.out.println(y + z);\n                }\n            }\n            return R76.class;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputMethodLengthSimpleTwo.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        14
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.methodlength;\nimport java.io.*;\nfinal class InputMethodLengthSimpleTwo\n{\n    private void longMethod()\n    {\n    }\n    void ALL_UPPERCASE_METHOD()\n    {\n    }\n    private static final int BAD__NAME = 3;\n    void errorColumnAfterTabs()\n    {\n                int tab0 =1;\n                int tab1 =1;\n                 int tab2 =1;\n                int tab3 =1;\n                    int tab4 =1;\n                  int tab5 =1;\n    }\n    void veryLong()\n    {\n    }\n    void toManyArgs(int aArg1, int aArg2, int aArg3, int aArg4, int aArg5,\n                    int aArg6, int aArg7, int aArg8, int aArg9)\n    {\n    }\n}\nenum MyEnum1\n{\n    ABC,\n    XYZ;\n    private int someMember;\n}"
    },
    {
      "description": "Auto test from InputMethodLengthTextBlocksCountEmpty.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        13,
        41,
        55,
        64
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.methodlength;\npublic class InputMethodLengthTextBlocksCountEmpty {\n    void longEmptyTextBlock() { \n        String a = \"\"\"\n                      3\n                      4\n                      5\n                      6\n                      7\n                      8\n                      9\n                      10\n                      11\n                      12\n                      13\n                      14\n                      15\n                      16\n                      17\n                      18\n                      19\n                      20\n\"\"\";}\n    void textBlock2() { \n    String a = \"\"\"\n        3\n        4\n        5\n        6\n\"\"\";\n    int b = 1;\n    }\n    void textBlockWithIndent() { \n        String a = \"\"\"\n        3\n        4\n        5\n        6\n        7\n         \"\"\";}\n    void textBlockNoIndent() { \n        String a =\n\"\"\"\n        3\n        4\n        5\n        6\n        7\n\"\"\"\n            ;\n    }\n    void text2Lines() {String a = \"\"\"\n    \"\"\";}\n}"
    }
  ]
}