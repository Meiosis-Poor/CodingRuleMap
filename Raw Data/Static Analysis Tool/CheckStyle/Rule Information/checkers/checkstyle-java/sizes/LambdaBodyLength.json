{
  "name": "LambdaBodyLength",
  "language": "java",
  "description": "<div>\n Checks lambda body length.\n </div>\n\n <p>\n Rationale: Similar to anonymous inner classes, if lambda body becomes very long\n it is hard to understand and to see the flow of the method\n where the lambda is defined. Therefore, long lambda body\n should usually be extracted to method.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 64,
  "branches": 5,
  "apis": 16,
  "test": [
    {
      "description": "Auto test from InputLambdaBodyLengthDefault.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        15,
        27,
        40,
        53,
        55,
        67
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.lambdabodylength;\nimport java.util.List;\nimport java.util.function.*;\npublic class InputLambdaBodyLengthDefault {\n    {\n        List<String> list = null;\n        list.forEach(item -> { \n            System.out.println(1);\n            System.out.println(2);\n            System.out.println(3);\n            System.out.println(4);\n            System.out.println(5);\n            System.out.println(6);\n            System.out.println(7);\n            System.out.println(8);\n            System.out.println(9);\n            System.out.println(10);\n        });\n        list.forEach(item -> System.out.println( \n            item.concat(\"2\")\n                .concat(\"3\")\n                .concat(\"4\")\n                .concat(\"5\")\n                .concat(\"6\")\n                .concat(\"7\")\n                .concat(\"8\")\n                .concat(\"9\")\n                .concat(\"10\")\n                .concat(\"11\")\n            )\n        );\n        list.forEach(item -> \n            System\n                .\n                    out\n                .\n                    println\n                        (\n                            item\n                        )\n        );\n        Supplier<Runnable> s = () -> \n            (\n            ) -> { \n            };\n        Supplier<String> s1 = () -> \n            \"1\"\n                + \"2\"\n                + \"3\"\n                + \"4\"\n                + \"5\"\n                + \"6\"\n                + \"7\"\n                + \"8\"\n                + \"9\"\n                + \"10\"\n                + \"11\"\n            ;\n        Supplier<String> s2 = () -> \n            \"1\"\n                + \"2\"\n                + \"3\"\n                + \"4\"\n                + \"5\"\n                + \"6\"\n                + \"7\"\n                + \"8\"\n                + \"9\"\n                + \"10\"\n            ;\n        list.forEach(item -> { \n            System.out.println(1);\n            System.out.println(2);\n            System.out.println(3);\n            System.out.println(4);\n            System.out.println(5);\n            System.out.println(6);\n            System.out.println(7);\n            System.out.println(8);\n        });\n    }\n}"
    },
    {
      "description": "Auto test from InputLambdaBodyLengthMax.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        15,
        19,
        29,
        35
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.sizes.lambdabodylength;\nimport java.util.List;\nimport java.util.function.Supplier;\npublic class InputLambdaBodyLengthMax {\n    {\n        List<String> list = null;\n        list.forEach(item -> { \n            System.out.println(1);\n            System.out.println(2);\n        });\n        list.forEach(item -> System.out.println( \n            item.concat(\"2\")\n                .concat(\"3\")\n            )\n        );\n        list.forEach(item -> \n            System.\n                out.\n                println(item)\n        );\n        Supplier<Runnable> s = () -> \n            (\n            ) -> {\n            };\n        Supplier<String> s1 = () -> \n            \"1\"\n                + \"2\"\n                + \"3\"\n                + \"4\"\n            ;\n        Supplier<String> s2 = () ->\n            \"1\"\n                + \"2\"\n                + \"3\"\n            ;\n    }\n}"
    }
  ]
}