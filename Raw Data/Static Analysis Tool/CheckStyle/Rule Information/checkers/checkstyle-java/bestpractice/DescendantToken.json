{
  "name": "DescendantToken",
  "language": "java",
  "description": "<div>\n Checks for restricted tokens beneath other tokens.\n </div>\n\n <p>\n WARNING: This is a very powerful and flexible check, but, at the same time,\n it is low-level and very implementation-dependent because its results depend\n on the grammar we use to build abstract syntax trees. Thus, we recommend using\n other checks when they provide the desired functionality. Essentially, this\n check just works on the level of an abstract syntax tree and knows nothing\n about language structures.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 152,
  "branches": 17,
  "apis": 28,
  "test": [
    {
      "description": "Auto test from InputDescendantTokenEmptyStatement.java",
      "expected-problems": 16,
      "expected-linenumbers": [
        21,
        26,
        31,
        35,
        37,
        42,
        52,
        58,
        60,
        62,
        67,
        69,
        75,
        81,
        85,
        89
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenEmptyStatement\n{\n   public InputDescendantTokenEmptyStatement()\n   {\n      ; \n   }\n   public void EmptyMethod()\n   {\n      ; \n   }\n   public void EmptyStatements(boolean cond)\n   {\n      for (;cond;); \n      for (;cond;)\n      {\n         ; \n      }\n      if (true); \n      if (true)\n      {\n         ; \n      }\n      if (cond)\n      {\n         int i;\n      }\n      else\n      {\n         ; \n      }\n      switch (1)\n      {\n         case 1 :\n            ; \n         default :\n            ; \n      }\n      while (cond); \n      while (cond)\n      {\n         ; \n      }\n      do; \n      while (cond);\n      do\n      {\n         ; \n      }\n      while (cond);\n      try\n      {\n         ; \n      }\n      catch (Exception ex)\n      {\n         ; \n      }\n      finally\n      {\n         ; \n      }\n   }\n}"
    },
    {
      "description": "Auto test from InputDescendantTokenIllegalTokens2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        30
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenIllegalTokens2\n{\n    public void methodWithPreviouslyIllegalTokens()\n    {\n        int i = 0;\n        switch (i)\n        {\n            default:\n                i--;\n                i++;\n                break;\n        }\n    }\n    public native void nativeMethod();\n}"
    },
    {
      "description": "Auto test from InputDescendantTokenIllegalTokens3.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        30
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenIllegalTokens3\n{\n    public void methodWithPreviouslyIllegalTokens()\n    {\n        int i = 0;\n        switch (i)\n        {\n            default:\n                i--;\n                i++;\n                break;\n        }\n    }\n    public native void nativeMethod(); \n}"
    },
    {
      "description": "Auto test from InputDescendantTokenIllegalTokens4.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        22
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenIllegalTokens4\n{\n    public void methodWithPreviouslyIllegalTokens()\n    {\n        int i = 0;\n        switch (i)\n        {\n            default:\n                i--;\n                i++;\n                break;\n        }\n    }\n    public native void nativeMethod();\n}"
    },
    {
      "description": "Auto test from InputDescendantTokenIllegalTokens7.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        22,
        25,
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenIllegalTokens7\n{\n    public void methodWithPreviouslyIllegalTokens()\n    {\n        int i = 0;\n        switch (i) \n        {\n            default:\n                i--; \n                i++; \n                break;\n        }\n    }\n    public native void nativeMethod();\n}"
    },
    {
      "description": "Auto test from InputDescendantTokenIllegalTokens8.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        30
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenIllegalTokens8\n{\n    public void methodWithPreviouslyIllegalTokens()\n    {\n        int i = 0;\n        switch (i)\n        {\n            default:\n                i--;\n                i++;\n                break;\n        }\n    }\n    public native void nativeMethod(); \n}"
    },
    {
      "description": "Auto test from InputDescendantTokenMissingSwitchDefault.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        31
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenMissingSwitchDefault {\n    public void foo() {\n        int i = 1;\n        switch (i) {\n        case 1: i++; break;\n        case 2: i--; break;\n        default: return;\n        }\n    }\n}\nclass bad_test {\n    public void foo() {\n        int i = 1;\n        switch (i) { \n        case 1: i++; break;\n        case 2: i--; break;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputDescendantTokenReturnFromCatch.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        21,
        29
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenReturnFromCatch {\n    public void foo() {\n        try {\n            System.currentTimeMillis();\n        } catch (Exception e) { \n            return;\n        }\n    }\n    public void bar() {\n        try {\n            System.currentTimeMillis();\n        } catch (Exception e) { \n            if (System.currentTimeMillis() == 0) {\n                return; \n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputDescendantTokenReturnFromFinally.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        21,
        29
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenReturnFromFinally {\n    public void foo() {\n        try {\n            System.currentTimeMillis();\n        } finally { \n            return;\n        }\n    }\n    public void bar() {\n        try {\n            System.currentTimeMillis();\n        } finally { \n            if (System.currentTimeMillis() == 0) {\n                return; \n            }\n        }\n    }\n    public void thisNull() {\n        boolean result = (this == null) || (null == this);\n        boolean result2 = (this != null) && (null != this);\n        boolean result3 = (this.getClass().getName()\n            == String.valueOf(null == System.getProperty(\"abc\")));\n    }\n}"
    },
    {
      "description": "Auto test from InputDescendantTokenReturnFromFinally5.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        30
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenReturnFromFinally5 {\n    public void foo() {\n        try {\n            System.currentTimeMillis();\n        } finally {\n            return;\n        }\n    }\n    public void bar() {\n        try {\n            System.currentTimeMillis();\n        } finally {\n            if (System.currentTimeMillis() == 0) {\n                return; \n            }\n        }\n    }\n    public void thisNull() {\n        boolean result = (this == null) || (null == this); \n        boolean result2 = (this != null) && (null != this); \n        boolean result3 = (this.getClass().getName()\n            == String.valueOf(null == System.getProperty(\"abc\"))); \n    }\n}"
    },
    {
      "description": "Auto test from InputDescendantTokenReturnFromFinally6.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        30
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenReturnFromFinally6 {\n    public void foo() {\n        try {\n            System.currentTimeMillis();\n        } finally {\n            return;\n        }\n    }\n    public void bar() {\n        try {\n            System.currentTimeMillis();\n        } finally {\n            if (System.currentTimeMillis() == 0) { \n                return; \n            }\n        }\n    }\n    public void thisNull() {\n        boolean result = (this == null) || (null == this); \n        boolean result2 = (this != null) && (null != this); \n        boolean result3 = (this.getClass().getName()\n            == String.valueOf(null == System.getProperty(\"abc\"))); \n    }\n}"
    },
    {
      "description": "Auto test from InputDescendantTokenStringLiteralEquality.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        21,
        25,
        30
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.descendanttoken;\npublic class InputDescendantTokenStringLiteralEquality\n{\n    void foo(String name)\n    {\n        if (name == \"Lars\") \n        {\n        }\n        if (\"Oleg\" == name) \n        {\n        }\n        if (\"Oliver\" == \"Oliver\") \n        {\n        }\n        String compare = \"Rick\";\n        if (name == compare)\n        {\n        }\n        if (\"Rick\".toUpperCase(java.util.Locale.getDefault())\n              == \"Rick\".toLowerCase(java.util.Locale.getDefault()))\n        {\n        }\n    }\n}"
    }
  ]
}