{
  "name": "TrailingComment",
  "language": "java",
  "description": "<div>\n The check to ensure that lines with code do not end with comment.\n For the case of {@code //} comments that means that the only thing that should precede\n it is whitespace. It doesn't check comments if they do not end a line; for example,\n it accepts the following: <code>Thread.sleep( 10 /*some comment here&#42;/ );</code>\n Format property is intended to deal with the <code>} // while</code> example.\n </div>\n\n <p>\n Rationale: Steve McConnell in <cite>Code Complete</cite> suggests that endline\n comments are a bad practice. An end line comment would be one that is on\n the same line as actual code. For example:\n </p>\n <pre>\n a = b + c;      // Some insightful comment\n d = e / f;        // Another comment for this line\n </pre>\n\n <p>\n Quoting <cite>Code Complete</cite> for the justification:\n </p>\n <ul>\n <li>\n \"The comments have to be aligned so that they do not interfere with the visual\n structure of the code. If you don't align them neatly, they'll make your listing\n look like it's been through a washing machine.\"\n </li>\n <li>\n \"Endline comments tend to be hard to format...It takes time to align them.\n Such time is not spent learning more about the code; it's dedicated solely\n to the tedious task of pressing the spacebar or tab key.\"\n </li>\n <li>\n \"Endline comments are also hard to maintain. If the code on any line containing\n an endline comment grows, it bumps the comment farther out, and all the other\n endline comments will have to bumped out to match. Styles that are hard to\n maintain aren't maintained....\"\n </li>\n <li>\n \"Endline comments also tend to be cryptic. The right side of the line doesn't\n offer much room and the desire to keep the comment on one line means the comment\n must be short. Work then goes into making the line as short as possible instead\n of as clear as possible. The comment usually ends up as cryptic as possible....\"\n </li>\n <li>\n \"A systemic problem with endline comments is that it's hard to write a meaningful\n comment for one line of code. Most endline comments just repeat the line of code,\n which hurts more than it helps.\"\n </li>\n </ul>\n\n <p>\n McConnell's comments on being hard to maintain when the size of the line changes\n are even more important in the age of automated refactorings.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 87,
  "branches": 11,
  "apis": 27,
  "test": [
    {
      "description": "Auto test from InputTrailingComment.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        11,
        13,
        17,
        25,
        25,
        36,
        42,
        44,
        47
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.trailingcomment;\npublic class InputTrailingComment {\n    int i; \n    int j; \n    void method1() { /* some c-style multi-line\n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            }); \n    } \n    }\n    final static public String NAME=\"Some Name\"; \n    final static public String NAME2=\"Some Name\"; \n    String NAME3=\"Some Name\"; /*NOI18N\n*/\n    }\n    private static class TimerEntry {\n    }\n    }\n}"
    },
    {
      "description": "Auto test from InputTrailingComment2.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        11,
        13,
        17,
        25,
        25,
        37,
        43,
        46
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.trailingcomment;\npublic class InputTrailingComment2 {\n    int i; \n    int j; \n    void method1() { /* some c-style multi-line\n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            }); \n    } \n    }\n    final static public String NAME=\"Some Name\"; \n    final static public String NAME2=\"Some Name\"; \n    String NAME3=\"Some Name\"; /*NOI18N\n*/\n    }\n    private static class TimerEntry {\n    }\n    }\n}"
    },
    {
      "description": "Auto test from InputTrailingComment3.java",
      "expected-problems": 17,
      "expected-linenumbers": [
        11,
        12,
        12,
        12,
        15,
        20,
        21,
        22,
        22,
        22,
        32,
        32,
        37,
        38,
        40,
        40,
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.trailingcomment;\npublic class InputTrailingComment3 {\n    int i; \n    int j;  \n    void method1() { /* some c-style multi-line \n                        comment*/\n        Runnable r = (new Runnable() {\n                public void run() {\n                }\n            });  \n    } \n    }\n    final static public String NAME=\"Some Name\"; \n    final static public String NAME2=\"Some Name\";  \n    String NAME3=\"Some Name\"; /*NOI18N \n*/\n    }\n    private static class TimerEntry {\n    }\n    }\n}"
    },
    {
      "description": "Auto test from InputTrailingCommentWithEmoji.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        11,
        13,
        18,
        23,
        23,
        23,
        23
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.trailingcomment;\npublic class InputTrailingCommentWithEmoji {\n    String a = \"🧐🥳😠😨\"; \n    String b = \"👌🏻🤞🏻😂😂🎄\"; \n    String d = \"🧐🥳\"; \n   🎄  adsad 🎄                  \n    }\n}"
    }
  ]
}