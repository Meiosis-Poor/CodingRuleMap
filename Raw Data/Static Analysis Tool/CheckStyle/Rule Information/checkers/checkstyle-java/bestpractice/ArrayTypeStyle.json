{
  "name": "ArrayTypeStyle",
  "language": "java",
  "description": "<div>\n Checks the style of array type definitions.\n Some like Java style: {@code public static void main(String[] args)}\n and some like C style: {@code public static void main(String args[])}.\n </div>\n\n <p>\n By default, the Check enforces Java style.\n </p>\n\n <p>\n This check strictly enforces only Java style for method return types regardless\n of the value for 'javaStyle'. For example, {@code byte[] getData()}.\n This is because C doesn't compile methods with array declarations on the name.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 41,
  "branches": 2,
  "apis": 12,
  "test": [
    {
      "description": "Auto test from InputArrayTypeStyle.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        12,
        13,
        18,
        42
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.arraytypestyle;\npublic class InputArrayTypeStyle\n{\n    private int[] javaStyle = new int[0];\n    private int cStyle[] = new int[0]; \n    private int c[] = new int[0]; \n    public static void mainJava(String[] aJavaStyle)\n    {\n    }\n    public static void mainC(String aCStyle[]) \n    {\n        final int[] blah = new int[0];\n        final boolean isOK1 = aCStyle instanceof String[];\n        final boolean isOK2 = aCStyle instanceof java.lang.String[];\n        final boolean isOK3 = blah instanceof int[];\n    }\n    public class Test\n    {\n        public Test[]\n            variable;\n        public Test[]\n            getTests()\n        {\n            return null;\n        }\n        public Test[] getNewTest()\n        {\n            return null;\n        }\n        public Test getOldTest()[] \n        {\n            return null;\n        }\n        public Test getOldTests()[][]\n        {\n            return null;\n        }\n        public Test[]\n            getMoreTests()[][]\n        {\n            return null;\n        }\n        public Test[][] getTests2()\n        {\n            return null;\n        }\n    }\n    public static void foo(java.util.Collection < ? extends InputArrayTypeStyle[] > collection) {}\n}"
    },
    {
      "description": "Auto test from InputArrayTypeStyleNestedGenerics.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        20,
        23,
        25,
        32
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.arraytypestyle;\npublic class InputArrayTypeStyleNestedGenerics {\n    protected Pair<Integer, Object>[] values1;\n    protected Pair<Integer, Pair<String, Object>[]>[] values2;\n    protected Pair<Integer, Pair<String, Pair<String, Object>>[]>[] values3a;\n    protected Pair<\n        Integer,\n        Pair<\n            String,\n            Pair<String, Object>\n        >[]\n    >[] values3b;\n    protected Pair<Integer, Object> values1b[]; \n    protected Pair<Integer, Pair<String, Object>[]> values2b[];\n    protected Pair<Integer, Pair<String, Pair<String, Object>>[]> values3ab[];\n    protected Pair<\n        Integer,\n        Pair<\n            String,\n            Pair<String, Object>\n        >[]\n    > values3bb[]; \n    protected static class Pair<L, R> {\n        protected L key;\n        protected R value;\n    }\n}"
    },
    {
      "description": "Auto test from InputArrayTypeStyleOff.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        11,
        16,
        22,
        30,
        43
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.arraytypestyle;\npublic class InputArrayTypeStyleOff\n{\n    private int[] javaStyle = new int[0]; \n    private int cStyle[] = new int[0];\n    private int c[] = new int[0];\n    public static void mainJava(String[] aJavaStyle)\n    {\n    }\n    public static void mainC(String aCStyle[])\n    {\n        final int[] blah = new int[0]; \n        final boolean isOK1 = aCStyle instanceof String[];\n        final boolean isOK2 = aCStyle instanceof java.lang.String[];\n        final boolean isOK3 = blah instanceof int[];\n    }\n    public class Test\n    {\n        public Test[] \n            variable;\n        public Test[]\n            getTests()\n        {\n            return null;\n        }\n        public Test[] getNewTest()\n        {\n            return null;\n        }\n        public Test getOldTest()[] \n        {\n            return null;\n        }\n        public Test getOldTests()[][]\n        {\n            return null;\n        }\n        public Test[]\n            getMoreTests()[][]\n        {\n            return null;\n        }\n        public Test[][] getTests2()\n        {\n            return null;\n        }\n    }\n    public static void foo(java.util.Collection < ? extends InputArrayTypeStyle[] > collection) {}\n}"
    }
  ]
}