{
  "name": "ClassFanOutComplexity",
  "language": "java",
  "description": "<div>\n Checks the number of other types a given class/record/interface/enum/annotation\n relies on. Also, the square of this has been shown to indicate the amount\n of maintenance required in functional programs (on a file basis) at least.\n </div>\n\n <p>\n This check processes files in the following way:\n </p>\n <ol>\n <li>\n Iterates over all tokens that might contain type reference.\n </li>\n <li>\n If a class was imported with direct import (i.e. {@code import java.math.BigDecimal}),\n or the class was referenced with the package name (i.e. {@code java.math.BigDecimal value})\n and the package was added to the {@code excludedPackages} parameter,\n the class does not increase complexity.\n </li>\n <li>\n If a class name was added to the {@code excludedClasses} parameter,\n the class does not increase complexity.\n </li>\n </ol>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 35,
  "branches": 0,
  "apis": 5,
  "test": [
    {
      "description": "Auto test from InputClassFanOutComplexity.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        25,
        57
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport javax.naming.*;\nimport java.util.*;\nimport java.util.stream.*;\npublic class InputClassFanOutComplexity { \n    private class InnerClass { \n        public List _list = new ArrayList();\n    }\n    private class AnotherInnerClass {\n        public String _string = \"\";\n    }\n    public Set _set = new HashSet();\n    public Map _map = new HashMap();\n    public String _string = \"\";\n    public int[] _intArray = new int[0];\n    public InnerClass _innerClass = new InnerClass();\n    public AnotherInnerClass _anotherInnerClass = new AnotherInnerClass();\n    public void foo() throws NamingException {\n    }\n}\nenum InnerEnum {\n    VALUE1;\n    private InnerEnum()\n    {\n        map2 = new HashMap();\n    }\n    private Set map1 = new HashSet();\n    private Map map2;\n}\nclass InputThrows { \n    public void get() throws NamingException, IllegalArgumentException {\n        new java.lang.ref.ReferenceQueue<Integer>();\n    }\n}\nclass InputMultiDimensionalArray {\n    public  Object[][] get() {\n        return new Object[][]{};\n    }\n}\nclass InputCollectionsExt {\n    private Collection col;\n    private EnumSet enumSet;\n    private LinkedHashMap map;\n    private LinkedHashSet set;\n}\nclass InputOptionals {\n    private Optional<Long> op1;\n    private OptionalInt op2;\n    private OptionalLong op3;\n    private OptionalDouble op4;\n}\nclass InputStreams {\n    private Stream s1;\n    private IntStream s2;\n    private LongStream s3;\n    private DoubleStream s4;\n}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexity15Extensions.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        27
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\n@interface MyAnnotation1 {\n    String name();\n    int version();\n}\n@MyAnnotation1(name = \"ABC\", version = 1) \npublic class InputClassFanOutComplexity15Extensions\n{\n}\nenum Enum1\n{\n    A, B, C;\n    Enum1() {}\n    public String toString() {\n        return \"\"; \n    }\n}\ninterface TestRequireThisEnum\n{\n    enum DAY_OF_WEEK\n    {\n        SUNDAY,\n        MONDAY,\n        TUESDAY,\n        WEDNESDAY,\n        THURSDAY,\n        FRIDAY,\n        SATURDAY\n    }\n}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexity3.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        42,
        74
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.OptionalDouble;\nimport java.util.OptionalInt;\nimport java.util.OptionalLong;\nimport java.util.Set;\nimport java.util.stream.DoubleStream;\nimport java.util.stream.IntStream;\nimport java.util.stream.LongStream;\nimport java.util.stream.Stream;\nimport javax.naming.NamingException;\npublic class InputClassFanOutComplexity3 { \n    private class InnerClass { \n        public List _list = new ArrayList();\n    }\n    private class AnotherInnerClass {\n        public String _string = \"\";\n    }\n    public Set _set = new HashSet();\n    public Map _map = new HashMap();\n    public String _string = \"\";\n    public int[] _intArray = new int[0];\n    public InnerClass _innerClass = new InnerClass();\n    public AnotherInnerClass _anotherInnerClass = new AnotherInnerClass();\n    public void foo() throws NamingException {\n    }\n}\nenum InnerEnum3 {\n    VALUE1;\n    private InnerEnum3()\n    {\n        map2 = new HashMap();\n    }\n    private Set map1 = new HashSet();\n    private Map map2;\n}\nclass InputThrows3 { \n    public void get() throws NamingException, IllegalArgumentException {\n        new java.lang.ref.ReferenceQueue<Integer>();\n    }\n}\nclass InputMultiDimensionalArray3 {\n    public  Object[][] get() {\n        return new Object[][]{};\n    }\n}\nclass InputCollectionsExt3 {\n    private Collection col;\n    private EnumSet enumSet;\n    private LinkedHashMap map;\n    private LinkedHashSet set;\n}\nclass InputOptionals3 {\n    private Optional<Long> op1;\n    private OptionalInt op2;\n    private OptionalLong op3;\n    private OptionalDouble op4;\n}\nclass InputStreams3 {\n    private Stream s1;\n    private IntStream s2;\n    private LongStream s3;\n    private DoubleStream s4;\n}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexity4.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        42,
        74
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.OptionalDouble;\nimport java.util.OptionalInt;\nimport java.util.OptionalLong;\nimport java.util.Set;\nimport java.util.stream.DoubleStream;\nimport java.util.stream.IntStream;\nimport java.util.stream.LongStream;\nimport java.util.stream.Stream;\nimport javax.naming.NamingException;\npublic class InputClassFanOutComplexity4 { \n    private class InnerClass { \n        public List _list = new ArrayList();\n    }\n    private class AnotherInnerClass {\n        public String _string = \"\";\n    }\n    public Set _set = new HashSet();\n    public Map _map = new HashMap();\n    public String _string = \"\";\n    public int[] _intArray = new int[0];\n    public InnerClass _innerClass = new InnerClass();\n    public AnotherInnerClass _anotherInnerClass = new AnotherInnerClass();\n    public void foo() throws NamingException {\n    }\n}\nenum InnerEnum4 {\n    VALUE1;\n    private InnerEnum4()\n    {\n        map2 = new HashMap();\n    }\n    private Set map1 = new HashSet();\n    private Map map2;\n}\nclass InputThrows4 { \n    public void get() throws NamingException, IllegalArgumentException {\n        new java.lang.ref.ReferenceQueue<Integer>();\n    }\n}\nclass InputMultiDimensionalArray4 {\n    public  Object[][] get() {\n        return new Object[][]{};\n    }\n}\nclass InputCollectionsExt4 {\n    private Collection col;\n    private EnumSet enumSet;\n    private LinkedHashMap map;\n    private LinkedHashSet set;\n}\nclass InputOptionals4 {\n    private Optional<Long> op1;\n    private OptionalInt op2;\n    private OptionalLong op3;\n    private OptionalDouble op4;\n}\nclass InputStreams4 {\n    private Stream s1;\n    private IntStream s2;\n    private LongStream s3;\n    private DoubleStream s4;\n}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexityAnnotations.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        26,
        43,
        52,
        62,
        77,
        97,
        100
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Target;\nimport java.util.Calendar;\npublic class InputClassFanOutComplexityAnnotations { \n    private int dayOfWeek = Calendar.MONDAY;\n    public void foo1(@TypeAnnotation char a) {}\n    public void foo2(final char @TypeAnnotation [] a) {}\n    @MethodAnnotation\n    public void foo3() {}\n    @Override\n    public String toString() {\n        return super.toString();\n    }\n    @MyAnnotation \n    public class InnerClass {\n        @MyAnnotation\n        @MethodAnnotation\n        public void innerClassMethod() {}\n    }\n    public class InnerClass2 { \n        @MethodAnnotation\n        @MyAnnotation\n        public String innerClass2Method(@TypeAnnotation String parameter) {\n            return parameter.trim();\n        }\n    }\n    public class InnerClass3 { \n        @TypeAnnotation\n        private final String warningsType = \"boxing\";\n        @MyAnnotation\n        @SuppressWarnings(value = warningsType)\n        public String innerClass3Method() {\n            return new Integer(5).toString();\n        }\n    }\n}\nclass OuterClass { \n    private static final String name = \"1\";\n    private static final String value = \"4\";\n    @TwoParametersAnnotation(value = \"4\", dayOfWeek = 1)\n    public static final String EMPTY_STRING = \"\";\n    @TwoParametersAnnotation(value = value, dayOfWeek = Calendar.TUESDAY)\n    public static final String TAB = \"\\t\";\n}\n@Target(ElementType.TYPE_USE)\n@interface TypeAnnotation {}\n@Target(ElementType.METHOD)\n@interface MethodAnnotation {}\n@MyAnnotation \nclass MyClass {}\n@MyAnnotation \ninterface MyInterface {}\n@interface MyAnnotation {}\n@interface TwoParametersAnnotation {\n    String value();\n    int dayOfWeek();\n}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexityExcludedPackagesCommonPackage.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        26,
        30,
        36
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity.inputs.a.aa.AAClass;\nimport com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity.inputs.a.ab.ABClass;\nimport com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity.inputs.b.BClass;\nimport com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity.inputs.c.CClass;\npublic class InputClassFanOutComplexityExcludedPackagesCommonPackage { \n    public AAClass aa;\n    public ABClass ab;\n    class Inner { \n        public BClass b;\n        public CClass c;\n    }\n}\nclass InputClassFanOutComplexityExcludedPackagesCommonPackageHidden { \n    public CClass c;\n}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexityExcludedPackagesDirectPackages.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        27
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity.inputs.a.aa.AAClass;\nimport com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity.inputs.a.ab.ABClass;\nimport com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity.inputs.b.BClass;\nimport com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity.inputs.c.CClass;\npublic class InputClassFanOutComplexityExcludedPackagesDirectPackages { \n    public AAClass aa;\n    public ABClass ab;\n    class Inner { \n        public BClass b;\n        public CClass c;\n    }\n}\nclass InputClassFanOutComplexityExcludedPackagesDirectPackagesHidden { \n    public CClass c;\n}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexityExtends.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        21
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\npublic class InputClassFanOutComplexityExtends extends ParentClass { \n}\nclass ParentClass {}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexityImplements.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        21
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\npublic class InputClassFanOutComplexityImplements implements Interface {} \ninterface Interface {}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexityImplementsAndNestedCount.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        24
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport java.io.Serializable;\nimport java.util.RandomAccess;\npublic class InputClassFanOutComplexityImplementsAndNestedCount \n    extends Outer.Nested implements Serializable, RandomAccess {\n}\nclass Outer {\n    static class Nested {}\n}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexityLambdaNew.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.ArrayList;\nimport java.io.File;\nimport java.util.Random;\npublic class InputClassFanOutComplexityLambdaNew { \n    public void testMethod(Map<String, List<String>> entry) {\n        List<File> files = new ArrayList<>();\n        String string = \"\";\n        Random random = new Random();\n        entry.values().stream()\n                .flatMap(List::stream)\n                .map(File::new)\n                .forEach(files::add);\n    }\n}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexityMultiCatchBitwiseOr.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\npublic class InputClassFanOutComplexityMultiCatchBitwiseOr { \n    public static void main(String[] args) {\n        try {\n            System.out.println(args[7]);\n            File myFile = new File(\"myfile.txt\");\n            InputStream stream = myFile.toURL().openStream();\n            foo1();\n        } catch (ArrayIndexOutOfBoundsException | IOException\n                | SQLException | SecurityException | OneMoreException e) {\n        }\n    }\n    private static void foo1() throws RuntimeException, SQLException, OneMoreException {\n    }\n    private class SQLException extends Exception {\n    }\n    private class OneMoreException extends Exception {\n    }\n}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexityRecords.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        30,
        51
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nclass InputClassFanOutComplexityRecords { \n    private class InnerClass {\n        public List _list = new ArrayList();\n    }\n    private class AnotherInnerClass {\n        public String _string = \"\";\n    }\n    public static MyRecord2 myRecord2 = new MyRecord2();\n    public Set _set = new HashSet();\n    public Map _map = new HashMap();\n    public String _string = \"\";\n    public int[] _intArray = new int[0];\n    public InnerClass _innerClass;\n    public AnotherInnerClass _anotherInnerClass;\n    public void foo() throws NamingException {\n    }\n}\nrecord MyRecord1(boolean a, boolean b) { \n    private class InnerClass {\n        public List _list = new ArrayList();\n    }\n    private class AnotherInnerClass {\n        public String _string = \"\";\n    }\n    public static MyRecord2 myRecord2 = new MyRecord2();\n    public static Set _set = new HashSet();\n    public static Map _map = new HashMap();\n    public static String _string = \"\";\n    public static int[] _intArray = new int[0];\n    public static InnerClass _innerClass;\n    public static AnotherInnerClass _anotherInnerClass;\n    public void foo() throws NamingException {\n    }\n}\nrecord MyRecord2(){}\nrecord MyRecord3(int x){}"
    },
    {
      "description": "Auto test from InputClassFanOutComplexityThrows.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classfanoutcomplexity;\nimport java.sql.SQLException;\npublic class InputClassFanOutComplexityThrows {\n    private static void foo1() throws RuntimeException, SQLException, OneMoreException {\n    }\n}\nclass OneMoreException extends Exception {}"
    }
  ]
}