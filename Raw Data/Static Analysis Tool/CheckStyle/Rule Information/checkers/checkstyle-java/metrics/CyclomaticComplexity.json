{
  "name": "CyclomaticComplexity",
  "language": "java",
  "description": "<div>\n Checks cyclomatic complexity against a specified limit. It is a measure of\n the minimum number of possible paths through the source and therefore the\n number of required tests, it is not about quality of code! It is only\n applied to methods, c-tors,\n <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html\">\n static initializers and instance initializers</a>.\n </div>\n\n <p>\n The complexity is equal to the number of decision points {@code + 1}.\n Decision points:\n </p>\n <ul>\n <li>\n {@code if}, {@code while}, {@code do}, {@code for},\n {@code ?:}, {@code catch}, {@code switch}, {@code case} statements.\n </li>\n <li>\n  Operators {@code &amp;&amp;} and {@code ||} in the body of target.\n </li>\n <li>\n  {@code when} expression in case labels, also known as guards.\n </li>\n </ul>\n\n <p>\n By pure theory level 1-4 is considered easy to test, 5-7 OK, 8-10 consider\n re-factoring to ease testing, and 11+ re-factor now as testing will be painful.\n </p>\n\n <p>\n When it comes to code quality measurement by this metric level 10 is very\n good level as a ultimate target (that is hard to archive). Do not be ashamed\n to have complexity level 15 or even higher, but keep it below 20 to catch\n really bad-designed code automatically.\n </p>\n\n <p>\n Please use Suppression to avoid violations on cases that could not be split\n in few methods without damaging readability of code or encapsulation.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 136,
  "branches": 19,
  "apis": 23,
  "test": [
    {
      "description": "Auto test from InputCyclomaticComplexity.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        13,
        18,
        29,
        42,
        52,
        70,
        82,
        94,
        106,
        112
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.cyclomaticcomplexity;\npublic class InputCyclomaticComplexity {\n    public void foo() { \n        while (true) {\n            Runnable runnable = new Runnable() {\n                public void run() { \n                    while (true) {\n                    }\n                }\n            };\n            new Thread(runnable).start();\n        }\n    }\n    public void bar() { \n        if (System.currentTimeMillis() == 0) {\n            if (System.currentTimeMillis() == 0 && System.currentTimeMillis() == 0) {\n            }\n            if (System.currentTimeMillis() == 0 || System.currentTimeMillis() == 0) {\n            }\n        }\n    }\n    public void simpleElseIf() { \n        if (System.currentTimeMillis() == 0) {\n        } else if (System.currentTimeMillis() == 0) {\n        } else {\n        }\n    }\n    public void stupidElseIf() { \n        if (System.currentTimeMillis() == 0) {\n        } else {\n            if (System.currentTimeMillis() == 0) {\n            } else {\n                if (System.currentTimeMillis() == 0) {\n                }\n            }\n            if (System.currentTimeMillis() == 0) {\n            }\n        }\n    }\n    public InputCyclomaticComplexity() \n    {\n        int i = 1;\n        if (System.currentTimeMillis() == 0) {\n        } else if (System.currentTimeMillis() == 0) {\n        } else {\n        }\n    }\n    static { \n        int i = 1;\n        if (System.currentTimeMillis() == 0) {\n        } else if (System.currentTimeMillis() == 0) {\n        } else {\n        }\n    }\n    { \n        int i = 1;\n        if (System.currentTimeMillis() == 0) {\n        } else if (System.currentTimeMillis() == 0) {\n        } else {\n        }\n    }\n    public InputCyclomaticComplexity(int aParam) \n    {\n        Runnable runnable = new Runnable() {\n            public void run() { \n                while (true) {\n                }\n            }\n        };\n        new Thread(runnable).start();\n    }\n}"
    },
    {
      "description": "Auto test from InputCyclomaticComplexityRecords.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        16,
        46,
        82,
        114,
        147
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.cyclomaticcomplexity;\npublic class InputCyclomaticComplexityRecords {\n    public record MyRecord1(String str, Record record) {\n        public MyRecord1 (String str) { \n            this(\"my record\", new MyRecord3(true, false));\n            int a = 1;\n            int b = 1;\n            int c = 1;\n            int d = 1;\n            int n = 8;\n            if (a == 1) { \n            } else if (a == b \n                    && a == c) { \n                if (c == 2) { \n                }\n            } else if (a == d) { \n                try {\n                } catch (Exception e) { \n                }\n            } else {\n                switch (n) {\n                    case 1: \n                        break;\n                    case 2: \n                        break;\n                    case 3: \n                        break;\n                    default:\n                        break;\n                }\n            }\n            d = a < 0 ? -1 : 1; \n        }\n        public void foo() { \n            int a = 1;\n            int b = 1;\n            int c = 1;\n            int d = 1;\n            int n = 8;\n            if (a == 1) { \n            } else if (a == b \n                    && a == c) { \n                if (c == 2) { \n                }\n            } else if (a == d) { \n                try {\n                } catch (Exception e) { \n                }\n            } else {\n                switch (n) {\n                    case 1: \n                        break;\n                    case 2: \n                        break;\n                    case 3: \n                        break;\n                    default:\n                        break;\n                }\n            }\n            d = a < 0 ? -1 : 1; \n        }\n    }\n}\nrecord MyRecord2(boolean t, boolean f) {\n    public MyRecord2 { \n        int a = 1;\n        int b = 1;\n        int c = 1;\n        int d = 1;\n        int n = 8;\n        if (a == 1) { \n        } else if (a == b \n                && a == c) { \n            if (c == 2) { \n            }\n        } else if (a == d) { \n            try {\n            } catch (Exception e) { \n            }\n        } else {\n            switch (n) {\n                case 1: \n                    break;\n                case 2: \n                    break;\n                case 3: \n                    break;\n                default:\n                    break;\n            }\n        }\n        d = a < 0 ? -1 : 1; \n    }\n}\nrecord MyRecord3(boolean a, boolean b) {\n    MyRecord3(String str) { \n        this(true, true);\n        int a = 1;\n        int b = 1;\n        int c = 1;\n        int d = 1;\n        int n = 8;\n        if (a == 1) { \n        } else if (a == b \n                && a == c) { \n            if (c == 2) { \n            }\n        } else if (a == d) { \n            try {\n            } catch (Exception e) { \n            }\n        } else {\n            switch (n) {\n                case 1: \n                    break;\n                case 2: \n                    break;\n                case 3: \n                    break;\n                default:\n                    break;\n            }\n        }\n        d = a < 0 ? -1 : 1; \n    }\n}\nrecord MyRecord4(boolean a, boolean b) {\n    public Record foo() { \n        int a = 1;\n        int b = 1;\n        int c = 1;\n        int d = 1;\n        int n = 8;\n        if (a == 1) { \n        } else if (a == b \n                && a == c) { \n            if (c == 2) { \n            }\n        } else if (a == d) { \n            try {\n            } catch (Exception e) { \n            }\n        } else {\n            switch (n) {\n                case 1: \n                    break;\n                case 2: \n                    break;\n                case 3: \n                    break;\n                default:\n                    break;\n            }\n        }\n        d = a < 0 ? -1 : 1; \n        record MyMethodRecord(String str){}\n        return new MyMethodRecord(\"my method record!\");\n    }\n}"
    },
    {
      "description": "Auto test from InputCyclomaticComplexitySwitchBlocks.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.cyclomaticcomplexity;\npublic class InputCyclomaticComplexitySwitchBlocks {\n    public void foo2() { \n        String programmingLanguage = \"Java\";\n        switch (programmingLanguage) {\n            case \"Java\":\n            case \"C#\":\n            case \"C++\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is an object oriented programming language.\");\n                break;\n            case \"C\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is not an object oriented programming language.\");\n                break;\n            default:\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is unknown language.\");\n                break;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputCyclomaticComplexitySwitchBlocks2.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.cyclomaticcomplexity;\npublic class InputCyclomaticComplexitySwitchBlocks2 {\n    public void foo2() { \n        String programmingLanguage = \"Java\";\n        switch (programmingLanguage) {\n            case \"Java\":\n            case \"C#\":\n            case \"C++\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is an object oriented programming language.\");\n                break;\n            case \"C\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is not an object oriented programming language.\");\n                break;\n            default:\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is unknown language.\");\n                break;\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputCyclomaticComplexitySwitchBlocks5.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.cyclomaticcomplexity;\npublic class InputCyclomaticComplexitySwitchBlocks5 {\n    public void foo2() { \n        String programmingLanguage = \"Java\";\n        switch (programmingLanguage) {\n            case \"Java\":\n            case \"C#\":\n            case \"C++\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is an object oriented programming language.\");\n                break;\n            case \"C\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is not an object oriented programming language.\");\n                break;\n            case \"D\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is not an object oriented programming language.\");\n                break;\n            case \"E\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is not an object oriented programming language.\");\n                break;\n            case \"F\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is not an object oriented programming language.\");\n                break;\n            case \"G\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is not an object oriented programming language.\");\n                break;\n            case \"H\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is not an object oriented programming language.\");\n                break;\n            case \"I\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is not an object oriented programming language.\");\n                break;\n            case \"J\":\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is not an object oriented programming language.\");\n                break;\n            default:\n                String.CASE_INSENSITIVE_ORDER.equals(programmingLanguage +\n                    \" is unknown language.\");\n                break;\n        }\n    }\n}"
    }
  ]
}