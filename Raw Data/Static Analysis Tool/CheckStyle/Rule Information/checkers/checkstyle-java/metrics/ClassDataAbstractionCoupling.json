{
  "name": "ClassDataAbstractionCoupling",
  "language": "java",
  "description": "<div>\n Measures the number of distinct classes that are instantiated\n within the given class or record. This type of coupling is not caused by inheritance or\n the object-oriented paradigm. Generally speaking, any data type with other\n data types as members or local variable that is an instantiation (object)\n of another class has data abstraction coupling (DAC). The higher the DAC,\n the more complex the structure of the class.\n </div>\n\n <p>\n This check processes files in the following way:\n </p>\n <ol>\n <li>\n Iterates over the list of tokens (defined below) and counts all mentioned classes.\n <ul>\n <li>\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#IMPORT\">\n PACKAGE_DEF</a>\n </li>\n <li>\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#IMPORT\">\n IMPORT</a>\n </li>\n <li>\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CLASS_DEF\">\n CLASS_DEF</a>\n </li>\n <li>\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INTERFACE_DEF\">\n INTERFACE_DEF</a>\n </li>\n <li>\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_DEF\">\n ENUM_DEF</a>\n </li>\n <li>\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_NEW\">\n LITERAL_NEW</a>\n </li>\n <li>\n <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#RECORD_DEF\">\n RECORD_DEF</a>\n </li>\n </ul>\n </li>\n <li>\n If a class was imported with direct import (i.e. {@code import java.math.BigDecimal}),\n or the class was referenced with the package name (i.e. {@code java.math.BigDecimal value})\n and the package was added to the {@code excludedPackages} parameter, the class\n does not increase complexity.\n </li>\n <li>\n If a class name was added to the {@code excludedClasses} parameter,\n the class does not increase complexity.\n </li>\n </ol>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 30,
  "branches": 0,
  "apis": 5,
  "test": [
    {
      "description": "Auto test from InputClassDataAbstractionCoupling.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        14,
        16,
        35
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classdataabstractioncoupling;\nimport javax.naming.NamingException;\nimport java.util.*;\npublic class InputClassDataAbstractionCoupling { \n    private class InnerClass { \n        public List _list = new ArrayList();\n    }\n    private class AnotherInnerClass {\n        public String _string = \"\";\n    }\n    public Set _set = new HashSet();\n    public Map _map = new HashMap();\n    public String _string = \"\";\n    public int[] _intArray = new int[0];\n    public InnerClass _innerClass = new InnerClass();\n    public AnotherInnerClass _anotherInnerClass = new AnotherInnerClass();\n    public void foo() throws NamingException {\n    }\n}\nenum InnerEnum { \n    VALUE1;\n    private InnerEnum()\n    {\n        map2 = new HashMap();\n    }\n    private Set map1 = new HashSet();\n    private Map map2;\n}\nclass InputThrows {\n    public void get() throws NamingException, IllegalArgumentException {\n        new java.lang.ref.ReferenceQueue<Integer>();\n    }\n}"
    },
    {
      "description": "Auto test from InputClassDataAbstractionCoupling3.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        20,
        22
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classdataabstractioncoupling;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.naming.NamingException;\npublic class InputClassDataAbstractionCoupling3 { \n    private class InnerClass { \n        public List _list = new ArrayList();\n    }\n    private class AnotherInnerClass {\n        public String _string = \"\";\n    }\n    public Set _set = new HashSet();\n    public Map _map = new HashMap();\n    public String _string = \"\";\n    public int[] _intArray = new int[0];\n    public InnerClass _innerClass = new InnerClass();\n    public AnotherInnerClass _anotherInnerClass = new AnotherInnerClass();\n    public void foo() throws NamingException {\n    }\n}\nenum InnerEnum3 {\n    VALUE1;\n    private InnerEnum3()\n    {\n        map2 = new HashMap();\n    }\n    private Set map1 = new HashSet();\n    private Map map2;\n}\nclass InputThrows3 {\n    public void get() throws NamingException, IllegalArgumentException {\n        new java.lang.ref.ReferenceQueue<Integer>();\n    }\n}"
    },
    {
      "description": "Auto test from InputClassDataAbstractionCoupling4.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        20,
        22,
        41
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classdataabstractioncoupling;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.naming.NamingException;\npublic class InputClassDataAbstractionCoupling4 { \n    private class InnerClass { \n        public List _list = new ArrayList();\n    }\n    private class AnotherInnerClass {\n        public String _string = \"\";\n    }\n    public Set _set = new HashSet();\n    public Map _map = new HashMap();\n    public String _string = \"\";\n    public int[] _intArray = new int[0];\n    public InnerClass _innerClass = new InnerClass();\n    public AnotherInnerClass _anotherInnerClass = new AnotherInnerClass();\n    public void foo() throws NamingException {\n    }\n}\nenum InnerEnum4 { \n    VALUE1;\n    private InnerEnum4()\n    {\n        map2 = new HashMap();\n    }\n    private Set map1 = new HashSet();\n    private Map map2;\n}\nclass InputThrows4 {\n    public void get() throws NamingException, IllegalArgumentException {\n        new java.lang.ref.ReferenceQueue<Integer>();\n    }\n}"
    },
    {
      "description": "Auto test from InputClassDataAbstractionCoupling5.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        17
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classdataabstractioncoupling;\nimport java.io.File;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.stream.Collectors;\npublic class InputClassDataAbstractionCoupling5 {  \n    public void method(String... filenames) {\n        Random random = new Random();\n        final List<File> files = Arrays.stream(filenames)\n                .map(File::new)\n                .collect(Collectors.toList());\n    }\n}"
    },
    {
      "description": "Auto test from InputClassDataAbstractionCouplingExcludedPackagesCommonPackage.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        26,
        30,
        36
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classdataabstractioncoupling;\nimport org.apache.hc.core5.http.ssl.TlsCiphers;\nimport org.apache.hc.core5.http.protocol.BasicHttpContext;\nimport org.apache.hc.core5.http.nio.ssl.BasicClientTlsStrategy;\nimport org.apache.hc.core5.http.nio.command.CommandSupport;\npublic class InputClassDataAbstractionCouplingExcludedPackagesCommonPackage { \n    public TlsCiphers aa = new TlsCiphers();\n    public BasicHttpContext ab = new BasicHttpContext();\n    class Inner { \n        public BasicClientTlsStrategy b = new BasicClientTlsStrategy();\n        public CommandSupport c = new CommandSupport();\n    }\n}\nclass InputClassDataAbstractionCouplingExcludedPackagesCommonPackageHidden { \n    public CommandSupport c = new CommandSupport();\n}"
    },
    {
      "description": "Auto test from InputClassDataAbstractionCouplingExcludedPackagesDirectPackages.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        26
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classdataabstractioncoupling;\nimport org.apache.hc.core5.http.ssl.TlsCiphers;\nimport org.apache.hc.core5.http.protocol.BasicHttpContext;\nimport org.apache.hc.core5.http.nio.ssl.BasicClientTlsStrategy;\nimport org.apache.hc.core5.http.nio.command.CommandSupport;\npublic class InputClassDataAbstractionCouplingExcludedPackagesDirectPackages { \n    public TlsCiphers aa = new TlsCiphers();\n    public BasicHttpContext ab = new BasicHttpContext();\n    class Inner { \n        public BasicClientTlsStrategy b = new BasicClientTlsStrategy();\n        public CommandSupport c = new CommandSupport();\n    }\n}\nclass InputClassDataAbstractionCouplingExcludedPackagesDirectPackagesHidden { \n    public CommandSupport c = new CommandSupport();\n}"
    },
    {
      "description": "Auto test from InputClassDataAbstractionCouplingRecords.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        29,
        34,
        44,
        53,
        66
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.classdataabstractioncoupling;\nimport java.sql.Time;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nclass InputClassDataAbstractionCouplingRecords { \n    Date date = new Date(); \n    Time time = new Time(2, 2, 2);\n}\nrecord MyRecord1(boolean a, boolean b) { \n    private boolean myBool() {\n        Date date = new Date(); \n        Time time = new Time(2, 2, 2); \n        return true;\n    }\n}\nrecord MyRecord2(String myString, boolean a, boolean b) { \n    public MyRecord2 {\n        Date date = new Date(); \n        Time time = new Time(2, 2, 2); \n    }\n}\nrecord MyRecord3(int x) { \n    MyRecord3() {\n        this(4);\n        Date date = new Date(); \n        Time time = new Time(2, 2, 2); \n    }\n}\nrecord MyRecord4(int y) {\n    private record MyRecord5(int z) { \n        static Set<Integer> set = new HashSet<>(); \n        static Map<String, Integer> map = new HashMap<>(); \n        static Date date = new Date(); \n        static Time time = new Time(); \n        static Place place = new Place(); \n    }\n    static class Time {\n        Time(int h, int m,  int s) {\n        }\n        Time(){}\n    }\n    static class Date {\n    }\n    static class Place {\n    }\n}"
    }
  ]
}