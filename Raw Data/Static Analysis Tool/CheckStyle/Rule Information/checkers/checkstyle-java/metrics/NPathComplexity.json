{
  "name": "NPathComplexity",
  "language": "java",
  "description": "<div>\n Checks the NPATH complexity against a specified limit.\n </div>\n\n <p>\n The NPATH metric computes the number of possible execution paths through a\n function(method). It takes into account the nesting of conditional statements\n and multipart boolean expressions (A &amp;&amp; B, C || D, E ? F :G and\n their combinations).\n </p>\n\n <p>\n The NPATH metric was designed base on Cyclomatic complexity to avoid problem\n of Cyclomatic complexity metric like nesting level within a function(method).\n </p>\n\n <p>\n Metric was described at <a href=\"http://dl.acm.org/citation.cfm?id=42379\">\n \"NPATH: a measure of execution pathcomplexity and its applications\"</a>.\n If you need detailed description of algorithm, please read that article,\n it is well written and have number of examples and details.\n </p>\n\n <p>\n Here is some quotes:\n </p>\n <blockquote>\n An NPATH threshold value of 200 has been established for a function.\n The value 200 is based on studies done at AT&amp;T Bell Laboratories [1988 year].\n </blockquote>\n <blockquote>\n Some of the most effective methods of reducing the NPATH value include:\n <ul>\n <li>\n distributing functionality;\n </li>\n <li>\n implementing multiple if statements as a switch statement;\n </li>\n <li>\n creating a separate function for logical expressions with a high count of\n variables and (&amp;&amp;) and or (||) operators.\n </li>\n </ul>\n </blockquote>\n <blockquote>\n Although strategies to reduce the NPATH complexity of functions are important,\n care must be taken not to distort the logical clarity of the software by\n applying a strategy to reduce the complexity of functions. That is, there is\n a point of diminishing return beyond which a further attempt at reduction of\n complexity distorts the logical clarity of the system structure.\n </blockquote>\n <table>\n <caption>Examples</caption>\n <thead><tr><th>Structure</th><th>Complexity expression</th></tr></thead>\n <tr><td>if ([expr]) { [if-range] }</td><td>NP(if-range) + 1 + NP(expr)</td></tr>\n <tr><td>if ([expr]) { [if-range] } else { [else-range] }</td>\n <td>NP(if-range)+ NP(else-range) + NP(expr)</td></tr>\n <tr><td>while ([expr]) { [while-range] }</td><td>NP(while-range) + NP(expr) + 1</td></tr>\n <tr><td>do { [do-range] } while ([expr])</td><td>NP(do-range) + NP(expr) + 1</td></tr>\n <tr><td>for([expr1]; [expr2]; [expr3]) { [for-range] }</td>\n <td>NP(for-range) + NP(expr1)+ NP(expr2) + NP(expr3) + 1</td></tr>\n <tr><td>switch ([expr]) { case : [case-range] default: [default-range] }</td>\n <td>S(i=1:i=n)NP(case-range[i]) + NP(default-range) + NP(expr)</td></tr>\n <tr><td>when[expr]</td><td>NP(expr) + 1</td></tr>\n <tr><td>[expr1] ? [expr2] : [expr3]</td><td>NP(expr1) + NP(expr2) + NP(expr3) + 2</td></tr>\n <tr><td>goto label</td><td>1</td></tr><tr><td>break</td><td>1</td></tr>\n <tr><td>Expressions</td>\n <td>Number of &amp;&amp; and || operators in expression. No operators - 0</td></tr>\n <tr><td>continue</td><td>1</td></tr><tr><td>return</td><td>1</td></tr>\n <tr><td>Statement (even sequential statements)</td><td>1</td></tr>\n <tr><td>Empty block {}</td><td>1</td></tr><tr><td>Function call</td><td>1</td>\n </tr><tr><td>Function(Method) declaration or Block</td><td>P(i=1:i=N)NP(Statement[i])</td></tr>\n </table>\n\n <p>\n <b>Rationale:</b> Nejmeh says that his group had an informal NPATH limit of\n 200 on individual routines; functions(methods) that exceeded this value were\n candidates for further decomposition - or at least a closer look.\n <b>Please do not be fanatic with limit 200</b> - choose number that suites\n your project style. Limit 200 is empirical number base on some sources of at\n AT&amp;T Bell Laboratories of 1988 year.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 333,
  "branches": 63,
  "apis": 50,
  "test": [
    {
      "description": "Auto test from InputNPathComplexity.java",
      "expected-problems": 14,
      "expected-linenumbers": [
        10,
        15,
        22,
        37,
        53,
        69,
        94,
        104,
        116,
        129,
        139,
        152,
        160,
        174
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.npathcomplexity;\npublic class InputNPathComplexity {\n    void testIfWithExpression() { \n        if (true && true || (true || true)) { }\n    }\n    void testIfElseWithExpression() { \n        if (true && true || (true || true)) { }\n        else { }\n    }\n    int testSimpleSwitch() { \n        int a = 0;\n        switch(a) {\n        case 1:\n            break;\n        case 2:\n        case 3:\n            break;\n        }\n        return a;\n    }\n    void testSimpleSwitchWithDefault() { \n        int a = 0;\n        switch(a) {\n        case 1:\n            break;\n        case 2:\n        case 3:\n            break;\n        default:\n            break;\n        }\n    }\n    void testSwitchWithExpression() { \n        int a = 0;\n        switch(true ? a : a) {\n        case 1:\n            break;\n        case 2:\n        case 3:\n            break;\n        default:\n            break;\n        }\n    }\n    void testComplexSwitch() { \n        int a = 0;\n        switch(a) {\n        case 1:\n            if (true) { }\n            break;\n        case 2:\n            if (true && true || (true || true)) { }\n            else { }\n            if (true) { }\n        case 3:\n            if (true) { }\n            break;\n        default:\n            break;\n        }\n    }\n    void testComplexIfElse() { \n        if (true && true) { }\n        else if (true || true || true) { }\n        else if (true && true && true || true || true) { }\n    }\n    boolean testComplexReturn() { \n        if (true && true) {\n            return true && true || (true && true);\n        } else {\n            return true ? true && true : true || true;\n        }\n    }\n    void testForCyclesComplex() { \n        for (int i = 0; i < 10; i++);\n        for (int i = 0; i < 10 && true; i++);\n        for (int i = true ? 0 : 0; i < 10; i++);\n        for (int i = 0; true ? i < 10 : true || true; i++);\n    }\n    boolean testWhileCyclesComplex() { \n        int a = 0;\n        while (a != 0) { }\n        while (a != 0 && a == 0) { return a == 0 || a == 0; }\n        return true;\n    }\n    void testDoWhileCyclesComplex() { \n        int a = 0;\n        do { } while (a < 10 && true);\n        do {\n            do { } while (a < 10 || true);\n        } while (true ? a > 10 : (a < 10 || true));\n    }\n    void testComplexTernaryOperator() { \n        boolean a = true ? (true ? true : true) : (false ? (true || false) : true);\n        boolean b = true ? (true ? true : true) : true || true;\n    }\n    void testSimpleTernaryBadFormatting() { \n        if(\n           true ? true : true\n                ) { boolean a = true ? true\n                        : true;\n        }\n        if(\n                true ? true : true) { boolean b = true ? true : true;\n             }\n    }\n    void testTryCatch() { \n       try {\n       }\n       catch (Exception e) {\n       }\n    }\n}"
    },
    {
      "description": "Auto test from InputNPathComplexityCheckBranchVisited.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.npathcomplexity;\nimport java.util.List;\npublic class InputNPathComplexityCheckBranchVisited{\n  static void checkExpiration(List<String> list) {\n    for (String string : list) {\n      if (string.isEmpty()) {\n        for (String string2 : list) {\n          if (string2 != null) {\n          }\n          if (string2 != null) {\n          }\n        }\n      } else {\n      }\n      if (string.isEmpty()) {\n        for (String string2 : list) {\n          if (string2 != null) {\n          }\n          if (string2 != null) {\n          }\n        }\n      } else {\n      }\n    }\n  }\n}"
    },
    {
      "description": "Auto test from InputNPathComplexityCheckCount.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        10,
        22,
        65
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.npathcomplexity;\npublic class InputNPathComplexityCheckCount{\n    public void method() { \n        try {}\n        catch (IllegalArgumentException ex) {}\n        try {}\n        catch (IllegalArgumentException ex) {}\n        try {}\n        catch (IllegalArgumentException ex) {}\n        try {}\n        catch (IllegalArgumentException ex) {}\n    }\n    int method2() throws InterruptedException {\n        int x = 1;\n        int a = 2;\n        while (true) {\n            try {\n                if (x > 0) {\n                    break;\n                } else if (x < 0) {\n                    ;\n                } else {\n                    break;\n                }\n                switch (a)\n                {\n                case 0:\n                    break;\n                default:\n                    break;\n                }\n            }\n            catch (Exception e)\n            {\n                break;\n            }\n        }\n        synchronized (this) {\n            do {\n                x = 2;\n            } while (x == 2);\n        }\n        this.wait(666);\n        for (int k = 0; k < 1; k++) {\n            String innerBlockVariable = \"\";\n        }\n        if (System.currentTimeMillis() > 1000)\n            return 1;\n        else\n            return 2;\n    }\n    void method3(char c, int i) { \n        while (true) {\n            switch (c) {\n            case 'a':\n            case 'b':\n                i++;\n            case 'c':\n                break;\n            case 'd':\n                return;\n            case 'e':\n                continue;\n            case 'f':\n                if (true) return;\n            case 'g':\n                try {\n                    i++;\n                    break;\n                } catch (RuntimeException e) {\n                } catch (Error e) {\n                    return;\n                }\n            case 'h':\n                switch (i) {\n                case 1:\n                    continue;\n                case 2:\n                    i++;\n                case 3:\n                    return;\n                }\n            case 'i':\n                switch (i) {\n                case 1:\n                    continue;\n                case 2:\n                    i++;\n                    break;\n                case 3:\n                    return;\n                }\n                break;\n            case 'A':\n                i++;\n            case 'B':\n                i++;\n            default:\n                i++;\n                break;\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputNPathComplexityCheckSwitchExpression.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        11,
        27,
        42,
        58
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.npathcomplexity;\npublic class InputNPathComplexityCheckSwitchExpression {\n    void howMany1(Nums k) { \n        switch (k) {\n            case ONE: {\n                System.out.println(\"case two\");\n            }\n            case TWO:\n            case THREE:{\n                System.out.println(\"case two\");\n            }\n            case FOUR: {\n                System.out.println(\"case three\");\n            }\n            default:\n                throw new IllegalStateException(\"Not a nums\");\n        }\n    }\n    void howMany2(Nums k) { \n        switch (k) {\n            case ONE -> {\n                System.out.println(\"case one\");\n            }\n            case TWO, THREE -> {\n                System.out.println(\"case two\");\n            }\n            case FOUR -> {\n                System.out.println(\"case three\");\n            }\n            default -> throw new IllegalStateException(\"Not a nums\");\n        }\n    }\n    int howMany3(Nums k) { \n        return switch (k) {\n            case ONE:\n                yield 3;\n            case TWO:\n            case THREE:{\n                yield 5;\n            }\n            case FOUR: {\n                yield 9;\n            }\n            default:\n                throw new IllegalStateException(\"Not a Nums\");\n        };\n    }\n    int howMany4(Nums k) { \n        return switch (k) {\n            case ONE -> {\n                yield 4;\n            }\n            case TWO, THREE -> {\n                yield 42;\n            }\n            case FOUR -> {\n                yield 99;\n            }\n            default -> throw new IllegalStateException(\"Not a Nums\");\n        };\n    }\n    enum Nums {ONE, TWO, THREE, FOUR}\n}"
    },
    {
      "description": "Auto test from InputNPathComplexityDefault.java",
      "expected-problems": 14,
      "expected-linenumbers": [
        10,
        15,
        26,
        39,
        49,
        67,
        79,
        91,
        109,
        118,
        129,
        130,
        136,
        150
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.npathcomplexity;\npublic class InputNPathComplexityDefault {\n    public void foo() { \n        while (true) {\n            Runnable runnable = new Runnable() {\n                public void run() { \n                    while (true) {\n                    }\n                }\n            };\n            new Thread(runnable).start();\n        }\n    }\n    public void bar() { \n        if (System.currentTimeMillis() == 0) {\n            if (System.currentTimeMillis() == 0 && System.currentTimeMillis() == 0) {\n            }\n            if (System.currentTimeMillis() == 0 || System.currentTimeMillis() == 0) {\n            }\n        }\n    }\n    public void simpleElseIf() { \n        if (System.currentTimeMillis() == 0) {\n        } else if (System.currentTimeMillis() == 0) {\n        } else {\n        }\n    }\n    public void stupidElseIf() { \n        if (System.currentTimeMillis() == 0) {\n        } else {\n            if (System.currentTimeMillis() == 0) {\n            } else {\n                if (System.currentTimeMillis() == 0) {\n                }\n            }\n            if (System.currentTimeMillis() == 0) {\n            }\n        }\n    }\n    public InputNPathComplexityDefault() \n    {\n        int i = 1;\n        if (System.currentTimeMillis() == 0) {\n        } else if (System.currentTimeMillis() == 0) {\n        } else {\n        }\n    }\n    static { \n        int i = 1;\n        if (System.currentTimeMillis() == 0) {\n        } else if (System.currentTimeMillis() == 0) {\n        } else {\n        }\n    }\n    { \n        int i = 1;\n        if (System.currentTimeMillis() == 0) {\n        } else if (System.currentTimeMillis() == 0) {\n        } else {\n        }\n    }\n    public InputNPathComplexityDefault(int aParam)\n    {\n        Runnable runnable = new Runnable() {\n            public void run() { \n                while (true) {\n                }\n            }\n        };\n        new Thread(runnable).start();\n    }\n    public void InputNestedTernaryCheck() { \n        double x = (getSmth() || Math.random() == 5) ? null : (int) Math\n                .cos(400 * (10 + 40)); \n        double y = (0.2 == Math.random()) ? (0.3 == Math.random()) ? null : (int) Math\n                .cos(400 * (10 + 40)) : 6; \n        double z = (Integer) ((0.2 == Math.random()) ? (Integer) null + apply(null)\n                : (0.3 == Math.random()) ? (Integer) null : (int) Math\n                        .sin(300 * (12 + 30))); \n    }\n    public boolean getSmth() { return true; }; \n    public int apply(Object o) { return 0; } \n    public void inClass(int type, Short s, int color) {\n        switch (type) {\n        case 3:\n            new Object() {\n                public void anonymousMethod() { \n                    {\n                        switch (s) {\n                        case 5:\n                            switch (type) {\n                            default:\n                            }\n                        }\n                    }\n                }\n            };\n        default:\n            new Object() {\n                class SwitchClass {\n                    { \n                        switch (color) {\n                        case 5:\n                            switch (type) {\n                            default:\n                            }\n                        }\n                    }\n                }\n            };\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputNPathComplexityOverflow.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        14
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.npathcomplexity;\npublic class InputNPathComplexityOverflow {\n    public void provokeNpathIntegerOverflow() \n    {\n        if (true) {\n            if (true) {\n                if (true) {\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                                if (true) {\n                                    if (true) {\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (true) {\n            if (true) {\n                if (true) {\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                                if (true) {\n                                    if (true) {\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (true) {\n            if (true) {\n                if (true) {\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                                if (true) {\n                                    if (true) {\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (true) {\n            if (true) {\n                if (true) {\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                                if (true) {\n                                    if (true) {\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (true) {\n            if (true) {\n                if (true) {\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                                if (true) {\n                                    if (true) {\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (true) {\n            if (true) {\n                if (true) {\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                                if (true) {\n                                    if (true) {\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (true) {\n            if (true) {\n                if (true) {\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                                if (true) {\n                                    if (true) {\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (true) {\n            if (true) {\n                if (true) {\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                                if (true) {\n                                    if (true) {\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (true) {\n            if (true) {\n                if (true) {\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                                if (true) {\n                                    if (true) {\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (true) {\n            if (true) {\n                if (true) {\n                    if (true) {\n                        if (true) {\n                            if (true) {\n                                if (true) {\n                                    if (true) {\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputNPathComplexityRecords.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        14,
        22,
        28,
        43
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.npathcomplexity;\npublic class InputNPathComplexityRecords {\n    record MyRecord1(boolean t, boolean f) {\n    public MyRecord1 { \n            int i = 1;\n            if (t) {\n            } else if (f) {\n            } else {\n            }\n        }\n        public void foo() { \n            while (true) {\n                Runnable runnable = new Runnable() {\n                    public void run() { \n                        while (true) {\n                        }\n                    }\n                };\n                new Thread(runnable).start();\n            }\n        }\n    }\n    record MyRecord2(boolean a, boolean b) {\n        MyRecord2() { \n            this(true, false);\n            int i = 1;\n            if (b) {\n            } else if (a) {\n            } else {\n            }\n        }\n    }\n}"
    }
  ]
}