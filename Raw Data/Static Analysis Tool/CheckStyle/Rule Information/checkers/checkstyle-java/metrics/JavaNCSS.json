{
  "name": "JavaNCSS",
  "language": "java",
  "description": "<div>\n Determines complexity of methods, classes and files by counting\n the Non Commenting Source Statements (NCSS). This check adheres to the\n <a href=\"http://www.kclee.de/clemens/java/javancss/#specification\">specification</a>\n for the <a href=\"http://www.kclee.de/clemens/java/javancss/\">JavaNCSS-Tool</a>\n written by <b>Chr. Clemens Lee</b>.\n </div>\n\n <p>\n Roughly said the NCSS metric is calculated by counting the source lines which are\n not comments, (nearly) equivalent to counting the semicolons and opening curly braces.\n </p>\n\n <p>\n The NCSS for a class is summarized from the NCSS of all its methods, the NCSS\n of its nested classes and the number of member variable declarations.\n </p>\n\n <p>\n The NCSS for a file is summarized from the ncss of all its top level classes,\n the number of imports and the package declaration.\n </p>\n\n <p>\n Rationale: Too large methods and classes are hard to read and costly to maintain.\n A large NCSS number often means that a method or class has too many responsibilities\n and/or functionalities which should be decomposed into smaller units.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 187,
  "branches": 21,
  "apis": 27,
  "test": [
    {
      "description": "Auto test from InputJavaNCSS.java",
      "expected-problems": 12,
      "expected-linenumbers": [
        15,
        21,
        28,
        37,
        49,
        56,
        63,
        68,
        88,
        90,
        91,
        92
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.javancss; \nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\npublic class InputJavaNCSS { \n  private Object mObject;\n  private void testMethod1() { \n    int x = 1, y = 2;\n  }\n  private void testMethod2() { \n    int abc = 0;\n    testLabel: abc = 1;\n  }\n  private void testMethod3() { \n    int a = 0;\n    switch (a) {\n        case 1: \n        case 2: System.identityHashCode(\"Hello\"); break;\n        default: break;\n    }\n    ItemListener lis = new ItemListener() {\n      public void itemStateChanged(ItemEvent e) { \n          System.identityHashCode(\"Hello\");\n      }\n    };\n  }\n  private class TestInnerClass { \n      private Object test;\n  }\n}\nclass TestTopLevelNestedClass { \n  private Object mObject;\n  private void testMethod() { \n    for (int i=0; i<10; i++) {\n      if (i==0) {\n          int x = 1, y = 2;\n      }\n      else {\n          int abc = 0;\n          testLabel: abc = 1;\n      }\n    }\n  }\n}\nclass Input0 { \n  static { } \n  { } \n  public Input0() { } \n}"
    },
    {
      "description": "Auto test from InputJavaNCSSRecordsAndCompactCtors.java",
      "expected-problems": 12,
      "expected-linenumbers": [
        14,
        16,
        34,
        43,
        53,
        73,
        107,
        128,
        149,
        151,
        164,
        166
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.javancss;  \nimport java.time.LocalDateTime;\npublic class InputJavaNCSSRecordsAndCompactCtors {  \n  class TestClass {  \n    private void testMethod1() {\n      int x = 1, y = 2;\n    }\n    private void testMethod2() {\n      int abc = 0;\n      testLabel: abc = 1;\n    } \n  }\n  record MyRecord1(boolean t, boolean f) {  \n    public MyRecord1 {\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n    } \n  }\n  record MyRecord2(boolean a, boolean b) {  \n    MyRecord2() {\n      this(true, false);\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n    } \n    private void testMethod() { \n      for (int i=0; i<10; i++) {\n        if (i==0) {\n            int x = 1, y = 2;\n        }\n        else {\n            int abc = 0;\n            testLabel: abc = 1;\n        }\n      }\n    }\n  } \n  record MyRecord3(boolean a, boolean b) {  \n    public void foo () {\n      record TestInnerRecord() {\n        private static Object test;\n      }\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n    }\n  } \n  record MyRecord4(int x, int y) {\n    record TestInnerRecord() {\n      private static Object test;\n    }\n  }\n  record MyRecord5(int x, int y) {\n    public MyRecord5{\n      if(x > 5) {\n        System.out.println(\"x greater than 5!\");\n      }\n    }\n  }\n  record MyRecord6(int x, int y) {\n    public MyRecord6{\n    }\n  }\n  public record FXOrder(int units,  \n                        String side,\n                        double price,\n                        LocalDateTime sentAt,\n                        int ttl) {\n    public FXOrder {\n      if (units < 1) {\n        throw new IllegalArgumentException(\n                \"FXOrder units must be positive\");\n      }\n      if (ttl < 0) {\n        throw new IllegalArgumentException(\n                \"FXOrder TTL must be positive, or 0 for market orders\");\n      }\n      if (price <= 0.0) {\n        throw new IllegalArgumentException(\n                \"FXOrder price must be positive\");\n      }\n    } \n  }\n  public class FXOrderClass {  \n    private int units;\n    private int ttl;\n    private double price; \n    public FXOrderClass(int units, int ttl, double price) {\n      if (units < 1) {\n        throw new IllegalArgumentException(\n                \"FXOrder units must be positive\");\n      }\n      if (ttl < 0) {\n        throw new IllegalArgumentException(\n                \"FXOrder TTL must be positive, or 0 for market orders\");\n      }\n      if (price <= 0.0) {\n        throw new IllegalArgumentException(\n                \"FXOrder price must be positive\");\n      }\n    } \n  }\n  record MyRecord7(int x, int y) {  \n    public MyRecord7{ \n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n    }\n  }\n  class MyClass {  \n    MyClass(int x) {  \n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n      System.out.println(\"test\");\n    }\n  }\n}"
    },
    {
      "description": "Auto test from InputJavaNCSSRecordsMax.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        12,
        14
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.javancss;\npublic class InputJavaNCSSRecordsMax {\n    record MyRecord() { \n        static int myRecordField1 = 0;\n        static int myRecordField2 = 0;\n        static int myRecordField3 = 0;\n        static int myRecordField4 = 0;\n        static int myRecordField5 = 0;\n        static int myRecordField6 = 0;\n        static int myRecordField7 = 0;\n        static int myRecordField8 = 0;\n        static int myRecordField9 = 0;\n        static int myRecordField10 = 0;\n        static int myRecordField11 = 0;\n        static int myRecordField12 = 0;\n        static int myRecordField13 = 0;\n        static int myRecordField14 = 0;\n        static int myRecordField15 = 0;\n        static int myRecordField16 = 0;\n        static int myRecordField17 = 0;\n        static int myRecordField18 = 0;\n        static int myRecordField19 = 0;\n        static int myRecordField20 = 0;\n        static int myRecordField21 = 0;\n        static int myRecordField22 = 0;\n        static int myRecordField23 = 0;\n        static int myRecordField24 = 0;\n        static int myRecordField25 = 0;\n        static int myRecordField26 = 0;\n        static int myRecordField27 = 0;\n        static int myRecordField28 = 0;\n        static int myRecordField29 = 0;\n        static int myRecordField30 = 0;\n        static int myRecordField31 = 0;\n        static int myRecordField32 = 0;\n        static int myRecordField33 = 0;\n        static int myRecordField34 = 0;\n        static int myRecordField35 = 0;\n        static int myRecordField36 = 0;\n        static int myRecordField37 = 0;\n        static int myRecordField38 = 0;\n        static int myRecordField39 = 0;\n        static int myRecordField40 = 0;\n        static int myRecordField41 = 0;\n        static int myRecordField42 = 0;\n        static int myRecordField43 = 0;\n        static int myRecordField44 = 0;\n        static int myRecordField45 = 0;\n        static int myRecordField46 = 0;\n        static int myRecordField47 = 0;\n        static int myRecordField48 = 0;\n        static int myRecordField49 = 0;\n        static int myRecordField50 = 0;\n        static int myRecordField51 = 0;\n        static int myRecordField52 = 0;\n        static int myRecordField53 = 0;\n        static int myRecordField54 = 0;\n        static int myRecordField55 = 0;\n        static int myRecordField56 = 0;\n        static int myRecordField57 = 0;\n        static int myRecordField58 = 0;\n        static int myRecordField59 = 0;\n        static int myRecordField60 = 0;\n        static int myRecordField61 = 0;\n        static int myRecordField62 = 0;\n        static int myRecordField63 = 0;\n        static int myRecordField64 = 0;\n        static int myRecordField65 = 0;\n        static int myRecordField66 = 0;\n        static int myRecordField67 = 0;\n        static int myRecordField68 = 0;\n        static int myRecordField69 = 0;\n        static int myRecordField70 = 0;\n        static int myRecordField71 = 0;\n        static int myRecordField72 = 0;\n        static int myRecordField73 = 0;\n        static int myRecordField74 = 0;\n        static int myRecordField75 = 0;\n        static int myRecordField76 = 0;\n        static int myRecordField77 = 0;\n        static int myRecordField78 = 0;\n        static int myRecordField79 = 0;\n        static int myRecordField80 = 0;\n        static int myRecordField81 = 0;\n        static int myRecordField82 = 0;\n        static int myRecordField83 = 0;\n        static int myRecordField84 = 0;\n        static int myRecordField85 = 0;\n        static int myRecordField86 = 0;\n        static int myRecordField87 = 0;\n        static int myRecordField88 = 0;\n        static int myRecordField89 = 0;\n        static int myRecordField90 = 0;\n        static int myRecordField91 = 0;\n        static int myRecordField92 = 0;\n        static int myRecordField93 = 0;\n        static int myRecordField94 = 0;\n        static int myRecordField95 = 0;\n        static int myRecordField96 = 0;\n        static int myRecordField97 = 0;\n        static int myRecordField98 = 0;\n        static int myRecordField99 = 0;\n        static int myRecordField100 = 0;\n        static int myRecordField101 = 0;\n        static int myRecordField102 = 0;\n        static int myRecordField103 = 0;\n        static int myRecordField104 = 0;\n        static int myRecordField105 = 0;\n        static int myRecordField106 = 0;\n        static int myRecordField107 = 0;\n        static int myRecordField108 = 0;\n        static int myRecordField109 = 0;\n        static int myRecordField110 = 0;\n        static int myRecordField111 = 0;\n        static int myRecordField112 = 0;\n        static int myRecordField113 = 0;\n        static int myRecordField114 = 0;\n        static int myRecordField115 = 0;\n        static int myRecordField116 = 0;\n        static int myRecordField117 = 0;\n        static int myRecordField118 = 0;\n        static int myRecordField119 = 0;\n        static int myRecordField120 = 0;\n        static int myRecordField121 = 0;\n        static int myRecordField122 = 0;\n        static int myRecordField123 = 0;\n        static int myRecordField124 = 0;\n        static int myRecordField125 = 0;\n        static int myRecordField126 = 0;\n        static int myRecordField127 = 0;\n        static int myRecordField128 = 0;\n        static int myRecordField129 = 0;\n        static int myRecordField130 = 0;\n        static int myRecordField131 = 0;\n        static int myRecordField132 = 0;\n        static int myRecordField133 = 0;\n        static int myRecordField134 = 0;\n        static int myRecordField135 = 0;\n        static int myRecordField136 = 0;\n        static int myRecordField137 = 0;\n        static int myRecordField138 = 0;\n        static int myRecordField139 = 0;\n        static int myRecordField140 = 0;\n        static int myRecordField141 = 0;\n        static int myRecordField142 = 0;\n        static int myRecordField143 = 0;\n        static int myRecordField144 = 0;\n        static int myRecordField145 = 0;\n        static int myRecordField146 = 0;\n        static int myRecordField147 = 0;\n        static int myRecordField148 = 0;\n        static int myRecordField149 = 0;\n        static int myRecordField150 = 0;\n    }\n}"
    },
    {
      "description": "Auto test from InputJavaNCSSResolveMutation.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        13,
        13
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.metrics.javancss;\npublic class InputJavaNCSSResolveMutation {\n    public static class Some \n    {\n        static class SomeClass {\n            boolean flag = true;\n            static boolean test(boolean k) {\n                return k;\n            }\n        }\n        private int foo() {\n            if (SomeClass.test(true)) return 4;\n            return 0;\n        }\n        private int foo1() {\n            return 4;\n        }\n        private int foo2() {\n            if (SomeClass.test(true))\n                return 4;\n            return 0;\n        }\n        private int foo3() {\n            if (SomeClass.test(true)) if (true) return 4;\n            return 0;\n        }\n        private void foo(Object o) {\n            if (o != null) this.notify();\n        }\n        private void foo2(Object o) {\n            if (o != null)\n                this.notify();\n        }\n        private void loopTest(Object o) {\n            while (o != null) {\n                this.notify();\n            }\n            while (o != null)\n                this.notify();\n            while (o != null) this.notify();\n            do {\n                this.notify();\n            } while (o != null);\n            do this.notify(); while (o != null);\n            do\n                this.notify();\n            while (o != null);\n            for (; ; )\n                break;\n            for (; ; ) break;\n            for (int i = 0; i < 10; i++) {\n                this.notify();\n            }\n            for (int i = 0; i < 10; i++)\n                this.notify();\n            for (int i = 0; ; ) this.notify();\n        }\n        private int getSmth(int num) {\n            int counter = 0;\n            switch (num) {\n                case 1:\n                    counter++;\n                    break;\n                case 2:\n                    counter += 2;\n                    break;\n                case 3:\n                    counter += 3;\n                    break;\n                case 6:\n                    counter += 10;\n                    break;\n                default:\n                    counter = 100;\n                    break;\n            }\n            return counter;\n        }\n        private void testElse(int k) {\n            if (k == 4) System.identityHashCode(\"yes\");\n            else System.identityHashCode(\"no\");\n            for (; ; ) ;\n        }\n        void enhancedForLoop(int[] array) {\n            for (int value : array) return;\n        }\n        private void forEachLoop() {\n            for (String s : new String[]{\"\"}) break;\n            for (String s : new String[]{\"\"})\n                break;\n            for (; ; )\n                ;\n        }\n    }\n}"
    }
  ]
}