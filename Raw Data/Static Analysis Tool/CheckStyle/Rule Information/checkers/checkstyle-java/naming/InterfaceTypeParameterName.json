{
  "name": "InterfaceTypeParameterName",
  "language": "java",
  "description": "<div>\n Checks that interface type parameter names conform to a specified pattern.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 29,
  "branches": 0,
  "apis": 8,
  "test": [
    {
      "description": "Auto test from InputInterfaceTypeParameterName.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        53
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.interfacetypeparametername;\nimport java.io.Serializable;\npublic class InputInterfaceTypeParameterName<t>\n{\n    public <TT> void foo() { }\n    <e_e> void foo(int i) {\n    }\n}\nclass Other <foo extends Serializable & Cloneable> {\n    foo getOne() {\n        return null;\n    }\n    <Tfo$o2T extends foo> Tfo$o2T getTwo(Tfo$o2T a) {\n        return null;\n    }\n    <foo extends Runnable> foo getShadow() {\n        return null;\n    }\n    static class Junk <foo> {\n        <_fo extends foo> void getMoreFoo() {\n        }\n    }\n}\nclass MoreOther <T extends Cloneable> {\n    <E extends T> void getMore() {\n        new Other() {\n            <T> void getMoreFoo() {\n            }\n        };\n    }\n}\ninterface Boo<Input> { \n    Input boo();\n}\ninterface FooInterface<T> {\n    T foo();\n}\ninterface FooInterface2 {\n    Input foo();\n}\nclass Input {\n}"
    },
    {
      "description": "Auto test from InputInterfaceTypeParameterName1.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        53,
        57
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.interfacetypeparametername;\nimport java.io.Serializable;\npublic class InputInterfaceTypeParameterName1<t>\n{\n    public <TT> void foo() { }\n    <e_e> void foo(int i) {\n    }\n}\nclass Other1 <foo extends Serializable & Cloneable> {\n    foo getOne() {\n        return null;\n    }\n    <Tfo$o2T extends foo> Tfo$o2T getTwo(Tfo$o2T a) {\n        return null;\n    }\n    <foo extends Runnable> foo getShadow() {\n        return null;\n    }\n    static class Junk <foo> {\n        <_fo extends foo> void getMoreFoo() {\n        }\n    }\n}\nclass MoreOther1 <T extends Cloneable> {\n    <E extends T> void getMore() {\n        new Other() {\n            <T> void getMoreFoo() {\n            }\n        };\n    }\n}\ninterface Boo1<Input> { \n    Input boo();\n}\ninterface FooInterface1<T> { \n    T foo();\n}\ninterface FooInterface3 {\n    Input foo();\n}\nclass Input1 {\n}"
    }
  ]
}