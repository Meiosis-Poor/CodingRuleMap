{
  "name": "LocalVariableName",
  "language": "java",
  "description": "<div>\n Checks that local, non-{@code final} variable names conform to a specified pattern.\n A catch parameter is considered to be\n a local variable.\n </div>\n\n <p>\n This check does not support pattern variables. Instead, use\n <a href=\"https://checkstyle.org/checks/naming/patternvariablename.html#PatternVariableName\">\n PatternVariableName</a>.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 47,
  "branches": 3,
  "apis": 15,
  "test": [
    {
      "description": "Auto test from InputLocalVariableName1two.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        38,
        49,
        51
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.localvariablename;\nimport java.io.*;\nfinal class InputLocalVariableName1two\n{\n    private InputLocalVariableName1two()\n    {\n    }\n    private void localVariables()\n    {\n        int abc = 0;\n        int ABC = 0; \n        final int cde = 0;\n        final int CDE = 0;\n        for (int k = 0; k < 1; k++)\n        {\n            String innerBlockVariable = \"\";\n        }\n        for (int I = 0; I < 1; I++) \n        {\n            String InnerBlockVariable = \"\"; \n        }\n    }\n    void ALL_UPPERCASE_METHOD()\n    {\n    }\n    private static final int BAD__NAME = 3;\n    void errorColumnAfterTabs()\n    {\n                int tab0 =1;\n                int tab1 =1;\n                 int tab2 =1;\n                int tab3 =1;\n                    int tab4 =1;\n                  int tab5 =1;\n    }\n    void veryLong()\n    {\n    }\n    void toManyArgs(int aArg1, int aArg2, int aArg3, int aArg4, int aArg5,\n                    int aArg6, int aArg7, int aArg8, int aArg9)\n    {\n    }\n}"
    },
    {
      "description": "Auto test from InputLocalVariableName2one.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.localvariablename;\nimport java.io.*;\nclass InputLocalVariableName2one\n{\n    public void doSomething()\n    {\n        for (Object O : new java.util.ArrayList()) \n        {\n        }\n        for (final int k_ : new int[] {}) {}\n    }\n}\nenum InputLocalVariableNameEnum1\n{\n    ABC,\n    XYZ;\n    private int someMember;\n}"
    },
    {
      "description": "Auto test from InputLocalVariableNameOneCharInitVarName.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        18,
        21,
        23,
        28,
        46,
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.localvariablename;\nimport java.util.HashMap;\nimport java.util.Map;\nclass InputLocalVariableNameOneCharInitVarName\n{\n        public void fooMethod()\n        {\n                for(int i = 1; i <10; i++) {\n                        int j = 1; \n                }\n        for(int K = 1; K < 10; K++) {\n            int A = 1; \n        }\n                int i = 0; \n        for(int index = 1; index < 10; index++) {\n                }\n        for(int Index = 1; Index < 10; Index++) { \n                }\n        int index = 1;\n                for(; index < 10; index++) {\n                }\n                for(; i < 12; i++) {\n                }\n                Map<String, String> map = new HashMap<String, String>();\n                for (Map.Entry<String, String> e : map.entrySet()) {\n                        String a = \"\"; \n                }\n                for (Map.Entry<String, String> E : map.entrySet()) {\n                        String B = \"\"; \n                }\n        }\n}"
    }
  ]
}