{
  "name": "ParameterName",
  "language": "java",
  "description": "<div>\n Checks that method parameter names conform to a specified pattern.\n By using {@code accessModifiers} property it is possible\n to specify different formats for methods at different visibility levels.\n </div>\n\n <p>\n To validate {@code catch} parameters please use\n <a href=\"https://checkstyle.org/checks/naming/catchparametername.html#CatchParameterName\">\n CatchParameterName</a>.\n </p>\n\n <p>\n To validate lambda parameters please use\n <a href=\"https://checkstyle.org/checks/naming/lambdaparametername.html#LambdaParameterName\">\n LambdaParameterName</a>.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 70,
  "branches": 16,
  "apis": 25,
  "test": [
    {
      "description": "Auto test from InputParameterNameAccessModifier.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        12,
        17,
        26,
        37,
        51,
        67
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.parametername;\npublic class InputParameterNameAccessModifier {\n    public InputParameterNameAccessModifier(int pubconstr) {} \n    public void v1(int h) {\n        new Object () {\n            public void i(int inner) {} \n        };\n    }\n    protected void v4(int h) {}\n    void v2(int h) {}\n    private void v3(int h) {}\n    public void i1(int pubpub) {} \n    protected void i4(int pubprot) {}\n    void i2(int pubpack) {}\n    private void i3(int pubpriv) {}\n    public interface InterfaceScope {\n        void v1(int h);\n        void i1(int pubifc); \n    }\n}\nclass PrivateScope {\n    public void v1(int h) {}\n    protected void v4(int h) {}\n    void v2(int h) {}\n    private void v3(int h) {}\n    public void i1(int packpub) {} \n    protected void i4(int packprot) {}\n    void i2(int packpack) {}\n    private void i3(int packpriv) {\n        try {\n        } catch (Exception exc) {\n        }\n    }\n    interface InterfaceScope {\n        void v1(int h);\n        void i1(int packifc); \n    }\n    interface FuncIfc {\n        void a(int h);\n    }\n    public void l() {\n        FuncIfc l1 = (int lexp)->{};\n        FuncIfc l2 = (limp)->{};\n    }\n}"
    },
    {
      "description": "Auto test from InputParameterNameOne.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        68
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.parametername;\nimport java.io.*;\nfinal class InputParameterNameOne\n{\n    public static final int badConstant = 2;\n    public static final int MAX_ROWS = 2;\n    private static int badStatic = 2;\n    private static int sNumCreated = 0;\n    private int badMember = 2;\n    private int mNumCreated1 = 0;\n    protected int mNumCreated2 = 0;\n    private int[] mInts = new int[] {1,2, 3,\n                                     4};\n    public static int sTest1;\n    protected static int sTest3;\n    static int sTest2;\n    int mTest1;\n    public int mTest2;\n    int test1(int badFormat1,int badFormat2, \n              final int badFormat3)          \n        throws java.lang.Exception\n    {\n        return 0;\n    }\n    private void longMethod()\n    {\n    }\n    private InputParameterNameOne()\n    {\n    }\n    private void localVariables()\n    {\n        int abc = 0;\n        int ABC = 0;\n        final int cde = 0;\n        final int CDE = 0;\n        for (int k = 0; k < 1; k++)\n        {\n            String innerBlockVariable = \"\";\n        }\n        for (int I = 0; I < 1; I++)\n        {\n            String InnerBlockVariable = \"\";\n        }\n    }\n    void ALL_UPPERCASE_METHOD()\n    {\n    }\n    private static final int BAD__NAME = 3;\n    void errorColumnAfterTabs()\n    {\n                int tab0 =1;\n                int tab1 =1;\n                 int tab2 =1;\n                int tab3 =1;\n                    int tab4 =1;\n                  int tab5 =1;\n    }\n    void veryLong()\n    {\n    }\n    void toManyArgs(int aArg1, int aArg2, int aArg3, int aArg4, int aArg5,\n                    int aArg6, int aArg7, int aArg8, int aArg9)\n    {\n    }\n}\nclass InputParameterNameOne2\n{\n    public void doSomething()\n    {\n        for (Object O : new java.util.ArrayList())\n        {\n        }\n    }\n}\nenum InputParameterNameEnumOne1\n{\n    ABC,\n    XYZ;\n    private int someMember;\n}"
    },
    {
      "description": "Auto test from InputParameterNameOverrideAnnotation.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        19,
        22,
        28
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.parametername;\npublic class InputParameterNameOverrideAnnotation {\n    @Override\n    public boolean equals(Object o) {\n        return super.equals(o);\n    }\n    @SuppressWarnings(\"\")\n    public void foo(Object object) { \n    }\n    public void foo2(Integer aaaa) {} \n    void foo3() {} \n    void foo4(int abc, int bd) {} \n    int foo5(int abc) {return 1;} \n    private int field;\n    private java.util.Set<String> packageNames;\n    InputParameterNameOverrideAnnotation() {} \n    InputParameterNameOverrideAnnotation(int fie, java.util.Set<String> pkgNames) {} \n}"
    },
    {
      "description": "Auto test from InputParameterNameOverrideAnnotationOne.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        14,
        19,
        22,
        28
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.parametername;\npublic class InputParameterNameOverrideAnnotationOne {\n    @Override\n    public boolean equals(Object o) { \n        return super.equals(o);\n    }\n    @SuppressWarnings(\"\")\n    public void foo(Object object) { \n    }\n    public void foo2(Integer aaaa) {} \n    void foo3() {} \n    void foo4(int abc, int bd) {} \n    int foo5(int abc) {return 1;} \n    private int field;\n    private java.util.Set<String> packageNames;\n    InputParameterNameOverrideAnnotationOne() {} \n    InputParameterNameOverrideAnnotationOne(int fie, java.util.Set<String> pkgNames) {}\n}"
    },
    {
      "description": "Auto test from InputParameterNameWhitespaceInAccessModifierProperty.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        12,
        17
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.parametername;\npublic class InputParameterNameWhitespaceInAccessModifierProperty {\n    public InputParameterNameWhitespaceInAccessModifierProperty(int parameter1) {} \n    public void v1(int h) {\n        new Object () {\n            public void i(int parameter2) {} \n        };\n    }\n    void method2(int V3) {}\n}"
    }
  ]
}