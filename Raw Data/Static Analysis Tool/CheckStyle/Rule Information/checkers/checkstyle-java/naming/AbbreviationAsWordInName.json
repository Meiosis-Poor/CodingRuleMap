{
  "name": "AbbreviationAsWordInName",
  "language": "java",
  "description": "<div>\n Validates abbreviations (consecutive capital letters) length in\n identifier name, it also allows to enforce camel case naming. Please read more at\n <a href=\"https://checkstyle.org/styleguides/google-java-style-20220203/javaguide.html#s5.3-camel-case\">\n Google Style Guide</a> to get to know how to avoid long abbreviations in names.\n </div>\n\n <p>'_' is considered as word separator in identifier name.</p>\n\n <p>\n {@code allowedAbbreviationLength} specifies how many consecutive capital letters are\n allowed in the identifier.\n A value of <i>3</i> indicates that up to 4 consecutive capital letters are allowed,\n one after the other, before a violation is printed. The identifier 'MyTEST' would be\n allowed, but 'MyTESTS' would not be.\n A value of <i>0</i> indicates that only 1 consecutive capital letter is allowed. This\n is what should be used to enforce strict camel casing. The identifier 'MyTest' would\n be allowed, but 'MyTEst' would not be.\n </p>\n\n <p>\n {@code ignoreFinal}, {@code ignoreStatic}, and {@code ignoreStaticFinal}\n control whether variables with the respective modifiers are to be ignored.\n Note that a variable that is both static and final will always be considered under\n {@code ignoreStaticFinal} only, regardless of the values of {@code ignoreFinal}\n and {@code ignoreStatic}. So for example if {@code ignoreStatic} is true but\n {@code ignoreStaticFinal} is false, then static final variables will not be ignored.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 214,
  "branches": 29,
  "apis": 39,
  "test": [
    {
      "description": "Auto test from InputAbbreviationAsWordInNameAnnotation.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\npublic interface InputAbbreviationAsWordInNameAnnotation extends BaseClass {\n    @Annotation1\n    @Override\n    String readMETHOD();\n}\nabstract interface BaseClass {\n    String readMETHOD(); \n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameCheckEnhancedInstanceof.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        24,
        25,
        34,
        37
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nimport java.util.*;\nimport java.util.Locale;\npublic class InputAbbreviationAsWordInNameCheckEnhancedInstanceof {\n    public void t(Object o1, Object o2) {\n        if (!(o1 instanceof String STRING) \n                && (o2 instanceof Integer INTEGER)) {} \n        List<Integer> arrayList = new ArrayList<Integer>();\n        if (arrayList instanceof ArrayList<Integer> aXML) {\n            System.out.println(\"BlahBlah\");\n        }\n        boolean result = (o1 instanceof String a1) ?\n                (o1 instanceof String aTXT) :\n                (!(o1 instanceof String ssSTRING)); \n        String formatted;\n        if (o1 instanceof Integer XMLHTTP) formatted = \n                String.format(\"int %d\", XMLHTTP);\n        else if (o1 instanceof Byte bYT) formatted = String.format(\"byte %d\", bYT);\n        else formatted = String.format(\"Something else \"+ o1.toString());\n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameCheckEnhancedInstanceofAllowXmlLength1.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        24,
        25,
        33,
        34,
        37
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nimport java.util.*;\nimport java.util.Locale;\npublic class InputAbbreviationAsWordInNameCheckEnhancedInstanceofAllowXmlLength1 {\n    public void t(Object o1, Object o2) {\n        if (!(o1 instanceof String STRING) \n                && (o2 instanceof Integer INTEGER)) {} \n        List<Integer> arrayList = new ArrayList<Integer>();\n        if (arrayList instanceof ArrayList<Integer> aXML) { \n            System.out.println(\"Blah\");\n        }\n        boolean result = (o1 instanceof String a1) ?\n                (o1 instanceof String aTXT) :   \n                (!(o1 instanceof String ssSTRING)); \n        String formatted;\n        if (o1 instanceof Integer XMLHTTP) formatted = \n                String.format(\"int %d\", XMLHTTP);\n        else if (o1 instanceof Byte bYT) formatted = String.format(\"byte %d\", bYT);\n        else formatted = String.format(\"Something else \"+ o1.toString());\n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameCheckRecords.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        21,
        22,
        23,
        24,
        26,
        33,
        39,
        43,
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nimport org.w3c.dom.Node;\npublic class InputAbbreviationAsWordInNameCheckRecords {\n    class myCLASS { \n        int INTEGER = 2; \n        void METHOD(){} \n        public myCLASS(String STRING) { \n            int INTEGER = 6; \n        }\n    }\n    record myRECORD1(String STRING) { \n        void METHOD(){} \n        public myRECORD1(){\n            this(\"string\");\n            int INTEGER = 6; \n        }\n    }\n    record myRECORD2() { \n        static int INTEGER = 6; \n        public myRECORD2{\n            int INTEGER = 2; \n        }\n    }\n    record myRECORD3(String STRING, int INTEGER, Node[] NODES) { \n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameIgnore.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        47,
        52,
        53,
        136,
        140,
        144
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\npublic class InputAbbreviationAsWordInNameIgnore {\n    abstract class InputAbbreviationAsWordInNameType {\n    }\n    abstract class NonAAAAbstractClassName {\n    }\n    abstract class FactoryWithBADNAme {\n    }\n    abstract class AbstractCLASSName {\n        abstract class NonAbstractInnerClass {\n        }\n    }\n    abstract class ClassFactory1 {\n        abstract class WellNamedFactory {\n        }\n    }\n    class NonAbstractClass1 {\n    }\n    class AbstractClass1 {\n    }\n    class Class1Factory1 {\n    }\n    abstract class AbstractClassName3 {\n        class AbstractINNERRClass { \n        }\n    }\n    abstract class Class3Factory {\n        class WellNamedFACTORY { \n            public void marazmaticMETHODName() { \n                int marazmaticVARIABLEName = 2;\n                int MARAZMATICVariableName = 1;\n            }\n        }\n    }\n    interface Directions {\n      int RIGHT=1;\n      int LEFT=2;\n      int UP=3;\n      int DOWN=4;\n    }\n    interface BadNameForInterface\n    {\n       void interfaceMethod();\n    }\n    abstract static class NonAAAAbstractClassName2 {\n        public int serialNUMBER = 6;\n        public final int s1erialNUMBER = 6;\n        private static int s2erialNUMBER = 6;\n        private static final int s3erialNUMBER = 6;\n    }\n    interface Interface1 {\n        String VALUEEEE = \"value\"; \n    }\n    interface Interface2 {\n        static String VALUEEEE = \"value\"; \n    }\n    interface Interface3 {\n        final String VALUEEEE = \"value\"; \n    }\n    interface Interface4 {\n        final static String VALUEEEE = \"value\"; \n    }\n    class FIleNameFormatException extends Exception {\n        private static final long serialVersionUID = 1L;\n        public FIleNameFormatException(Exception e) {\n            super(e);\n        }\n    }\n    class StateX {\n        int userID;\n        int scaleX, scaleY, scaleZ;\n        int getScaleX() {\n            return this.scaleX;\n        }\n    }\n    @interface Annotation1 {\n        String VALUE = \"value\"; \n    }\n    @interface Annotation2 {\n        static String VALUE = \"value\"; \n    }\n    @interface Annotation3 {\n        final String VALUE = \"value\"; \n    }\n    @interface Annotation4 {\n        final static String VALUE = \"value\"; \n    }\n    final class InnerClassOneVIOLATION { \n    }\n    static class InnerClassTwoVIOLATION { \n    }\n    static final class InnerClassThreeVIOLATION { \n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameIgnoreFinal.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        26,
        47,
        52,
        53,
        73,
        75
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\npublic class InputAbbreviationAsWordInNameIgnoreFinal {\n    abstract class InputAbbreviationAsWordInNameType {\n    }\n    abstract class NonAAAAbstractClassName {\n    }\n    abstract class FactoryWithBADNAme {\n    }\n    abstract class AbstractCLASSName { \n        abstract class NonAbstractInnerClass {\n        }\n    }\n    abstract class ClassFactory1 {\n        abstract class WellNamedFactory {\n        }\n    }\n    class NonAbstractClass1 {\n    }\n    class AbstractClass1 {\n    }\n    class Class1Factory1 {\n    }\n    abstract class AbstractClassName3 {\n        class AbstractINNERRClass { \n        }\n    }\n    abstract class Class3Factory {\n        class WellNamedFACTORY { \n            public void marazmaticMETHODName() { \n                int marazmaticVARIABLEName = 2;\n                int MARAZMATICVariableName = 1;\n            }\n        }\n    }\n    interface Directions {\n      int RIGHT=1;\n      int LEFT=2;\n      int UP=3;\n      int DOWN=4;\n    }\n    interface BadNameForInterface\n    {\n       void interfaceMethod();\n    }\n    abstract static class NonAAAAbstractClassName2 {\n        public int serialNUMBER = 6; \n        public final int s1erialNUMBER = 6;\n        private static int s2erialNUMBER = 6; \n        private static final int s3erialNUMBER = 6;\n    }\n    interface Interface1 {\n        String VALUEEEE = \"value\"; \n    }\n    interface Interface2 {\n        static String VALUEEEE = \"value\"; \n    }\n    interface Interface3 {\n        final String VALUEEEE = \"value\"; \n    }\n    interface Interface4 {\n        final static String VALUEEEE = \"value\"; \n    }\n    class FIleNameFormatException extends Exception {\n        private static final long serialVersionUID = 1L;\n        public FIleNameFormatException(Exception e) {\n            super(e);\n        }\n    }\n    class StateX {\n        int userID;\n        int scaleX, scaleY, scaleZ;\n        int getScaleX() {\n            return this.scaleX;\n        }\n    }\n    @interface Annotation1 {\n        String VALUE = \"value\"; \n    }\n    @interface Annotation2 {\n        static String VALUE = \"value\"; \n    }\n    @interface Annotation3 {\n        final String VALUE = \"value\"; \n    }\n    @interface Annotation4 {\n        final static String VALUE = \"value\"; \n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameIgnoreFinalKeepStaticFinal.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        26,
        47,
        52,
        53,
        73,
        75,
        76,
        80,
        86,
        92,
        98
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\npublic class InputAbbreviationAsWordInNameIgnoreFinalKeepStaticFinal {\n    abstract class InputAbbreviationAsWordInNameType {\n    }\n    abstract class NonAAAAbstractClassName {\n    }\n    abstract class FactoryWithBADNAme {\n    }\n    abstract class AbstractCLASSName { \n        abstract class NonAbstractInnerClass {\n        }\n    }\n    abstract class ClassFactory1 {\n        abstract class WellNamedFactory {\n        }\n    }\n    class NonAbstractClass1 {\n    }\n    class AbstractClass1 {\n    }\n    class Class1Factory1 {\n    }\n    abstract class AbstractClassName3 {\n        class AbstractINNERRClass { \n        }\n    }\n    abstract class Class3Factory {\n        class WellNamedFACTORY { \n            public void marazmaticMETHODName() { \n                int marazmaticVARIABLEName = 2;\n                int MARAZMATICVariableName = 1;\n            }\n        }\n    }\n    interface Directions {\n      int RIGHT=1;\n      int LEFT=2;\n      int UP=3;\n      int DOWN=4;\n    }\n    interface BadNameForInterface\n    {\n       void interfaceMethod();\n    }\n    abstract static class NonAAAAbstractClassName2 {\n        public int serialNUMBER = 6; \n        public final int s1erialNUMBER = 6;\n        private static int s2erialNUMBER = 6; \n        private static final int s3erialNUMBER = 6; \n    }\n    interface Interface1 {\n        String VALUEEEE = \"value\"; \n    }\n    interface Interface2 {\n        static String VALUEEEE = \"value\"; \n    }\n    interface Interface3 {\n        final String VALUEEEE = \"value\"; \n    }\n    interface Interface4 {\n        final static String VALUEEEE = \"value\"; \n    }\n    class FIleNameFormatException extends Exception {\n        private static final long serialVersionUID = 1L;\n        public FIleNameFormatException(Exception e) {\n            super(e);\n        }\n    }\n    class StateX {\n        int userID;\n        int scaleX, scaleY, scaleZ;\n        int getScaleX() {\n            return this.scaleX;\n        }\n    }\n    @interface Annotation1 {\n        String VALUE = \"value\"; \n    }\n    @interface Annotation2 {\n        static String VALUE = \"value\"; \n    }\n    @interface Annotation3 {\n        final String VALUE = \"value\"; \n    }\n    @interface Annotation4 {\n        final static String VALUE = \"value\"; \n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameIgnoreNonStaticFinal.java",
      "expected-problems": 17,
      "expected-linenumbers": [
        26,
        47,
        52,
        53,
        73,
        76,
        80,
        86,
        92,
        98,
        122,
        126,
        130,
        134,
        136,
        140,
        144
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\npublic class InputAbbreviationAsWordInNameIgnoreNonStaticFinal {\n    abstract class InputAbbreviationAsWordInNameType {\n    }\n    abstract class NonAAAAbstractClassName {\n    }\n    abstract class FactoryWithBADNAme {\n    }\n    abstract class AbstractCLASSName { \n        abstract class NonAbstractInnerClass {\n        }\n    }\n    abstract class ClassFactory1 {\n        abstract class WellNamedFactory {\n        }\n    }\n    class NonAbstractClass1 {\n    }\n    class AbstractClass1 {\n    }\n    class Class1Factory1 {\n    }\n    abstract class AbstractClassName3 {\n        class AbstractINNERRClass { \n        }\n    }\n    abstract class Class3Factory {\n        class WellNamedFACTORY { \n            public void marazmaticMETHODName() { \n                int marazmaticVARIABLEName = 2;\n                int MARAZMATICVariableName = 1;\n            }\n        }\n    }\n    interface Directions {\n      int RIGHT=1;\n      int LEFT=2;\n      int UP=3;\n      int DOWN=4;\n    }\n    interface BadNameForInterface\n    {\n       void interfaceMethod();\n    }\n    abstract static class NonAAAAbstractClassName2 {\n        public int serialNUMBER = 6; \n        public final int s1erialNUMBER = 6;\n        private static int s2erialNUMBER = 6;\n        private static final int s3erialNUMBER = 6; \n    }\n    interface Interface1 {\n        String VALUEEEE = \"value\"; \n    }\n    interface Interface2 {\n        static String VALUEEEE = \"value\"; \n    }\n    interface Interface3 {\n        final String VALUEEEE = \"value\"; \n    }\n    interface Interface4 {\n        final static String VALUEEEE = \"value\"; \n    }\n    class FIleNameFormatException extends Exception {\n        private static final long serialVersionUID = 1L;\n        public FIleNameFormatException(Exception e) {\n            super(e);\n        }\n    }\n    class StateX {\n        int userID;\n        int scaleX, scaleY, scaleZ;\n        int getScaleX() {\n            return this.scaleX;\n        }\n    }\n    @interface Annotation1 {\n        String VALUEEEE = \"value\"; \n    }\n    @interface Annotation2 {\n        static String VALUEEEE = \"value\"; \n    }\n    @interface Annotation3 {\n        final String VALUEEEE = \"value\"; \n    }\n    @interface Annotation4 {\n        final static String VALUEEEE = \"value\"; \n    }\n    final class InnerClassOneVIOLATION { \n    }\n    static class InnerClassTwoVIOLATION { \n    }\n    static final class InnerClassThreeVIOLATION { \n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameIgnoreStatic.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        26,
        47,
        52,
        53,
        73,
        74
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\npublic class InputAbbreviationAsWordInNameIgnoreStatic {\n    abstract class InputAbbreviationAsWordInNameType {\n    }\n    abstract class NonAAAAbstractClassName {\n    }\n    abstract class FactoryWithBADNAme {\n    }\n    abstract class AbstractCLASSName { \n        abstract class NonAbstractInnerClass {\n        }\n    }\n    abstract class ClassFactory1 {\n        abstract class WellNamedFactory {\n        }\n    }\n    class NonAbstractClass1 {\n    }\n    class AbstractClass1 {\n    }\n    class Class1Factory1 {\n    }\n    abstract class AbstractClassName3 {\n        class AbstractINNERRClass { \n        }\n    }\n    abstract class Class3Factory {\n        class WellNamedFACTORY { \n            public void marazmaticMETHODName() { \n                int marazmaticVARIABLEName = 2;\n                int MARAZMATICVariableName = 1;\n            }\n        }\n    }\n    interface Directions {\n      int RIGHT=1;\n      int LEFT=2;\n      int UP=3;\n      int DOWN=4;\n    }\n    interface BadNameForInterface\n    {\n       void interfaceMethod();\n    }\n    abstract static class NonAAAAbstractClassName2 {\n        public int serialNUMBER = 6; \n        public final int s1erialNUMBER = 6; \n        private static int s2erialNUMBER = 6;\n        private static final int s3erialNUMBER = 6;\n    }\n    interface Interface1 {\n        String VALUEEEE = \"value\"; \n    }\n    interface Interface2 {\n        static String VALUEEEE = \"value\"; \n    }\n    interface Interface3 {\n        final String VALUEEEE = \"value\"; \n    }\n    interface Interface4 {\n        final static String VALUEEEE = \"value\"; \n    }\n    class FIleNameFormatException extends Exception {\n        private static final long serialVersionUID = 1L;\n        public FIleNameFormatException(Exception e) {\n            super(e);\n        }\n    }\n    class StateX {\n        int userID;\n        int scaleX, scaleY, scaleZ;\n        int getScaleX() {\n            return this.scaleX;\n        }\n    }\n    @interface Annotation1 {\n        String VALUE = \"value\"; \n    }\n    @interface Annotation2 {\n        static String VALUE = \"value\"; \n    }\n    @interface Annotation3 {\n        final String VALUE = \"value\"; \n    }\n    @interface Annotation4 {\n        final static String VALUE = \"value\"; \n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameIgnoreStaticFinal.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        26,
        47,
        52,
        53,
        73,
        74,
        75
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\npublic class InputAbbreviationAsWordInNameIgnoreStaticFinal {\n    abstract class InputAbbreviationAsWordInNameType {\n    }\n    abstract class NonAAAAbstractClassName {\n    }\n    abstract class FactoryWithBADNAme {\n    }\n    abstract class AbstractCLASSName { \n        abstract class NonAbstractInnerClass {\n        }\n    }\n    abstract class ClassFactory1 {\n        abstract class WellNamedFactory {\n        }\n    }\n    class NonAbstractClass1 {\n    }\n    class AbstractClass1 {\n    }\n    class Class1Factory1 {\n    }\n    abstract class AbstractClassName3 {\n        class AbstractINNERRClass { \n        }\n    }\n    abstract class Class3Factory {\n        class WellNamedFACTORY { \n            public void marazmaticMETHODName() { \n                int marazmaticVARIABLEName = 2;\n                int MARAZMATICVariableName = 1;\n            }\n        }\n    }\n    interface Directions {\n      int RIGHT=1;\n      int LEFT=2;\n      int UP=3;\n      int DOWN=4;\n    }\n    interface BadNameForInterface\n    {\n       void interfaceMethod();\n    }\n    abstract static class NonAAAAbstractClassName2 {\n        public int serialNUMBER = 6; \n        public final int s1erialNUMBER = 6; \n        private static int s2erialNUMBER = 6; \n        private static final int s3erialNUMBER = 6;\n    }\n    interface Interface1 {\n        String VALUEEEE = \"value\"; \n    }\n    interface Interface2 {\n        static String VALUEEEE = \"value\"; \n    }\n    interface Interface3 {\n        final String VALUEEEE = \"value\"; \n    }\n    interface Interface4 {\n        final static String VALUEEEE = \"value\"; \n    }\n    class FIleNameFormatException extends Exception {\n        private static final long serialVersionUID = 1L;\n        public FIleNameFormatException(Exception e) {\n            super(e);\n        }\n    }\n    class StateX {\n        int userID;\n        int scaleX, scaleY, scaleZ;\n        int getScaleX() {\n            return this.scaleX;\n        }\n    }\n    @interface Annotation1 {\n        String VALUE = \"value\"; \n    }\n    @interface Annotation2 {\n        static String VALUE = \"value\"; \n    }\n    @interface Annotation3 {\n        final String VALUE = \"value\"; \n    }\n    @interface Annotation4 {\n        final static String VALUE = \"value\"; \n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameIgnoreStaticKeepStaticFinal.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        26,
        47,
        52,
        53,
        73,
        74,
        76,
        80,
        86,
        92,
        98
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\npublic class InputAbbreviationAsWordInNameIgnoreStaticKeepStaticFinal {\n    abstract class InputAbbreviationAsWordInNameType {\n    }\n    abstract class NonAAAAbstractClassName {\n    }\n    abstract class FactoryWithBADNAme {\n    }\n    abstract class AbstractCLASSName { \n        abstract class NonAbstractInnerClass {\n        }\n    }\n    abstract class ClassFactory1 {\n        abstract class WellNamedFactory {\n        }\n    }\n    class NonAbstractClass1 {\n    }\n    class AbstractClass1 {\n    }\n    class Class1Factory1 {\n    }\n    abstract class AbstractClassName3 {\n        class AbstractINNERRClass { \n        }\n    }\n    abstract class Class3Factory {\n        class WellNamedFACTORY { \n            public void marazmaticMETHODName() { \n                int marazmaticVARIABLEName = 2;\n                int MARAZMATICVariableName = 1;\n            }\n        }\n    }\n    interface Directions {\n      int RIGHT=1;\n      int LEFT=2;\n      int UP=3;\n      int DOWN=4;\n    }\n    interface BadNameForInterface\n    {\n       void interfaceMethod();\n    }\n    abstract static class NonAAAAbstractClassName2 {\n        public int serialNUMBER = 6; \n        public final int s1erialNUMBER = 6; \n        private static int s2erialNUMBER = 6;\n        private static final int s3erialNUMBER = 6; \n    }\n    interface Interface1 {\n        String VALUEEEE = \"value\"; \n    }\n    interface Interface2 {\n        static String VALUEEEE = \"value\"; \n    }\n    interface Interface3 {\n        final String VALUEEEE = \"value\"; \n    }\n    interface Interface4 {\n        final static String VALUEEEE = \"value\"; \n    }\n    class FIleNameFormatException extends Exception {\n        private static final long serialVersionUID = 1L;\n        public FIleNameFormatException(Exception e) {\n            super(e);\n        }\n    }\n    class StateX {\n        int userID;\n        int scaleX, scaleY, scaleZ;\n        int getScaleX() {\n            return this.scaleX;\n        }\n    }\n    @interface Annotation1 {\n        String VALUE = \"value\"; \n    }\n    @interface Annotation2 {\n        static String VALUE = \"value\"; \n    }\n    @interface Annotation3 {\n        final String VALUE = \"value\"; \n    }\n    @interface Annotation4 {\n        final static String VALUE = \"value\"; \n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameNoIgnore.java",
      "expected-problems": 10,
      "expected-linenumbers": [
        47,
        52,
        53,
        80,
        86,
        92,
        98,
        136,
        140,
        144
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\npublic class InputAbbreviationAsWordInNameNoIgnore {\n    abstract class InputAbbreviationAsWordInNameType {\n    }\n    abstract class NonAAAAbstractClassName {\n    }\n    abstract class FactoryWithBADNAme {\n    }\n    abstract class AbstractCLASSName {\n        abstract class NonAbstractInnerClass {\n        }\n    }\n    abstract class ClassFactory1 {\n        abstract class WellNamedFactory {\n        }\n    }\n    class NonAbstractClass1 {\n    }\n    class AbstractClass1 {\n    }\n    class Class1Factory1 {\n    }\n    abstract class AbstractClassName3 {\n        class AbstractINNERRClass { \n        }\n    }\n    abstract class Class3Factory {\n        class WellNamedFACTORY { \n            public void marazmaticMETHODName() { \n                int marazmaticVARIABLEName = 2;\n                int MARAZMATICVariableName = 1;\n            }\n        }\n    }\n    interface Directions {\n      int RIGHT=1;\n      int LEFT=2;\n      int UP=3;\n      int DOWN=4;\n    }\n    interface BadNameForInterface\n    {\n       void interfaceMethod();\n    }\n    abstract static class NonAAAAbstractClassName2 {\n        public int serialNUMBER = 6;\n        public final int s1erialNUMBER = 6;\n        private static int s2erialNUMBER = 6;\n        private static final int s3erialNUMBER = 6;\n    }\n    interface Interface1 {\n        String VALUEEEE = \"value\"; \n    }\n    interface Interface2 {\n        static String VALUEEEE = \"value\"; \n    }\n    interface Interface3 {\n        final String VALUEEEE = \"value\"; \n    }\n    interface Interface4 {\n        final static String VALUEEEE = \"value\"; \n    }\n    class FIleNameFormatException extends Exception {\n        private static final long serialVersionUID = 1L;\n        public FIleNameFormatException(Exception e) {\n            super(e);\n        }\n    }\n    class StateX {\n        int userID;\n        int scaleX, scaleY, scaleZ;\n        int getScaleX() {\n            return this.scaleX;\n        }\n    }\n    @interface Annotation1 {\n        String VALUE = \"value\"; \n    }\n    @interface Annotation2 {\n        static String VALUE = \"value\"; \n    }\n    @interface Annotation3 {\n        final String VALUE = \"value\"; \n    }\n    @interface Annotation4 {\n        final static String VALUE = \"value\"; \n    }\n    final class InnerClassOneVIOLATION { \n    }\n    static class InnerClassTwoVIOLATION { \n    }\n    static final class InnerClassThreeVIOLATION { \n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameOverridableMethod.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        34
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nimport org.junit.Before;\nabstract class InputAbbreviationAsWordInNameOverridableMethod extends Class1 {\n\tpublic int serialNUMBER = 6;\n\tpublic final int s1erialNUMBER = 6;\n\tprivate static int s2erialNUMBER = 6;\n\tprivate static final int s3erialNUMBER = 6;\n\t@Override\n\t@SuppressWarnings(value = { \"\" })\n\t@Before\n\tprotected void oveRRRRRrriddenMethod(){\n\t    int a = 0;\n\t}\n}\nclass Class1 {\n    @SuppressWarnings(value = { \"\" })\n    protected void oveRRRRRrriddenMethod(){ \n        int a = 0;\n    }\n}\nclass Class2 extends Class1 {\n    @Override\n    @SuppressWarnings(value = { \"\" })\n    @Before\n\tprotected void oveRRRRRrriddenMethod(){\n        int a = 0;\n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameOverridableMethod2.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        20,
        28,
        36,
        48
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nimport org.junit.Before;\nabstract class InputAbbreviationAsWordInNameOverridableMethod2 extends Class1 {\n    public int serialNUMBER = 6; \n    public final int s1erialNUMBER = 6;\n    private static int s2erialNUMBER = 6;\n    private static final int s3erialNUMBER = 6;\n    @Override\n    @SuppressWarnings(value = { \"\" })\n    @Before\n    protected void oveRRRRRrriddenMethod(){ \n        int a = 0;\n    }\n}\nclass Class12 {\n    @SuppressWarnings(value = { \"\" })\n    protected void oveRRRRRrriddenMethod(){ \n        int a = 0;\n    }\n}\nclass Class22 extends Class1 {\n    @Override\n    @SuppressWarnings(value = { \"\" })\n    @Before\n    protected void oveRRRRRrriddenMethod(){ \n        int a = 0;\n    }\n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameType.java",
      "expected-problems": 8,
      "expected-linenumbers": [
        22,
        25,
        46,
        51,
        52,
        53,
        54,
        72
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nabstract class InputAbbreviationAsWordInNameType {\n}\nabstract class NonAAAAbstractClassName {\n}\nabstract class FactoryWithBADNAme { \n}\nabstract class AbstractCLASSName1 { \n    abstract class NonAbstractInnerClass {\n    }\n}\nabstract class ClassFactory1 {\n    abstract class WellNamedFactory {\n    }\n}\nclass NonAbstractClass1 {\n}\nclass AbstractClass1 {\n}\nclass Class1Factory1 {\n}\nabstract class AbstractClassName31 {\n    class AbstractINNERRClass { \n    }\n}\nabstract class Class3Factory {\n    class WellNamedFACTORY { \n    \tpublic void marazmaticMETHODName() { \n    \t\tint marazmaticVARIABLEName = 2; \n    \t\tint MARAZMATICVariableName = 1; \n    \t}\n    }\n}\ninterface Directions {\n  int RIGHT=1;\n  int LEFT=2;\n  int UP=3;\n  int DOWN=4;\n}\ninterface BadNameForInterface\n{\n   void interfaceMethod();\n}\nabstract class NonAAAAbstractClassName21 {\n\tpublic int serialNUMBER = 6; \n\tpublic final int s1erialNUMBER = 6;\n\tprivate static int s2erialNUMBER = 6;\n\tprivate static final int s3erialNUMBER = 6;\n}\ninterface Interface1 {\n\tString VALUEEEE = \"value\"; \n}\ninterface Interface2 {\n\tstatic String VALUEEEE = \"value\"; \n}\ninterface Interface3 {\n\tfinal String VALUEEEE = \"value\"; \n}\ninterface Interface4 {\n\tfinal static String VALUEEEE = \"value\"; \n}\nclass FIleNameFormatException extends Exception {\n    private static final long serialVersionUID = 1L;\n    public FIleNameFormatException(Exception e) {\n        super(e);\n    }\n}\nclass StateX {\n    int userID;\n    int scaleX, scaleY, scaleZ;\n    int getScaleX() {\n        return this.scaleX;\n    }\n}\n@interface Annotation1 {\n    String VALUE = \"value\"; \n}\n@interface Annotation2 {\n    static String VALUE = \"value\"; \n}\n@interface Annotation3 {\n    final String VALUE = \"value\"; \n}\n@interface Annotation4 {\n    final static String VALUE = \"value\"; \n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameType2.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        20,
        23,
        44,
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nabstract class InputAbbreviationAsWordInNameType2 {\n}\nabstract class NonAAAAbstractClassName2 {\n}\nabstract class FactoryWithBADNAme2 { \n}\nabstract class AbstractCLASSName2 { \n    abstract class NonAbstractInnerClass {\n    }\n}\nabstract class ClassFactory12 {\n    abstract class WellNamedFactory {\n    }\n}\nclass NonAbstractClass12 {\n}\nclass AbstractClass12 {\n}\nclass Class1Factory12 {\n}\nabstract class AbstractClassName32 {\n    class AbstractINNERRClass { \n    }\n}\nabstract class Class3Factory2 {\n    class WellNamedFACTORY { \n        public void marazmaticMETHODName() {\n            int marazmaticVARIABLEName = 2;\n            int MARAZMATICVariableName = 1;\n        }\n    }\n}\ninterface Directions2 {\n  int RIGHT=1;\n  int LEFT=2;\n  int UP=3;\n  int DOWN=4;\n}\ninterface BadNameForInterface2\n{\n   void interfaceMethod();\n}\nabstract class NonAAAAbstractClassName22 {\n    public int serialNUMBER = 6;\n    public final int s1erialNUMBER = 6;\n    private static int s2erialNUMBER = 6;\n    private static final int s3erialNUMBER = 6;\n}\ninterface Interface12 {\n    String VALUEEEE = \"value\"; \n}\ninterface Interface22 {\n    static String VALUEEEE = \"value\"; \n}\ninterface Interface32 {\n    final String VALUEEEE = \"value\"; \n}\ninterface Interface42 {\n    final static String VALUEEEE = \"value\"; \n}\nclass FIleNameFormatException2 extends Exception {\n    private static final long serialVersionUID = 1L;\n    public FIleNameFormatException2(Exception e) {\n        super(e);\n    }\n}\nclass StateX2 {\n    int userID;\n    int scaleX, scaleY, scaleZ;\n    int getScaleX() {\n        return this.scaleX;\n    }\n}\n@interface Annotation12 {\n    String VALUE = \"value\"; \n}\n@interface Annotation22 {\n    static String VALUE = \"value\"; \n}\n@interface Annotation32 {\n    final String VALUE = \"value\"; \n}\n@interface Annotation42 {\n    final static String VALUE = \"value\"; \n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameType3.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        44
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nabstract class InputAbbreviationAsWordInNameType3 {\n}\nabstract class NonAAAAbstractClassName3 {\n}\nabstract class FactoryWithBADNAme3 {\n}\nabstract class AbstractCLASSName3 {\n    abstract class NonAbstractInnerClass {\n    }\n}\nabstract class ClassFactory13 {\n    abstract class WellNamedFactory {\n    }\n}\nclass NonAbstractClass13 {\n}\nclass AbstractClass13 {\n}\nclass Class1Factory13 {\n}\nabstract class AbstractClassName33 {\n    class AbstractINNERRClass { \n    }\n}\nabstract class Class3Factory3 {\n    class WellNamedFACTORY {\n        public void marazmaticMETHODName() {\n            int marazmaticVARIABLEName = 2;\n            int MARAZMATICVariableName = 1;\n        }\n    }\n}\ninterface Directions3 {\n  int RIGHT=1;\n  int LEFT=2;\n  int UP=3;\n  int DOWN=4;\n}\ninterface BadNameForInterface3\n{\n   void interfaceMethod();\n}\nabstract class NonAAAAbstractClassName23 {\n    public int serialNUMBER = 6;\n    public final int s1erialNUMBER = 6;\n    private static int s2erialNUMBER = 6;\n    private static final int s3erialNUMBER = 6;\n}\ninterface Interface13 {\n    String VALUEEEE = \"value\"; \n}\ninterface Interface23 {\n    static String VALUEEEE = \"value\"; \n}\ninterface Interface33 {\n    final String VALUEEEE = \"value\"; \n}\ninterface Interface43 {\n    final static String VALUEEEE = \"value\"; \n}\nclass FIleNameFormatException3 extends Exception {\n    private static final long serialVersionUID = 1L;\n    public FIleNameFormatException3(Exception e) {\n        super(e);\n    }\n}\nclass StateX3 {\n    int userID;\n    int scaleX, scaleY, scaleZ;\n    int getScaleX() {\n        return this.scaleX;\n    }\n}\n@interface Annotation13 {\n    String VALUE = \"value\"; \n}\n@interface Annotation23 {\n    static String VALUE = \"value\"; \n}\n@interface Annotation33 {\n    final String VALUE = \"value\"; \n}\n@interface Annotation43 {\n    final static String VALUE = \"value\"; \n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameType4.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        44,
        49
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nabstract class InputAbbreviationAsWordInNameType4 {\n}\nabstract class NonAAAAbstractClassName4 {\n}\nabstract class FactoryWithBADNAme4 {\n}\nabstract class AbstractCLASSName4 {\n    abstract class NonAbstractInnerClass {\n    }\n}\nabstract class ClassFactory14 {\n    abstract class WellNamedFactory {\n    }\n}\nclass NonAbstractClass14 {\n}\nclass AbstractClass14 {\n}\nclass Class1Factory14 {\n}\nabstract class AbstractClassName34 {\n    class AbstractINNERRClass { \n    }\n}\nabstract class Class3Factory4 {\n    class WellNamedFACTORY { \n        public void marazmaticMETHODName() {\n            int marazmaticVARIABLEName = 2;\n            int MARAZMATICVariableName = 1;\n        }\n    }\n}\ninterface Directions4 {\n  int RIGHT=1;\n  int LEFT=2;\n  int UP=3;\n  int DOWN=4;\n}\ninterface BadNameForInterface4\n{\n   void interfaceMethod();\n}\nabstract class NonAAAAbstractClassName24 {\n    public int serialNUMBER = 6;\n    public final int s1erialNUMBER = 6;\n    private static int s2erialNUMBER = 6;\n    private static final int s3erialNUMBER = 6;\n}\ninterface Interface14 {\n    String VALUEEEE = \"value\"; \n}\ninterface Interface24 {\n    static String VALUEEEE = \"value\"; \n}\ninterface Interface34 {\n    final String VALUEEEE = \"value\"; \n}\ninterface Interface44 {\n    final static String VALUEEEE = \"value\"; \n}\nclass FIleNameFormatException4 extends Exception {\n    private static final long serialVersionUID = 1L;\n    public FIleNameFormatException4(Exception e) {\n        super(e);\n    }\n}\nclass StateX4 {\n    int userID;\n    int scaleX, scaleY, scaleZ;\n    int getScaleX() {\n        return this.scaleX;\n    }\n}\n@interface Annotation14 {\n    String VALUE = \"value\"; \n}\n@interface Annotation24 {\n    static String VALUE = \"value\"; \n}\n@interface Annotation34 {\n    final String VALUE = \"value\"; \n}\n@interface Annotation44 {\n    final static String VALUE = \"value\"; \n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameType5.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        45,
        50,
        51,
        52,
        53
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nabstract class InputAbbreviationAsWordInNameType5 {\n}\nabstract class NonAAAAbstractClassName5 {\n}\nabstract class FactoryWithBADNAme5 {\n}\nabstract class AbstractCLASSName5 {\n    abstract class NonAbstractInnerClass {\n    }\n}\nabstract class ClassFactory15 {\n    abstract class WellNamedFactory {\n    }\n}\nclass NonAbstractClass15 {\n}\nclass AbstractClass15 {\n}\nclass Class1Factory15 {\n}\nabstract class AbstractClassName35 {\n    class AbstractINNERRClass { \n    }\n}\nabstract class Class3Factory5 {\n    class WellNamedFACTORY { \n        public void marazmaticMETHODName() { \n            int marazmaticVARIABLEName = 2; \n            int MARAZMATICVariableName = 1; \n        }\n    }\n}\ninterface Directions5 {\n  int RIGHT=1;\n  int LEFT=2;\n  int UP=3;\n  int DOWN=4;\n}\ninterface BadNameForInterface5\n{\n   void interfaceMethod();\n}\nabstract class NonAAAAbstractClassName25 {\n    public int serialNUMBER = 6;\n    public final int s1erialNUMBER = 6;\n    private static int s2erialNUMBER = 6;\n    private static final int s3erialNUMBER = 6;\n}\ninterface Interface15 {\n    String VALUEEEE = \"value\"; \n}\ninterface Interface25 {\n    static String VALUEEEE = \"value\"; \n}\ninterface Interface35 {\n    final String VALUEEEE = \"value\"; \n}\ninterface Interface45 {\n    final static String VALUEEEE = \"value\"; \n}\nclass FIleNameFormatException5 extends Exception {\n    private static final long serialVersionUID = 1L;\n    public FIleNameFormatException5(Exception e) {\n        super(e);\n    }\n}\nclass StateX5 {\n    int userID;\n    int scaleX, scaleY, scaleZ;\n    int getScaleX() {\n        return this.scaleX;\n    }\n}\n@interface Annotation15 {\n    String VALUE = \"value\"; \n}\n@interface Annotation25 {\n    static String VALUE = \"value\"; \n}\n@interface Annotation35 {\n    final String VALUE = \"value\"; \n}\n@interface Annotation45 {\n    final static String VALUE = \"value\"; \n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameType6.java",
      "expected-problems": 28,
      "expected-linenumbers": [
        18,
        21,
        24,
        45,
        50,
        51,
        52,
        53,
        59,
        60,
        61,
        62,
        69,
        71,
        72,
        73,
        74,
        78,
        84,
        90,
        96,
        100,
        102,
        111,
        120,
        124,
        128,
        132
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\nabstract class InputAbbreviationAsWordInNameType6 {\n}\nabstract class NonAAAAbstractClassName6 { \n}\nabstract class FactoryWithBADNAme66 { \n}\nabstract class AbstractCLASSName6 { \n    abstract class NonAbstractInnerClass {\n    }\n}\nabstract class ClassFactory16 {\n    abstract class WellNamedFactory {\n    }\n}\nclass NonAbstractClass16 {\n}\nclass AbstractClass16 {\n}\nclass Class1Factory16 {\n}\nabstract class AbstractClassName36 {\n    class AbstractINNERRClass { \n    }\n}\nabstract class Class3Factory6 {\n    class WellNamedFACTORY { \n        public void marazmaticMETHODName() { \n            int marazmaticVARIABLEName = 2; \n            int MARAZMATICVariableName = 1; \n        }\n    }\n}\ninterface Directions6 {\n  int RIGHT=1; \n  int LEFT=2; \n  int UP=3; \n  int DOWN=4; \n}\ninterface BadNameForInterface6\n{\n   void interfaceMethod();\n}\nabstract class NonAAAAbstractClassName26 { \n    public int serialNUMBER = 6; \n    public final int s1erialNUMBER = 6; \n    private static int s2erialNUMBER = 6; \n    private static final int s3erialNUMBER = 6; \n}\ninterface Interface16 {\n    String VALUEEEE = \"value\"; \n}\ninterface Interface26 {\n    static String VALUEEEE = \"value\"; \n}\ninterface Interface36 {\n    final String VALUEEEE = \"value\"; \n}\ninterface Interface46 {\n    final static String VALUEEEE = \"value\"; \n}\nclass FIleNameFormatException6 extends Exception { \n    private static final long serialVersionUID = 1L; \n    public FIleNameFormatException6(Exception e) {\n        super(e);\n    }\n}\nclass StateX6 {\n    int userID; \n    int scaleX, scaleY, scaleZ;\n    int getScaleX() {\n        return this.scaleX;\n    }\n}\n@interface Annotation16 {\n    String VALUE = \"value\"; \n}\n@interface Annotation26 {\n    static String VALUE = \"value\"; \n}\n@interface Annotation36 {\n    final String VALUE = \"value\"; \n}\n@interface Annotation46 {\n    final static String VALUE = \"value\"; \n}"
    },
    {
      "description": "Auto test from InputAbbreviationAsWordInNameTypeSnakeStyle.java",
      "expected-problems": 9,
      "expected-linenumbers": [
        11,
        13,
        18,
        25,
        30,
        35,
        38,
        69,
        74
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;\npublic class InputAbbreviationAsWordInNameTypeSnakeStyle {\n    public boolean FLAG_IS_FIRST_RUN = false;\n    private int HYBRID_LOCK_PATH;\n    Boolean[] BOOL_VALS = { false, true };\n    private int __DEMOS__TESTS_VAR = 5;\n    private int __DEMO__TEST_VAR = 6;\n    private int TEST_FAM_23456 = 5;\n    public int TESTING_FAM_23456 = 10;\n    private int TEST_23456_FAM = 15;\n    public int TESTING_23456_FAM = 20;\n    public int TEST23456 = 30;\n    public int _234VIOLATION = 40;\n    public int VIOLATION23456 = 50;\n    void getTEST() {\n    }\n    void getORDER_OBSERVATION() {}\n    void getNONE_Test() {}\n    void getCLR_Test() {}\n    void getUNDERSCORE() {}\n    void getTEST_OBSERVATION() {}\n    void getTEST_UNDERSCORE() {}\n    void getORDER() {}\n    void getOBSERVATION() {}\n    void getORDER_UNDERSCORE() {}\n    int getCLRTest() {\n        int LINE_SEP = 1;\n        return LINE_SEP;\n    }\n    void getNON_ETest() {}\n    private boolean getIsFIRST_Run() {\n        return false;\n    }\n    private boolean getBoolean_VALUES() {\n        return BOOL_VALS[0];\n    }\n}"
    }
  ]
}