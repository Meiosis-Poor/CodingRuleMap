{
  "name": "AbstractClassName",
  "language": "java",
  "description": "<div>\n Ensures that the names of abstract classes conforming to some pattern\n and check that {@code abstract} modifier exists.\n </div>\n\n <p>\n Rationale: Abstract classes are convenience base class implementations of\n interfaces. For this reason, it should be made obvious that a given class\n is abstract by prefacing the class name with 'Abstract'.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 59,
  "branches": 11,
  "apis": 18,
  "test": [
    {
      "description": "Auto test from InputAbstractClassName.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        10,
        14,
        20
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abstractclassname;\nabstract public class InputAbstractClassName {\n}\nabstract class NonAbstractClassName {\n}\nabstract class AbstractClassOther {\n    abstract class NonAbstractInnerClass {\n    }\n}\nclass NonAbstractClass {\n}\nclass AbstractClass {\n}\nabstract class AbstractClassName2 {\n    class AbstractInnerClass {\n    }\n}"
    },
    {
      "description": "Auto test from InputAbstractClassNameCustom.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        10,
        17,
        29
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abstractclassname;\nabstract public class InputAbstractClassNameCustom {\n}\nabstract class NonAbstractClassNameCustom {\n}\nabstract class AbstractClassOtherCustom {\n    abstract class NonAbstractInnerClass {\n    }\n}\nclass NonAbstractClassCustom {\n}\nclass AbstractClassCustom {\n}\nabstract class AbstractClassName2Custom {\n    class AbstractInnerClass {\n    }\n}"
    },
    {
      "description": "Auto test from InputAbstractClassNameFormerFalsePositive.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        10,
        19,
        26,
        32
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abstractclassname;\nabstract public class InputAbstractClassNameFormerFalsePositive {\n}\nabstract class AbstractClassFP {\n}\nabstract class AbstractClassOtherFP {\n    abstract class NonAbstractInnerClassFP {\n    }\n}\nclass NonAbstractClassFP {\n}\nclass AbstractClassNameFP {\n}\nabstract class AbstractClassName2FP {\n    class AbstractInnerClassFP {\n    }\n}"
    },
    {
      "description": "Auto test from InputAbstractClassNameType.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        16,
        24
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abstractclassname;\nabstract public class InputAbstractClassNameType {\n}\nabstract class NonAbstractClassNameType {\n}\nclass AbstractClassType { \n    abstract class NonAbstractInnerClass {\n    }\n}\nabstract class NonAbstractClassType {\n}\nclass AbstractClassTypes { \n}\nabstract class AbstractClassName2Type {\n    abstract class AbstractInnerClassType {\n    }\n}"
    },
    {
      "description": "Auto test from InputAbstractClassNameVariants.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        10,
        14,
        20,
        27,
        33
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.abstractclassname;\nabstract public class InputAbstractClassNameVariants {\n}\nabstract class NonAbstractClassNameVa {\n}\nabstract class AbstractClassOtherVa {\n    abstract class NonAbstractInnerClassVa {\n    }\n}\nclass NonAbstractClassVa {\n}\nclass AbstractClassVa { \n}\nabstract class AbstractClassName2Va {\n    class AbstractInnerClassVa {\n    }\n}"
    }
  ]
}