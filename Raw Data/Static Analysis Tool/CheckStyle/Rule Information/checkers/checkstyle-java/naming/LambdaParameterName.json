{
  "name": "LambdaParameterName",
  "language": "java",
  "description": "<div>\n Checks lambda parameter names.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 39,
  "branches": 3,
  "apis": 13,
  "test": [
    {
      "description": "Auto test from InputLambdaParameterName.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        13,
        16,
        19,
        22,
        25
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.lambdaparametername;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\npublic class InputLambdaParameterName {\n    Function<String, String> badNamedParameterWithoutParenthesis = s -> \n            s.trim().toLowerCase();\n    Function<String, String> badNamedParameterWithParenthesis = (st) -> \n            st.trim().toLowerCase();\n    BiFunction<String, String, String> twoBadNamedParameters = (s1, \n                                                                s2) -> s1 + s2;\n    BiFunction<String, String, String> badNamedParameterInBiFunction =\n            (first, s) -> first + s; \n    Function<String, Integer> goodNamedParameterWithoutParenthesis =\n            notTrimmedString -> notTrimmedString.trim().length();\n    Function<String, Integer> goodNamedParameterWithParenthesis =\n            (notTrimmedString) -> notTrimmedString.trim().length();\n    BiFunction<String, String, Integer> goodNamedParameters =\n            (first, second) -> (first + second).length();\n}"
    },
    {
      "description": "Auto test from InputLambdaParameterNameSwitchExpression.java",
      "expected-problems": 5,
      "expected-linenumbers": [
        18,
        30,
        35,
        45,
        56
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.lambdaparametername;\nimport java.util.stream.Stream;\npublic class InputLambdaParameterNameSwitchExpression {\n    boolean method1(Nums k, String string) {\n        switch (k) {\n            case ONE:\n                Stream.of(string.split(\" \"))\n                        .map(word -> word.trim())\n                        .anyMatch(Word -> \"in\".equals(Word)); \n                break;\n            default:\n        }\n        return false;\n    }\n    boolean method2(Nums k, String string) {\n        switch (k) {\n            case ONE -> {\n                Stream.of(string.split(\" \"))\n                        .map(word -> word.trim())\n                        .anyMatch(Word -> \"in\".equals(Word)); \n                System.out.println(\"case one\");\n            }\n            default -> Stream.of(string.split(\" \"))\n                    .map(word -> word.trim())\n                    .anyMatch(Word -> \"in\".equals(Word)); \n        }\n        return true;\n    }\n    boolean method3(Nums k, String string) {\n        return switch (k) {\n            case ONE:\n                yield Stream.of(string.split(\" \"))\n                        .map(word -> word.trim())\n                        .anyMatch(Word -> \"in\".equals(Word)); \n            default:\n                yield false;\n        };\n    }\n    boolean method4(Nums k, String string) {\n        return switch (k) {\n            case ONE -> {\n                yield Stream.of(string.split(\" \"))\n                        .map(word -> word.trim())\n                        .anyMatch(Word -> \"in\".equals(Word)); \n            }\n            default -> { yield false; }\n        };\n    }\n    enum Nums {ONE, TWO, THREE}\n}"
    }
  ]
}