{
  "name": "IllegalIdentifierName",
  "language": "java",
  "description": "<div>\n Checks identifiers against a regular expression pattern to detect illegal names. Since this\n check uses a pattern to define <i>valid</i> identifiers, users will need to use negative\n lookaheads to explicitly ban certain names (e.g., \"var\") or patterns (e.g., any identifier\n containing $) while still allowing all other valid identifiers.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 41,
  "branches": 3,
  "apis": 7,
  "test": [
    {
      "description": "Auto test from InputIllegalIdentifierName.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        56,
        57
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.illegalidentifiername;\nimport java.util.logging.LogRecord;\npublic class InputIllegalIdentifierName {\n    public Class<Record[]> getRecordType() {\n        return Record[].class;\n    }\n    private static void record(LogRecord... logArray) {\n        for (LogRecord record : logArray) {\n            record.getLevel();\n        }\n    }\n    class yieldClass {\n        int yield = 6;\n        public void yield() {\n        }\n    }\n    enum Day {\n        MON,\n        TUE,\n        WED,\n        THU,\n        FRI,\n        SAT,\n        SUN,\n    }\n    int yield(Day day) {\n        return switch (day) {\n            case MON, TUE -> Math.addExact(0, 1);\n            case WED -> Math.addExact(1, 1);\n            case THU, SAT, FRI, SUN -> 0;\n            default -> {\n                yield Math.addExact(2, 1);\n            }\n        };\n    }\n    public static void main(String... args) {\n        var var = 4; \n        int $amt = 15; \n        String yield = \"yield\";\n        record Record\n                (Record record) {\n        }\n        String yieldString = \"yield$String\"; \n        record MyRecord() {}\n        var variable = 2; \n        String recordString = \"record\";\n        recordString = recordString.substring($amt, 20);\n        record MyOtherRecord(String record, String yield$text, String... var) {\n        }\n    }\n}"
    },
    {
      "description": "Auto test from InputIllegalIdentifierNameLambda.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        18,
        19,
        31,
        41
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.illegalidentifiername;\nimport java.util.function.Function;\npublic class InputIllegalIdentifierNameLambda {\n    public static void main(String... args) {\n        Function<String, String> f1 = param$ -> param$; \n        Function<String, String> f2 = (var) -> var; \n        Function<String, String> f3 = myLambdaParam -> myLambdaParam;\n    }\n    enum Day {\n        MON,\n        TUE,\n        WED,\n        THU,\n        FRI,\n        SAT,\n        SUN,\n        var, \n    }\n    int yield(Day day) {\n        return switch (day) {\n            case MON, TUE -> Math.addExact(0, 1);\n            case WED -> Math.addExact(1, 1);\n            case THU, SAT, FRI, SUN -> 0;\n            case var -> 23; \n            default -> {\n                Function<String, String> f4 = te$t -> te$t; \n                yield Math.addExact(2, 1);\n            }\n        };\n    }\n}"
    },
    {
      "description": "Auto test from InputIllegalIdentifierNameOpenTransitive.java",
      "expected-problems": 11,
      "expected-linenumbers": [
        19,
        21,
        27,
        28,
        43,
        56,
        57,
        59,
        61,
        63,
        71
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.illegalidentifiername;\nimport java.util.logging.LogRecord;\npublic class InputIllegalIdentifierNameOpenTransitive {\n    public Class<Record[]> getRecordType() {\n        return Record[].class;\n    }\n    private static void record(LogRecord... logArray) { \n        for (LogRecord record : logArray) { \n            record.getLevel();\n        }\n    }\n    class openClass {\n        int open = 6; \n        public void transitive() { \n        }\n    }\n    enum Day {\n        MON,\n        TUE,\n        WED,\n        THU,\n        FRI,\n        SAT,\n        SUN,\n    }\n    int yield(Day day) { \n        return switch (day) {\n            case MON, TUE -> Math.addExact(0, 1);\n            case WED -> Math.addExact(1, 1);\n            case THU, SAT, FRI, SUN -> 0;\n            default -> {\n                yield Math.addExact(2, 1); \n            }\n        };\n    }\n    public static void main(String... args) {\n        var var = 4; \n        int record = 15; \n        String yield = \"yield\"; \n        record Record \n                (Record transitive) { \n        }\n        String yieldString = \"yieldString\"; \n        record MyRecord() {\n        } \n        var variable = 2; \n        String Transitive = \"record\"; \n        Transitive = Transitive.substring(record, 20);\n        record MyOtherRecord(String transitive, String yield, String...var) { \n        }\n        int requires = 3;\n    }\n}"
    }
  ]
}