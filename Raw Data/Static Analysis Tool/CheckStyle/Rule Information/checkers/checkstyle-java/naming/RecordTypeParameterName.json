{
  "name": "RecordTypeParameterName",
  "language": "java",
  "description": "<div>\n Checks that record type parameter names conform to a specified pattern.\n </div>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 28,
  "branches": 0,
  "apis": 8,
  "test": [
    {
      "description": "Auto test from InputRecordTypeParameterName.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        14,
        21,
        36
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.recordtypeparametername;\nimport java.io.Serializable;\nimport java.util.LinkedHashMap;\nimport org.w3c.dom.Node;\npublic record InputRecordTypeParameterName<t>(Integer x, String str) { \n    public <TT> void foo() { }\n    <e_e> void foo(int i) {\n    }\n}\nrecord OtherOne <foo extends Serializable & Cloneable> \n(LinkedHashMap<String, Node> linkedHashMap) {\n    foo getOne() {\n        return null;\n    }\n    <Tfo$o2T extends foo> Tfo$o2T getTwo(Tfo$o2T a) {\n        return null;\n    }\n    <foo extends Runnable> foo getShadow() {\n        return null;\n    }\n    static record Junk <foo>() { \n        <_fo extends foo> void getMoreFoo() {\n        }\n    }\n}\nrecord MoreOtherOne <T extends Cloneable>(char c, String string) {\n    interface Boo<Input> {\n        Input boo();\n    }\n    interface FooInterface<T> {\n        T foo();\n    }\n    interface FooInterface2 {\n        Input foo();\n    }\n    record Input(int x, int y) {\n    }\n}"
    },
    {
      "description": "Auto test from InputRecordTypeParameterNameFoo.java",
      "expected-problems": 3,
      "expected-linenumbers": [
        14,
        21,
        42
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.recordtypeparametername;\nimport java.io.Serializable;\nimport java.util.LinkedHashMap;\nimport org.w3c.dom.Node;\npublic record InputRecordTypeParameterNameFoo<T>(Integer x, String str) { \n    public <TT> void foo() { }\n    <e_e> void foo(int i) {\n    }\n}\nrecord Other <T extends Serializable & Cloneable> \n        (LinkedHashMap<String, Node> linkedHashMap) {\n    foo getOne() {\n        return null;\n    }\n    <Tfo$o2T extends foo> Tfo$o2T getTwo(Tfo$o2T a) {\n        return null;\n    }\n    <foo extends Runnable> foo getShadow() {\n        return null;\n    }\n    static record Junk <foo>() {\n        <_fo extends foo> void getMoreFoo() {\n        }\n    }\n}\nrecord MoreOther <T extends Cloneable>(char c, String string) { \n    interface Boo<Input> {\n        Input boo();\n    }\n    interface FooInterface<T> {\n        T foo();\n    }\n    interface FooInterface2 {\n        Input foo();\n    }\n    record Input(int x, int y) {\n    }\n}\nenum foo{}"
    }
  ]
}