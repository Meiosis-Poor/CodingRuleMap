{
  "name": "MethodName",
  "language": "java",
  "description": "<div>\n Checks that method names conform to a specified pattern.\n </div>\n\n <p>Also, checks if a method name has the same name as the residing class.\n The default is false (it is not allowed). It is legal in Java to have\n method with the same name as a class. As long as a return type is specified\n it is a method and not a constructor which it could be easily confused as.\n Does not check-style the name of an overridden methods because the developer does not\n have a choice in renaming such methods.\n </p>",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 44,
  "branches": 3,
  "apis": 14,
  "test": [
    {
      "description": "Auto test from InputMethodNameEqualClassName.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        29,
        44
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\npublic class InputMethodNameEqualClassName {\n    public int InputMethodNameEqualClassName() {\n        return 0;\n    }\n    private int PRIVATEInputMethodNameEqualClassName() {\n        return 0;\n    }\n    class Inner {\n        public int Inner() {\n                        return 0;\n        }\n        public int InputMethodNameEqualClassName() {\n                        return 0;\n                }\n        }\n        public void anotherMethod() {\n                new InputMethodNameEqualClassName() {\n            public int InputMethodNameEqualClassName() {\n                                return 1;\n                        }\n                };\n        }\n}\ninterface SweetInterface {\n    int SweetInterface();\n}\nclass Outer {\n    public void Outer() {\n    }\n}"
    },
    {
      "description": "Auto test from InputMethodNameEqualClassName2.java",
      "expected-problems": 7,
      "expected-linenumbers": [
        21,
        27,
        35,
        40,
        50,
        61,
        67
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\npublic class InputMethodNameEqualClassName2 {\n    public int InputMethodNameEqualClassName2() {\n        return 0;\n    }\n    private int PRIVATEInputMethodNameEqualClassName() {\n        return 0;\n    }\n    class Inner {\n        public int Inner() {\n                        return 0;\n                }\n        public int InputMethodNameEqualClassName2() {\n                        return 0;\n                }\n        }\n        public void anotherMethod() {\n                new InputMethodNameEqualClassName() {\n            public int InputMethodNameEqualClassName2() {\n                                return 1;\n                        }\n                };\n        }\n}\ninterface SweetInterface2 {\n    int SweetInterface(); \n}\nclass Outer2 {\n    public void Outer() { \n        }\n}"
    },
    {
      "description": "Auto test from InputMethodNameEqualClassName3.java",
      "expected-problems": 6,
      "expected-linenumbers": [
        21,
        34,
        38,
        48,
        59,
        65
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\npublic class InputMethodNameEqualClassName3 {\n    public int InputMethodNameEqualClassName3() {\n        return 0;\n    }\n    private int PRIVATEInputMethodNameEqualClassName() {\n        return 0;\n    }\n    class Inner {\n        public int Inner() {  \n                        return 0;\n                }\n        public int InputMethodNameEqualClassName3() {\n                        return 0;\n                }\n        }\n        public void anotherMethod() {\n                new InputMethodNameEqualClassName() {\n            public int InputMethodNameEqualClassName3() {\n                                return 1;\n                        }\n                };\n        }\n}\ninterface SweetInterface3 {\n    int SweetInterface(); \n}\nclass Outer3 {\n    public void Outer() { \n        }\n}"
    },
    {
      "description": "Auto test from InputMethodNameOverriddenMethods.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        28,
        31
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\npublic class InputMethodNameOverriddenMethods extends SomeClass\n{\n    @Override\n    public void PUBLICfoo() { \n    }\n    @java.lang.Override\n    protected void PROTECTEDfoo() { \n    }\n}\nclass SomeClass {\n    public void PUBLICfoo() {  \n    }\n    protected void PROTECTEDfoo() { \n    }\n}"
    },
    {
      "description": "Auto test from InputMethodNamePrivateMethodsInInterfaces.java",
      "expected-problems": 4,
      "expected-linenumbers": [
        20,
        23,
        26,
        28
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\npublic interface InputMethodNamePrivateMethodsInInterfaces {\n    private void PrivateMethod() {}\n    private static void PrivateMethod2() {}\n    default void DefaultMethod() { \n    }\n    public default void DefaultMethod2() { \n    }\n    void PublicMethod(); \n    public void PublicMethod2(); \n}"
    },
    {
      "description": "Auto test from InputMethodNamePublicMethodsInInterfaces.java",
      "expected-problems": 2,
      "expected-linenumbers": [
        16,
        18
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\npublic interface InputMethodNamePublicMethodsInInterfaces {\n    private void PrivateMethod() {} \n    private static void PrivateMethod2() {} \n    default void DefaultMethod() {\n    }\n    public default void DefaultMethod2() {\n    }\n    void PublicMethod();\n    public void PublicMethod2();\n}"
    },
    {
      "description": "Auto test from InputMethodNameRecordInInterfaceBody.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        23
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\npublic interface InputMethodNameRecordInInterfaceBody {\n    int record = 1;\n    static record MyRedundantStaticRecord() {}\n    record MyRecord1(){}\n    record MyRecord2(int x, int y, int z){}\n    record MyRecord3(int[][] x, String... z){\n        String record() {\n            return null;\n        }\n        void VIOLATION() { \n        }\n    }\n    default void record(int x, int y, int z) {}\n}"
    },
    {
      "description": "Auto test from InputMethodNameSimpleTwo.java",
      "expected-problems": 1,
      "expected-linenumbers": [
        58
      ],
      "code": "package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\nimport java.io.*;\nfinal class InputMethodNameSimpleTwo {\n    private InputMethodNameSimpleTwo()\n    {\n    }\n    private void localVariables()\n    {\n        int abc = 0;\n        int ABC = 0;\n        final int cde = 0;\n        final int CDE = 0;\n        for (int k = 0; k < 1; k++)\n        {\n            String innerBlockVariable = \"\";\n        }\n        for (int I = 0; I < 1; I++)\n        {\n            String InnerBlockVariable = \"\";\n        }\n    }\n    void ALL_UPPERCASE_METHOD() \n    {\n    }\n    private static final int BAD__NAME = 3;\n    void errorColumnAfterTabs()\n    {\n                int tab0 =1;\n                int tab1 =1;\n                 int tab2 =1;\n                int tab3 =1;\n                    int tab4 =1;\n                  int tab5 =1;\n    }\n}"
    }
  ]
}