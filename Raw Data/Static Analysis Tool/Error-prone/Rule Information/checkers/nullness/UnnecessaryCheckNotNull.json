{
  "name": "UnnecessaryCheckNotNull",
  "language": "java",
  "description": "This null check is unnecessary; the expression can never be null",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 218,
  "branches": 22,
  "apis": 3,
  "test": [
    {
      "description": "positive_newClass",
      "expected-problems": null,
      "expected-linenumbers": [
        50
      ],
      "code": "import com.google.common.base.Preconditions;\n            import com.google.common.base.Verify;\n            import java.util.Objects;\n\n            class Test {\n              void positive_checkNotNull() {\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Preconditions.checkNotNull(new String(\"\"));\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Preconditions.checkNotNull(new String(\"\"), new Object());\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Preconditions.checkNotNull(new String(\"\"), \"Message %s\", \"template\");\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                String pa = Preconditions.checkNotNull(new String(\"\"));\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                String pb = Preconditions.checkNotNull(new String(\"\"), new Object());\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                String pc = Preconditions.checkNotNull(new String(\"\"), \"Message %s\", \"template\");\n              }\n\n              void positive_verifyNotNull() {\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Verify.verifyNotNull(new String(\"\"));\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Verify.verifyNotNull(new String(\"\"), \"Message\");\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Verify.verifyNotNull(new String(\"\"), \"Message %s\", \"template\");\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                String va = Verify.verifyNotNull(new String(\"\"));\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                String vb = Verify.verifyNotNull(new String(\"\"), \"Message\");\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                String vc = Verify.verifyNotNull(new String(\"\"), \"Message %s\", \"template\");\n              }\n\n              void positive_requireNonNull() {\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Objects.requireNonNull(new String(\"\"));\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Objects.requireNonNull(new String(\"\"), \"Message\");\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                String va = Objects.requireNonNull(new String(\"\"));\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                String vb = Objects.requireNonNull(new String(\"\"), \"Message\");\n              }\n            }"
    },
    {
      "description": "positive_newArray",
      "expected-problems": null,
      "expected-linenumbers": [
        106
      ],
      "code": "import com.google.common.base.Preconditions;\n            import com.google.common.base.Verify;\n            import java.util.Objects;\n\n            class Test {\n              void positive_checkNotNull() {\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Preconditions.checkNotNull(new int[3]);\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Preconditions.checkNotNull(new int[] {1, 2, 3});\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Preconditions.checkNotNull(new int[5][2]);\n              }\n\n              void positive_verifyNotNull() {\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Verify.verifyNotNull(new int[3]);\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Verify.verifyNotNull(new int[] {1, 2, 3});\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Verify.verifyNotNull(new int[5][2]);\n              }\n\n              void positive_requireNonNull() {\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Objects.requireNonNull(new int[3]);\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Objects.requireNonNull(new int[] {1, 2, 3});\n                // BUG: Diagnostic contains: UnnecessaryCheckNotNull\n                Objects.requireNonNull(new int[5][2]);\n              }\n            }"
    },
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        148
      ],
      "code": "import com.google.common.base.Preconditions;\n            import com.google.common.base.Verify;\n            import java.util.Objects;\n\n            class Test {\n              void negative() {\n                Preconditions.checkNotNull(new String(\"\").substring(0, 0));\n                Verify.verifyNotNull(new String(\"\").substring(0, 0));\n                Objects.requireNonNull(new String(\"\").substring(0, 0));\n              }\n            }"
    },
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        169
      ],
      "code": "package com.google.errorprone.bugpatterns.nullness.testdata;\n\n            import static com.google.common.base.Preconditions.checkNotNull;\n            import static com.google.common.base.Verify.verifyNotNull;\n            import static java.util.Objects.requireNonNull;\n\n            import com.google.common.base.Preconditions;\n            import com.google.common.base.Verify;\n            import java.util.Objects;\n\n            public class UnnecessaryCheckNotNullPositiveCase {\n              public void error_checkNotNull() {\n                // BUG: Diagnostic contains: remove this line\n                Preconditions.checkNotNull(\"string literal\");\n\n                // BUG: Diagnostic contains: remove this line\n                checkNotNull(\"string literal\");\n\n                String thing = null;\n                // BUG: Diagnostic contains: (thing,\n                checkNotNull(\"thing is null\", thing);\n                // BUG: Diagnostic contains:\n                Preconditions.checkNotNull(\"a string literal \" + \"that's got two parts\", thing);\n              }\n\n              public void error_verifyNotNull() {\n                // BUG: Diagnostic contains: remove this line\n                Verify.verifyNotNull(\"string literal\");\n\n                // BUG: Diagnostic contains: remove this line\n                verifyNotNull(\"string literal\");\n\n                String thing = null;\n                // BUG: Diagnostic contains: (thing,\n                verifyNotNull(\"thing is null\", thing);\n                // BUG: Diagnostic contains:\n                Verify.verifyNotNull(\"a string literal \" + \"that's got two parts\", thing);\n              }\n\n              public void error_requireNonNull() {\n                // BUG: Diagnostic contains: remove this line\n                Objects.requireNonNull(\"string literal\");\n\n                // BUG: Diagnostic contains: remove this line\n                requireNonNull(\"string literal\");\n\n                String thing = null;\n                // BUG: Diagnostic contains: (thing,\n                requireNonNull(\"thing is null\", thing);\n                // BUG: Diagnostic contains:\n                Objects.requireNonNull(\"a string literal \" + \"that's got two parts\", thing);\n              }\n\n              public void error_fully_qualified_import_checkNotNull() {\n                // BUG: Diagnostic contains: remove this line\n                com.google.common.base.Preconditions.checkNotNull(\"string literal\");\n              }\n\n              public void error_fully_qualified_import_verifyNotNull() {\n                // BUG: Diagnostic contains: remove this line\n                com.google.common.base.Verify.verifyNotNull(\"string literal\");\n              }\n\n              public void error_fully_qualified_import_requireNonNull() {\n                // BUG: Diagnostic contains: remove this line\n                java.util.Objects.requireNonNull(\"string literal\");\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        247
      ],
      "code": "package com.google.errorprone.bugpatterns.nullness.testdata;\n\n            public class UnnecessaryCheckNotNullNegativeCase {\n              public void go_checkNotNull() {\n                Preconditions.checkNotNull(\"this is ok\");\n              }\n\n              public void go_verifyNotNull() {\n                Verify.verifyNotNull(\"this is ok\");\n              }\n\n              public void go_requireNonNull() {\n                Objects.requireNonNull(\"this is ok\");\n              }\n\n              private static class Preconditions {\n                static void checkNotNull(String string) {\n                  System.out.println(string);\n                }\n              }\n\n              private static class Verify {\n                static void verifyNotNull(String string) {\n                  System.out.println(string);\n                }\n              }\n\n              private static class Objects {\n                static void requireNonNull(String string) {\n                  System.out.println(string);\n                }\n              }\n\n              public void go() {\n                Object testObj = null;\n                com.google.common.base.Preconditions.checkNotNull(testObj, \"this is ok\");\n                com.google.common.base.Verify.verifyNotNull(testObj, \"this is ok\");\n                java.util.Objects.requireNonNull(testObj, \"this is ok\");\n              }\n            }\\"
    },
    {
      "description": "primitivePositiveCases",
      "expected-problems": null,
      "expected-linenumbers": [
        297
      ],
      "code": "package com.google.errorprone.bugpatterns.nullness.testdata;\n\n            import static com.google.common.base.Preconditions.checkNotNull;\n\n            import com.google.common.base.Preconditions;\n\n            public class UnnecessaryCheckNotNullPrimitivePositiveCases {\n\n              private Tester field = new Tester();\n\n              public void test() {\n                Object a = new Object();\n                Object b = new Object();\n                byte byte1 = 0;\n                short short1 = 0;\n                int int1 = 0, int2 = 0;\n                long long1 = 0;\n                float float1 = 0;\n                double double1 = 0;\n                boolean boolean1 = false, boolean2 = false;\n                char char1 = 0;\n                Tester tester = new Tester();\n\n                // Do we detect all primitive types?\n\n                // BUG: Diagnostic contains: remove this line\n                Preconditions.checkNotNull(byte1);\n                // BUG: Diagnostic contains: remove this line\n                Preconditions.checkNotNull(short1);\n                // BUG: Diagnostic contains: remove this line\n                Preconditions.checkNotNull(int1);\n                // BUG: Diagnostic contains: remove this line\n                Preconditions.checkNotNull(long1);\n                // BUG: Diagnostic contains: remove this line\n                Preconditions.checkNotNull(float1);\n                // BUG: Diagnostic contains: remove this line\n                Preconditions.checkNotNull(double1);\n                // BUG: Diagnostic contains: remove this line\n                Preconditions.checkNotNull(boolean1);\n                // BUG: Diagnostic contains: remove this line\n                Preconditions.checkNotNull(char1);\n\n                // Do we give the right suggested fix?\n\n                // BUG: Diagnostic contains: boolean1 = boolean2;\n                boolean1 = Preconditions.checkNotNull(boolean2);\n                // BUG: Diagnostic contains: boolean1 = int1 == int2;\n                boolean1 = Preconditions.checkNotNull(int1 == int2);\n                // BUG: Diagnostic contains: checkState(tester.hasId())\n                Preconditions.checkNotNull(tester.hasId());\n                // BUG: Diagnostic contains: checkState(tester.hasId(), \"Must have ID!\")\n                Preconditions.checkNotNull(tester.hasId(), \"Must have ID!\");\n                // BUG: Diagnostic contains: checkState(tester.hasId(), \"Must have %s!\", \"ID\")\n                Preconditions.checkNotNull(tester.hasId(), \"Must have %s!\", \"ID\");\n\n                // Do we handle arguments that evaluate to a primitive type?\n\n                // BUG: Diagnostic contains: Preconditions.checkNotNull(a)\n                Preconditions.checkNotNull(a != null);\n                // BUG: Diagnostic contains: Preconditions.checkNotNull(a)\n                Preconditions.checkNotNull(a == null);\n                // BUG: Diagnostic contains: checkState(int1 == int2)\n                Preconditions.checkNotNull(int1 == int2);\n                // BUG: Diagnostic contains: checkState(int1 > int2)\n                Preconditions.checkNotNull(int1 > int2);\n                // BUG: Diagnostic contains: remove this line\n                Preconditions.checkNotNull(boolean1 ? int1 : int2);\n\n                // Do we handle static imports?\n\n                // BUG: Diagnostic contains: remove this line\n                checkNotNull(byte1);\n                // BUG: Diagnostic contains: 'checkState(tester.hasId())\n                checkNotNull(tester.hasId());\n              }\n\n              public void test2(Tester arg) {\n                Tester local = new Tester();\n                // Do we correctly distinguish checkArgument from checkState?\n\n                // BUG: Diagnostic contains: checkArgument(arg.hasId())\n                checkNotNull(arg.hasId());\n                // BUG: Diagnostic contains: checkState(field.hasId())\n                checkNotNull(field.hasId());\n                // BUG: Diagnostic contains: checkState(local.hasId())\n                checkNotNull(local.hasId());\n                // BUG: Diagnostic contains: checkState(!local.hasId())\n                checkNotNull(!local.hasId());\n\n                // BUG: Diagnostic contains: checkArgument(!(arg instanceof Tester))\n                checkNotNull(!(arg instanceof Tester));\n\n                // BUG: Diagnostic contains: checkState(getTrue())\n                checkNotNull(getTrue());\n\n                // BUG: Diagnostic contains: remove this line\n                checkNotNull(arg.getId());\n                // BUG: Diagnostic contains: id = arg.getId()\n                int id = checkNotNull(arg.getId());\n\n                // BUG: Diagnostic contains: boolean b = arg.hasId();\n                boolean b = checkNotNull(arg.hasId());\n\n                // Do we handle long chains of method calls?\n\n                // BUG: Diagnostic contains: checkArgument(arg.getTester().getTester().hasId())\n                checkNotNull(arg.getTester().getTester().hasId());\n\n                // BUG: Diagnostic contains: checkArgument(arg.tester.getTester().hasId())\n                checkNotNull(arg.tester.getTester().hasId());\n              }\n\n              private boolean getTrue() {\n                return true;\n              }\n\n              private static class Tester {\n                public Tester tester;\n\n                public boolean hasId() {\n                  return true;\n                }\n\n                public int getId() {\n                  return 10;\n                }\n\n                public Tester getTester() {\n                  return tester;\n                }\n              }\n            }\\"
    },
    {
      "description": "primitiveNegativeCases",
      "expected-problems": null,
      "expected-linenumbers": [
        439
      ],
      "code": "package com.google.errorprone.bugpatterns.nullness.testdata;\n\n            import static com.google.common.base.Preconditions.checkNotNull;\n\n            import com.google.common.base.Preconditions;\n\n            public class UnnecessaryCheckNotNullPrimitiveNegativeCases {\n              public void test() {\n                Object obj1 = new Object();\n\n                Preconditions.checkNotNull(obj1);\n                checkNotNull(obj1);\n                Preconditions.checkNotNull(obj1, \"obj1 should not be null\");\n                Preconditions.checkNotNull(obj1, \"%s should not be null\", \"obj1\");\n                Preconditions.checkNotNull(obj1.toString());\n              }\n            }\\"
    },
    {
      "description": "getVariableUses",
      "expected-problems": null,
      "expected-linenumbers": [
        466
      ],
      "code": "public class A {\n          public String b;\n\n          void foo() {}\n        }\n        \n\n        public class B {\n          A my;\n\n          B bar() {\n            return null;\n          }\n\n          void foo(String x, A a) {\n            x.trim().intern();\n            a.b.trim().intern();\n            this.my.foo();\n            my.foo();\n            this.bar();\n            String.valueOf(0);\n            java.lang.String.valueOf(1);\n            bar().bar();\n            System.out.println();\n            a.b.indexOf(x.substring(1));\n          }\n        }"
    }
  ]
}