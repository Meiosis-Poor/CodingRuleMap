{
  "name": "EqualsBrokenForNull",
  "language": "java",
  "description": "equals() implementation may throw NullPointerException when given null",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 143,
  "branches": 19,
  "apis": 2,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.google.errorprone.bugpatterns.nullness.testdata;\n\n            /**\n             * Positive test cases for EqualsBrokenForNull check.\n             *\n             * @author bhagwani@google.com (Sumit Bhagwani)\n             */\n            public class EqualsBrokenForNullPositiveCases {\n\n              private class ObjectGetClassArgToEquals {\n                @Override\n                // BUG: Diagnostic contains: if (obj == null) { return false; }\n                public boolean equals(Object obj) {\n                  if (!getClass().equals(obj.getClass())) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class ObjectGetClassArgToEqualsMultiLine {\n                @Override\n                // BUG: Diagnostic contains: if (obj == null) { return false; }\n                public boolean equals(Object obj) {\n                  if (this == obj) {\n                    return true;\n                  }\n                  if (!getClass().equals(obj.getClass())) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class ObjectGetClassArgToIsAssignableFrom {\n                @Override\n                // BUG: Diagnostic contains: if (obj == null) { return false; }\n                public boolean equals(Object obj) {\n                  if (!getClass().isAssignableFrom(obj.getClass())) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class ObjectGetClassArgToEquals2 {\n                @Override\n                // BUG: Diagnostic contains: if (obj == null) { return false; }\n                public boolean equals(Object obj) {\n                  if (!ObjectGetClassArgToEquals2.class.equals(obj.getClass())) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class ObjectGetClassReceiverToEquals {\n                @Override\n                // BUG: Diagnostic contains: if (obj == null) { return false; }\n                public boolean equals(Object obj) {\n                  if (!obj.getClass().equals(getClass())) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class ObjectGetClassReceiverToEquals2 {\n                @Override\n                // BUG: Diagnostic contains: if (obj == null) { return false; }\n                public boolean equals(Object obj) {\n                  if (!obj.getClass().equals(ObjectGetClassReceiverToEquals2.class)) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class ObjectGetClassReceiverToIsAssignableFrom {\n                @Override\n                // BUG: Diagnostic contains: if (obj == null) { return false; }\n                public boolean equals(Object obj) {\n                  if (!obj.getClass().isAssignableFrom(getClass())) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class ObjectGetClassLeftOperandDoubleEquals {\n                @Override\n                // BUG: Diagnostic contains: if (other == null) { return false; }\n                public boolean equals(Object other) {\n                  if (other.getClass() == ObjectGetClassLeftOperandDoubleEquals.class) {\n                    return true;\n                  }\n                  return false;\n                }\n              }\n\n              private class ObjectGetClassRightOperandDoubleEquals {\n                @Override\n                // BUG: Diagnostic contains: if (other == null) { return false; }\n                public boolean equals(Object other) {\n                  if (ObjectGetClassRightOperandDoubleEquals.class == other.getClass()) {\n                    return true;\n                  }\n                  return false;\n                }\n              }\n\n              private class ObjectGetClassLeftOperandNotEquals {\n                @Override\n                // BUG: Diagnostic contains: if (obj == null) { return false; }\n                public boolean equals(Object obj) {\n                  if (obj.getClass() != ObjectGetClassLeftOperandNotEquals.class) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class ObjectGetClassRightOperandNotEquals {\n                @Override\n                // BUG: Diagnostic contains: if (obj == null) { return false; }\n                public boolean equals(Object obj) {\n                  if (ObjectGetClassRightOperandNotEquals.class != obj.getClass()) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class UnusedNullCheckWithNotEqualToInLeftOperand {\n                @Override\n                // BUG: Diagnostic contains: if (o == null) { return false; }\n                public boolean equals(Object o) {\n                  if (this.getClass() != o.getClass() || o == null) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class UnusedNullCheckWithGetClassInEqualsArg {\n                @Override\n                // BUG: Diagnostic contains: if (o == null) { return false; }\n                public boolean equals(Object o) {\n                  if (this.getClass().equals(o.getClass()) || o == null) {\n                    return false;\n                  }\n                  return true;\n                }\n              }\n\n              private class UnsafeCastAndNoNullCheck {\n                private int a;\n\n                @Override\n                // BUG: Diagnostic contains: if (o == null) { return false; }\n                public boolean equals(Object o) {\n                  UnsafeCastAndNoNullCheck that = (UnsafeCastAndNoNullCheck) o;\n                  return that.a == a;\n                }\n              }\n\n              // Catch a buggy instanceof check that lets nulls through.\n              private class VerySillyInstanceofCheck {\n                private int a;\n\n                @Override\n                // BUG: Diagnostic contains: if (o == null) { return false; }\n                public boolean equals(Object o) {\n                  if (o != null && !(o instanceof VerySillyInstanceofCheck)) {\n                    return false;\n                  }\n                  VerySillyInstanceofCheck that = (VerySillyInstanceofCheck) o;\n                  return that.a == a;\n                }\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        224
      ],
      "code": "package com.google.errorprone.bugpatterns.nullness.testdata;\n\n/**\n * Negative test cases for EqualsBrokenForNull check.\n *\n * @author bhagwani@google.com (Sumit Bhagwani)\n */\npublic class EqualsBrokenForNullNegativeCases {\n\n  private class ExplicitNullCheckFirst {\n    @Override\n    public boolean equals(Object obj) {\n      if (obj == null) {\n        return false;\n      }\n      if (!getClass().equals(obj.getClass())) {\n        return false;\n      }\n      return true;\n    }\n  }\n\n  private class CheckWithSuperFirst {\n    @Override\n    public boolean equals(Object obj) {\n      if (!super.equals(obj)) {\n        return false;\n      }\n      if (!getClass().equals(obj.getClass())) {\n        return false;\n      }\n      return true;\n    }\n  }\n\n  private class NullCheckAndObjectGetClassNotEqualTo {\n    @Override\n    public boolean equals(Object o) {\n      if (o == null || this.getClass() != o.getClass()) {\n        return false;\n      }\n      return true;\n    }\n  }\n\n  private class NullCheckAndObjectGetClassArgToEquals {\n    @Override\n    public boolean equals(Object obj) {\n      if (obj != null && !getClass().equals(obj.getClass())) {\n        return false;\n      }\n      return true;\n    }\n  }\n\n  private class NullCheckAndObjectGetClassReceiverToEquals {\n    @Override\n    public boolean equals(Object obj) {\n      if (obj != null && !obj.getClass().equals(getClass())) {\n        return false;\n      }\n      return true;\n    }\n  }\n\n  private class NullCheckAndObjectGetClassLeftOperandDoubleEquals {\n    @Override\n    public boolean equals(Object other) {\n      if (other != null\n          && other.getClass() == NullCheckAndObjectGetClassLeftOperandDoubleEquals.class) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  private class UsesInstanceOfWithNullCheck {\n    @Override\n    public boolean equals(Object other) {\n      if (other != null && other instanceof UsesInstanceOfWithNullCheck) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  // https://stackoverflow.com/questions/2950319/is-null-check-needed-before-calling-instanceof\n  private class UsesInstanceOfWithoutNullCheck {\n    private int a;\n\n    @Override\n    public boolean equals(Object other) {\n      if (other instanceof UsesInstanceOfWithoutNullCheck) {\n        UsesInstanceOfWithoutNullCheck that = (UsesInstanceOfWithoutNullCheck) other;\n        return that.a == a;\n      }\n      return false;\n    }\n  }\n\n  private class IntermediateBooleanVariable {\n    private int a;\n\n    @Override\n    public boolean equals(Object other) {\n      boolean isEqual = other instanceof IntermediateBooleanVariable;\n      if (isEqual) {\n        IntermediateBooleanVariable that = (IntermediateBooleanVariable) other;\n        return that.a == a;\n      }\n      return isEqual;\n    }\n  }\n\n  private class UnsafeCastWithNullCheck {\n    private int a;\n\n    @Override\n    public boolean equals(Object o) {\n      if (o == null) {\n        return false;\n      }\n      UnsafeCastWithNullCheck that = (UnsafeCastWithNullCheck) o;\n      return that.a == a;\n    }\n  }\n}\\"
    },
    {
      "description": "negativeGenerics",
      "expected-problems": null,
      "expected-linenumbers": [
        361
      ],
      "code": "class Test<A, B> {\n              A a;\n              B b;\n\n              public boolean equals(Object other) {\n                if (!(other instanceof Test<?, ?>)) {\n                  return false;\n                }\n                Test<?, ?> that = (Test<?, ?>) other;\n                return a.equals(that.a) && b.equals(that.b);\n              }\n            }"
    },
    {
      "description": "nullableParameter",
      "expected-problems": null,
      "expected-linenumbers": [
        383
      ],
      "code": "import java.util.Optional;\n\n            class Test {\n              public boolean equals(Object other) {\n                if (other == null) {\n                  return false;\n                }\n                if (other instanceof Test) {\n                  Test otherTest = (Test) other;\n                  Optional.empty().map(x -> otherTest.toString());\n                }\n                return other.equals(this);\n              }\n            }"
    }
  ]
}