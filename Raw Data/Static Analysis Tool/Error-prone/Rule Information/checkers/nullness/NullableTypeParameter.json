{
  "name": "NullableTypeParameter",
  "language": "java",
  "description": "Nullness annotations directly on type parameters are interpreted differently by different tools",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 78,
  "branches": 7,
  "apis": 1,
  "test": [
    {
      "description": "positive",
      "expected-problems": null,
      "expected-linenumbers": [
        31
      ],
      "code": "import java.util.List;\n            import org.checkerframework.checker.nullness.qual.NonNull;\n            import org.checkerframework.checker.nullness.qual.Nullable;\n\n            class T {\n              interface I {}\n\n              interface J {}\n\n              <@Nullable X, @NonNull Y> void f() {}\n\n              <@Nullable X extends Object> void h() {}\n\n              <@Nullable X extends I & J> void i() {}\n            }\n            \n\n            import java.util.List;\n            import org.checkerframework.checker.nullness.qual.NonNull;\n            import org.checkerframework.checker.nullness.qual.Nullable;\n\n            class T {\n              interface I {}\n\n              interface J {}\n\n              <X extends @Nullable Object, Y extends @NonNull Object> void f() {}\n\n              <X extends @Nullable Object> void h() {}\n\n              <X extends @Nullable I & @Nullable J> void i() {}\n            }"
    },
    {
      "description": "noFix",
      "expected-problems": null,
      "expected-linenumbers": [
        75
      ],
      "code": "import java.util.List;\n            import org.checkerframework.checker.nullness.qual.NonNull;\n            import org.checkerframework.checker.nullness.qual.Nullable;\n\n            class T {\n              interface I {}\n\n              interface J {}\n\n              <@Nullable @NonNull X> void f() {}\n\n              <@Nullable X extends @Nullable Object> void g() {}\n\n              <@Nullable X extends I & @Nullable J> void h() {}\n            }"
    },
    {
      "description": "diagnostics",
      "expected-problems": null,
      "expected-linenumbers": [
        101
      ],
      "code": "import java.util.List;\n            import org.checkerframework.checker.nullness.qual.NonNull;\n            import org.checkerframework.checker.nullness.qual.Nullable;\n\n            class T {\n              interface I {}\n\n              interface J {}\n\n              // BUG: Diagnostic contains:\n              <@Nullable @NonNull X> void f() {}\n\n              // BUG: Diagnostic contains:\n              <@Nullable X extends @Nullable Object> void g() {}\n\n              // BUG: Diagnostic contains:\n              <@Nullable X extends I & @Nullable J> void h() {}\n            }"
    }
  ]
}