{
  "name": "NullablePrimitive",
  "language": "java",
  "description": "Nullness annotations should not be used for primitive types since they cannot be null",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 78,
  "branches": 5,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        32
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import org.jspecify.annotations.Nullable;\n\n            /**\n             * @author sebastian.h.monte@gmail.com (Sebastian Monte)\n             */\n            public class NullablePrimitivePositiveCases {\n\n              // BUG: Diagnostic contains: private  int a\n              private @Nullable int a;\n\n              // BUG: Diagnostic contains: ( int a)\n              public void method(@Nullable int a) {}\n\n              // BUG: Diagnostic contains: remove\n              @Nullable\n              public int method() {\n                return 0;\n              }\n            }"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        63
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import org.jspecify.annotations.Nullable;\n\n            /**\n             * @author sebastian.h.monte@gmail.com (Sebastian Monte)\n             */\n            public class NullablePrimitiveNegativeCases {\n              @Nullable Integer a;\n\n              public void method(@Nullable Integer a) {}\n\n              @Nullable\n              public Integer method() {\n                return Integer.valueOf(0);\n              }\n            }\\"
    },
    {
      "description": "negativeConstructor",
      "expected-problems": null,
      "expected-linenumbers": [
        90
      ],
      "code": "import javax.annotation.Nullable;\n\n            class Test {\n              @Nullable\n              public Test() {}\n            }"
    },
    {
      "description": "negativeVoid",
      "expected-problems": null,
      "expected-linenumbers": [
        106
      ],
      "code": "import javax.annotation.Nullable;\n\n            class Test {\n              @Nullable\n              void f() {}\n            }"
    },
    {
      "description": "positiveArray",
      "expected-problems": null,
      "expected-linenumbers": [
        122
      ],
      "code": "import java.util.List;\n            import org.checkerframework.checker.nullness.qual.Nullable;\n\n            class Test {\n              // BUG: Diagnostic contains:\n              List<@Nullable int[]> xs;\n            }"
    },
    {
      "description": "typeParameter",
      "expected-problems": null,
      "expected-linenumbers": [
        140
      ],
      "code": "import java.lang.annotation.ElementType;\n            import java.lang.annotation.Retention;\n            import java.lang.annotation.RetentionPolicy;\n            import java.lang.annotation.Target;\n\n            @Retention(RetentionPolicy.RUNTIME)\n            @Target(ElementType.TYPE_USE)\n            public @interface Nullable {}\n            \n\n            class Test {\n              // BUG: Diagnostic contains:\n              @Nullable int x;\n\n              // BUG: Diagnostic contains:\n              @Nullable\n              int f() {\n                return 42;\n              }\n\n              <@Nullable T> int g() {\n                return 42;\n              }\n\n              int @Nullable [] y;\n            }"
    },
    {
      "description": "positiveNonNull",
      "expected-problems": null,
      "expected-linenumbers": [
        178
      ],
      "code": "import java.util.List;\n            import org.checkerframework.checker.nullness.qual.NonNull;\n\n            class Test {\n              // BUG: Diagnostic contains:\n              @NonNull int xs;\n            }"
    }
  ]
}