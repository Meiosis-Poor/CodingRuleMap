{
  "name": "JUnit4TestNotRun",
  "language": "java",
  "description": "This looks like a test method but is not run; please add @Test and @Ignore, or, if this is a helper method, reduce its visibility.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 238,
  "branches": 25,
  "apis": 2,
  "test": [
    {
      "description": "positiveCase1",
      "expected-problems": null,
      "expected-linenumbers": [
        38
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            /**\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            @RunWith(JUnit4.class)\n            public class JUnit4TestNotRunPositiveCase1 {\n              // BUG: Diagnostic contains: @Test\n              public void testThisIsATest() {}\n\n              // BUG: Diagnostic contains: @Test\n              public static void testThisIsAStaticTest() {}\n            }\\"
    },
    {
      "description": "testThisIsATest",
      "expected-problems": null,
      "expected-linenumbers": [
        54
      ],
      "code": ""
    },
    {
      "description": "positiveCase2",
      "expected-problems": null,
      "expected-linenumbers": [
        64
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import org.junit.runner.RunWith;\n            import org.mockito.junit.MockitoJUnitRunner;\n\n            /**\n             * Mockito test runner that uses JUnit 4.\n             *\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            @RunWith(MockitoJUnitRunner.class)\n            public class JUnit4TestNotRunPositiveCase2 {\n              // BUG: Diagnostic contains: @Test\n              public void testThisIsATest() {}\n\n              // BUG: Diagnostic contains: @Test\n              public static void testThisIsAStaticTest() {}\n            }\\"
    },
    {
      "description": "positiveCase2",
      "expected-problems": null,
      "expected-linenumbers": [
        64
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import org.junit.runner.RunWith;\n            import org.mockito.junit.MockitoJUnitRunner;\n\n            /**\n             * Mockito test runner that uses JUnit 4.\n             *\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            @RunWith(MockitoJUnitRunner.class)\n            public class JUnit4TestNotRunPositiveCase2 {\n              // BUG: Diagnostic contains: @Test\n              public void testThisIsATest() {}\n\n              // BUG: Diagnostic contains: @Test\n              public static void testThisIsAStaticTest() {}\n            }\\"
    },
    {
      "description": "testThisIsATest",
      "expected-problems": null,
      "expected-linenumbers": [
        82
      ],
      "code": ""
    },
    {
      "description": "containsVerifyAsIdentifier_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        92
      ],
      "code": "import static org.mockito.Mockito.verify;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                verify(null);\n              }\n            }"
    },
    {
      "description": "containsVerifyAsIdentifier_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        92
      ],
      "code": "import static org.mockito.Mockito.verify;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                verify(null);\n              }\n            }"
    },
    {
      "description": "shouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        104
      ],
      "code": ""
    },
    {
      "description": "containsQualifiedVerify_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        113
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n            import org.mockito.Mockito;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                Mockito.verify(null);\n              }\n            }"
    },
    {
      "description": "shouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        125
      ],
      "code": ""
    },
    {
      "description": "containsAssertAsIdentifier_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        134
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n            import static com.google.common.truth.Truth.assertThat;\n            import java.util.Collections;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                assertThat(2).isEqualTo(2);\n              }\n\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoTwoThings() {\n                Collections.sort(Collections.<Integer>emptyList());\n                assertThat(3).isEqualTo(3);\n              }\n            }"
    },
    {
      "description": "shouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        147
      ],
      "code": ""
    },
    {
      "description": "shouldDoTwoThings",
      "expected-problems": null,
      "expected-linenumbers": [
        152
      ],
      "code": ""
    },
    {
      "description": "containsQualifiedAssert_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        162
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n            import com.google.common.truth.Truth;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                Truth.assertThat(1).isEqualTo(1);\n              }\n            }"
    },
    {
      "description": "shouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        174
      ],
      "code": ""
    },
    {
      "description": "containsCheckAsIdentifier_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        183
      ],
      "code": "import static com.google.common.base.Preconditions.checkState;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                checkState(false);\n              }\n            }"
    },
    {
      "description": "shouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        195
      ],
      "code": ""
    },
    {
      "description": "containsQualifiedCheck_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        204
      ],
      "code": "import com.google.common.base.Preconditions;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                Preconditions.checkState(false);\n              }\n            }"
    },
    {
      "description": "shouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        216
      ],
      "code": ""
    },
    {
      "description": "containsFailAsIdentifier_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        225
      ],
      "code": "import static org.junit.Assert.fail;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                fail();\n              }\n            }"
    },
    {
      "description": "shouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        237
      ],
      "code": ""
    },
    {
      "description": "containsQualifiedFail_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        246
      ],
      "code": "import org.junit.Assert;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                Assert.fail();\n              }\n            }"
    },
    {
      "description": "shouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        258
      ],
      "code": ""
    },
    {
      "description": "containsExpectAsIdentifier_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        267
      ],
      "code": "import static org.junit.Assert.assertThrows;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                assertThrows(null, null);\n              }\n            }"
    },
    {
      "description": "shouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        279
      ],
      "code": ""
    },
    {
      "description": "containsQualifiedExpect_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        288
      ],
      "code": "import org.junit.Assert;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains: @Test\n              public void shouldDoSomething() {\n                Assert.assertThrows(null, null);\n              }\n            }"
    },
    {
      "description": "shouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        300
      ],
      "code": ""
    },
    {
      "description": "noAssertions_isATestAnyway",
      "expected-problems": null,
      "expected-linenumbers": [
        309
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n            import java.util.Collections;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              // BUG: Diagnostic contains:\n              public void shouldDoSomething() {\n                Collections.sort(Collections.<Integer>emptyList());\n              }\n            }"
    },
    {
      "description": "staticMethodWithTestKeyword_notATest",
      "expected-problems": null,
      "expected-linenumbers": [
        330
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n            import java.util.Collections;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              private static void assertDoesSomething() {}\n\n              public static void shouldDoSomething() {\n                assertDoesSomething();\n              }\n            }"
    },
    {
      "description": "hasOtherAnnotation_notATest",
      "expected-problems": null,
      "expected-linenumbers": [
        352
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              @Deprecated\n              public void shouldDoSomething() {\n                verify();\n              }\n\n              private void verify() {}\n            }"
    },
    {
      "description": "hasOtherAnnotationAndNamedTest_shouldBeTest",
      "expected-problems": null,
      "expected-linenumbers": [
        374
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n            import java.util.Collections;\n\n            @RunWith(JUnit4.class)\n            public class Test {\n              @Deprecated\n              // BUG: Diagnostic contains: @Test\n              public void testShouldDoSomething() {\n                Collections.sort(Collections.<Integer>emptyList());\n              }\n\n              private void verify() {}\n            }"
    },
    {
      "description": "testShouldDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        387
      ],
      "code": ""
    },
    {
      "description": "shouldNotDetectMethodsOnAbstractClass",
      "expected-problems": null,
      "expected-linenumbers": [
        398
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public abstract class Test {\n              public void testDoSomething() {}\n            }"
    },
    {
      "description": "fix",
      "expected-problems": null,
      "expected-linenumbers": [
        415
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              public void testDoSomething() {}\n            }\n            \n\n            import org.junit.Test;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              @Test\n              public void testDoSomething() {}\n            }"
    },
    {
      "description": "testDoSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        438
      ],
      "code": ""
    },
    {
      "description": "ignoreFix",
      "expected-problems": null,
      "expected-linenumbers": [
        446
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              public void testDoSomething() {}\n            }\n            \n\n            import org.junit.Ignore;\n            import org.junit.Test;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              @Test\n              @Ignore\n              public void testDoSomething() {}\n            }"
    },
    {
      "description": "makePrivateFix",
      "expected-problems": null,
      "expected-linenumbers": [
        479
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              public void testDoSomething() {}\n            }\n            \n\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              private void testDoSomething() {}\n            }"
    },
    {
      "description": "makePrivateFix",
      "expected-problems": null,
      "expected-linenumbers": [
        479
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              public void testDoSomething() {}\n            }\n            \n\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              private void testDoSomething() {}\n            }"
    },
    {
      "description": "ignoreFixComesFirstWhenTestNamedDisabled",
      "expected-problems": null,
      "expected-linenumbers": [
        508
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              public void disabledTestDoSomething() {\n                verify();\n              }\n\n              void verify() {}\n            }\n            \n\n            import org.junit.Ignore;\n            import org.junit.Test;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              @Test\n              @Ignore\n              public void disabledTestDoSomething() {\n                verify();\n              }\n\n              void verify() {}\n            }"
    },
    {
      "description": "helperMethodCalledElsewhere",
      "expected-problems": null,
      "expected-linenumbers": [
        549
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n            import org.junit.Test;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              public void shouldDoSomething() {\n                verify();\n              }\n\n              @Test\n              public void testDoesSomething() {\n                shouldDoSomething();\n              }\n\n              void verify() {}\n            }"
    },
    {
      "description": "helperMethodCalledElsewhere",
      "expected-problems": null,
      "expected-linenumbers": [
        549
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n            import org.junit.Test;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              public void shouldDoSomething() {\n                verify();\n              }\n\n              @Test\n              public void testDoesSomething() {\n                shouldDoSomething();\n              }\n\n              void verify() {}\n            }"
    },
    {
      "description": "testDoesSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        565
      ],
      "code": ""
    },
    {
      "description": "helperMethodUsedViaMemberReference",
      "expected-problems": null,
      "expected-linenumbers": [
        576
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n            import org.junit.Test;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              public void shouldDoSomething() {\n                verify();\n              }\n\n              @Test\n              public void testDoesSomething() {\n                Runnable r = this::shouldDoSomething;\n              }\n\n              void verify() {}\n            }"
    },
    {
      "description": "testDoesSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        592
      ],
      "code": ""
    },
    {
      "description": "helperMethodCallFoundInNestedInvocation",
      "expected-problems": null,
      "expected-linenumbers": [
        603
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n            import org.junit.Test;\n            import java.util.function.Consumer;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              public void shouldDoSomething() {\n                verify();\n              }\n\n              @Test\n              public void testDoesSomething() {\n                doSomething(u -> shouldDoSomething());\n              }\n\n              void doSomething(Consumer f) {}\n\n              void verify() {}\n            }"
    },
    {
      "description": "testDoesSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        620
      ],
      "code": ""
    },
    {
      "description": "runWithNotRequired",
      "expected-problems": null,
      "expected-linenumbers": [
        633
      ],
      "code": "import org.junit.Test;\n\n            public class TestStuff {\n              // BUG: Diagnostic contains: @Test\n              public void testDoesSomething() {}\n\n              @Test\n              public void foo() {}\n            }"
    },
    {
      "description": "testDoesSomething",
      "expected-problems": null,
      "expected-linenumbers": [
        642
      ],
      "code": ""
    },
    {
      "description": "foo",
      "expected-problems": null,
      "expected-linenumbers": [
        645
      ],
      "code": ""
    },
    {
      "description": "suppression",
      "expected-problems": null,
      "expected-linenumbers": [
        652
      ],
      "code": "import org.junit.Test;\n\n            public class TestStuff {\n              @SuppressWarnings(\"JUnit4TestNotRun\")\n              public void testDoesSomething() {}\n\n              @Test\n              public void foo() {}\n            }"
    },
    {
      "description": "foo",
      "expected-problems": null,
      "expected-linenumbers": [
        664
      ],
      "code": ""
    },
    {
      "description": "negativeCase1",
      "expected-problems": null,
      "expected-linenumbers": [
        671
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * Not a JUnit 4 test (no @RunWith annotation on the class).\n             *\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            public class JUnit4TestNotRunNegativeCase1 {\n              public void testThisIsATest() {}\n            }\\"
    },
    {
      "description": "negativeCase2",
      "expected-problems": null,
      "expected-linenumbers": [
        691
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import org.junit.internal.runners.JUnit38ClassRunner;\n            import org.junit.runner.RunWith;\n\n            /**\n             * Not a JUnit 4 test (run with a JUnit3 test runner).\n             *\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            @RunWith(JUnit38ClassRunner.class)\n            public class JUnit4TestNotRunNegativeCase2 {\n              public void testThisIsATest() {}\n            }\\"
    },
    {
      "description": "negativeCase3",
      "expected-problems": null,
      "expected-linenumbers": [
        715
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport org.junit.*;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n/**\n * @author eaftan@google.com (Eddie Aftandilian)\n */\n@RunWith(JUnit4.class)\npublic class JUnit4TestNotRunNegativeCase3 {\n  // Isn't public.\n  void testTest1() {}\n\n  // Have checked annotation.\n  @Test\n  public void testTest2() {}\n\n  @Before\n  public void testBefore() {}\n\n  @After\n  public void testAfter() {}\n\n  @BeforeClass\n  public void testBeforeClass() {}\n\n  @AfterClass\n  public void testAfterClass() {}\n\n  // Has parameters.\n  public void testTest3(int foo) {}\n\n  // Doesn't return void\n  public int testSomething() {\n    return 42;\n  }\n}\\"
    },
    {
      "description": "testTest2",
      "expected-problems": null,
      "expected-linenumbers": [
        736
      ],
      "code": ""
    },
    {
      "description": "negativeCase4",
      "expected-problems": null,
      "expected-linenumbers": [
        763
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport junit.framework.TestCase;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n/**\n * May be a JUnit 3 test -- has @RunWith annotation on the class but also extends TestCase.\n *\n * @author eaftan@google.com (Eddie Aftandilian)\n */\n@RunWith(JUnit4.class)\npublic class JUnit4TestNotRunNegativeCase4 extends TestCase {\n  public void testThisIsATest() {}\n}\\"
    },
    {
      "description": "negativeCase5",
      "expected-problems": null,
      "expected-linenumbers": [
        788
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import org.junit.After;\n            import org.junit.Before;\n            import org.junit.Test;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            /**\n             * Base class for test cases to extend.\n             *\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            @RunWith(JUnit4.class)\n            public class JUnit4TestNotRunBaseClass {\n              @Before\n              public void testSetUp() {}\n\n              @After\n              public void testTearDown() {}\n\n              @Test\n              public void testOverrideThis() {}\n            }\\\n            \n\npackage com.google.errorprone.bugpatterns.testdata;\n\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n/**\n * Methods that override methods with @Test should not trigger an error (JUnit 4 will run them).\n *\n * @author eaftan@google.com (Eddie Aftandilian)\n */\n@RunWith(JUnit4.class)\npublic class JUnit4TestNotRunNegativeCase5 extends JUnit4TestNotRunBaseClass {\n  @Override\n  public void testSetUp() {}\n\n  @Override\n  public void testTearDown() {}\n\n  @Override\n  public void testOverrideThis() {}\n}\\"
    },
    {
      "description": "testOverrideThis",
      "expected-problems": null,
      "expected-linenumbers": [
        815
      ],
      "code": ""
    },
    {
      "description": "junit3TestWithIgnore",
      "expected-problems": null,
      "expected-linenumbers": [
        847
      ],
      "code": "import org.junit.Ignore;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              @Ignore\n              public void testMethod() {}\n            }"
    },
    {
      "description": "junit3TestWithIgnore",
      "expected-problems": null,
      "expected-linenumbers": [
        847
      ],
      "code": "import org.junit.Ignore;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestStuff {\n              @Ignore\n              public void testMethod() {}\n            }"
    },
    {
      "description": "junit4Theory_isTestAnnotation",
      "expected-problems": null,
      "expected-linenumbers": [
        866
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.experimental.theories.Theories;\n            import org.junit.experimental.theories.Theory;\n\n            @RunWith(Theories.class)\n            public class TestTheories {\n              @Theory\n              public void testMyTheory() {}\n            }"
    },
    {
      "description": "methodsWithParameters_areStillTests",
      "expected-problems": null,
      "expected-linenumbers": [
        885
      ],
      "code": "import static org.junit.Assert.fail;\n            import org.junit.runner.RunWith;\n            import org.junit.experimental.theories.Theories;\n            import org.junit.experimental.theories.FromDataPoints;\n\n            @RunWith(Theories.class)\n            public class TestTheories {\n              // BUG: Diagnostic contains:\n              public void testMyTheory(@FromDataPoints(\"foo\") Object foo) {\n                fail();\n              }\n            }"
    },
    {
      "description": "annotationOnSuperMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        907
      ],
      "code": "import org.junit.Test;\n\n            public class TestSuper {\n              @Test\n              public void testToOverride() {}\n            }\n            \n\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class TestSub extends TestSuper {\n              @Override\n              public void testToOverride() {}\n            }"
    },
    {
      "description": "testToOverride",
      "expected-problems": null,
      "expected-linenumbers": [
        916
      ],
      "code": ""
    },
    {
      "description": "underscoreInName_mustBeATest",
      "expected-problems": null,
      "expected-linenumbers": [
        935
      ],
      "code": "import org.junit.Test;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class T {\n              // BUG: Diagnostic contains:\n              public void givenFoo_thenBar() {}\n            }"
    },
    {
      "description": "annotatedWithParameters_isATest",
      "expected-problems": null,
      "expected-linenumbers": [
        954
      ],
      "code": "import com.google.testing.junit.testparameterinjector.TestParameters;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class T {\n              @TestParameters(\"foo\")\n              // BUG: Diagnostic contains:\n              public void givenFooThenBar(String foo) {}\n            }"
    },
    {
      "description": "enumParameter_couldWellBeATest",
      "expected-problems": null,
      "expected-linenumbers": [
        974
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class T {\n              enum E {\n                A\n              }\n\n              // BUG: Diagnostic contains:\n              public void givenFooThenBar(E e) {\n                verify();\n              }\n\n              private void verify() {}\n            }"
    },
    {
      "description": "enumParameter_couldWellBeATest",
      "expected-problems": null,
      "expected-linenumbers": [
        974
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            public class T {\n              enum E {\n                A\n              }\n\n              // BUG: Diagnostic contains:\n              public void givenFooThenBar(E e) {\n                verify();\n              }\n\n              private void verify() {}\n            }"
    }
  ]
}