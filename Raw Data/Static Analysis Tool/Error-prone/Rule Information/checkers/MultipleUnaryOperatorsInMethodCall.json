{
  "name": "MultipleUnaryOperatorsInMethodCall",
  "language": "java",
  "description": "Avoid having multiple unary operators acting on the same variable in a method call",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 61,
  "branches": 2,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        31
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * @author sulku@google.com (Marsela Sulku)\n             */\n            public class MultipleUnaryOperatorsInMethodCallPositiveCases {\n              /** these cases do not have suggested fixes */\n              public static void tests(int a, int b) {\n\n                // BUG: Diagnostic contains: Avoid having multiple unary operators acting\n                twoArgs(a++, a--);\n                // BUG: Diagnostic contains: Avoid having multiple unary operators acting\n                twoArgs(a--, ++a);\n                // BUG: Diagnostic contains: Avoid having multiple unary operators acting\n                twoArgs(++a, a++);\n                // BUG: Diagnostic contains: Avoid having multiple unary operators acting\n                twoArgs(--a, --a);\n\n                // BUG: Diagnostic contains: Avoid having multiple unary operators acting\n                threeArgs(a++, b++, b++);\n                // BUG: Diagnostic contains: Avoid having multiple unary operators acting\n                threeArgs(a++, b, a++);\n                // BUG: Diagnostic contains: Avoid having multiple unary operators acting\n                threeArgs(++a, b++, --b);\n                // BUG: Diagnostic contains: Avoid having multiple unary operators acting\n                threeArgs(++a, a++, b);\n                // BUG: Diagnostic contains: Avoid having multiple unary operators acting\n                threeArgs(++a, a++, a);\n                // BUG: Diagnostic contains: Avoid having multiple unary operators acting\n                threeArgs(++a, a++, a--);\n              }\n\n              public static void twoArgs(int a, int b) {}\n\n              public static void threeArgs(int a, int b, int c) {}\n\n              public static int someFunction(int a) {\n                return 0;\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        81
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * @author sulku@google.com (Marsela Sulku)\n             */\n            public class MultipleUnaryOperatorsInMethodCallNegativeCases {\n              public static void tests(int a, int b, int[] xs) {\n                testMethod(a, b);\n                testMethod(a + 1, b);\n                testMethod(b, a + 1);\n                testMethod(a++, b);\n                testMethod(--a, b);\n                testMethod(a, b--);\n                testMethod(a, ++b);\n                testMethod(xs[0]++, xs[0]++);\n              }\n\n              public static void testMethod(int one, int two) {}\n            }\\"
    }
  ]
}