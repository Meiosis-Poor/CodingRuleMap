{
  "name": "MathAbsoluteNegative",
  "language": "java",
  "description": "Math.abs() does not always give a non-negative result. Please consider other methods for positive numbers, such as IntMath.saturatedAbs() or Math.floorMod().",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 81,
  "branches": 3,
  "apis": 1,
  "test": [
    {
      "description": "random",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "import java.util.Random;\n\n            class Test {\n              private static final Random random = new Random();\n\n              void f() {\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                Math.abs(random.nextInt());\n              }\n            }"
    },
    {
      "description": "randomWithBounds",
      "expected-problems": null,
      "expected-linenumbers": [
        53
      ],
      "code": "import java.util.Random;\n\n            class Test {\n              private static final Random random = new Random();\n\n              void f() {\n                Math.abs(random.nextInt(10));\n              }\n            }"
    },
    {
      "description": "negativeNumber",
      "expected-problems": null,
      "expected-linenumbers": [
        72
      ],
      "code": "class Test {\n              void f() {\n                Math.abs(-9549451);\n              }\n            }"
    },
    {
      "description": "negativeMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        87
      ],
      "code": "class Test {\n              void f() {\n                Math.abs(Math.sin(0) * 10.0);\n              }\n            }"
    },
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        102
      ],
      "code": "class Test {\n              void f() {\n                long random = Math.round(Math.random() * 10000);\n              }\n            }"
    },
    {
      "description": "negativeDouble",
      "expected-problems": null,
      "expected-linenumbers": [
        117
      ],
      "code": "import java.util.Random;\n\n            class Test {\n              void f() {\n                double random = Math.abs(new Random().nextDouble());\n              }\n            }"
    },
    {
      "description": "hashAsInt",
      "expected-problems": null,
      "expected-linenumbers": [
        134
      ],
      "code": "import static com.google.common.hash.Hashing.goodFastHash;\n\n            class Test {\n              void f() {\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                int foo = Math.abs(goodFastHash(64).hashUnencodedChars(\"\").asInt());\n              }\n            }"
    },
    {
      "description": "hashAsLong",
      "expected-problems": null,
      "expected-linenumbers": [
        152
      ],
      "code": "import static com.google.common.hash.Hashing.goodFastHash;\n\n            class Test {\n              void f() {\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                long foo = Math.abs(goodFastHash(64).hashUnencodedChars(\"\").asLong());\n              }\n            }"
    },
    {
      "description": "hashPadToLong",
      "expected-problems": null,
      "expected-linenumbers": [
        170
      ],
      "code": "import static com.google.common.hash.Hashing.goodFastHash;\n\n            class Test {\n              void f() {\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                long foo = Math.abs(goodFastHash(64).hashUnencodedChars(\"\").padToLong());\n              }\n            }"
    },
    {
      "description": "objectHashCode",
      "expected-problems": null,
      "expected-linenumbers": [
        188
      ],
      "code": "class Test {\n              void f(String s) {\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                long foo = Math.abs(s.hashCode());\n              }\n            }"
    },
    {
      "description": "identityHashCode",
      "expected-problems": null,
      "expected-linenumbers": [
        204
      ],
      "code": "class Test {\n              void f(Object o) {\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                long foo = Math.abs(System.identityHashCode(o));\n              }\n            }"
    },
    {
      "description": "uuid",
      "expected-problems": null,
      "expected-linenumbers": [
        220
      ],
      "code": "import java.util.UUID;\n\n            class Test {\n              void f(UUID uuid) {\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                long foo = Math.abs(uuid.getLeastSignificantBits());\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                long bar = Math.abs(uuid.getMostSignificantBits());\n              }\n            }"
    },
    {
      "description": "guavaPrimitivesHashCode",
      "expected-problems": null,
      "expected-linenumbers": [
        240
      ],
      "code": "class Test {\n              void f(long l, int i, float f, double d) {\n                int abs = 0;\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                abs = Math.abs(com.google.common.primitives.Longs.hashCode(l));\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                abs = Math.abs(com.google.common.primitives.Ints.hashCode(i));\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                abs = Math.abs(com.google.common.primitives.Floats.hashCode(f));\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                abs = Math.abs(com.google.common.primitives.Doubles.hashCode(d));\n              }\n            }"
    },
    {
      "description": "jdkPrimitiveHashCode",
      "expected-problems": null,
      "expected-linenumbers": [
        263
      ],
      "code": "class Test {\n              void f(long l, int i, float f, double d) {\n                int abs = 0;\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                abs = Math.abs(Long.hashCode(l));\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                abs = Math.abs(Integer.hashCode(i));\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                abs = Math.abs(Float.hashCode(f));\n                // BUG: Diagnostic contains: MathAbsoluteNegative\n                abs = Math.abs(Double.hashCode(d));\n              }\n            }"
    }
  ]
}