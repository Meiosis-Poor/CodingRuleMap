{
  "name": "NonOverridingEquals",
  "language": "java",
  "description": "equals method doesn't override Object.equals",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 168,
  "branches": 20,
  "apis": 4,
  "test": [
    {
      "description": "flagsSimpleCovariantEqualsMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "public class Test {\n              // BUG: Diagnostic contains: Did you mean '@Override'\n              public boolean equals(Test other) {\n                return false;\n              }\n            }"
    },
    {
      "description": "flagsComplicatedCovariantEqualsMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        51
      ],
      "code": "public class Test {\n              int i, j, k;\n\n              // BUG: Diagnostic contains: Did you mean '@Override'\n              public boolean equals(Test other) {\n                if (i == other.i && j == other.j && k == other.k) {\n                  return true;\n                }\n                return false;\n              }\n            }"
    },
    {
      "description": "flagsAnotherComplicatedCovariantEqualsMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        72
      ],
      "code": "public class Test {\n              boolean isInVersion;\n              String str;\n\n              // BUG: Diagnostic contains: Did you mean '@Override'\n              public boolean equals(Test that) {\n                return (this.isInVersion == that.isInVersion) && this.str.equals(that.str);\n              }\n            }"
    },
    {
      "description": "flagsAbstractCovariantEqualsMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        91
      ],
      "code": "public abstract class Test {\n              // BUG: Diagnostic contains: Did you mean '@Override'\n              public abstract boolean equals(Test other);\n            }"
    },
    {
      "description": "flagsNativeCovariantEqualsMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        105
      ],
      "code": "public class Test {\n              // BUG: Diagnostic contains: Did you mean '@Override'\n              public native boolean equals(Test other);\n            }"
    },
    {
      "description": "flagsIfMethodTakesUnrelatedType",
      "expected-problems": null,
      "expected-linenumbers": [
        119
      ],
      "code": "public class Test {\n              // BUG: Diagnostic contains:\n              public boolean equals(Integer other) {\n                return false;\n              }\n            }"
    },
    {
      "description": "flagsBoxedBooleanReturnType",
      "expected-problems": null,
      "expected-linenumbers": [
        135
      ],
      "code": "public class Test {\n              // BUG: Diagnostic contains:\n              public Boolean equals(Test other) {\n                return false;\n              }\n            }"
    },
    {
      "description": "flagsCovariantEqualsMethodInEnum",
      "expected-problems": null,
      "expected-linenumbers": [
        151
      ],
      "code": "public enum Planet {\n  MERCURY,\n  VENUS,\n  EARTH,\n  MARS,\n  JUPITER,\n  SATURN,\n  URANUS,\n  NEPTUNE;\n\n  // BUG: Diagnostic contains: enum instances can safely be compared by reference equality\n  // Did you mean to remove this line?\n  public boolean equals(Planet other) {\n    return this == other;\n  }\n}"
    },
    {
      "description": "flagsPrivateEqualsMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        177
      ],
      "code": "public class Test {\n              // BUG: Diagnostic contains:\n              private boolean equals(Test other) {\n                return false;\n              }\n            }"
    },
    {
      "description": "flagsEvenIfAnotherMethodOverridesEquals",
      "expected-problems": null,
      "expected-linenumbers": [
        193
      ],
      "code": "public class Test {\n              // BUG: Diagnostic contains: either inline it into the callers or rename it\n              private boolean equals(Test other) {\n                return false;\n              }\n\n              @Override\n              public boolean equals(Object other) {\n                return false;\n              }\n            }"
    },
    {
      "description": "flagsStaticEqualsMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        219
      ],
      "code": "public class Test {\n              // BUG: Diagnostic contains:\n              public static boolean equals(Test other) {\n                return false;\n              }\n            }"
    },
    {
      "description": "dontFlagMethodThatOverridesEquals",
      "expected-problems": null,
      "expected-linenumbers": [
        237
      ],
      "code": "public class Test {\n              @Override\n              public boolean equals(Object other) {\n                return false;\n              }\n            }"
    },
    {
      "description": "dontFlagEqualsMethodWithMoreThanOneParameter",
      "expected-problems": null,
      "expected-linenumbers": [
        253
      ],
      "code": "public class Test {\n              public boolean equals(Test other, String s) {\n                return false;\n              }\n            }"
    },
    {
      "description": "dontFlagIfWrongReturnType",
      "expected-problems": null,
      "expected-linenumbers": [
        268
      ],
      "code": "public class Test {\n              public int equals(Test other) {\n                return -1;\n              }\n            }"
    }
  ]
}