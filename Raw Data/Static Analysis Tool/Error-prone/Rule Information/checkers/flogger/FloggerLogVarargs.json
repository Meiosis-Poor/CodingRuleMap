{
  "name": "FloggerLogVarargs",
  "language": "java",
  "description": "logVarargs should be used to pass through format strings and arguments.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 59,
  "branches": 3,
  "apis": 2,
  "test": [
    {
      "description": "positive",
      "expected-problems": null,
      "expected-linenumbers": [
        28
      ],
      "code": "import com.google.common.flogger.FluentLogger;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              void log(String s, Object... a) {\n                logger.atInfo().log(s, a);\n              }\n            }\n            \n\n            import com.google.common.flogger.FluentLogger;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              void log(String s, Object... a) {\n                logger.atInfo().logVarargs(s, a);\n              }\n            }"
    },
    {
      "description": "positiveAnonymousClass",
      "expected-problems": null,
      "expected-linenumbers": [
        60
      ],
      "code": "import com.google.common.flogger.FluentLogger;\n            import java.util.function.Predicate;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              Predicate<Void> log(String s, Object... a) {\n                return new Predicate<Void>() {\n                  @Override\n                  public boolean test(Void unused) {\n                    logger.atInfo().log(s, a);\n                    return true;\n                  }\n                };\n              }\n            }\n            \n\n            import com.google.common.flogger.FluentLogger;\n            import java.util.function.Predicate;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              Predicate<Void> log(String s, Object... a) {\n                return new Predicate<Void>() {\n                  @Override\n                  public boolean test(Void unused) {\n                    logger.atInfo().logVarargs(s, a);\n                    return true;\n                  }\n                };\n              }\n            }"
    },
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        106
      ],
      "code": "import com.google.common.flogger.FluentLogger;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              void log(String s, Object a) {\n                logger.atInfo().log(s, a);\n              }\n\n              void bar() {\n                logger.atInfo().log(\"foo\", new Object[] {1});\n              }\n            }"
    }
  ]
}