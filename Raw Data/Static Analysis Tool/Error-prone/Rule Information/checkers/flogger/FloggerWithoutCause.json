{
  "name": "FloggerWithoutCause",
  "language": "java",
  "description": "Use withCause to associate Exceptions with log statements",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 90,
  "branches": 8,
  "apis": 2,
  "test": [
    {
      "description": "positive",
      "expected-problems": null,
      "expected-linenumbers": [
        31
      ],
      "code": "import com.google.common.flogger.FluentLogger;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              public void f(Exception e, Throwable t) {\n                // BUG: Diagnostic contains: logger.atInfo().withCause(e).log(\"hello %s\", e);\n                logger.atInfo().log(\"hello %s\", e);\n                // BUG: Diagnostic contains: .atInfo().withCause(t).log(\"hello %s\", e, t);\n                logger.atInfo().log(\"hello %s\", e, t);\n              }\n            }"
    },
    {
      "description": "positiveSubtype",
      "expected-problems": null,
      "expected-linenumbers": [
        53
      ],
      "code": "import com.google.common.flogger.FluentLogger;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              public void f(ReflectiveOperationException e) {\n                // BUG: Diagnostic contains: logger.atInfo().withCause(e).log(\"hello %s\", e);\n                logger.atInfo().log(\"hello %s\", e);\n              }\n            }"
    },
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        73
      ],
      "code": "import com.google.common.flogger.FluentLogger;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              public void f(Exception e, Throwable t) {\n                logger.atInfo().log(null);\n                logger.atInfo().log(\"hello\");\n                logger.atInfo().log(\"hello %s\", 1);\n                logger.atInfo().withCause(e).log(\"hello %s\", e);\n                logger.atInfo().withCause(e).log(\"hello %s\", e, t);\n              }\n            }"
    }
  ]
}