{
  "name": "FloggerArgumentToString",
  "language": "java",
  "description": "Use Flogger's printf-style formatting instead of explicitly converting arguments to strings. Note that Flogger does more than just call toString; for instance, it formats arrays sensibly.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 354,
  "branches": 30,
  "apis": 23,
  "test": [
    {
      "description": "refactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        35
      ],
      "code": "import com.google.common.base.Ascii;\n            import com.google.common.flogger.FluentLogger;\n            import java.util.Arrays;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              public void f(String world, Object[] xs, long l) {\n                logger.atInfo().log(\"hello '%s'\", world.toString());\n                logger.atInfo().log(\"hello %s %d\", world.toString(), 2);\n                logger.atInfo().log(\"hello %s\", world.toUpperCase());\n                logger.atInfo().log(\"hello %s\", Ascii.toUpperCase(world));\n                logger.atInfo().log(\"hello %s\", Integer.toString(42));\n                logger.atInfo().log(\"hello %d\", Integer.valueOf(42));\n                logger.atInfo().log(\"hello %s\", Integer.toHexString(42));\n                logger.atInfo().log(\"hello %S\", Integer.toHexString(42));\n                logger.atInfo().log(\"hello %s\", Arrays.asList(1, 2));\n                logger.atInfo().log(\"hello %s\", Arrays.asList(xs));\n                logger.atInfo().log(\"hello %s\", Arrays.toString(xs));\n                logger.atInfo().log(\"hello %s\", Long.toHexString(l));\n                logger.atInfo().log(\"%%s\", Ascii.toUpperCase(world));\n              }\n            }\n            \n\n            import com.google.common.base.Ascii;\n            import com.google.common.flogger.FluentLogger;\n            import java.util.Arrays;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              public void f(String world, Object[] xs, long l) {\n                logger.atInfo().log(\"hello '%s'\", world);\n                logger.atInfo().log(\"hello %s %d\", world, 2);\n                logger.atInfo().log(\"hello %S\", world);\n                logger.atInfo().log(\"hello %S\", world);\n                logger.atInfo().log(\"hello %d\", 42);\n                logger.atInfo().log(\"hello %d\", 42);\n                logger.atInfo().log(\"hello %x\", 42);\n                logger.atInfo().log(\"hello %X\", 42);\n                logger.atInfo().log(\"hello %s\", Arrays.asList(1, 2));\n                logger.atInfo().log(\"hello %s\", xs);\n                logger.atInfo().log(\"hello %s\", xs);\n                logger.atInfo().log(\"hello %x\", l);\n                logger.atInfo().log(\"%%s\", Ascii.toUpperCase(world));\n              }\n            }"
    },
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        95
      ],
      "code": "import com.google.common.flogger.FluentLogger;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              public void f(String world) {\n                logger.atInfo().log(\"hello '%s'\", world);\n              }\n            }"
    },
    {
      "description": "selfToString",
      "expected-problems": null,
      "expected-linenumbers": [
        114
      ],
      "code": "import com.google.common.flogger.FluentLogger;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              public void f() {\n                logger.atInfo().log(\"hello '%s'\", toString());\n              }\n            }\n            \n\n            import com.google.common.flogger.FluentLogger;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n\n              public void f() {\n                logger.atInfo().log(\"hello '%s'\", this);\n              }\n            }"
    },
    {
      "description": "lenientFormat_explicitToStringNotNeeded",
      "expected-problems": null,
      "expected-linenumbers": [
        146
      ],
      "code": "import static com.google.common.base.Preconditions.checkArgument;\n\n            class Test {\n              void test(Object x, long l) {\n                // BUG: Diagnostic contains:\n                checkArgument(1 == 1, \"%s\", x.toString());\n                // BUG: Diagnostic contains:\n                checkArgument(1 == 1, \"%s\", Long.toString(l));\n              }\n            }"
    }
  ]
}