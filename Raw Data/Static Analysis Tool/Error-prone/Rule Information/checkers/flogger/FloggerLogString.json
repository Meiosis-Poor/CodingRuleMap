{
  "name": "FloggerLogString",
  "language": "java",
  "description": "Arguments to log(String) must be compile-time constants or parameters annotated with @CompileTimeConstant. If possible, use Flogger's formatting log methods instead.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 57,
  "branches": 2,
  "apis": 1,
  "test": [
    {
      "description": "positive",
      "expected-problems": null,
      "expected-linenumbers": [
        34
      ],
      "code": ""
    },
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        52
      ],
      "code": "import com.google.common.flogger.FluentLogger;\n            import com.google.errorprone.annotations.CompileTimeConstant;\n\n            class Test {\n              private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n              private static final String CONSTANT = \"CONSTANT\";\n\n              public void f(@CompileTimeConstant String s) {\n                final String localFinal = \"localFinal\";\n                logger.atInfo().log(\"hello\");\n                logger.atInfo().log(s);\n                logger.atInfo().log(CONSTANT);\n                logger.atInfo().log(localFinal);\n                logger.atInfo().log(\"hello \" + s);\n                logger.atInfo().log(\"hello \" + CONSTANT);\n                logger.atInfo().log(\"hello \" + localFinal);\n                logger.atInfo().log(\"hello \" + s + CONSTANT);\n                logger.atInfo().log(\"hello \" + s + localFinal);\n                logger.atInfo().log(\"hello \" + localFinal + CONSTANT);\n                logger.atInfo().log(\"hello \" + s + localFinal + CONSTANT);\n                logger.atInfo().log(s + localFinal);\n                logger.atInfo().log(s + CONSTANT);\n                logger.atInfo().log(CONSTANT + localFinal);\n                logger.atInfo().log(s + localFinal + CONSTANT);\n                logger.atInfo().log((String) null);\n              }\n            }"
    }
  ]
}