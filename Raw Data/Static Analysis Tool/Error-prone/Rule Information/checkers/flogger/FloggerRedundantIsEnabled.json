{
  "name": "FloggerRedundantIsEnabled",
  "language": "java",
  "description": "Logger level check is already implied in the log() call. An explicit atLEVEL().isEnabled() check is redundant.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 191,
  "branches": 18,
  "apis": 3,
  "test": [
    {
      "description": "doPositiveCases",
      "expected-problems": null,
      "expected-linenumbers": [
        35
      ],
      "code": "package com.google.errorprone.bugpatterns.flogger.testdata;\n\n            import com.google.common.flogger.FluentLogger;\n\n            /** Created by mariasam on 7/17/17. */\n            class FloggerRedundantIsEnabledPositiveCases {\n\n              public void basicCase(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atInfo().isEnabled()) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void nestedIf(FluentLogger logger) {\n                if (7 == 7) {\n                  // BUG: Diagnostic contains: redundant\n                  if (logger.atInfo().isEnabled()) {\n                    logger.atInfo().log(\"test\");\n                  }\n                }\n              }\n\n              public void checkBinaryInIf(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (7 == 7 && logger.atInfo().isEnabled()) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void checkBinaryOtherWay(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atInfo().isEnabled() && 7 == 7) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void complexBinary(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (7 == 7 && (logger != null && logger.atInfo().isEnabled())) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void negated(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (!logger.atInfo().isEnabled()) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void binaryNegated(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (!logger.atInfo().isEnabled() && 7 == 7) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void checkConfig(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atConfig().isEnabled()) {\n                  logger.atConfig().log(\"test\");\n                }\n              }\n\n              public void checkFine(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atFine().isEnabled()) {\n                  logger.atFine().log(\"test\");\n                }\n              }\n\n              public void checkFiner(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atFiner().isEnabled()) {\n                  logger.atFiner().log(\"test\");\n                }\n              }\n\n              public void checkFinest(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atFinest().isEnabled()) {\n                  logger.atFinest().log(\"test\");\n                }\n              }\n\n              public void checkWarning(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atWarning().isEnabled()) {\n                  logger.atWarning().log(\"test\");\n                }\n              }\n\n              public void checkSevere(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atSevere().isEnabled()) {\n                  logger.atSevere().log(\"test\");\n                }\n              }\n            }\\"
    },
    {
      "description": "doNegativeCases",
      "expected-problems": null,
      "expected-linenumbers": [
        145
      ],
      "code": "package com.google.errorprone.bugpatterns.flogger.testdata;\n\nimport com.google.common.flogger.FluentLogger;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author mariasam@google.com (Maria Sam)\n */\npublic class FloggerRedundantIsEnabledNegativeCases {\n\n  public void basicCase(FluentLogger logger) {\n    logger.atInfo().log(\"test\");\n  }\n\n  public void sameLoggerIf(FluentLogger logger, FluentLogger logger2) {\n    if (logger.equals(logger2)) {\n      logger.atInfo().log(\"test\");\n    }\n  }\n\n  public void relatedIf(FluentLogger logger, FluentLogger logger2) {\n    if (logger.atInfo().isEnabled()) {\n      logger2.atInfo().log(\"test\");\n    }\n  }\n\n  public void doesWork(FluentLogger logger, Map<String, List<String>> map) {\n    if (logger.atFine().isEnabled()) {\n      for (Map.Entry<String, List<String>> toLog : map.entrySet()) {\n        logger.atFine().log(\"%s%s\", toLog.getKey(), Arrays.toString(toLog.getValue().toArray()));\n      }\n    }\n  }\n\n  public void differentLevels(FluentLogger logger) {\n    if (logger.atFine().isEnabled()) {\n      logger.atInfo().log(\"This is weird but not necessarily wrong\");\n    }\n  }\n\n  public void checkAtInfo(TestLogger notALogger, FluentLogger logger2) {\n    if (notALogger.atInfo().isEnabled()) {\n      logger2.atInfo().log(\"test\");\n    }\n  }\n\n  public void checkAtInfo(TestLogger notALogger) {\n    if (notALogger.atInfo() == null) {\n      notALogger.atInfo();\n    }\n  }\n\n  public void checkMethods(FluentLogger logger) {\n    if (logger.atInfo().isEnabled()) {\n      atInfo();\n      isEnabled();\n    }\n  }\n\n  public void multipleLines(FluentLogger logger) {\n    if (logger.atInfo().isEnabled()) {\n      int foo = 10;\n      logger.atInfo().log(\"test\");\n    }\n  }\n\n  public boolean atInfo() {\n    return true;\n  }\n\n  public boolean isEnabled() {\n    return true;\n  }\n\n  private class TestLogger {\n    public TestLogger atInfo() {\n      return null;\n    }\n\n    public boolean isEnabled() {\n      return true;\n    }\n  }\n}\\"
    },
    {
      "description": "fixes",
      "expected-problems": null,
      "expected-linenumbers": [
        241
      ],
      "code": "package com.google.errorprone.bugpatterns.flogger.testdata;\n\n            import com.google.common.flogger.FluentLogger;\n\n            /** Created by mariasam on 7/17/17. */\n            class FloggerRedundantIsEnabledPositiveCases {\n\n              public void basicCase(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atInfo().isEnabled()) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void nestedIf(FluentLogger logger) {\n                if (7 == 7) {\n                  // BUG: Diagnostic contains: redundant\n                  if (logger.atInfo().isEnabled()) {\n                    logger.atInfo().log(\"test\");\n                  }\n                }\n              }\n\n              public void checkBinaryInIf(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (7 == 7 && logger.atInfo().isEnabled()) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void checkBinaryOtherWay(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atInfo().isEnabled() && 7 == 7) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void complexBinary(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (7 == 7 && (logger != null && logger.atInfo().isEnabled())) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void negated(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (!logger.atInfo().isEnabled()) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void binaryNegated(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (!logger.atInfo().isEnabled() && 7 == 7) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void checkConfig(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atConfig().isEnabled()) {\n                  logger.atConfig().log(\"test\");\n                }\n              }\n\n              public void checkFine(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atFine().isEnabled()) {\n                  logger.atFine().log(\"test\");\n                }\n              }\n\n              public void checkFiner(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atFiner().isEnabled()) {\n                  logger.atFiner().log(\"test\");\n                }\n              }\n\n              public void checkFinest(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atFinest().isEnabled()) {\n                  logger.atFinest().log(\"test\");\n                }\n              }\n\n              public void checkWarning(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atWarning().isEnabled()) {\n                  logger.atWarning().log(\"test\");\n                }\n              }\n\n              public void checkSevere(FluentLogger logger) {\n                // BUG: Diagnostic contains: redundant\n                if (logger.atSevere().isEnabled()) {\n                  logger.atSevere().log(\"test\");\n                }\n              }\n            }\\\n            \n\n            package com.google.errorprone.bugpatterns.flogger.testdata;\n\n            import com.google.common.flogger.FluentLogger;\n\n            /**\n             * @author mariasam@google.com (Maria Sam)\n             */\n            class FloggerRedundantIsEnabledPositiveCases {\n\n              public void basicCase(FluentLogger logger) {\n                logger.atInfo().log(\"test\");\n              }\n\n              public void nestedIf(FluentLogger logger) {\n                if (7 == 7) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void checkBinaryInIf(FluentLogger logger) {\n                if (7 == 7) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void checkBinaryOtherWay(FluentLogger logger) {\n                if (7 == 7) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void complexBinary(FluentLogger logger) {\n                if (7 == 7 && (logger != null)) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void negated(FluentLogger logger) {\n                logger.atInfo().log(\"test\");\n              }\n\n              public void binaryNegated(FluentLogger logger) {\n                if (7 == 7) {\n                  logger.atInfo().log(\"test\");\n                }\n              }\n\n              public void checkConfig(FluentLogger logger) {\n                logger.atConfig().log(\"test\");\n              }\n\n              public void checkFine(FluentLogger logger) {\n                logger.atFine().log(\"test\");\n              }\n\n              public void checkFiner(FluentLogger logger) {\n                logger.atFiner().log(\"test\");\n              }\n\n              public void checkFinest(FluentLogger logger) {\n                logger.atFinest().log(\"test\");\n              }\n\n              public void checkWarning(FluentLogger logger) {\n                logger.atWarning().log(\"test\");\n              }\n\n              public void checkSevere(FluentLogger logger) {\n                logger.atSevere().log(\"test\");\n              }\n            }\\"
    }
  ]
}