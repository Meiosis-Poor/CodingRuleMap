{
  "name": "Finally",
  "language": "java",
  "description": "If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 192,
  "branches": 33,
  "apis": 6,
  "test": [
    {
      "description": "positiveCase1",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n/**\n * When a finally statement is exited because of a return, throw, break, or continue statement,\n * unintuitive behaviour can occur. Consider:\n *\n * <pre>\n * {@code\n * finally foo() {\n *   try {\n *     return true;\n *   } finally {\n *     return false;\n *   }\n * }\n * </pre>\n *\n * Because the finally block always executes, the first return statement has no effect and the\n * method will return false.\n *\n * @author eaftan@google.com (Eddie Aftandilian)\n * @author cushon@google.com (Liam Miller-Cushon)\n */\npublic class FinallyPositiveCase1 {\n\n  public static void test1() {\n    while (true) {\n      try {\n      } finally {\n        // BUG: Diagnostic contains:\n        break;\n      }\n    }\n  }\n\n  public static void test2() {\n    while (true) {\n      try {\n      } finally {\n        // BUG: Diagnostic contains:\n        continue;\n      }\n    }\n  }\n\n  public static void test3() {\n    try {\n    } finally {\n      // BUG: Diagnostic contains:\n      return;\n    }\n  }\n\n  public static void test4() throws Exception {\n    try {\n    } finally {\n      // BUG: Diagnostic contains:\n      throw new Exception();\n    }\n  }\n\n  /** break statement jumps to outer labeled while, not inner one. */\n  public void test5() {\n    label:\n    while (true) {\n      try {\n      } finally {\n        while (true) {\n          // BUG: Diagnostic contains:\n          break label;\n        }\n      }\n    }\n  }\n\n  /** continue statement jumps to outer labeled for, not inner one. */\n  public void test6() {\n    label:\n    for (; ; ) {\n      try {\n      } finally {\n        for (; ; ) {\n          // BUG: Diagnostic contains:\n          continue label;\n        }\n      }\n    }\n  }\n\n  /** continue statement jumps to while, not switch. */\n  public void test7() {\n    int i = 10;\n    while (true) {\n      try {\n      } finally {\n        switch (i) {\n          case 10:\n            // BUG: Diagnostic contains:\n            continue;\n        }\n      }\n    }\n  }\n\n  public void test8() {\n    try {\n    } finally {\n      {\n        {\n          {\n            {\n              {\n                {\n                  {\n                    {\n                      {\n                        {\n                          // BUG: Diagnostic contains:\n                          return;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Don't assume that completion statements occur inside methods:\n  static boolean flag = false;\n\n  static {\n    while (flag) {\n      try {\n      } finally {\n        // BUG: Diagnostic contains:\n        break;\n      }\n    }\n  }\n}\n\n\n            package com.google.errorprone.bugpatterns.testdata;\n\n            import java.io.IOException;\n\n            /**\n             * @author cushon@google.com (Liam Miller-Cushon)\n             */\n            public class FinallyPositiveCase2 {\n              public void completeWithReturn(boolean flag) {\n                try {\n\n                } finally {\n                  // BUG: Diagnostic contains:\n                  return;\n                }\n              }\n\n              public void completeWithThrow(boolean flag) throws Exception {\n                try {\n\n                } finally {\n                  // BUG: Diagnostic contains:\n                  throw new Exception();\n                }\n              }\n\n              public void unreachableThrow(boolean flag) throws Exception {\n                try {\n\n                } finally {\n                  if (flag) {\n                    // BUG: Diagnostic contains:\n                    throw new Exception();\n                  }\n                }\n              }\n\n              public void nestedBlocks(int i, boolean flag) throws Exception {\n                try {\n\n                } finally {\n                  switch (i) {\n                    default:\n                      {\n                        while (flag) {\n                          do {\n                            if (flag) {\n                            } else {\n                              // BUG: Diagnostic contains:\n                              throw new Exception();\n                            }\n                          } while (flag);\n                        }\n                      }\n                  }\n                }\n              }\n\n              public void nestedFinally() throws Exception {\n                try {\n\n                } finally {\n                  try {\n                  } finally {\n                    // BUG: Diagnostic contains:\n                    throw new IOException();\n                  }\n                }\n              }\n\n              public void returnFromTryNestedInFinally() {\n                try {\n                } finally {\n                  try {\n                    // BUG: Diagnostic contains:\n                    return;\n                  } finally {\n                  }\n                }\n              }\n\n              public void returnFromCatchNestedInFinally() {\n                try {\n                } finally {\n                  try {\n                  } catch (Exception e) {\n                    // BUG: Diagnostic contains:\n                    return;\n                  } finally {\n                  }\n                }\n              }\n\n              public void throwUncaughtFromNestedTryInFinally() throws Exception {\n                try {\n                } finally {\n                  try {\n                    // BUG: Diagnostic contains:\n                    throw new Exception();\n                  } finally {\n                  }\n                }\n              }\n\n              public void throwFromNestedCatchInFinally() throws Exception {\n                try {\n                } finally {\n                  try {\n                  } catch (Exception e) {\n                    // BUG: Diagnostic contains:\n                    throw new Exception();\n                  } finally {\n                  }\n                }\n              }\n            }\\\n            \n\n            package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            public class FinallyNegativeCase1 {\n\n              public static void test1() {\n                while (true) {\n                  try {\n                    break;\n                  } finally {\n                  }\n                }\n              }\n\n              public static void test2() {\n                while (true) {\n                  try {\n                    continue;\n                  } finally {\n                  }\n                }\n              }\n\n              public static void test3() {\n                try {\n                  return;\n                } finally {\n                }\n              }\n\n              public static void test4() throws Exception {\n                try {\n                  throw new Exception();\n                } catch (Exception e) {\n                } finally {\n                }\n              }\n\n              /** break inner loop. */\n              public void test5() {\n                label:\n                while (true) {\n                  try {\n                  } finally {\n                    while (true) {\n                      break;\n                    }\n                  }\n                }\n              }\n\n              /** continue statement jumps out of inner for. */\n              public void test6() {\n                label:\n                for (; ; ) {\n                  try {\n                  } finally {\n                    for (; ; ) {\n                      continue;\n                    }\n                  }\n                }\n              }\n\n              /** break statement jumps out of switch. */\n              public void test7() {\n                int i = 10;\n                while (true) {\n                  try {\n                  } finally {\n                    switch (i) {\n                      case 10:\n                        break;\n                    }\n                  }\n                }\n              }\n            }\\\n            \n\n            package com.google.errorprone.bugpatterns.testdata;\n\n            import java.io.IOException;\n\n            /**\n             * @author cushon@google.com (Liam Miller-Cushon)\n             */\n            public class FinallyNegativeCase2 {\n              public void test1(boolean flag) {\n                try {\n                  return;\n                } finally {\n                }\n              }\n\n              public void test2() throws Exception {\n                try {\n                } catch (Exception e) {\n                  throw new Exception();\n                } finally {\n                }\n              }\n\n              public void returnInAnonymousClass(boolean flag) {\n                try {\n                } finally {\n                  new Object() {\n                    void foo() {\n                      return;\n                    }\n                  };\n                }\n              }\n\n              public void throwFromNestedTryInFinally() throws Exception {\n                try {\n                } finally {\n                  try {\n                    throw new Exception();\n                  } catch (Exception e) {\n                  } finally {\n                  }\n                }\n              }\n\n              public void nestedTryInFinally2() throws Exception {\n                try {\n                } finally {\n                  try {\n                    // This exception will propagate out through the enclosing finally,\n                    // but we don't do exception analysis and have no way of knowing that.\n                    // Xlint:finally doesn't handle this either, since it only reports\n                    // situations where the end of a finally block is unreachable as\n                    // defined by JLS 14.21.\n                    throw new IOException();\n                  } catch (Exception e) {\n                  }\n                }\n              }\n            }\\\n            \n\n            class Test {\n              void f() {\n                try {\n                } catch (Throwable t) {\n                } finally {\n                  Runnable r =\n                      () -> {\n                        return;\n                      };\n                }\n              }\n            }"
    },
    {
      "description": "positiveCase2",
      "expected-problems": null,
      "expected-linenumbers": [
        188
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import java.io.IOException;\n\n            /**\n             * @author cushon@google.com (Liam Miller-Cushon)\n             */\n            public class FinallyPositiveCase2 {\n              public void completeWithReturn(boolean flag) {\n                try {\n\n                } finally {\n                  // BUG: Diagnostic contains:\n                  return;\n                }\n              }\n\n              public void completeWithThrow(boolean flag) throws Exception {\n                try {\n\n                } finally {\n                  // BUG: Diagnostic contains:\n                  throw new Exception();\n                }\n              }\n\n              public void unreachableThrow(boolean flag) throws Exception {\n                try {\n\n                } finally {\n                  if (flag) {\n                    // BUG: Diagnostic contains:\n                    throw new Exception();\n                  }\n                }\n              }\n\n              public void nestedBlocks(int i, boolean flag) throws Exception {\n                try {\n\n                } finally {\n                  switch (i) {\n                    default:\n                      {\n                        while (flag) {\n                          do {\n                            if (flag) {\n                            } else {\n                              // BUG: Diagnostic contains:\n                              throw new Exception();\n                            }\n                          } while (flag);\n                        }\n                      }\n                  }\n                }\n              }\n\n              public void nestedFinally() throws Exception {\n                try {\n\n                } finally {\n                  try {\n                  } finally {\n                    // BUG: Diagnostic contains:\n                    throw new IOException();\n                  }\n                }\n              }\n\n              public void returnFromTryNestedInFinally() {\n                try {\n                } finally {\n                  try {\n                    // BUG: Diagnostic contains:\n                    return;\n                  } finally {\n                  }\n                }\n              }\n\n              public void returnFromCatchNestedInFinally() {\n                try {\n                } finally {\n                  try {\n                  } catch (Exception e) {\n                    // BUG: Diagnostic contains:\n                    return;\n                  } finally {\n                  }\n                }\n              }\n\n              public void throwUncaughtFromNestedTryInFinally() throws Exception {\n                try {\n                } finally {\n                  try {\n                    // BUG: Diagnostic contains:\n                    throw new Exception();\n                  } finally {\n                  }\n                }\n              }\n\n              public void throwFromNestedCatchInFinally() throws Exception {\n                try {\n                } finally {\n                  try {\n                  } catch (Exception e) {\n                    // BUG: Diagnostic contains:\n                    throw new Exception();\n                  } finally {\n                  }\n                }\n              }\n            }\\"
    },
    {
      "description": "negativeCase1",
      "expected-problems": null,
      "expected-linenumbers": [
        314
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            public class FinallyNegativeCase1 {\n\n              public static void test1() {\n                while (true) {\n                  try {\n                    break;\n                  } finally {\n                  }\n                }\n              }\n\n              public static void test2() {\n                while (true) {\n                  try {\n                    continue;\n                  } finally {\n                  }\n                }\n              }\n\n              public static void test3() {\n                try {\n                  return;\n                } finally {\n                }\n              }\n\n              public static void test4() throws Exception {\n                try {\n                  throw new Exception();\n                } catch (Exception e) {\n                } finally {\n                }\n              }\n\n              /** break inner loop. */\n              public void test5() {\n                label:\n                while (true) {\n                  try {\n                  } finally {\n                    while (true) {\n                      break;\n                    }\n                  }\n                }\n              }\n\n              /** continue statement jumps out of inner for. */\n              public void test6() {\n                label:\n                for (; ; ) {\n                  try {\n                  } finally {\n                    for (; ; ) {\n                      continue;\n                    }\n                  }\n                }\n              }\n\n              /** break statement jumps out of switch. */\n              public void test7() {\n                int i = 10;\n                while (true) {\n                  try {\n                  } finally {\n                    switch (i) {\n                      case 10:\n                        break;\n                    }\n                  }\n                }\n              }\n            }\\"
    },
    {
      "description": "negativeCase2",
      "expected-problems": null,
      "expected-linenumbers": [
        404
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import java.io.IOException;\n\n            /**\n             * @author cushon@google.com (Liam Miller-Cushon)\n             */\n            public class FinallyNegativeCase2 {\n              public void test1(boolean flag) {\n                try {\n                  return;\n                } finally {\n                }\n              }\n\n              public void test2() throws Exception {\n                try {\n                } catch (Exception e) {\n                  throw new Exception();\n                } finally {\n                }\n              }\n\n              public void returnInAnonymousClass(boolean flag) {\n                try {\n                } finally {\n                  new Object() {\n                    void foo() {\n                      return;\n                    }\n                  };\n                }\n              }\n\n              public void throwFromNestedTryInFinally() throws Exception {\n                try {\n                } finally {\n                  try {\n                    throw new Exception();\n                  } catch (Exception e) {\n                  } finally {\n                  }\n                }\n              }\n\n              public void nestedTryInFinally2() throws Exception {\n                try {\n                } finally {\n                  try {\n                    // This exception will propagate out through the enclosing finally,\n                    // but we don't do exception analysis and have no way of knowing that.\n                    // Xlint:finally doesn't handle this either, since it only reports\n                    // situations where the end of a finally block is unreachable as\n                    // defined by JLS 14.21.\n                    throw new IOException();\n                  } catch (Exception e) {\n                  }\n                }\n              }\n            }\\"
    },
    {
      "description": "lambda",
      "expected-problems": null,
      "expected-linenumbers": [
        474
      ],
      "code": "class Test {\n              void f() {\n                try {\n                } catch (Throwable t) {\n                } finally {\n                  Runnable r =\n                      () -> {\n                        return;\n                      };\n                }\n              }\n            }"
    }
  ]
}