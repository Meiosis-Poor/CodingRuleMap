{
  "name": "TryFailThrowable",
  "language": "java",
  "description": "Catching Throwable/Error masks failures from fail() or assert*() in the try block",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 271,
  "branches": 26,
  "apis": 11,
  "test": [
    {
      "description": "positiveCases",
      "expected-problems": null,
      "expected-linenumbers": [
        32
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\n\nimport java.util.Arrays;\nimport junit.framework.TestCase;\nimport org.junit.Assert;\n\n/**\n * @author adamwos@google.com (Adam Wos)\n */\npublic class TryFailThrowablePositiveCases {\n\n  public static void emptyCatch_failNoMessage() {\n    try {\n      dummyMethod();\n      Assert.fail();\n      // BUG: Diagnostic contains: catch (Exception t)\n    } catch (Throwable t) {\n    }\n  }\n\n  public static void commentCatch_failNoMessage() {\n    try {\n      dummyMethod();\n      Assert.fail();\n      // BUG: Diagnostic contains: catch (Exception t123)\n    } catch (Throwable t123) {\n      // expected!\n      ;\n      /* that's an empty comment */\n    }\n  }\n\n  public static void commentCatch_failWithMessage() {\n    try {\n      dummyMethod();\n      Assert.fail(\"Faaail!\");\n      // BUG: Diagnostic contains: catch (Exception t)\n    } catch (Throwable t) {\n      // expected!\n    }\n  }\n\n  public static void commentCatch_failNotLast() {\n    try {\n      dummyMethod();\n      fail(\"Faaail!\");\n      dummyMethod();\n      // BUG: Diagnostic contains: catch (Exception t)\n    } catch (Throwable t) {\n      // expected!\n    }\n  }\n\n  public static void commentCatch_assert() {\n    try {\n      dummyMethod();\n      assertEquals(1, 2);\n      // BUG: Diagnostic contains: catch (Exception t)\n    } catch (Throwable t) {\n      // expected!\n    }\n  }\n\n  public static void commentCatch_assertNotLast() {\n    try {\n      dummyMethod();\n      assertTrue(\"foobar!\", true);\n      dummyRecover();\n      // BUG: Diagnostic contains: catch (Exception t)\n    } catch (Throwable t) {\n      // expected!\n    }\n  }\n\n  public static void customMoreAsserts() {\n    try {\n      dummyMethod();\n      CustomMoreAsserts.assertFoobar();\n      dummyMethod();\n      // BUG: Diagnostic contains: catch (Exception t)\n    } catch (Throwable t) {\n      // expected!\n    }\n  }\n\n  public static void customMoreAsserts_fail() {\n    try {\n      dummyMethod();\n      CustomMoreAsserts.fail(\"param\", 0x42);\n      dummyMethod();\n      // BUG: Diagnostic contains: catch (Exception t)\n    } catch (Throwable t) {\n      // expected!\n    }\n  }\n\n  static final class SomeTest extends TestCase {\n    public void testInTestCase() {\n      try {\n        dummyMethod();\n        fail(\"message\");\n        // BUG: Diagnostic contains: catch (Exception codeCatch_oldAssertFailWithMessage)\n      } catch (Throwable codeCatch_oldAssertFailWithMessage) {\n        // comment\n        /* another */\n      }\n    }\n  }\n\n  static final class CustomMoreAsserts {\n    static void assertFoobar() {}\n\n    static void fail(String param1, int param2) {}\n  }\n\n  private static void dummyRecover() {}\n\n  private static void dummyMethod() {}\n\n  public static void catchesAssertionError() {\n    try {\n      dummyMethod();\n      Assert.fail();\n      // BUG: Diagnostic contains: remove this line\n    } catch (AssertionError e) {\n    }\n  }\n\n  public static void hasMessage() {\n    try {\n      dummyMethod();\n      Assert.fail(\"foo\");\n      // BUG: Diagnostic contains: remove this line\n    } catch (AssertionError e) {\n    }\n  }\n\n  public static void catchesError_lastStatement() {\n    try {\n      dummyMethod();\n      Assert.fail();\n      // BUG: Diagnostic contains: remove this line\n    } catch (Error e) {\n    }\n  }\n\n  public static void catchesError_notLastStatement() {\n    try {\n      dummyMethod();\n      Assert.fail();\n      // BUG: Diagnostic contains: boolean threw = false;\n    } catch (Error e) {\n    }\n\n    assertTrue(true);\n  }\n\n  public static void catchesError_nested() {\n    for (Object o : Arrays.asList()) {\n      try {\n        dummyMethod();\n        Assert.fail();\n        // BUG: Diagnostic contains: boolean threw = false;\n      } catch (Error e) {\n      }\n    }\n  }\n\n  public static void catchesError_nestedNoBlock() {\n    for (Object o : Arrays.asList())\n      try {\n        dummyMethod();\n        Assert.fail();\n        // BUG: Diagnostic contains: boolean threw = false;\n      } catch (Error e) {\n      }\n  }\n}\\"
    },
    {
      "description": "negativeCases",
      "expected-problems": null,
      "expected-linenumbers": [
        224
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static org.junit.Assert.assertEquals;\n            import static org.junit.Assert.assertTrue;\n            import static org.junit.Assert.fail;\n\n            import junit.framework.TestCase;\n            import org.junit.Assert;\n\n            /**\n             * @author adamwos@google.com (Adam Wos)\n             */\n            public class TryFailThrowableNegativeCases {\n\n              public static void withoutFail() {\n                try {\n                  dummyMethod();\n                } catch (Throwable t) {\n                  dummyRecover();\n                }\n              }\n\n              public static void failOutsideTry() {\n                try {\n                  dummyMethod();\n                } catch (Throwable t) {\n                  dummyRecover();\n                }\n                Assert.fail();\n              }\n\n              public static void withoutCatch() {\n                try {\n                  dummyMethod();\n                  Assert.fail(\"\");\n                } finally {\n                  dummyRecover();\n                }\n              }\n\n              /** For now, this isn't supported. */\n              public static void multipleCatches() {\n                try {\n                  dummyMethod();\n                  Assert.fail(\"1234\");\n                } catch (Error e) {\n                  dummyRecover();\n                } catch (Throwable t) {\n                  dummyRecover();\n                }\n              }\n\n              public static void failNotLast() {\n                try {\n                  dummyMethod();\n                  Assert.fail(\"Not last :(\");\n                  dummyMethod();\n                } catch (Throwable t) {\n                  dummyRecover();\n                }\n              }\n\n              public static void catchException() {\n                try {\n                  dummyMethod();\n                  Assert.fail();\n                } catch (Exception t) {\n                  dummyRecover();\n                }\n              }\n\n              public static void catchException_failWithMessage() {\n                try {\n                  dummyMethod();\n                  Assert.fail(\"message\");\n                } catch (Exception t) {\n                  dummyRecover();\n                }\n              }\n\n              public static void codeCatch_failNoMessage() {\n                try {\n                  dummyMethod();\n                  Assert.fail();\n                } catch (Throwable t) {\n                  dummyRecover();\n                }\n              }\n\n              public static void codeCatch_failWithMessage() {\n                try {\n                  dummyMethod();\n                  Assert.fail(\"Faaail!\");\n                } catch (Throwable t444) {\n                  dummyRecover();\n                }\n              }\n\n              public static void codeCatch_staticImportedFail() {\n                try {\n                  dummyMethod();\n                  fail();\n                } catch (Throwable t444) {\n                  dummyRecover();\n                }\n              }\n\n              @SuppressWarnings(\"deprecation\") // deprecated in JUnit 4.11\n              public static void codeCatch_oldAssertFail() {\n                try {\n                  dummyMethod();\n                  junit.framework.Assert.fail();\n                } catch (Throwable codeCatch_oldAssertFail) {\n                  dummyRecover();\n                }\n              }\n\n              @SuppressWarnings(\"deprecation\") // deprecated in JUnit 4.11\n              public static void codeCatch_oldAssertFailWithMessage() {\n                try {\n                  dummyMethod();\n                  junit.framework.Assert.fail(\"message\");\n                } catch (Throwable codeCatch_oldAssertFailWithMessage) {\n                  dummyRecover();\n                }\n              }\n\n              public static void codeCatch_FQFail() {\n                try {\n                  dummyMethod();\n                  org.junit.Assert.fail(\"Faaail!\");\n                } catch (Throwable t444) {\n                  dummyRecover();\n                }\n              }\n\n              public static void codeCatch_assert() {\n                try {\n                  dummyMethod();\n                  assertEquals(1, 2);\n                } catch (Throwable t) {\n                  dummyMethod();\n                }\n              }\n\n              public static void commentCatch_assertNotLast() {\n                try {\n                  dummyMethod();\n                  assertTrue(\"foobar!\", true);\n                  dummyRecover();\n                } catch (Throwable t) {\n                  dummyMethod();\n                }\n              }\n\n              static final class SomeTest extends TestCase {\n                public void testInTestCase() {\n                  try {\n                    dummyMethod();\n                    fail(\"message\");\n                  } catch (Throwable codeCatch_oldAssertFailWithMessage) {\n                    dummyRecover();\n                  }\n                }\n              }\n\n              private static void dummyRecover() {}\n\n              private static void dummyMethod() {}\n            }\\"
    }
  ]
}