{
  "name": "FloatingPointAssertionWithinEpsilon",
  "language": "java",
  "description": "This fuzzy equality check is using a tolerance less than the gap to the next number. You may want a less restrictive tolerance, or to assert equality.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 243,
  "branches": 17,
  "apis": 5,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        36
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertEquals;\n\n            /**\n             * Positive test cases for FloatingPointAssertionWithinEpsilon check.\n             *\n             * @author ghm@google.com (Graeme Morgan)\n             */\n            final class FloatingPointAssertionWithinEpsilonPositiveCases {\n\n              private static final float TOLERANCE = 1e-10f;\n              private static final double TOLERANCE2 = 1e-20f;\n              private static final float VALUE = 1;\n\n              public void testFloat() {\n                // BUG: Diagnostic contains: 6.0e-08\n                assertThat(1.0f).isWithin(1e-20f).of(1.0f);\n                // BUG: Diagnostic contains: 6.0e-08\n                assertThat(1f).isWithin(TOLERANCE).of(VALUE);\n                // BUG: Diagnostic contains: 1.0e+03\n                assertThat(1e10f).isWithin(1).of(1e10f);\n\n                // BUG: Diagnostic contains: 1.2e-07\n                assertThat(1f).isNotWithin(1e-10f).of(2);\n\n                // BUG: Diagnostic contains: 6.0e-08\n                assertEquals(1f, 1f, TOLERANCE);\n                // BUG: Diagnostic contains: 6.0e-08\n                assertEquals(\"equal!\", 1f, 1f, TOLERANCE);\n              }\n\n              public void testDouble() {\n                // BUG: Diagnostic contains: 1.1e-16\n                assertThat(1.0).isWithin(1e-20).of(1.0);\n                // BUG: Diagnostic contains: 1.1e-16\n                assertThat(1.0).isWithin(TOLERANCE2).of(1.0f);\n                // BUG: Diagnostic contains: 1.1e-16\n                assertThat(1.0).isWithin(TOLERANCE2).of(1);\n                // BUG: Diagnostic contains: 1.6e+04\n                assertThat(1e20).isWithin(1).of(1e20);\n\n                // BUG: Diagnostic contains: 1.4e-17\n                assertThat(0.1).isNotWithin(TOLERANCE2).of(0.1f);\n\n                // BUG: Diagnostic contains: 1.1e-16\n                assertEquals(1.0, 1.0, TOLERANCE2);\n                // BUG: Diagnostic contains: 1.1e-16\n                assertEquals(\"equal!\", 1.0, 1.0, TOLERANCE2);\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        98
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertEquals;\n\n            /**\n             * Negative test cases for FloatingPointAssertionWithinEpsilon check.\n             *\n             * @author ghm@google.com (Graeme Morgan)\n             */\n            final class FloatingPointAssertionWithinEpsilonNegativeCases {\n\n              private static final float TOLERANCE = 1e-5f;\n              private static final double TOLERANCE2 = 1e-10f;\n              private static final float VALUE = 1;\n\n              public void testFloat() {\n                String test = Boolean.TRUE.toString();\n                assertThat(1.0f).isWithin(1e-5f).of(1.0f);\n                assertThat(1f).isWithin(TOLERANCE).of(VALUE);\n                assertThat(1f).isWithin(1).of(1);\n\n                assertThat(1f).isNotWithin(0).of(2f);\n\n                assertThat(1f).isNotWithin(.5f).of(2f);\n\n                assertEquals(1f, 1f, TOLERANCE);\n              }\n\n              public void testDouble() {\n                String test = Boolean.TRUE.toString();\n                assertThat(1.0).isWithin(1e-10).of(1.0);\n                assertThat(1.0).isWithin(TOLERANCE2).of(1f);\n                assertThat(1.0).isWithin(TOLERANCE2).of(1);\n\n                assertEquals(1.0, 1.0, TOLERANCE);\n              }\n\n              public void testZeroCases() {\n                assertThat(1.0).isWithin(0.0).of(1.0);\n                assertThat(1f).isWithin(0f).of(1f);\n                assertThat(1f).isWithin(0).of(1f);\n\n                assertEquals(1f, 1f, 0f);\n              }\n            }\\"
    },
    {
      "description": "fixes",
      "expected-problems": null,
      "expected-linenumbers": [
        154
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertEquals;\n\n            /**\n             * Positive test cases for FloatingPointAssertionWithinEpsilon check.\n             *\n             * @author ghm@google.com (Graeme Morgan)\n             */\n            final class FloatingPointAssertionWithinEpsilonPositiveCases {\n\n              private static final float TOLERANCE = 1e-10f;\n              private static final double TOLERANCE2 = 1e-20f;\n              private static final float VALUE = 1;\n\n              public void testFloat() {\n                // BUG: Diagnostic contains: 6.0e-08\n                assertThat(1.0f).isWithin(1e-20f).of(1.0f);\n                // BUG: Diagnostic contains: 6.0e-08\n                assertThat(1f).isWithin(TOLERANCE).of(VALUE);\n                // BUG: Diagnostic contains: 1.0e+03\n                assertThat(1e10f).isWithin(1).of(1e10f);\n\n                // BUG: Diagnostic contains: 1.2e-07\n                assertThat(1f).isNotWithin(1e-10f).of(2);\n\n                // BUG: Diagnostic contains: 6.0e-08\n                assertEquals(1f, 1f, TOLERANCE);\n                // BUG: Diagnostic contains: 6.0e-08\n                assertEquals(\"equal!\", 1f, 1f, TOLERANCE);\n              }\n\n              public void testDouble() {\n                // BUG: Diagnostic contains: 1.1e-16\n                assertThat(1.0).isWithin(1e-20).of(1.0);\n                // BUG: Diagnostic contains: 1.1e-16\n                assertThat(1.0).isWithin(TOLERANCE2).of(1.0f);\n                // BUG: Diagnostic contains: 1.1e-16\n                assertThat(1.0).isWithin(TOLERANCE2).of(1);\n                // BUG: Diagnostic contains: 1.6e+04\n                assertThat(1e20).isWithin(1).of(1e20);\n\n                // BUG: Diagnostic contains: 1.4e-17\n                assertThat(0.1).isNotWithin(TOLERANCE2).of(0.1f);\n\n                // BUG: Diagnostic contains: 1.1e-16\n                assertEquals(1.0, 1.0, TOLERANCE2);\n                // BUG: Diagnostic contains: 1.1e-16\n                assertEquals(\"equal!\", 1.0, 1.0, TOLERANCE2);\n              }\n            }\\\n            \n\n            package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertEquals;\n\n            /**\n             * Expected refactoring output for FloatingPointAssertionWithinEpsilon bugpattern.\n             *\n             * @author ghm@google.com (Graeme Morgan)\n             */\n            final class FloatingPointAssertionWithinEpsilonPositiveCases {\n\n              private static final float TOLERANCE = 1e-10f;\n              private static final double TOLERANCE2 = 1e-20f;\n              private static final float VALUE = 1;\n\n              public void testFloat() {\n                assertThat(1.0f).isEqualTo(1.0f);\n                assertThat(1f).isEqualTo(VALUE);\n                assertThat(1e10f).isEqualTo(1e10f);\n                assertThat(1f).isNotEqualTo(2f);\n                assertEquals(1f, 1f, 0);\n                assertEquals(\"equal!\", 1f, 1f, 0);\n              }\n\n              public void testDouble() {\n                assertThat(1.0).isEqualTo(1.0);\n                assertThat(1.0).isEqualTo(1.0);\n                assertThat(1.0).isEqualTo(1d);\n                assertThat(1e20).isEqualTo(1e20);\n                assertThat(0.1).isNotEqualTo((double) 0.1f);\n                assertEquals(1.0, 1.0, 0);\n                assertEquals(\"equal!\", 1.0, 1.0, 0);\n              }\n            }\\"
    }
  ]
}