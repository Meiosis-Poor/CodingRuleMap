{
  "name": "SelfEquals",
  "language": "java",
  "description": "Testing an object for equality with itself will always be true.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 123,
  "branches": 19,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        34
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n\n            import org.junit.Assert;\n\n            /**\n             * Positive test cases for {@link SelfEquals} check.\n             *\n             * @author eaftan@google.com (Eddie Aftandilian)\n             * @author bhagwani@google.com (Sumit Bhagwani)\n             */\n            public class SelfEqualsPositiveCase {\n              protected String simpleField;\n\n              public boolean test1(Object obj) {\n                if (obj == null || getClass() != obj.getClass()) {\n                  return false;\n                }\n                SelfEqualsPositiveCase other = (SelfEqualsPositiveCase) obj;\n                // BUG: Diagnostic contains: simpleField.equals(other.simpleField);\n                return simpleField.equals(simpleField);\n              }\n\n              public boolean test2(SelfEqualsPositiveCase obj) {\n                if (obj == null || getClass() != obj.getClass()) {\n                  return false;\n                }\n                SelfEqualsPositiveCase other = (SelfEqualsPositiveCase) obj;\n                // BUG: Diagnostic contains: simpleField.equals(other.simpleField);\n                return simpleField.equals(this.simpleField);\n              }\n\n              public boolean test3(SelfEqualsPositiveCase obj) {\n                if (obj == null || getClass() != obj.getClass()) {\n                  return false;\n                }\n                SelfEqualsPositiveCase other = (SelfEqualsPositiveCase) obj;\n                // BUG: Diagnostic contains: this.simpleField.equals(other.simpleField);\n                return this.simpleField.equals(simpleField);\n              }\n\n              public boolean test4(SelfEqualsPositiveCase obj) {\n                if (obj == null || getClass() != obj.getClass()) {\n                  return false;\n                }\n                SelfEqualsPositiveCase other = (SelfEqualsPositiveCase) obj;\n                // BUG: Diagnostic contains: this.simpleField.equals(other.simpleField);\n                return this.simpleField.equals(this.simpleField);\n              }\n\n              public boolean test5(SelfEqualsPositiveCase obj) {\n                if (obj == null || getClass() != obj.getClass()) {\n                  return false;\n                }\n                SelfEqualsPositiveCase other = (SelfEqualsPositiveCase) obj;\n                // BUG: Diagnostic contains:\n                return equals(this);\n              }\n\n              public void testAssertTrue(SelfEqualsPositiveCase obj) {\n                Assert.assertTrue(obj.equals(obj));\n              }\n\n              public void testAssertThat(SelfEqualsPositiveCase obj) {\n                assertThat(obj.equals(obj)).isTrue();\n              }\n\n              @Override\n              public boolean equals(Object obj) {\n                if (obj == null || getClass() != obj.getClass()) {\n                  return false;\n                }\n                SelfEqualsPositiveCase other = (SelfEqualsPositiveCase) obj;\n                return simpleField.equals(((SelfEqualsPositiveCase) other).simpleField);\n              }\n\n              private static class SubClass extends SelfEqualsPositiveCase {\n                @Override\n                public boolean equals(Object obj) {\n                  if (obj == null || getClass() != obj.getClass()) {\n                    return false;\n                  }\n                  SubClass other = (SubClass) obj;\n                  return simpleField.equals(((SubClass) other).simpleField);\n                }\n              }\n\n              public void testSub() {\n                SubClass sc = new SubClass();\n                // BUG: Diagnostic contains:\n                sc.equals(sc);\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        138
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n\n            /**\n             * Negative test cases for {@link SelfEquals} check.\n             *\n             * @author alexeagle@google.com (Alex Eagle)\n             * @author bhagwani@google.com (Sumit Bhagwani)\n             */\n            public class SelfEqualsNegativeCases {\n              private String field;\n\n              @Override\n              public int hashCode() {\n                return field != null ? field.hashCode() : 0;\n              }\n\n              @Override\n              public boolean equals(Object o) {\n                if (!(o instanceof SelfEqualsNegativeCases)) {\n                  return false;\n                }\n\n                SelfEqualsNegativeCases other = (SelfEqualsNegativeCases) o;\n                return field.equals(other.field);\n              }\n\n              public boolean test() {\n                return Boolean.TRUE.toString().equals(Boolean.FALSE.toString());\n              }\n\n              public void testAssertThatEq(SelfEqualsNegativeCases obj) {\n                assertThat(obj).isEqualTo(obj);\n              }\n\n              public void testAssertThatNeq(SelfEqualsNegativeCases obj) {\n                assertThat(obj).isNotEqualTo(obj);\n              }\n            }\\"
    },
    {
      "description": "positiveFix",
      "expected-problems": null,
      "expected-linenumbers": [
        188
      ],
      "code": "class Test {\n              <T> boolean f() {\n                T t = null;\n                int y = 0;\n                // BUG: Diagnostic contains:\n                return t.equals(t);\n              }\n            }"
    },
    {
      "description": "positiveCase_guava",
      "expected-problems": null,
      "expected-linenumbers": [
        206
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import com.google.common.base.Objects;\n\n            /**\n             * @author alexeagle@google.com (Alex Eagle)\n             */\n            public class SelfEqualsGuavaPositiveCase {\n              private String field = \"\";\n\n              @Override\n              public boolean equals(Object o) {\n                if (this == o) {\n                  return true;\n                }\n                if (o == null || getClass() != o.getClass()) {\n                  return false;\n                }\n                SelfEqualsGuavaPositiveCase other = (SelfEqualsGuavaPositiveCase) o;\n                boolean retVal;\n                // BUG: Diagnostic contains: Objects.equal(field, other.field)\n                retVal = Objects.equal(field, field);\n                // BUG: Diagnostic contains: Objects.equal(other.field, this.field)\n                retVal &= Objects.equal(field, this.field);\n                // BUG: Diagnostic contains: Objects.equal(this.field, other.field)\n                retVal &= Objects.equal(this.field, field);\n                // BUG: Diagnostic contains: Objects.equal(this.field, other.field)\n                retVal &= Objects.equal(this.field, this.field);\n\n                return retVal;\n              }\n\n              @Override\n              public int hashCode() {\n                return Objects.hashCode(field);\n              }\n\n              public static void test() {\n                ForTesting tester = new ForTesting();\n                // BUG: Diagnostic contains: Objects.equal(tester.testing.testing, tester.testing)\n                Objects.equal(tester.testing.testing, tester.testing.testing);\n              }\n\n              private static class ForTesting {\n                public ForTesting testing;\n                public String string;\n              }\n            }\\"
    },
    {
      "description": "negativeCase_guava",
      "expected-problems": null,
      "expected-linenumbers": [
        264
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import com.google.common.base.Objects;\n\n            /**\n             * @author bhagwani@google.com (Sumit Bhagwani)\n             */\n            public class SelfEqualsGuavaNegativeCases {\n              private String field;\n\n              @Override\n              public boolean equals(Object o) {\n                if (this == o) {\n                  return true;\n                }\n                if (o == null || getClass() != o.getClass()) {\n                  return false;\n                }\n\n                SelfEqualsGuavaNegativeCases other = (SelfEqualsGuavaNegativeCases) o;\n                return Objects.equal(field, other.field);\n              }\n\n              @Override\n              public int hashCode() {\n                return field != null ? field.hashCode() : 0;\n              }\n            }\\"
    },
    {
      "description": "enclosingStatement",
      "expected-problems": null,
      "expected-linenumbers": [
        302
      ],
      "code": "import com.google.common.base.Objects;\n\n            class Test {\n              Object a = new Object();\n              // BUG: Diagnostic contains:\n              boolean b = Objects.equal(a, a);\n            }"
    }
  ]
}