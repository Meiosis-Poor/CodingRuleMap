{
  "name": "IdentifierName",
  "language": "java",
  "description": "Methods and non-static variables should be named in lowerCamelCase",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 305,
  "branches": 32,
  "apis": 2,
  "test": [
    {
      "description": "nameWithUnderscores",
      "expected-problems": null,
      "expected-linenumbers": [
        35
      ],
      "code": "class Test {\n              private int foo_bar;\n\n              int get() {\n                return foo_bar;\n              }\n            }\n            \n\n            class Test {\n              private int fooBar;\n\n              int get() {\n                return fooBar;\n              }\n            }"
    },
    {
      "description": "nameWithUnderscores_findingEmphasisesInitialism",
      "expected-problems": null,
      "expected-linenumbers": [
        63
      ],
      "code": "class Test {\n              // BUG: Diagnostic contains: acronyms\n              private int misnamedRPCClient;\n\n              int get() {\n                return misnamedRPCClient;\n              }\n            }"
    },
    {
      "description": "staticFields",
      "expected-problems": null,
      "expected-linenumbers": [
        81
      ],
      "code": "class Test {\n              private static int Foo;\n              private static int FooBar;\n              private static int Bar_Foo;\n            }\n            \n\n            class Test {\n              private static int foo;\n              private static int fooBar;\n              private static int barFoo;\n            }"
    },
    {
      "description": "nameWithUnderscores_mixedCasing",
      "expected-problems": null,
      "expected-linenumbers": [
        105
      ],
      "code": "class Test {\n              private int foo_barBaz;\n\n              int get() {\n                return foo_barBaz;\n              }\n            }\n            \n\n            class Test {\n              private int fooBarBaz;\n\n              int get() {\n                return fooBarBaz;\n              }\n            }"
    },
    {
      "description": "localVariable_renamed",
      "expected-problems": null,
      "expected-linenumbers": [
        133
      ],
      "code": "class Test {\n              int get() {\n                int foo_bar = 1;\n                return foo_bar;\n              }\n            }\n            \n\n            class Test {\n              int get() {\n                int fooBar = 1;\n                return fooBar;\n              }\n            }"
    },
    {
      "description": "localClass_renamed",
      "expected-problems": null,
      "expected-linenumbers": [
        159
      ],
      "code": "class Test {\n              public void get() {\n                class MisnamedURLVisitor {}\n              }\n            }\n            \n\n            class Test {\n              public void get() {\n                class MisnamedUrlVisitor {}\n              }\n            }"
    },
    {
      "description": "resourceVariable_renamed",
      "expected-problems": null,
      "expected-linenumbers": [
        183
      ],
      "code": "import java.io.ByteArrayOutputStream;\n            import java.io.IOException;\n\n            class Test {\n              void run() throws IOException {\n                try (var output_stream = new ByteArrayOutputStream()) {}\n              }\n            }\n            \n\n            import java.io.ByteArrayOutputStream;\n            import java.io.IOException;\n\n            class Test {\n              void run() throws IOException {\n                try (var outputStream = new ByteArrayOutputStream()) {}\n              }\n            }"
    },
    {
      "description": "exceptionParameter_renamed",
      "expected-problems": null,
      "expected-linenumbers": [
        213
      ],
      "code": "class Test {\n              void run() {\n                try {\n                  run();\n                } catch (StackOverflowError stack_overflow) {\n                }\n              }\n            }\n            \n\n            class Test {\n              void run() {\n                try {\n                  run();\n                } catch (StackOverflowError stackOverflow) {\n                }\n              }\n            }"
    },
    {
      "description": "nameWithUnderscores_public_notRenamed",
      "expected-problems": null,
      "expected-linenumbers": [
        243
      ],
      "code": "class Test {\n              public int foo_bar;\n\n              int get() {\n                return foo_bar;\n              }\n            }"
    },
    {
      "description": "nameWithLeadingUppercase",
      "expected-problems": null,
      "expected-linenumbers": [
        261
      ],
      "code": "class Test {\n              // BUG: Diagnostic contains: foo\n              private int Foo;\n\n              int get() {\n                return Foo;\n              }\n            }"
    },
    {
      "description": "upperCamelCaseAndNotStatic_noFinding",
      "expected-problems": null,
      "expected-linenumbers": [
        279
      ],
      "code": "class Test {\n              private int FOO;\n            }"
    },
    {
      "description": "upperCamelCaseAndStatic_noFinding",
      "expected-problems": null,
      "expected-linenumbers": [
        292
      ],
      "code": "class Test {\n              private static final int FOO_BAR = 1;\n            }"
    },
    {
      "description": "methodNamedParametersFor_noFinding",
      "expected-problems": null,
      "expected-linenumbers": [
        305
      ],
      "code": "class Test {\n              public void parametersForMyFavouriteTest_whichHasUnderscores() {}\n            }"
    },
    {
      "description": "methodAnnotatedWithAnnotationContainingTest_exempted",
      "expected-problems": null,
      "expected-linenumbers": [
        318
      ],
      "code": "class Test {\n              @IAmATest\n              public void possibly_a_test_name() {}\n\n              private @interface IAmATest {}\n            }"
    },
    {
      "description": "ignoreTestMissingTestAnnotation_exempted",
      "expected-problems": null,
      "expected-linenumbers": [
        334
      ],
      "code": "import org.junit.Ignore;\n\n            class Test {\n              @Ignore\n              public void possibly_a_test_name() {}\n            }"
    },
    {
      "description": "superMethodAnnotatedWithAnnotationContainingTest_exempted",
      "expected-problems": null,
      "expected-linenumbers": [
        350
      ],
      "code": "class Test {\n              @IAmATest\n              public void possibly_a_test_name() {}\n\n              private @interface IAmATest {}\n            }\n            \n\n            class Test2 extends Test {\n              @Override\n              public void possibly_a_test_name() {}\n            }"
    },
    {
      "description": "nativeMethod_ignored",
      "expected-problems": null,
      "expected-linenumbers": [
        374
      ],
      "code": "class Test {\n              public native void possibly_a_test_name();\n            }"
    },
    {
      "description": "methodAnnotatedWithExemptedMethod_noMatch",
      "expected-problems": null,
      "expected-linenumbers": [
        387
      ],
      "code": "package com.pholser.junit.quickcheck;\n\n            public @interface Property {}\n            \n\n            class Test {\n              @com.pholser.junit.quickcheck.Property\n              public void possibly_a_test_name() {}\n            }"
    },
    {
      "description": "methodWithUnderscores_overriddenFromSupertype_noFinding",
      "expected-problems": null,
      "expected-linenumbers": [
        408
      ],
      "code": "class Test extends Base {\n              @Override\n              public int get_some() {\n                return 0;\n              }\n            }"
    },
    {
      "description": "methodWithUnderscores_notOverriddenFromGeneratedSupertype_bug",
      "expected-problems": null,
      "expected-linenumbers": [
        430
      ],
      "code": "import javax.annotation.Generated;\n\n            @Generated(\"Hands\")\n            abstract class Base {}\n            \n\n            class Test extends Base {\n              // BUG: Diagnostic contains: get_more\n              public int get_more() {\n                return 0;\n              }\n            }"
    },
    {
      "description": "nonConformantOverride_nameMatchesSuper_ignored",
      "expected-problems": null,
      "expected-linenumbers": [
        454
      ],
      "code": "interface Base {\n              // BUG: Diagnostic contains: a_b\n              void foo(int a_b);\n            }\n            \n\n            class Test implements Base {\n              public void foo(int a_b) {}\n            }"
    },
    {
      "description": "nonConformantOverride_nameDoesNotMatchSuper_flagged",
      "expected-problems": null,
      "expected-linenumbers": [
        475
      ],
      "code": "interface Base {\n              // BUG: Diagnostic contains:\n              void foo(int a_b);\n            }\n            \n\n            class Test implements Base {\n              // BUG: Diagnostic contains:\n              public void foo(int a_b_c) {}\n            }"
    },
    {
      "description": "initialismsInMethodNames_partOfCamelCase",
      "expected-problems": null,
      "expected-linenumbers": [
        497
      ],
      "code": "interface Test {\n              // BUG: Diagnostic contains: getRpcPolicy\n              int getRPCPolicy();\n\n              // BUG: Diagnostic contains: getRpc\n              int getRPC();\n            }"
    },
    {
      "description": "initialismsInVariableNames_partOfCamelCase",
      "expected-problems": null,
      "expected-linenumbers": [
        514
      ],
      "code": "class Test {\n              // BUG: Diagnostic contains: getRpcPolicy\n              int getRPCPolicy;\n              // BUG: Diagnostic contains: getRpc\n              int getRPC;\n            }"
    },
    {
      "description": "initialismsInVariableNames_magicNamesExempt",
      "expected-problems": null,
      "expected-linenumbers": [
        530
      ],
      "code": "class Test {\n              private static final long serialVersionUID = 0;\n            }"
    },
    {
      "description": "lambdaExpressionParameterInsideOverridingMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        543
      ],
      "code": "import java.util.function.Function;\n\n            class Test {\n              @Override\n              public String toString() {\n                // BUG: Diagnostic contains: fooBar\n                Function<String, String> f = foo_bar -> foo_bar;\n                return f.apply(\"foo\");\n              }\n            }"
    },
    {
      "description": "methodReference",
      "expected-problems": null,
      "expected-linenumbers": [
        563
      ],
      "code": "class Test {\n              private void foo_bar() {}\n\n              private Runnable r = this::foo_bar;\n            }\n            \n\n            class Test {\n              private void fooBar() {}\n\n              private Runnable r = this::fooBar;\n            }"
    },
    {
      "description": "methodNameWithMatchingReturnType",
      "expected-problems": null,
      "expected-linenumbers": [
        587
      ],
      "code": "class Test {\n              private Object Object() {\n                return null;\n              }\n\n              void call() {\n                Object();\n              }\n            }\n            \n\n            class Test {\n              private Object object() {\n                return null;\n              }\n\n              void call() {\n                object();\n              }\n            }"
    },
    {
      "description": "className_badInitialism",
      "expected-problems": null,
      "expected-linenumbers": [
        619
      ],
      "code": ""
    },
    {
      "description": "className_badInitialism_allowed",
      "expected-problems": null,
      "expected-linenumbers": [
        630
      ],
      "code": ""
    },
    {
      "description": "className_lowerCamelCase",
      "expected-problems": null,
      "expected-linenumbers": [
        641
      ],
      "code": ""
    },
    {
      "description": "className_underscore",
      "expected-problems": null,
      "expected-linenumbers": [
        652
      ],
      "code": ""
    },
    {
      "description": "enumName",
      "expected-problems": null,
      "expected-linenumbers": [
        663
      ],
      "code": ""
    },
    {
      "description": "unnamedVariables",
      "expected-problems": null,
      "expected-linenumbers": [
        676
      ],
      "code": "import java.util.Scanner;\n            import java.util.function.Function;\n\n            class Test {\n              void unnamed() {\n                try (var _ = new Scanner(\"discarded\")) {\n                  Function<String, String> f = _ -> \"bar\";\n                  String _ = f.apply(\"foo\");\n                } catch (Exception _) {\n                }\n              }\n            }"
    },
    {
      "description": "bindingVariables",
      "expected-problems": null,
      "expected-linenumbers": [
        701
      ],
      "code": "class Test {\n              void test(Object o) {\n                // BUG: Diagnostic contains: badName\n                if (o instanceof Test BadName) {}\n              }\n            }"
    },
    {
      "description": "versionNumbers",
      "expected-problems": null,
      "expected-linenumbers": [
        717
      ],
      "code": "class Test {\n              private static final int GUAVA33_4_6 = 42;\n\n              void test() {\n                int murmur3_32;\n                // BUG: Diagnostic contains: murmur332\n                int murmur3__32;\n                // BUG: Diagnostic contains: murmur3D\n                int murmur3_d;\n                // BUG: Diagnostic contains: murmur332\n                int murmur_3_32;\n                // BUG: Diagnostic contains: Murmur332\n                int _murmur3_32;\n\n                int addressV6_66_0;\n                // BUG: Diagnostic contains: address66255\n                int address_66_255;\n                // BUG: Diagnostic contains: addressV666Ff\n                int addressV6_66_ff;\n                // BUG: Diagnostic contains: addressV6Ffffff\n                int addressV6_ffffff;\n              }\n\n              class Murmur3_32 {}\n\n              // BUG: Diagnostic contains: Murmur332\n              class Murmur3__32 {}\n\n              // BUG: Diagnostic contains: Murmur332\n              class Murmur3_32_ {}\n\n              // BUG: Diagnostic contains: Murmur3d\n              class Murmur3_d {}\n\n              // BUG: Diagnostic contains: Murmur32\n              class Murmur_32 {}\n\n              // BUG: Diagnostic contains: Murmur332\n              class _Murmur3_32 {}\n            }"
    },
    {
      "description": "versionNumbersInCode",
      "expected-problems": null,
      "expected-linenumbers": [
        767
      ],
      "code": "class Test {\n              private static final int GUAVA33_4_6 = 42;\n\n              void murmur3_32() {\n                int murmur3_64 = 42;\n              }\n\n              class Murmur3_32 {}\n            }"
    }
  ]
}