{
  "name": "InstanceOfAndCastMatchWrongType",
  "language": "java",
  "description": "Casting inside an if block should be plausibly consistent with the instanceof type",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 185,
  "branches": 27,
  "apis": 4,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        32
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * Created by sulku and mariasam on 6/6/17.\n             *\n             * @author mariasam (Maria Sam)\n             * @author sulku (Marsela Sulku)\n             */\n            public class InstanceOfAndCastMatchWrongTypePositiveCases {\n\n              private static void basicIllegalCast(Object foo2) {\n                if (foo2 instanceof SuperClass) {\n                  // BUG: Diagnostic contains: Casting inside\n                  String str = ((String) foo2).toString();\n                }\n              }\n\n              private static void basicIllegalCastJavaClass(Object foo2) {\n                if (foo2 instanceof String) {\n                  // BUG: Diagnostic contains: Casting inside\n                  double val = ((Integer) foo2).doubleValue();\n                }\n              }\n\n              private static void andsInIf(Object foo2) {\n                if (foo2 instanceof String && 7 == 7) {\n                  // BUG: Diagnostic contains: Casting inside\n                  double val = ((Integer) foo2).doubleValue();\n                }\n              }\n\n              private static void andsInIfInstanceOfLast(Object foo2) {\n                if (7 == 7 && foo2 instanceof String) {\n                  // BUG: Diagnostic contains: Casting inside\n                  double val = ((Integer) foo2).doubleValue();\n                }\n              }\n\n              private static void andsInIfInstanceOfMiddle(Object foo2) {\n                if (7 == 7 && foo2 instanceof String && 8 == 8) {\n                  // BUG: Diagnostic contains: Casting inside\n                  double val = ((Integer) foo2).doubleValue();\n                }\n              }\n\n              private static void castingInIfWithElse(Object foo2) {\n                if (foo2 instanceof String) {\n                  // BUG: Diagnostic contains: Casting inside\n                  String str = ((Integer) foo2).toString();\n                } else {\n                  String str = \"\";\n                }\n              }\n\n              private static void castMultipleInIfAndElse(Object foo2, Object foo3) {\n                if (foo2 instanceof String) {\n                  String str = ((Integer) foo3).toString();\n                  // BUG: Diagnostic contains: Casting inside\n                  String str2 = ((Integer) foo2).toString();\n                } else {\n                  String str = ((Integer) foo3).toString();\n                  String str2 = \"\";\n                }\n              }\n\n              private static void multipleAndsInIf(Object foo2) {\n                // BUG: Diagnostic contains: Casting inside\n                if (7 == 7 && (foo2 instanceof SuperClass) && (((String) foo2).equals(\"\"))) {\n                  String str = \"\";\n                }\n              }\n\n              private static void castOneObjectWithMultipleObjectsInIf(Object foo2, Object foo3) {\n                if (7 == 7 && foo3 instanceof String && foo2 instanceof String) {\n                  // BUG: Diagnostic contains: Casting inside\n                  String str = ((Integer) foo2).toString();\n                }\n              }\n\n              private static void aboveTestButDifferentOrder(Object foo2, Object foo3) {\n                if (7 == 7 && foo2 instanceof String && foo3 instanceof String) {\n                  // BUG: Diagnostic contains: Casting inside\n                  String str = ((Integer) foo2).toString();\n                }\n              }\n\n              private static void nestedIf(Object foo2) {\n                if (foo2 instanceof String) {\n                  if (7 == 7) {\n                    // BUG: Diagnostic contains: Casting inside\n                    String str = ((Integer) foo2).toString();\n                  }\n                }\n              }\n\n              private static void nestedIfWithElse(Object foo2) {\n                if (foo2 instanceof String) {\n                  if (7 == 7) {\n                    String str = \"\";\n                  } else {\n                    // BUG: Diagnostic contains: Casting inside\n                    String str = ((Integer) foo2).toString();\n                  }\n                }\n              }\n\n              private static void assignmentInBlockDiffVariable(Object foo2) {\n                String foo1;\n                if (foo2 instanceof SuperClass) {\n                  foo1 = \"\";\n                  // BUG: Diagnostic contains: Casting inside\n                  String str = ((Integer) foo2).toString();\n                }\n              }\n\n              private static void assignmentInBlock(Object foo2) {\n                if (foo2 instanceof SuperClass) {\n                  // BUG: Diagnostic contains: Casting inside\n                  String str = ((Integer) foo2).toString();\n                  foo2 = \"\";\n                }\n              }\n\n              private static void assignmentInBlockTwice(Object foo2) {\n                Object foo1 = null;\n                if (foo2 instanceof SuperClass) {\n                  foo1 = \"\";\n                  // BUG: Diagnostic contains: Casting inside\n                  String str = ((Integer) foo2).toString();\n                  foo2 = \"\";\n                }\n              }\n\n              private static void testSameClass(Object foo) {\n                if (foo instanceof String) {\n                  InstanceOfAndCastMatchWrongTypePositiveCases other =\n                      // BUG: Diagnostic contains: Casting inside\n                      (InstanceOfAndCastMatchWrongTypePositiveCases) foo;\n                }\n              }\n\n              private static void testElseIf(Object foo) {\n                if (foo instanceof String) {\n                  String str = (String) foo;\n                } else if (foo instanceof String) {\n                  // BUG: Diagnostic contains: Casting inside\n                  Integer i = (Integer) foo;\n                } else {\n                  foo = (SuperClass) foo;\n                }\n              }\n\n              public static String testCall() {\n                return \"\";\n              }\n            }\n\n            class SuperClass {}\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        200
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport java.io.FilterWriter;\nimport java.io.StringWriter;\nimport java.io.Writer;\n\n/**\n * Created by sulku and mariasam on 6/6/17.\n *\n * @author mariasam (Maria Sam)\n * @author sulku (Marsela Sulku)\n */\npublic class InstanceOfAndCastMatchWrongTypeNegativeCases {\n\n  public static void notCustomClass(Object objSubClass) {\n    if (!(objSubClass instanceof SuperNegativeClass)) {\n      DisjointClass str = (DisjointClass) objSubClass;\n    }\n  }\n\n  public static void hi(String foo) {\n    if (foo instanceof String) {\n      ((String) foo).charAt(0);\n    }\n  }\n\n  public static void castToSameClass(String foo) {\n    if (foo instanceof String) {\n      ((String) foo).charAt(0);\n    }\n  }\n\n  public static void castToSameClassWithExtraLines(String foo) {\n    if (foo instanceof String) {\n      String somethingBefore = \"hello\";\n      ((String) foo).charAt(0);\n      String somethingAfter = \"goodbye\";\n    }\n  }\n\n  public static void castAMethod() {\n    if (testCall() instanceof String) {\n      String bar = (String) testCall();\n    }\n  }\n\n  public static void castToSuperType(String foo) {\n    if (foo instanceof String) {\n      Object bar = ((Object) foo).toString();\n    }\n  }\n\n  public static void castMethodToSuperType(String foo) {\n    if (testCall() instanceof String) {\n      Object bar = (Object) testCall();\n    }\n  }\n\n  public static void castToCustomSuperType() {\n    SuperNegativeClass superClass = new SuperNegativeClass();\n    SubNegativeClass subClass = new SubNegativeClass();\n\n    if (subClass instanceof SubNegativeClass) {\n      String str = ((SuperNegativeClass) subClass).toString();\n    }\n  }\n\n  public static void castToSubtype(String foo) {\n    if (foo instanceof Object) {\n      String somethingBefore = \"hello\";\n      String bar = ((String) foo).toString();\n      String somethingAfter = \"goodbye\";\n    }\n  }\n\n  public static void nestedIfStatements(String foo) {\n    if (7 == 7) {\n      if (foo instanceof Object) {\n        String bar = ((String) foo).toString();\n      }\n    }\n  }\n\n  public static void castMethodToSubType() {\n    if (testCall() instanceof Object) {\n      String bar = ((String) testCall()).toString();\n    }\n  }\n\n  public static void castAMethodInElse() {\n    if (testCall() instanceof Object) {\n      String str = \"\";\n    } else {\n      String bar = ((String) testCall()).toString();\n    }\n  }\n\n  public static void nestedIfOutside() {\n    SubNegativeClass subClass = new SubNegativeClass();\n    if (subClass instanceof SuperNegativeClass) {\n      if (7 == 7) {\n        String bar = ((SuperNegativeClass) subClass).toString();\n      }\n    }\n  }\n\n  public static void nestedIfElseInIf() {\n    SubNegativeClass subClass = new SubNegativeClass();\n    if (subClass instanceof SuperNegativeClass) {\n      if (7 == 7) {\n        String bar = ((SuperNegativeClass) subClass).toString();\n      } else {\n        String str = \"\";\n      }\n    }\n  }\n\n  public static void elseIfMethod() {\n    if (testCall() instanceof Object) {\n      String str = \"\";\n    } else if (7 == 7) {\n      String bar = ((String) testCall()).toString();\n    } else {\n      String str = \"\";\n    }\n  }\n\n  public static void nestedSubClasses(Object objSubClass) {\n    if (objSubClass instanceof SuperNegativeClass) {\n      if (objSubClass instanceof DisjointClass) {\n        DisjointClass disClass = (DisjointClass) objSubClass;\n      }\n    }\n  }\n\n  public static void switchCaseStatement(Object objSubClass) {\n    Integer datatype = 0;\n    if (objSubClass instanceof SuperNegativeClass) {\n      String str = \"\";\n    } else {\n      switch (datatype) {\n        case 0:\n          DisjointClass str = (DisjointClass) objSubClass;\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  public static void nestedAnd(String foo, Object foo3) {\n    if (foo instanceof String) {\n      if (foo3 instanceof SuperNegativeClass && ((SuperNegativeClass) foo3).toString().equals(\"\")) {\n        String str = foo3.toString();\n      }\n    }\n  }\n\n  private static void multipleElseIf(Object foo3) {\n    if (foo3 instanceof String) {\n      String str = \"\";\n    } else if (7 == 7 && foo3 instanceof SuperNegativeClass) {\n      ((SuperNegativeClass) foo3).toString();\n    } else if (8 == 8) {\n      DisjointClass dis = (DisjointClass) foo3;\n    }\n  }\n\n  private static void orInCondition(Object foo3) {\n    if (foo3 instanceof String || 7 == 7) {\n      String str = ((DisjointClass) foo3).toString();\n    }\n  }\n\n  private static void castInElse(Object foo3) {\n    if (foo3 instanceof String) {\n      String str = \"\";\n    } else {\n      String str = ((DisjointClass) foo3).toString();\n    }\n  }\n\n  private static void multipleObjectCasts(Object foo2, Object foo3) {\n    if (foo3 instanceof String) {\n      String str = ((DisjointClass) foo2).toString();\n    } else {\n      String str = ((DisjointClass) foo3).toString();\n    }\n  }\n\n  private static void orsAndAnds(Object foo2) {\n    if (7 == 7 && (foo2 instanceof DisjointClass) && (!((DisjointClass) foo2).equals(\"\"))) {\n      String str = \"\";\n    }\n  }\n\n  private static void assignmentInBlock(Object foo2) {\n    if (foo2 instanceof SuperNegativeClass) {\n      foo2 = \"\";\n      String str = ((Integer) foo2).toString();\n    }\n  }\n\n  private static void assignmentInBlockElse(Object foo2) {\n    String foo1;\n    if (foo2 instanceof SuperNegativeClass) {\n      String str = \"\";\n    } else {\n      foo1 = \"\";\n      String str = ((Integer) foo2).toString();\n    }\n  }\n\n  private static void assignmentInBlockElseIf(Object foo2) {\n    Object foo1 = null;\n    if (foo2 instanceof SuperNegativeClass) {\n      String str = \"\";\n    } else if (foo2 == foo1) {\n      foo1 = \"\";\n      String str = ((Integer) foo2).toString();\n    }\n  }\n\n  private static void innerClassDecl(Object[] list) {\n    for (Object c : list) {\n      if (c instanceof String) {\n        try {\n          Writer fw =\n              new FilterWriter(new StringWriter()) {\n                public void write(int c) {\n                  char a = (char) c;\n                }\n              };\n        } catch (Exception e) {\n          String str = \"\";\n        }\n      }\n    }\n  }\n\n  private static void randomCode(Object foo) {\n    if (7 == 7) {\n      System.out.println(\"test\");\n      foo = (Integer) foo;\n    }\n  }\n\n  private static void twoAssignments(Object foo, Object foo2) {\n    if (foo instanceof String) {\n      foo2 = \"\";\n      String str = (String) foo;\n      foo = \"\";\n    }\n  }\n\n  public static String testCall() {\n    return \"\";\n  }\n\n  public static Object testCallReturnsObject() {\n    return new Object();\n  }\n\n  static class SuperNegativeClass {}\n\n  static class SubNegativeClass extends SuperNegativeClass {}\n\n  static class DisjointClass {}\n}\\"
    },
    {
      "description": "regressionTestIssue651",
      "expected-problems": null,
      "expected-linenumbers": [
        479
      ],
      "code": "class Foo {\n              void foo() {\n                Object[] values = null;\n                if (values[0] instanceof Integer) {\n                  int x = (Integer) values[0];\n                } else if (values[0] instanceof Long) {\n                  long y = (Long) values[0];\n                }\n              }\n            }"
    },
    {
      "description": "handlesArrayAccessOnIdentifier",
      "expected-problems": null,
      "expected-linenumbers": [
        499
      ],
      "code": ""
    },
    {
      "description": "doesNotHandleArrayAccessOnNonIdentifiers",
      "expected-problems": null,
      "expected-linenumbers": [
        518
      ],
      "code": "class Foo {\n              private Object[] getArray() {\n                return new Object[0];\n              }\n\n              void doIt() {\n                if (getArray()[0] instanceof Integer) {\n                  String s0 = (String) getArray()[0];\n                }\n              }\n            }"
    }
  ]
}