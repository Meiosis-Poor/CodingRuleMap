{
  "name": "AutoValueBoxedValues",
  "language": "java",
  "description": "AutoValue instances should not usually contain boxed types that are not Nullable. We recommend removing the unnecessary boxing.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 336,
  "branches": 38,
  "apis": 2,
  "test": [
    {
      "description": "unnecessaryBoxedTypes_refactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        46
      ],
      "code": ""
    },
    {
      "description": "unnecessaryBoxedTypes_refactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        46
      ],
      "code": ""
    },
    {
      "description": "nullableBoxedTypes",
      "expected-problems": null,
      "expected-linenumbers": [
        124
      ],
      "code": ""
    },
    {
      "description": "genericNullableBoxedTypes",
      "expected-problems": null,
      "expected-linenumbers": [
        169
      ],
      "code": ""
    },
    {
      "description": "primitiveTypes",
      "expected-problems": null,
      "expected-linenumbers": [
        214
      ],
      "code": ""
    },
    {
      "description": "nonBoxableTypes",
      "expected-problems": null,
      "expected-linenumbers": [
        256
      ],
      "code": ""
    },
    {
      "description": "mixedTypes_refactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        284
      ],
      "code": ""
    },
    {
      "description": "unnecessaryBoxedTypes_suppressWarningsForClass",
      "expected-problems": null,
      "expected-linenumbers": [
        348
      ],
      "code": ""
    },
    {
      "description": "unnecessaryBoxedTypes_suppressWarnings",
      "expected-problems": null,
      "expected-linenumbers": [
        376
      ],
      "code": ""
    },
    {
      "description": "unnecessaryBoxedTypes_overrides",
      "expected-problems": null,
      "expected-linenumbers": [
        428
      ],
      "code": ""
    },
    {
      "description": "nullableGettersWithNonNullableSetters_noChange",
      "expected-problems": null,
      "expected-linenumbers": [
        486
      ],
      "code": "import com.google.auto.value.AutoValue;\n            import javax.annotation.Nullable;\n\n            @AutoValue\n            abstract class Test {\n              public abstract @Nullable Long longId();\n\n              public abstract @Nullable Integer intId();\n\n              @AutoValue.Builder\n              abstract static class Builder {\n                abstract Builder setLongId(Long value);\n\n                abstract Builder setIntId(Integer value);\n\n                abstract Test build();\n              }\n            }"
    },
    {
      "description": "nonTrivialFactoryMethods_refectoring",
      "expected-problems": null,
      "expected-linenumbers": [
        517
      ],
      "code": "package test;\n\n            import com.google.auto.value.AutoValue;\n\n            @AutoValue\n            abstract class Test {\n              abstract int foo();\n\n              abstract Long bar();\n\n              static Test createTrivial(int foo, Long bar) {\n                return new AutoValue_Test(foo, bar);\n              }\n\n              static String notFactoryMethod(int foo, Long bar) {\n                return String.format(\"foo: %d, bar: %d\", foo, bar);\n              }\n\n              static Test createWrongOrder(Long bar, int foo) {\n                return new AutoValue_Test(foo, bar);\n              }\n\n              static Test createLessArguments(int foo) {\n                return new AutoValue_Test(foo, 0L);\n              }\n\n              static Test createMoreArguments(int foo, Long bar, Long baz) {\n                return new AutoValue_Test(foo, bar + baz);\n              }\n\n              static Test createWithValidation(int foo, Long bar) {\n                if (bar == null) {\n                  throw new AssertionError();\n                }\n                return new AutoValue_Test(foo, bar);\n              }\n\n              static Test createModifyArgs(int foo, Long bar) {\n                return new AutoValue_Test(foo + 1, bar);\n              }\n\n              static Test createModifyArgsIfNull(int foo, Long bar) {\n                return new AutoValue_Test(foo, bar == null ? 0L : bar);\n              }\n            }\n            \n\n            package test;\n\n            import com.google.auto.value.AutoValue;\n\n            @AutoValue\n            abstract class Test {\n              abstract int foo();\n\n              abstract long bar();\n\n              static Test createTrivial(int foo, long bar) {\n                return new AutoValue_Test(foo, bar);\n              }\n\n              static String notFactoryMethod(int foo, Long bar) {\n                return String.format(\"foo: %d, bar: %d\", foo, bar);\n              }\n\n              static Test createWrongOrder(Long bar, int foo) {\n                return new AutoValue_Test(foo, bar);\n              }\n\n              static Test createLessArguments(int foo) {\n                return new AutoValue_Test(foo, 0L);\n              }\n\n              static Test createMoreArguments(int foo, Long bar, Long baz) {\n                return new AutoValue_Test(foo, bar + baz);\n              }\n\n              static Test createWithValidation(int foo, Long bar) {\n                if (bar == null) {\n                  throw new AssertionError();\n                }\n                return new AutoValue_Test(foo, bar);\n              }\n\n              static Test createModifyArgs(int foo, Long bar) {\n                return new AutoValue_Test(foo + 1, bar);\n              }\n\n              static Test createModifyArgsIfNull(int foo, Long bar) {\n                return new AutoValue_Test(foo, bar == null ? 0L : bar);\n              }\n            }"
    },
    {
      "description": "settersWithoutSetPrefix",
      "expected-problems": null,
      "expected-linenumbers": [
        624
      ],
      "code": "import com.google.auto.value.AutoValue;\n\n            @AutoValue\n            abstract class Test {\n              public abstract Long longId();\n\n              public abstract Boolean booleanId();\n\n              @AutoValue.Builder\n              abstract static class Builder {\n                abstract Builder longId(Long value);\n\n                abstract Builder booleanId(Boolean value);\n\n                abstract Test build();\n              }\n            }\n            \n\n            import com.google.auto.value.AutoValue;\n\n            @AutoValue\n            abstract class Test {\n              public abstract long longId();\n\n              public abstract boolean booleanId();\n\n              @AutoValue.Builder\n              abstract static class Builder {\n                abstract Builder longId(long value);\n\n                abstract Builder booleanId(boolean value);\n\n                abstract Test build();\n              }\n            }"
    },
    {
      "description": "allGettersWithPrefix_ignoreToBuilder",
      "expected-problems": null,
      "expected-linenumbers": [
        675
      ],
      "code": "import com.google.auto.value.AutoValue;\n\n            @AutoValue\n            abstract class Test {\n              public abstract Long getLongId();\n\n              public abstract boolean isBooleanId();\n\n              public abstract Builder toBuilder();\n\n              @AutoValue.Builder\n              abstract static class Builder {\n                abstract Builder setLongId(Long value);\n\n                abstract Builder setBooleanId(boolean value);\n\n                abstract Test build();\n              }\n            }\n            \n\n            import com.google.auto.value.AutoValue;\n\n            @AutoValue\n            abstract class Test {\n              public abstract long getLongId();\n\n              public abstract boolean isBooleanId();\n\n              public abstract Builder toBuilder();\n\n              @AutoValue.Builder\n              abstract static class Builder {\n                abstract Builder setLongId(long value);\n\n                abstract Builder setBooleanId(boolean value);\n\n                abstract Test build();\n              }\n            }"
    },
    {
      "description": "getterInBuilderClass",
      "expected-problems": null,
      "expected-linenumbers": [
        730
      ],
      "code": "import com.google.auto.value.AutoValue;\n\n            @AutoValue\n            abstract class Test {\n              public abstract Long longId();\n\n              public abstract Boolean booleanId();\n\n              public abstract Builder toBuilder();\n\n              @AutoValue.Builder\n              abstract static class Builder {\n                abstract Builder longId(Long value);\n\n                abstract Builder booleanId(Boolean value);\n\n                abstract Boolean booleanId();\n\n                abstract Test build();\n              }\n            }\n            \n\n            import com.google.auto.value.AutoValue;\n\n            @AutoValue\n            abstract class Test {\n              public abstract long longId();\n\n              public abstract boolean booleanId();\n\n              public abstract Builder toBuilder();\n\n              @AutoValue.Builder\n              abstract static class Builder {\n                abstract Builder longId(long value);\n\n                abstract Builder booleanId(boolean value);\n\n                abstract boolean booleanId();\n\n                abstract Test build();\n              }\n            }"
    }
  ]
}