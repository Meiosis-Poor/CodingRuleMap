{
  "name": "NoAllocationChecker",
  "language": "java",
  "description": "@NoAllocation was specified on this method, but something was found that would trigger an allocation",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 461,
  "branches": 30,
  "apis": 2,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import com.google.errorprone.annotations.NoAllocation;\n\n            /**\n             * @author agoode@google.com (Adam Goode)\n             */\n            public class NoAllocationCheckerPositiveCases {\n              // Trigger on new array.\n              @NoAllocation\n              public int[] newArray(int size) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Allocating a new array\n                return new int[size];\n              }\n\n              @NoAllocation\n              public int[] arrayInitializer(int a, int b) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Allocating a new array\n                int[] array = {a, b};\n                return array;\n              }\n\n              @NoAllocation\n              public int[] returnArrayInitializer(int a, int b) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Allocating a new array\n                return new int[] {a, b};\n              }\n\n              // Trigger on new.\n              @NoAllocation\n              public String newString(String s) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Constructing\n                return new String(s);\n              }\n\n              // Trigger calling a method that does allocation.\n              public String allocateString() {\n                return new String();\n              }\n\n              @NoAllocation\n              public String getString() {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Calling a method\n                return allocateString();\n              }\n\n              // Trigger on string conversion.\n              @NoAllocation\n              public int getInt() {\n                return 1;\n              }\n\n              @NoAllocation\n              public String stringConvReturn(int i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // String concatenation\n                return \"\" + i;\n              }\n\n              @NoAllocation\n              public String stringConvAssign(int i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // String concatenation\n                String s = \"\" + i;\n                return s;\n              }\n\n              @NoAllocation\n              public String stringConvAssign2(int i) {\n                String s = \"\";\n                // BUG: Diagnostic contains: @NoAllocation\n                // String concatenation\n                s = s + i;\n                return s;\n              }\n\n              @NoAllocation\n              public String stringConvAssign3(int i) {\n                String s = \"\";\n                // BUG: Diagnostic contains: @NoAllocation\n                // String concatenation\n                s = i + s;\n                return s;\n              }\n\n              @NoAllocation\n              public String stringConvReturnMethod() {\n                // BUG: Diagnostic contains: @NoAllocation\n                // String concatenation\n                String s = \"\" + getInt();\n                return s;\n              }\n\n              @NoAllocation\n              public String stringConvCompoundAssign(int i) {\n                String s = \"\";\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                s += i;\n                return s;\n              }\n\n              @NoAllocation\n              public String stringConvCompoundReturnMethod() {\n                String s = \"\";\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                s += getInt();\n                return s;\n              }\n\n              // Trigger on string concatenation.\n              @NoAllocation\n              public String doubleString(String s) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // String concatenation\n                return s + s;\n              }\n\n              @NoAllocation\n              public String doubleStringCompound(String s) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                s += s;\n                return s;\n              }\n\n              // Trigger on foreach with non-array.\n              @NoAllocation\n              public int iteration(Iterable<Object> a) {\n                int result = 0;\n                // BUG: Diagnostic contains: @NoAllocation\n                // Iterating\n                for (Object o : a) {\n                  result++;\n                }\n                return result;\n              }\n\n              // Trigger on autoboxing.\n              @NoAllocation\n              public Integer assignBox(int i) {\n                Integer in;\n                // BUG: Diagnostic contains: @NoAllocation\n                // Assigning a primitive value\n                in = i;\n                return in;\n              }\n\n              @NoAllocation\n              public Integer initializeBox(int i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Initializing a non-primitive\n                Integer in = i;\n                return in;\n              }\n\n              @NoAllocation\n              public Integer initializeBoxLiteral() {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Initializing a non-primitive\n                Integer in = 0;\n                return in;\n              }\n\n              @NoAllocation\n              public int castBox(int i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Casting a primitive\n                int in = (Integer) i;\n                return in;\n              }\n\n              @NoAllocation\n              public Integer returnBox(int i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Returning a primitive\n                return i;\n              }\n\n              @NoAllocation\n              public int unBox(Integer i) {\n                return i;\n              }\n\n              @NoAllocation\n              public void callBox(int i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Calling a method\n                unBox(i);\n              }\n\n              @NoAllocation\n              public int unBox2(int i1, Integer i2) {\n                return i2;\n              }\n\n              @NoAllocation\n              public void callBox2(int i1, int i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Calling a method\n                unBox2(i1, i2);\n              }\n\n              @NoAllocation\n              public int unBox3(Integer i1, int i2) {\n                return i1;\n              }\n\n              @NoAllocation\n              public void callBox3(int i1, int i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Calling a method\n                unBox3(i1, i2);\n              }\n\n              @NoAllocation\n              public int varArgsMethod(int a, int... b) {\n                return a + b[0];\n              }\n\n              @NoAllocation\n              public void callVarArgs0() {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Calling a method\n                varArgsMethod(0);\n              }\n\n              @NoAllocation\n              public void callVarArgs() {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Calling a method\n                varArgsMethod(1, 2);\n              }\n\n              @NoAllocation\n              public void callVarArgs2() {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Calling a method\n                varArgsMethod(1, 2, 3);\n              }\n\n              @NoAllocation\n              public Object varArgsMethodObject(Object a, Object... b) {\n                return b[0];\n              }\n\n              @NoAllocation\n              public void callVarArgsObject(Object a, Object[] b) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Calling a method\n                varArgsMethodObject(a, b[0]);\n              }\n\n              @NoAllocation\n              public void callVarArgsObjectWithPrimitiveArray(Object a, int[] b) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Calling a method\n                varArgsMethodObject(a, b);\n              }\n\n              @NoAllocation\n              public int forBox(int[] a) {\n                int count = 0;\n                // BUG: Diagnostic contains: @NoAllocation\n                // Pre- and post- increment/decrement\n                for (Integer i = 0; i < a.length; i++) {\n                  count++;\n                }\n                return count;\n              }\n\n              @NoAllocation\n              public void arrayBox(Integer[] a, int i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Assigning a primitive value\n                a[0] = i;\n              }\n\n              @NoAllocation\n              public int preIncrementBox(Integer i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Pre- and post- increment/decrement\n                ++i;\n                return i;\n              }\n\n              @NoAllocation\n              public int postIncrementBox(Integer i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Pre- and post- increment/decrement\n                i++;\n                return i;\n              }\n\n              @NoAllocation\n              public int preDecrementBox(Integer i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Pre- and post- increment/decrement\n                --i;\n                return i;\n              }\n\n              @NoAllocation\n              public int postDecrementBox(Integer i) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Pre- and post- increment/decrement\n                i--;\n                return i;\n              }\n\n              @NoAllocation\n              public int forEachBox(int[] a) {\n                int last = -1;\n                // BUG: Diagnostic contains: @NoAllocation\n                // Iterating\n                for (Integer i : a) {\n                  last = i;\n                }\n                return last;\n              }\n\n              @NoAllocation\n              public void arrayPreIncrementBox(Integer[] a) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Pre- and post- increment/decrement\n                ++a[0];\n              }\n\n              @NoAllocation\n              public void arrayPostIncrementBox(Integer[] a) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Pre- and post- increment/decrement\n                a[0]++;\n              }\n\n              @NoAllocation\n              public void arrayPreDecrementBox(Integer[] a) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Pre- and post- increment/decrement\n                --a[0];\n              }\n\n              @NoAllocation\n              public void arrayPostDecrementBox(Integer[] a) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Pre- and post- increment/decrement\n                a[0]--;\n              }\n\n              @NoAllocation\n              public int compoundBox(Integer a, int b) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                a += b;\n                return a;\n              }\n\n              @NoAllocation\n              public void arrayCompoundBox(Integer[] a, int b) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                a[0] += b;\n              }\n\n              @NoAllocation\n              public void andAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 &= i2;\n              }\n\n              @NoAllocation\n              public void divideAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 /= i2;\n              }\n\n              @NoAllocation\n              public void leftShiftAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 <<= i2;\n              }\n\n              @NoAllocation\n              public void minusAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 -= i2;\n              }\n\n              @NoAllocation\n              public void multiplyAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 *= i2;\n              }\n\n              @NoAllocation\n              public void orAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 |= i2;\n              }\n\n              @NoAllocation\n              public void plusAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 += i2;\n              }\n\n              @NoAllocation\n              public void remainderAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 %= i2;\n              }\n\n              @NoAllocation\n              public void rightShiftAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 >>= i2;\n              }\n\n              @NoAllocation\n              public void unsignedRightShiftAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 >>>= i2;\n              }\n\n              @NoAllocation\n              public void xorAssignmentBox(Integer i1, Integer i2) {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Compound assignment\n                i1 ^= i2;\n              }\n\n              // Cloning is right out.\n              @NoAllocation\n              public Object doClone() throws CloneNotSupportedException {\n                // BUG: Diagnostic contains: @NoAllocation\n                // Calling a method\n                return clone();\n              }\n\n              // Throwing doesn't exempt through method declarations.\n              @NoAllocation\n              public String throwForeach(final Iterable<Object> a) {\n                throw new RuntimeException() {\n                  @NoAllocation\n                  private void f() {\n                    // BUG: Diagnostic contains: @NoAllocation\n                    // Iterating\n                    for (Object o : a) {\n                      // BUG: Diagnostic contains: @NoAllocation\n                      // Calling a method\n                      a.toString();\n                    }\n                  }\n                };\n              }\n\n              public interface NoAllocationInterface {\n                @NoAllocation\n                void method();\n              }\n\n              public static class NoAllocationImplementingClass implements NoAllocationInterface {\n                @Override\n                // BUG: Diagnostic contains: @NoAllocation\n                public void method() {}\n              }\n\n              public abstract static class NoAllocationAbstractClass {\n                @NoAllocation\n                abstract void method();\n              }\n\n              public static class NoAllocationConcreteClass extends NoAllocationAbstractClass {\n                @Override\n                // BUG: Diagnostic contains: @NoAllocation\n                void method() {}\n              }\n\n              public static class NoAllocationParentClass implements NoAllocationInterface {\n                @Override\n                @NoAllocation\n                public void method() {}\n              }\n\n              public static class NoAllocationSubclass extends NoAllocationParentClass {\n                @Override\n                // BUG: Diagnostic contains: @NoAllocation\n                public void method() {}\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        549
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport com.google.errorprone.annotations.NoAllocation;\nimport java.util.Arrays;\n\n/**\n * @author agoode@google.com (Adam Goode)\n */\npublic class NoAllocationCheckerNegativeCases {\n  // Calling safe methods is fine.\n  @NoAllocation\n  public boolean comparison(int n) {\n    return n > 1;\n  }\n\n  @NoAllocation\n  public void callNoAllocationMethod() {\n    comparison(5);\n  }\n\n  @NoAllocation\n  @SuppressWarnings({\"foo, bar\"})\n  public void annotatedWithArray() {}\n\n  @NoAllocation\n  public boolean arrayComparison(int[] a) {\n    return a.length > 0 && a[0] > 1;\n  }\n\n  // Non string operations are fine.\n  @NoAllocation\n  public int sumInts(int a, int b) {\n    return a + b;\n  }\n\n  @NoAllocation\n  public int addOne(int a) {\n    a += 1;\n    return a;\n  }\n\n  // Foreach is allowed on arrays.\n  @NoAllocation\n  public int forEachArray(int[] a) {\n    int last = -1;\n    for (int i : a) {\n      last = i;\n    }\n    return last;\n  }\n\n  // Varargs is ok if no autoboxing occurs.\n  @NoAllocation\n  public int varArgsMethod2(int a, int... b) {\n    return a + b[0];\n  }\n\n  @NoAllocation\n  public void callVarArgsNoAllocation(int[] b) {\n    varArgsMethod2(1, b);\n  }\n\n  @NoAllocation\n  public Object varArgsMethodObject2(Object a, Object... b) {\n    return b[0];\n  }\n\n  @NoAllocation\n  public void callVarArgsObject2(Object a, Object[] b) {\n    varArgsMethodObject2(a, b);\n  }\n\n  // Unboxing is fine.\n  @NoAllocation\n  public void unboxByCalling(Integer i) {\n    comparison(i);\n  }\n\n  @NoAllocation\n  public int binaryUnbox(Integer a, int b) {\n    return a + b;\n  }\n\n  // We can call a non-annotated method if we suppress warnings.\n  @NoAllocation\n  @SuppressWarnings(\"NoAllocation\")\n  public void trustMe() {\n    String s = new String();\n  }\n\n  @NoAllocation\n  public void trusting() {\n    trustMe();\n  }\n\n  // Allocations are allowed in a throw statement.\n  @NoAllocation\n  public void throwNew() {\n    throw new RuntimeException();\n  }\n\n  @NoAllocation\n  public void throwNewArray() {\n    throw new RuntimeException(Arrays.toString(new int[10]));\n  }\n\n  @NoAllocation\n  public void throwMethod() {\n    throw new RuntimeException(Integer.toString(5));\n  }\n\n  @NoAllocation\n  public void throwStringConcatenation() {\n    throw new RuntimeException(\"a\" + 5);\n  }\n\n  @NoAllocation\n  public void throwStringConcatenation2() {\n    throw new RuntimeException(\"a\" + Integer.toString(5));\n  }\n\n  @NoAllocation\n  public void throwStringConcatenation3() {\n    throw new RuntimeException(\"a\" + getInt());\n  }\n\n  @NoAllocation\n  public String throwStringConvCompoundAssign(int i) {\n    String s = \"\";\n    throw new RuntimeException(s += i);\n  }\n\n  class IntegerException extends RuntimeException {\n    public IntegerException(Integer i) {\n      super(i.toString());\n    }\n  }\n\n  @NoAllocation\n  public String throwBoxingCompoundAssign(Integer in, int i) {\n    throw new IntegerException(in += i);\n  }\n\n  @NoAllocation\n  public String throwBoxingAssign(Integer in, int i) {\n    throw new IntegerException(in = i);\n  }\n\n  @NoAllocation\n  public String throwBoxingInitialization(final int i) {\n    throw new RuntimeException() {\n      Integer in = i;\n    };\n  }\n\n  @NoAllocation\n  public String throwBoxingCast(int i) {\n    throw new IntegerException((Integer) i);\n  }\n\n  @NoAllocation\n  public String throwBoxingInvocation(int i) {\n    throw new IntegerException(i);\n  }\n\n  class VarArgsException extends RuntimeException {\n    public VarArgsException(int... ints) {\n      super(Arrays.toString(ints));\n    }\n  }\n\n  @NoAllocation\n  public String throwBoxingVarArgs(int i) {\n    throw new VarArgsException(i, i, i, 4);\n  }\n\n  @NoAllocation\n  public String throwBoxingUnary(Integer i) {\n    throw new IntegerException(i++);\n  }\n\n  @NoAllocation\n  public void callGenericMethod() {\n    String foo = \"foo\";\n    String bar = genericMethod(foo);\n  }\n\n  @NoAllocation\n  private static <T> T genericMethod(T value) {\n    return value;\n  }\n\n  // All of the positive cases with @NoAllocation removed are below.\n  public int[] newArray(int size) {\n    return new int[size];\n  }\n\n  public int[] arrayInitializer(int a, int b) {\n    int[] array = {a, b};\n    return array;\n  }\n\n  public int[] returnArrayInitializer(int a, int b) {\n    return new int[] {a, b};\n  }\n\n  public String newString(String s) {\n    return new String(s);\n  }\n\n  public String allocateString() {\n    return new String();\n  }\n\n  public String getString() {\n    return allocateString();\n  }\n\n  public int getInt() {\n    return 1;\n  }\n\n  public String stringConvReturn(int i) {\n    return \"\" + i;\n  }\n\n  public String stringConvAssign(int i) {\n    String s = \"\" + i;\n    return s;\n  }\n\n  public String stringConvAssign2(int i) {\n    String s = \"\";\n    s = s + i;\n    return s;\n  }\n\n  public String stringConvAssign3(int i) {\n    String s = \"\";\n    s = i + s;\n    return s;\n  }\n\n  public String stringConvReturnMethod() {\n    String s = \"\" + getInt();\n    return s;\n  }\n\n  public String stringConvCompoundAssign(int i) {\n    String s = \"\";\n    s += i;\n    return s;\n  }\n\n  public String stringConvCompoundReturnMethod() {\n    String s = \"\";\n    s += getInt();\n    return s;\n  }\n\n  public String doubleString(String s) {\n    return s + s;\n  }\n\n  public String doubleStringCompound(String s) {\n    s += s;\n    return s;\n  }\n\n  public int iteration(Iterable<Object> a) {\n    int result = 0;\n    for (Object o : a) {\n      result++;\n    }\n    return result;\n  }\n\n  public Integer assignBox(int i) {\n    Integer in;\n    in = i;\n    return in;\n  }\n\n  public Integer initializeBox(int i) {\n    Integer in = i;\n    return in;\n  }\n\n  public Integer initializeBoxLiteral() {\n    Integer in = 0;\n    return in;\n  }\n\n  public int castBox(int i) {\n    int in = (Integer) i;\n    return in;\n  }\n\n  public Integer returnBox(int i) {\n    return i;\n  }\n\n  public int unBox(Integer i) {\n    return i;\n  }\n\n  public void callBox(int i) {\n    unBox(i);\n  }\n\n  public int unBox2(int i1, Integer i2) {\n    return i2;\n  }\n\n  public void callBox2(int i1, int i2) {\n    unBox2(i1, i2);\n  }\n\n  public int unBox3(Integer i1, int i2) {\n    return i1;\n  }\n\n  public void callBox3(int i1, int i2) {\n    unBox3(i1, i2);\n  }\n\n  public int varArgsMethod(int a, int... b) {\n    return a + b[0];\n  }\n\n  public void callVarArgs0() {\n    varArgsMethod(0);\n  }\n\n  public void callVarArgs() {\n    varArgsMethod(1, 2);\n  }\n\n  public void callVarArgs2() {\n    varArgsMethod(1, 2, 3);\n  }\n\n  public Object varArgsMethodObject(Object a, Object... b) {\n    return b[0];\n  }\n\n  public void callVarArgsObject(Object a, Object[] b) {\n    varArgsMethodObject(a, b[0]);\n  }\n\n  public void callVarArgsObjectWithPrimitiveArray(Object a, int[] b) {\n    varArgsMethodObject(a, b);\n  }\n\n  public int forBox(int[] a) {\n    int count = 0;\n    for (Integer i = 0; i < a.length; i++) {\n      count++;\n    }\n    return count;\n  }\n\n  public void arrayBox(Integer[] a, int i) {\n    a[0] = i;\n  }\n\n  public int preIncrementBox(Integer i) {\n    ++i;\n    return i;\n  }\n\n  public int postIncrementBox(Integer i) {\n    i++;\n    return i;\n  }\n\n  public int preDecrementBox(Integer i) {\n    --i;\n    return i;\n  }\n\n  public int postDecrementBox(Integer i) {\n    i--;\n    return i;\n  }\n\n  public int forEachBox(int[] a) {\n    int last = -1;\n    for (Integer i : a) {\n      last = i;\n    }\n    return last;\n  }\n\n  public void arrayPreIncrementBox(Integer[] a) {\n    ++a[0];\n  }\n\n  public void arrayPostIncrementBox(Integer[] a) {\n    a[0]++;\n  }\n\n  public void arrayPreDecrementBox(Integer[] a) {\n    --a[0];\n  }\n\n  public void arrayPostDecrementBox(Integer[] a) {\n    a[0]--;\n  }\n\n  public int compoundBox(Integer a, int b) {\n    a += b;\n    return a;\n  }\n\n  public void arrayCompoundBox(Integer[] a, int b) {\n    a[0] += b;\n  }\n\n  public void andAssignmentBox(Integer i1, Integer i2) {\n    i1 &= i2;\n  }\n\n  public void divideAssignmentBox(Integer i1, Integer i2) {\n    i1 /= i2;\n  }\n\n  public void leftShiftAssignmentBox(Integer i1, Integer i2) {\n    i1 <<= i2;\n  }\n\n  public void minusAssignmentBox(Integer i1, Integer i2) {\n    i1 -= i2;\n  }\n\n  public void multiplyAssignmentBox(Integer i1, Integer i2) {\n    i1 *= i2;\n  }\n\n  public void orAssignmentBox(Integer i1, Integer i2) {\n    i1 |= i2;\n  }\n\n  public void plusAssignmentBox(Integer i1, Integer i2) {\n    i1 += i2;\n  }\n\n  public void remainderAssignmentBox(Integer i1, Integer i2) {\n    i1 %= i2;\n  }\n\n  public void rightShiftAssignmentBox(Integer i1, Integer i2) {\n    i1 >>= i2;\n  }\n\n  public void unsignedRightShiftAssignmentBox(Integer i1, Integer i2) {\n    i1 >>>= i2;\n  }\n\n  public void xorAssignmentBox(Integer i1, Integer i2) {\n    i1 ^= i2;\n  }\n\n  public Object doClone() throws CloneNotSupportedException {\n    return clone();\n  }\n\n  @NoAllocation\n  public String throwForeach(final Iterable<Object> a) {\n    throw new RuntimeException() {\n      private void f() {\n        for (Object o : a) {\n          a.toString();\n        }\n      }\n    };\n  }\n\n  public interface NoAllocationInterface {\n    @NoAllocation\n    void method();\n  }\n\n  public static class NoAllocationImplementingClass implements NoAllocationInterface {\n    @Override\n    @NoAllocation\n    public void method() {}\n  }\n\n  public static class NoAllocationImplementingClassWithSuppression\n      implements NoAllocationInterface {\n    @Override\n    @SuppressWarnings(\"NoAllocation\")\n    public void method() {}\n  }\n\n  public abstract static class NoAllocationAbstractClass {\n    @NoAllocation\n    abstract void method();\n  }\n\n  public static class NoAllocationConcreteClass extends NoAllocationAbstractClass {\n    @Override\n    @NoAllocation\n    void method() {}\n  }\n\n  public static class NoAllocationConcreteClassWithSuppression extends NoAllocationAbstractClass {\n    @Override\n    @SuppressWarnings(\"NoAllocation\")\n    void method() {}\n  }\n\n  public static class NoAllocationParentClass implements NoAllocationInterface {\n    @Override\n    @NoAllocation\n    public void method() {}\n  }\n\n  public static class NoAllocationSubclass extends NoAllocationParentClass {\n    @Override\n    @NoAllocation\n    public void method() {}\n  }\n\n  public static class NoAllocationSubclassWithSuppression extends NoAllocationParentClass {\n    @Override\n    @SuppressWarnings(\"NoAllocation\")\n    public void method() {}\n  }\n}\\"
    }
  ]
}