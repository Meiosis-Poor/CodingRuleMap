{
  "name": "SelfComparison",
  "language": "java",
  "description": "An object is compared to itself",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 52,
  "branches": 3,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        34
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * Positive test case for {@link SelfComparison} check.\n             *\n             * @author bhagwani@google.com (Sumit Bhagwani)\n             */\n            public class SelfComparisonPositiveCase implements Comparable<Object> {\n\n              public int test1() {\n                SelfComparisonPositiveCase obj = new SelfComparisonPositiveCase();\n                // BUG: Diagnostic contains: An object is compared to itself\n                return obj.compareTo(obj);\n              }\n\n              private SelfComparisonPositiveCase obj = new SelfComparisonPositiveCase();\n\n              public int test2() {\n                // BUG: Diagnostic contains: An object is compared to itself\n                return obj.compareTo(this.obj);\n              }\n\n              public int test3() {\n                // BUG: Diagnostic contains: An object is compared to itself\n                return this.obj.compareTo(obj);\n              }\n\n              public int test4() {\n                // BUG: Diagnostic contains: An object is compared to itself\n                return this.obj.compareTo(this.obj);\n              }\n\n              public int test5() {\n                // BUG: Diagnostic contains: An object is compared to itself\n                return compareTo(this);\n              }\n\n              @Override\n              public int compareTo(Object o) {\n                return 0;\n              }\n\n              public static class ComparisonTest implements Comparable<ComparisonTest> {\n                private String testField;\n\n                @Override\n                public int compareTo(ComparisonTest s) {\n                  return testField.compareTo(s.testField);\n                }\n\n                public int test1() {\n                  ComparisonTest obj = new ComparisonTest();\n                  // BUG: Diagnostic contains: An object is compared to itself\n                  return obj.compareTo(obj);\n                }\n\n                private ComparisonTest obj = new ComparisonTest();\n\n                public int test2() {\n                  // BUG: Diagnostic contains: An object is compared to itself\n                  return obj.compareTo(this.obj);\n                }\n\n                public int test3() {\n                  // BUG: Diagnostic contains: An object is compared to itself\n                  return this.obj.compareTo(obj);\n                }\n\n                public int test4() {\n                  // BUG: Diagnostic contains: An object is compared to itself\n                  return this.obj.compareTo(this.obj);\n                }\n\n                public int test5() {\n                  // BUG: Diagnostic contains: An object is compared to itself\n                  return compareTo(this);\n                }\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        123
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * Negative test cases for {@link SelfComparison} check.\n             *\n             * @author bhagwani@google.com (Sumit Bhagwani)\n             */\n            public class SelfComparisonNegativeCases implements Comparable<Object> {\n              private String field;\n\n              @Override\n              public int hashCode() {\n                return field != null ? field.hashCode() : 0;\n              }\n\n              @Override\n              public int compareTo(Object o) {\n                if (!(o instanceof SelfComparisonNegativeCases)) {\n                  return -1;\n                }\n\n                SelfComparisonNegativeCases other = (SelfComparisonNegativeCases) o;\n                return field.compareTo(other.field);\n              }\n\n              public int test() {\n                return Boolean.TRUE.toString().compareTo(Boolean.FALSE.toString());\n              }\n\n              public static class CopmarisonTest implements Comparable<CopmarisonTest> {\n                private String testField;\n\n                @Override\n                public int compareTo(CopmarisonTest obj) {\n                  return testField.compareTo(obj.testField);\n                }\n              }\n            }\\"
    }
  ]
}