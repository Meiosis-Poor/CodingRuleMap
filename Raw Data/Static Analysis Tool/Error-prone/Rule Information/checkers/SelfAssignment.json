{
  "name": "SelfAssignment",
  "language": "java",
  "description": "Variable assigned to itself",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 182,
  "branches": 13,
  "apis": 4,
  "test": [
    {
      "description": "positiveCases1",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * Tests for self assignment\n             *\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            public class SelfAssignmentPositiveCases1 {\n              private int a;\n\n              public void test1(int b) {\n                // BUG: Diagnostic contains: this.a = b\n                this.a = a;\n              }\n\n              public void test2(int b) {\n                // BUG: Diagnostic contains: remove this line\n                a = this.a;\n              }\n\n              public void test3() {\n                int a = 0;\n                // BUG: Diagnostic contains: this.a = a\n                a = a;\n              }\n\n              public void test4() {\n                // BUG: Diagnostic contains: remove this line\n                this.a = this.a;\n              }\n\n              public void test5() {\n                // BUG: Diagnostic contains: this.a = a\n                if ((a = a) != 10) {\n                  System.out.println(\"foo\");\n                }\n              }\n\n              // Check that WrappedTreeMap handles folded strings; tested by EndPosTest.\n              // See https://code.google.com/p/error-prone/issues/detail?id=209\n              public String foldableString() {\n                return \"foo\" + \"bar\";\n              }\n\n              public void testCast() {\n                int a = 0;\n                // BUG: Diagnostic contains: this.a = (int) a\n                a = (int) a;\n                // BUG: Diagnostic contains: this.a = (short) a\n                a = (short) a;\n              }\n\n              public void testCast(int x) {\n                // BUG: Diagnostic contains: this.a = (int) x;\n                this.a = (int) a;\n              }\n            }\\"
    },
    {
      "description": "positiveCases2",
      "expected-problems": null,
      "expected-linenumbers": [
        100
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.base.Preconditions.checkNotNull;\n            import static java.util.Objects.requireNonNull;\n\n            /**\n             * Tests for self assignment\n             *\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            public class SelfAssignmentPositiveCases2 {\n              private int a;\n              private Foo foo;\n\n              // BUG: Diagnostic contains: private static final Object obj\n              private static final Object obj = SelfAssignmentPositiveCases2.obj;\n              // BUG: Diagnostic contains: private static final Object obj2\n              private static final Object obj2 = checkNotNull(SelfAssignmentPositiveCases2.obj2);\n\n              public void test6() {\n                Foo foo = new Foo();\n                foo.a = 2;\n                // BUG: Diagnostic contains: remove this line\n                foo.a = foo.a;\n                // BUG: Diagnostic contains: checkNotNull(foo.a)\n                foo.a = checkNotNull(foo.a);\n                // BUG: Diagnostic contains: requireNonNull(foo.a)\n                foo.a = requireNonNull(foo.a);\n              }\n\n              public void test7() {\n                Foobar f = new Foobar();\n                f.foo = new Foo();\n                f.foo.a = 10;\n                // BUG: Diagnostic contains: remove this line\n                f.foo.a = f.foo.a;\n                // BUG: Diagnostic contains: checkNotNull(f.foo.a)\n                f.foo.a = checkNotNull(f.foo.a);\n                // BUG: Diagnostic contains: requireNonNull(f.foo.a)\n                f.foo.a = requireNonNull(f.foo.a);\n              }\n\n              public void test8() {\n                foo = new Foo();\n                // BUG: Diagnostic contains: remove this line\n                this.foo.a = foo.a;\n                // BUG: Diagnostic contains: checkNotNull(foo.a)\n                this.foo.a = checkNotNull(foo.a);\n                // BUG: Diagnostic contains: requireNonNull(foo.a)\n                this.foo.a = requireNonNull(foo.a);\n              }\n\n              public void test9(Foo fao, Foo bar) {\n                // BUG: Diagnostic contains: this.foo = fao\n                this.foo = foo;\n                // BUG: Diagnostic contains: this.foo = checkNotNull(fao)\n                this.foo = checkNotNull(foo);\n                // BUG: Diagnostic contains: this.foo = requireNonNull(fao)\n                this.foo = requireNonNull(foo);\n              }\n\n              public void test10(Foo foo) {\n                // BUG: Diagnostic contains: this.foo = foo\n                foo = foo;\n                // BUG: Diagnostic contains: this.foo = checkNotNull(foo)\n                foo = checkNotNull(foo);\n                // BUG: Diagnostic contains: this.foo = requireNonNull(foo)\n                foo = requireNonNull(foo);\n              }\n\n              class Test11 {\n                final Foo foo;\n\n                Foo fao;\n\n                Test11(Foo foo) {\n                  if (true) {\n                    // BUG: Diagnostic contains: this.fao = foo\n                    foo = foo;\n                  }\n                  this.foo = foo;\n                }\n\n                public void test11a(Foo foo) {\n                  // BUG: Diagnostic contains: this.fao = foo\n                  foo = foo;\n                }\n              }\n\n              private static class Foo {\n                int a;\n              }\n\n              private static class Bar {\n                int a;\n              }\n\n              private static class Foobar {\n                Foo foo;\n                Bar bar;\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        212
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.base.Preconditions.checkNotNull;\n            import static java.util.Objects.requireNonNull;\n\n            /**\n             * Tests for self assignment\n             *\n             * @author eaftan@google.com (Eddie Aftandilian)\n             */\n            public class SelfAssignmentNegativeCases {\n              private int a;\n\n              private static int b = StaticClass.b;\n              private static final int C = SelfAssignmentNegativeCases.b;\n              private static final int D = checkNotNull(SelfAssignmentNegativeCases.C);\n              private static final int E = requireNonNull(SelfAssignmentNegativeCases.D);\n              private static final int F = StaticClass.getIntArr().length;\n\n              public void test1(int a) {\n                int b = SelfAssignmentNegativeCases.b;\n                this.a = a;\n                this.a = checkNotNull(a);\n                this.a = requireNonNull(a);\n              }\n\n              public void test2() {\n                int a = 0;\n                int b = a;\n                a = b;\n              }\n\n              public void test3() {\n                int a = 10;\n              }\n\n              public void test4() {\n                int i = 1;\n                i += i;\n              }\n\n              public void test5(SelfAssignmentNegativeCases n) {\n                a = n.a;\n              }\n\n              public void test6() {\n                Foo foo = new Foo();\n                Bar bar = new Bar();\n                foo.a = bar.a;\n                foo.a = checkNotNull(bar.a);\n                foo.a = requireNonNull(bar.a);\n              }\n\n              public void test7() {\n                Foobar f1 = new Foobar();\n                f1.foo = new Foo();\n                f1.bar = new Bar();\n                f1.foo.a = f1.bar.a;\n                f1.foo.a = checkNotNull(f1.bar.a);\n                f1.foo.a = requireNonNull(f1.bar.a);\n              }\n\n              public void test8(SelfAssignmentNegativeCases that) {\n                this.a = that.a;\n                this.a = checkNotNull(that.a);\n                this.a = requireNonNull(that.a);\n              }\n\n              public void test9(int a) {\n                a += a;\n              }\n\n              private static class Foo {\n                int a;\n              }\n\n              private static class Bar {\n                int a;\n              }\n\n              private static class Foobar {\n                Foo foo;\n                Bar bar;\n              }\n\n              private static class StaticClass {\n                static int b;\n\n                public static int[] getIntArr() {\n                  return new int[10];\n                }\n              }\n            }\\"
    },
    {
      "description": "initializerBlock",
      "expected-problems": null,
      "expected-linenumbers": [
        315
      ],
      "code": "class Test {\n              int foo;\n\n              Test(int foo) {}\n\n              {\n                // BUG: Diagnostic contains:\n                this.foo = foo;\n              }\n            }\\"
    }
  ]
}