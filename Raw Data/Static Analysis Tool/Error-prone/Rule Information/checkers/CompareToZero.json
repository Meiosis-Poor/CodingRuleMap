{
  "name": "CompareToZero",
  "language": "java",
  "description": "The result of #compareTo or #compare should only be compared to 0. It is an implementation detail whether a given type returns strictly the values {-1, 0, +1} or others.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 186,
  "branches": 16,
  "apis": 2,
  "test": [
    {
      "description": "positive",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "class Test {\n              boolean test(Integer i) {\n                // BUG: Diagnostic contains: compared\n                return i.compareTo(2) == -1;\n              }\n            }"
    },
    {
      "description": "positiveStaticCompare",
      "expected-problems": null,
      "expected-linenumbers": [
        49
      ],
      "code": "class Test {\n              boolean test(boolean x, boolean y) {\n                // BUG: Diagnostic contains: compared\n                return Boolean.compare(x, y) == -1;\n              }\n            }"
    },
    {
      "description": "positiveSuggestionForConsistency",
      "expected-problems": null,
      "expected-linenumbers": [
        65
      ],
      "code": "class Test {\n              boolean test(Integer i) {\n                // BUG: Diagnostic contains: consistency\n                return i.compareTo(2) <= -1;\n              }\n            }"
    },
    {
      "description": "positive_gte1_has_1_finding",
      "expected-problems": null,
      "expected-linenumbers": [
        81
      ],
      "code": "class Test {\n              boolean test(Integer i) {\n                // BUG: Diagnostic matches: KEY\n                return i.compareTo(2) >= 1;\n              }\n            }"
    },
    {
      "description": "positiveAddition",
      "expected-problems": null,
      "expected-linenumbers": [
        99
      ],
      "code": "class Test {\n              int test(Integer i) {\n                // BUG: Diagnostic contains:\n                return i.compareTo(2) + i.compareTo(3);\n              }\n            }"
    },
    {
      "description": "stringConcat_ignored",
      "expected-problems": null,
      "expected-linenumbers": [
        115
      ],
      "code": "class Test {\n              String test(Integer i) {\n                return \"\" + i.compareTo(3);\n              }\n            }"
    },
    {
      "description": "refactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        130
      ],
      "code": "class Test {\n              void test(Integer i) {\n                boolean b1 = i.compareTo(2) == -1;\n                boolean b2 = i.compareTo(2) > -1;\n                boolean b3 = -1 < i.compareTo(2);\n                boolean b4 = i.compareTo(2) < 1;\n                boolean b5 = i.compareTo(2) != -1;\n                boolean b6 = i.compareTo(2) != 1;\n                boolean b7 = i.compareTo(2) <= -1;\n                boolean b8 = ((i.compareTo(2))) >= 1;\n              }\n            }\n            \n\n            class Test {\n              void test(Integer i) {\n                boolean b1 = i.compareTo(2) < 0;\n                boolean b2 = i.compareTo(2) >= 0;\n                boolean b3 = i.compareTo(2) >= 0;\n                boolean b4 = i.compareTo(2) <= 0;\n                boolean b5 = i.compareTo(2) >= 0;\n                boolean b6 = i.compareTo(2) <= 0;\n                boolean b7 = i.compareTo(2) < 0;\n                boolean b8 = ((i.compareTo(2))) > 0;\n              }\n            }"
    },
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        168
      ],
      "code": "class Test {\n              void test(Integer i) {\n                boolean b1 = i.compareTo(2) < 0;\n                boolean b2 = i.compareTo(2) > 0;\n                boolean b3 = i.compareTo(2) == 0;\n              }\n            }"
    }
  ]
}