{
  "name": "StringConcatToTextBlock",
  "language": "java",
  "description": "This string literal can be written more clearly as a text block",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 269,
  "branches": 35,
  "apis": 1,
  "test": [
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        34
      ],
      "code": "class Test {\n              String s = new Object() + \"world\\\\n\";\n              String oneToken = \"hello\\\\nworld\";\n              String comment =\n                  \"hello\\\\\\\\n\"\n                      // comment\n                      + \"world\\\\\\\\n\";\n              String noNewline = \"hello\" + \"world\\\\n\";\n              String extra = \"prefix\" + s + \"hello\\\\n\" + \"world\\\\n\";\n              String noTrailing = \"hello\\\\n\" + \"world\";\n            }"
    },
    {
      "description": "positive",
      "expected-problems": null,
      "expected-linenumbers": [
        55
      ],
      "code": "class Test {\n              String s = \"hello\\\\n\" + \"world\\\\n\";\n            }\n            \n\n            class Test {\n              String s =\n                  \\\n;\n            }"
    },
    {
      "description": "alreadyTextBlock",
      "expected-problems": null,
      "expected-linenumbers": [
        79
      ],
      "code": "import com.google.testing.compile.JavaFileObjects;\n            import javax.tools.JavaFileObject;\n\n            class Test {\n              JavaFileObject javaFileObject =\n                  JavaFileObjects.forSourceLines(\n                      \"foo.bar.NotAbstract\",\n                      \\\n);\n            }"
    },
    {
      "description": "noTrailing",
      "expected-problems": null,
      "expected-linenumbers": [
        105
      ],
      "code": "class Test {\n              String s = \"hello\\\\n\" + \"foo\\\\n\" + \"world\";\n            }\n            \n\n            class Test {\n              String s =\n                  \\\n;\n            }"
    },
    {
      "description": "escape",
      "expected-problems": null,
      "expected-linenumbers": [
        130
      ],
      "code": "class Test {\n              String s = \"\\\\n\" + \"\\\\nhello\\\\n\" + \"foo\\\\n\\\\n\" + \"world\";\n            }\n            \n\n            class Test {\n              String s =\n                  \\\n;\n            }"
    },
    {
      "description": "guavaJoiner",
      "expected-problems": null,
      "expected-linenumbers": [
        158
      ],
      "code": "import com.google.common.base.Joiner;\n\n            class Test {\n              String s = Joiner.on('\\\\n').join(\"string\", \"literals\");\n            }\n            \n\n            import com.google.common.base.Joiner;\n\n            class Test {\n              String s =\n                  \\\n;\n            }"
    },
    {
      "description": "stringJoiner",
      "expected-problems": null,
      "expected-linenumbers": [
        186
      ],
      "code": "import java.util.StringJoiner;\n\n            class Test {\n              String s = new StringJoiner(\"\\\\n\").add(\"string\").add(\"literals\").toString();\n            }\n            \n\n            import java.util.StringJoiner;\n\n            class Test {\n              String s =\n                  \\\n;\n            }"
    },
    {
      "description": "stringJoin",
      "expected-problems": null,
      "expected-linenumbers": [
        214
      ],
      "code": "import java.util.StringJoiner;\n\n            class Test {\n              String s = String.join(\"\\\\n\", \"string\", \"literals\");\n            }\n            \n\n            import java.util.StringJoiner;\n\n            class Test {\n              String s =\n                  \\\n;\n            }"
    },
    {
      "description": "trailingSpacesInMultilineString",
      "expected-problems": null,
      "expected-linenumbers": [
        243
      ],
      "code": "class Test {\n              private static final String FOO =\n                  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit: \\\\n\"\n                      + \"- Lorem ipsum dolor sit amet, consectetur adipiscing elit?   \\\\n\"\n                      + \"- Lorem ipsum dolor sit amet, consectetur adipiscing elit?\\\\n\"\n                      + \"- Lorem ipsum dolor sit amet, consectetur adipiscing elit?\\\\n\";\n            }\n            \n\n            class Test {\n              private static final String FOO =\n                  \\\n;\n            }"
    },
    {
      "description": "annotationString",
      "expected-problems": null,
      "expected-linenumbers": [
        273
      ],
      "code": "import java.lang.annotation.Documented;\n            import java.lang.annotation.ElementType;\n            import java.lang.annotation.Retention;\n            import java.lang.annotation.RetentionPolicy;\n            import java.lang.annotation.Target;\n\n            @Retention(RetentionPolicy.RUNTIME)\n            @Target({ElementType.METHOD, ElementType.CONSTRUCTOR})\n            @interface Anno {}\n            \n\n            import java.util.StringJoiner;\n\n            record Test(@SuppressWarnings(\"foo\") @Anno int foo) {}"
    },
    {
      "description": "noDebug",
      "expected-problems": null,
      "expected-linenumbers": [
        301
      ],
      "code": "class Test {\n              String s = \"hello\\\\n\" + \"world\\\\n\";\n            }"
    }
  ]
}