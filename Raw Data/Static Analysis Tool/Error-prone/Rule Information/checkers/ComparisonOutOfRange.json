{
  "name": "ComparisonOutOfRange",
  "language": "java",
  "description": "Comparison to value that is out of range for the compared type",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 184,
  "branches": 33,
  "apis": 5,
  "test": [
    {
      "description": "positiveCases",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import java.io.IOException;\n            import java.io.Reader;\n            import java.util.function.Supplier;\n\n            /**\n             * @author Bill Pugh (bill.pugh@gmail.com)\n             */\n            class ComparisonOutOfRangePositiveCases {\n              private static final int NOT_A_BYTE = 255;\n\n              void byteEquality() {\n                boolean result;\n                byte b = 0;\n                byte[] barr = {1, 2, 3};\n\n                // BUG: Diagnostic contains: b == -1\n                result = b == 255;\n                // BUG: Diagnostic contains: b == 1\n                result = b == -255;\n                // BUG: Diagnostic contains: b == -128\n                result = b == 128;\n                // BUG: Diagnostic contains: b != -1\n                result = b != 255;\n\n                // BUG: Diagnostic contains: barr[0] == -1\n                result = barr[0] == 255;\n                // BUG: Diagnostic contains:\n                result = barr[0] == 128;\n                // BUG: Diagnostic contains: bytes\n                result = barr[0] == -255;\n\n                // BUG: Diagnostic contains: b == -1\n                result = b == NOT_A_BYTE;\n\n                Byte boxed = 0;\n                // BUG: Diagnostic contains:\n                result = boxed == 255;\n                Supplier<? extends Byte> bSupplier = null;\n                // BUG: Diagnostic contains:\n                result = bSupplier.get() == 255;\n              }\n\n              void charEquality() throws IOException {\n                boolean result;\n                char c = 'A';\n                Reader reader = null;\n\n                // BUG: Diagnostic contains: false\n                result = c == -1;\n                // BUG: Diagnostic contains: true\n                result = c != -1;\n\n                char d;\n                // BUG: Diagnostic contains: chars\n                result = (d = (char) reader.read()) == -1;\n              }\n\n              void shorts(short s) {\n                boolean result;\n\n                // BUG: Diagnostic contains: false\n                result = s == Short.MAX_VALUE + 1;\n                // BUG: Diagnostic contains: false\n                result = s == Short.MIN_VALUE - 1;\n\n                // BUG: Diagnostic contains: true\n                result = s != Short.MAX_VALUE + 1;\n                // BUG: Diagnostic contains: true\n                result = s != Short.MIN_VALUE - 1;\n\n                // BUG: Diagnostic contains: false\n                result = s > Short.MAX_VALUE;\n                // BUG: Diagnostic contains: true\n                result = s > Short.MIN_VALUE - 1;\n\n                // BUG: Diagnostic contains: false\n                result = s >= Short.MAX_VALUE + 1;\n                // BUG: Diagnostic contains: true\n                result = s >= Short.MIN_VALUE;\n\n                // BUG: Diagnostic contains: false\n                result = s < Short.MIN_VALUE;\n                // BUG: Diagnostic contains: true\n                result = s < Short.MAX_VALUE + 1;\n\n                // BUG: Diagnostic contains: false\n                result = s <= Short.MIN_VALUE - 1;\n                // BUG: Diagnostic contains: true\n                result = s <= Short.MAX_VALUE;\n              }\n\n              void shortsReversed(short s) {\n                boolean result;\n\n                // BUG: Diagnostic contains: false\n                result = Short.MAX_VALUE < s;\n                // BUG: Diagnostic contains: true\n                result = Short.MIN_VALUE - 1 < s;\n\n                // BUG: Diagnostic contains: false\n                result = Short.MAX_VALUE + 1 <= s;\n                // BUG: Diagnostic contains: true\n                result = Short.MIN_VALUE <= s;\n\n                // BUG: Diagnostic contains: false\n                result = Short.MIN_VALUE > s;\n                // BUG: Diagnostic contains: true\n                result = Short.MAX_VALUE + 1 > s;\n\n                // BUG: Diagnostic contains: false\n                result = Short.MIN_VALUE - 1 >= s;\n                // BUG: Diagnostic contains: true\n                result = Short.MAX_VALUE >= s;\n              }\n\n              void ints(int i) {\n                boolean result;\n\n                // BUG: Diagnostic contains: false\n                result = i == Integer.MAX_VALUE + 1L;\n              }\n\n              void longs(long l) {\n                boolean result;\n\n                // BUG: Diagnostic contains: false\n                result = l == Long.MIN_VALUE * 2.0;\n              }\n            }\\"
    },
    {
      "description": "negativeCases",
      "expected-problems": null,
      "expected-linenumbers": [
        174
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import java.io.IOException;\n            import java.io.Reader;\n\n            /**\n             * @author Bill Pugh (bill.pugh@gmail.com)\n             */\n            class ComparisonOutOfRangeNegativeCases {\n\n              void byteEquality() {\n                boolean result;\n                byte b = 0;\n                byte[] barr = {1, 2, 3};\n\n                result = b == 1;\n                result = b == -2;\n                result = b == 127;\n                result = b != 1;\n\n                result = b == (byte) 255;\n\n                result = b == 'a'; // char\n                result = b == 1L; // long\n                result = b == 1.123f; // float\n                result = b == 1.123; // double\n\n                result = barr[0] == 1;\n                result = barr[0] == -2;\n                result = barr[0] == -128;\n              }\n\n              void charEquality() throws IOException {\n                boolean result;\n                char c = 'A';\n                Reader reader = null;\n\n                result = c == 0;\n                result = c == 0xffff;\n\n                result = c == 1L; // long\n                result = c == 1.123f; // float\n                result = c == 1.123; // double\n\n                int d;\n                result = (d = reader.read()) == -1;\n              }\n\n              void shorts(short s) {\n                boolean result;\n\n                result = s == Short.MAX_VALUE;\n                result = s == Short.MIN_VALUE;\n\n                result = s != Short.MAX_VALUE;\n                result = s != Short.MIN_VALUE;\n\n                result = s > Short.MAX_VALUE - 1;\n                result = s > Short.MIN_VALUE;\n\n                result = s >= Short.MAX_VALUE;\n                result = s >= Short.MIN_VALUE + 1;\n\n                result = s < Short.MIN_VALUE + 1;\n                result = s < Short.MAX_VALUE;\n\n                result = s <= Short.MIN_VALUE;\n                result = s <= Short.MAX_VALUE - 1;\n              }\n\n              void shortsReversed(short s) {\n                boolean result;\n\n                result = Short.MAX_VALUE - 1 < s;\n                result = Short.MIN_VALUE < s;\n\n                result = Short.MAX_VALUE <= s;\n                result = Short.MIN_VALUE + 1 <= s;\n\n                result = Short.MIN_VALUE + 1 > s;\n                result = Short.MAX_VALUE > s;\n\n                result = Short.MIN_VALUE >= s;\n                result = Short.MAX_VALUE - 1 >= s;\n              }\n\n              void ints(int i) {\n                boolean result;\n\n                result = i == (long) Integer.MAX_VALUE;\n              }\n\n              void longs(long l) {\n                boolean result;\n\n                result = l == (double) Long.MIN_VALUE;\n              }\n\n              String binaryTreeMixingByteWithNonNumeric(byte b) {\n                return \"value is: \" + b;\n              }\n            }\\"
    }
  ]
}