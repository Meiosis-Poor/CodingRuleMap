{
  "name": "SizeGreaterThanOrEqualsZero",
  "language": "java",
  "description": "Comparison of a size >= 0 is always true, did you intend to check for non-emptiness?",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 256,
  "branches": 31,
  "apis": 2,
  "test": [
    {
      "description": "collectionSizePositiveCases",
      "expected-problems": null,
      "expected-linenumbers": [
        32
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport com.google.common.collect.Iterables;\nimport com.google.errorprone.bugpatterns.proto.ProtoTest.TestProtoMessage;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\n\n/**\n * @author glorioso@google.com (Nick Glorioso)\n */\npublic class SizeGreaterThanOrEqualsZeroPositiveCases {\n  private List<Integer> intList = new ArrayList<>();\n  private Set<Integer> intSet = new HashSet<>();\n  private Map<Integer, Integer> intMap = new HashMap<>();\n  private Collection<Integer> intCollection = intList;\n\n  public boolean collectionSize() {\n\n    // BUG: Diagnostic contains: !intList.isEmpty()\n    boolean foo = intList.size() >= 0;\n\n    // BUG: Diagnostic contains: !intSet.isEmpty()\n    foo = intSet.size() >= 0;\n\n    // BUG: Diagnostic contains: !intSet.isEmpty()\n    foo = 0 <= intSet.size();\n\n    // BUG: Diagnostic contains: !intMap.isEmpty()\n    foo = intMap.size() >= 0;\n\n    // BUG: Diagnostic contains: !intCollection.isEmpty()\n    foo = intCollection.size() >= 0;\n\n    // Yes, that works as java code\n    // BUG: Diagnostic contains: !new ArrayList<Integer>().isEmpty()\n    if (new ArrayList<Integer>().size() >= 0) {}\n\n    CollectionContainer baz = new CollectionContainer();\n\n    // BUG: Diagnostic contains: !baz.intList.isEmpty()\n    if (baz.intList.size() >= 0) {}\n\n    // BUG: Diagnostic contains: !baz.getIntList().isEmpty()\n    if (baz.getIntList().size() >= 0) {}\n\n    // BUG: Diagnostic contains: !Iterables.isEmpty(baz.getIntList())\n    foo = Iterables.size(baz.getIntList()) >= 0;\n\n    return foo;\n  }\n\n  public void stringLength() {\n    String myString = \"foo\";\n    CharSequence charSequence = myString;\n    StringBuffer stringBuffer = new StringBuffer(myString);\n    StringBuilder stringBuilder = new StringBuilder(myString);\n    boolean foo = false;\n\n    // BUG: Diagnostic contains: !myString.isEmpty()\n    foo = myString.length() >= 0;\n\n    // BUG: Diagnostic contains: !\"My String Literal\".isEmpty()\n    foo = \"My String Literal\".length() >= 0;\n\n    // BUG: Diagnostic contains: !myString.trim().substring(0).isEmpty();\n    foo = myString.trim().substring(0).length() >= 0;\n\n    // BUG: Diagnostic contains: charSequence.length() > 0\n    foo = charSequence.length() >= 0;\n\n    // BUG: Diagnostic contains: stringBuffer.length() > 0\n    foo = stringBuffer.length() >= 0;\n\n    // BUG: Diagnostic contains: 0 < stringBuffer.length()\n    foo = 0 <= stringBuffer.length();\n\n    // BUG: Diagnostic contains: stringBuilder.length() > 0\n    foo = stringBuilder.length() >= 0;\n  }\n\n  private static int[] staticIntArray;\n  private int[] intArray;\n  private boolean[][] twoDarray;\n\n  public boolean arrayLength() {\n\n    // BUG: Diagnostic contains: intArray.length > 0\n    boolean foo = intArray.length >= 0;\n\n    // BUG: Diagnostic contains: twoDarray.length > 0\n    foo = twoDarray.length >= 0;\n\n    // BUG: Diagnostic contains: staticIntArray.length > 0\n    foo = staticIntArray.length >= 0;\n\n    // BUG: Diagnostic contains: twoDarray[0].length > 0\n    foo = twoDarray[0].length >= 0;\n\n    // BUG: Diagnostic contains: 0 < twoDarray[0].length\n    foo = 0 <= twoDarray[0].length;\n\n    // BUG: Diagnostic contains: (((((twoDarray))))).length > 0\n    foo = (((((twoDarray))))).length >= 0;\n\n    return foo;\n  }\n\n  public void protoCount(TestProtoMessage msg) {\n    boolean foo;\n    // BUG: Diagnostic contains: foo = !msg.getMultiFieldList().isEmpty();\n    foo = msg.getMultiFieldCount() >= 0;\n    // BUG: Diagnostic contains: foo = !msg.getMultiFieldList().isEmpty();\n    foo = 0 <= msg.getMultiFieldCount();\n    // BUG: Diagnostic contains: foo = !(((((msg))))).getMultiFieldList().isEmpty();\n    foo = (((((msg))))).getMultiFieldCount() >= 0;\n    // BUG: Diagnostic contains: if (!this.getMsg(msg).get().getMultiFieldList().isEmpty()) {\n    if (this.getMsg(msg).get().getMultiFieldCount() >= 0) {\n      foo = true;\n    }\n  }\n\n  private Optional<TestProtoMessage> getMsg(TestProtoMessage msg) {\n    return Optional.of(msg);\n  }\n\n  private static class CollectionContainer {\n    List<Integer> intList;\n\n    List<Integer> getIntList() {\n      return intList;\n    }\n  }\n}\\\n\n\npackage com.google.errorprone.bugpatterns.testdata;\n\nimport com.google.errorprone.bugpatterns.proto.ProtoTest.TestProtoMessage;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * @author glorioso@google.com (Nick Glorioso)\n */\npublic class SizeGreaterThanOrEqualsZeroNegativeCases {\n  private List<Integer> intList = new ArrayList<>();\n  private Set<Integer> intSet = new HashSet<>();\n  private Collection<Integer> intCollection = intList;\n\n  public boolean testEquality() {\n    boolean foo;\n    foo = intList.size() > 0;\n    foo = intSet.size() >= 1;\n    foo = intCollection.size() <= 0;\n    foo = intCollection.size() == 0;\n    foo = intCollection.size() < 0;\n\n    if (new ArrayList<Integer>().size() > 0) {}\n\n    CollectionContainer baz = new CollectionContainer();\n    if (baz.intList.size() >= 1) {}\n    if (baz.getIntList().size() >= 1) {}\n\n    // These are incorrect comparisons, but we've chosen to not attempt to find these issues\n    foo = (((((new HasASizeMethod()))))).size() >= 0;\n    foo = new HasASizeMethod().length >= 0;\n\n    return foo;\n  }\n\n  private static int[] staticIntArray;\n  private int[] intArray;\n  private boolean[][] twoDarray;\n\n  public boolean arrayLength() {\n    int zero = 0;\n\n    boolean foo = intArray.length > 0;\n    foo = twoDarray.length >= 1;\n    foo = staticIntArray.length >= -1;\n    foo = twoDarray[0].length > 0;\n    foo = (((((twoDarray))))).length > zero;\n\n    return foo;\n  }\n\n  public void protoCount(TestProtoMessage msg) {\n    int zero = 0;\n    boolean foo;\n    foo = msg.getMultiFieldCount() > 0;\n    foo = 0 < msg.getMultiFieldCount();\n    foo = 0 > msg.getMultiFieldCount();\n    foo = msg.getMultiFieldCount() >= 1;\n    foo = msg.getMultiFieldCount() >= -1;\n    foo = msg.getMultiFieldCount() < 0;\n    foo = (((((msg))))).getMultiFieldCount() > zero;\n    foo = msg.getTestFieldNamedCount() >= 0; // Not a repeated field, just name ending in `count`\n  }\n\n  private static class CollectionContainer {\n    List<Integer> intList;\n\n    List<Integer> getIntList() {\n      return intList;\n    }\n  }\n\n  private static class HasASizeMethod {\n    public int length = 0;\n\n    public int size() {\n      return length;\n    }\n  }\n}\\"
    },
    {
      "description": "collectionSizeNegativeCases",
      "expected-problems": null,
      "expected-linenumbers": [
        181
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport com.google.errorprone.bugpatterns.proto.ProtoTest.TestProtoMessage;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * @author glorioso@google.com (Nick Glorioso)\n */\npublic class SizeGreaterThanOrEqualsZeroNegativeCases {\n  private List<Integer> intList = new ArrayList<>();\n  private Set<Integer> intSet = new HashSet<>();\n  private Collection<Integer> intCollection = intList;\n\n  public boolean testEquality() {\n    boolean foo;\n    foo = intList.size() > 0;\n    foo = intSet.size() >= 1;\n    foo = intCollection.size() <= 0;\n    foo = intCollection.size() == 0;\n    foo = intCollection.size() < 0;\n\n    if (new ArrayList<Integer>().size() > 0) {}\n\n    CollectionContainer baz = new CollectionContainer();\n    if (baz.intList.size() >= 1) {}\n    if (baz.getIntList().size() >= 1) {}\n\n    // These are incorrect comparisons, but we've chosen to not attempt to find these issues\n    foo = (((((new HasASizeMethod()))))).size() >= 0;\n    foo = new HasASizeMethod().length >= 0;\n\n    return foo;\n  }\n\n  private static int[] staticIntArray;\n  private int[] intArray;\n  private boolean[][] twoDarray;\n\n  public boolean arrayLength() {\n    int zero = 0;\n\n    boolean foo = intArray.length > 0;\n    foo = twoDarray.length >= 1;\n    foo = staticIntArray.length >= -1;\n    foo = twoDarray[0].length > 0;\n    foo = (((((twoDarray))))).length > zero;\n\n    return foo;\n  }\n\n  public void protoCount(TestProtoMessage msg) {\n    int zero = 0;\n    boolean foo;\n    foo = msg.getMultiFieldCount() > 0;\n    foo = 0 < msg.getMultiFieldCount();\n    foo = 0 > msg.getMultiFieldCount();\n    foo = msg.getMultiFieldCount() >= 1;\n    foo = msg.getMultiFieldCount() >= -1;\n    foo = msg.getMultiFieldCount() < 0;\n    foo = (((((msg))))).getMultiFieldCount() > zero;\n    foo = msg.getTestFieldNamedCount() >= 0; // Not a repeated field, just name ending in `count`\n  }\n\n  private static class CollectionContainer {\n    List<Integer> intList;\n\n    List<Integer> getIntList() {\n      return intList;\n    }\n  }\n\n  private static class HasASizeMethod {\n    public int length = 0;\n\n    public int size() {\n      return length;\n    }\n  }\n}\\"
    }
  ]
}