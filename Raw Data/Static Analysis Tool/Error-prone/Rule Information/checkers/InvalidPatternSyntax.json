{
  "name": "InvalidPatternSyntax",
  "language": "java",
  "description": "Invalid syntax used for a regular expression",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 41,
  "branches": 4,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import java.util.regex.Pattern;\n\n            /**\n             * @author mdempsky@google.com (Matthew Dempsky)\n             */\n            public class InvalidPatternSyntaxPositiveCases {\n              public static final String INVALID = \"*\";\n\n              {\n                // BUG: Diagnostic contains: Unclosed character class\n                Pattern.matches(\"[^\\\\\\\\]\", \"\");\n                // BUG: Diagnostic contains: Unclosed character class\n                Pattern.matches(\"[a-z\", \"\");\n                // BUG: Diagnostic contains: Illegal repetition\n                Pattern.matches(\"{\", \"\");\n\n                // BUG: Diagnostic contains:\n                Pattern.matches(INVALID, \"\");\n                // BUG: Diagnostic contains:\n                \"\".matches(INVALID);\n                // BUG: Diagnostic contains:\n                \"\".replaceAll(INVALID, \"\");\n                // BUG: Diagnostic contains:\n                \"\".replaceFirst(INVALID, \"\");\n                // BUG: Diagnostic contains:\n                \"\".split(INVALID);\n                // BUG: Diagnostic contains:\n                \"\".split(INVALID, 0);\n              }\n            }\\\n            \n\n            package com.google.errorprone.bugpatterns.testdata;\n\n            import java.util.regex.Pattern;\n\n            /**\n             * @author mdempsky@google.com (Matthew Dempsky)\n             */\n            public class InvalidPatternSyntaxNegativeCases {\n              public void foo(String x) {\n                Pattern.compile(\"t\");\n                Pattern.compile(\"t\", 0);\n                Pattern.matches(\"t\", \"\");\n                \"\".matches(\"t\");\n                \"\".replaceAll(\"t\", \"\");\n                \"\".replaceFirst(\"t\", \"\");\n                \"\".split(\"t\");\n                \"\".split(\"t\", 0);\n\n                Pattern.compile(x);\n                Pattern.compile(x, 0);\n                Pattern.matches(x, \"\");\n                \"\".matches(x);\n                \"\".replaceAll(x, \"\");\n                \"\".replaceFirst(x, \"\");\n                \"\".split(x);\n                \"\".split(x, 0);\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        75
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import java.util.regex.Pattern;\n\n            /**\n             * @author mdempsky@google.com (Matthew Dempsky)\n             */\n            public class InvalidPatternSyntaxNegativeCases {\n              public void foo(String x) {\n                Pattern.compile(\"t\");\n                Pattern.compile(\"t\", 0);\n                Pattern.matches(\"t\", \"\");\n                \"\".matches(\"t\");\n                \"\".replaceAll(\"t\", \"\");\n                \"\".replaceFirst(\"t\", \"\");\n                \"\".split(\"t\");\n                \"\".split(\"t\", 0);\n\n                Pattern.compile(x);\n                Pattern.compile(x, 0);\n                Pattern.matches(x, \"\");\n                \"\".matches(x);\n                \"\".replaceAll(x, \"\");\n                \"\".replaceFirst(x, \"\");\n                \"\".split(x);\n                \"\".split(x, 0);\n              }\n            }\\"
    }
  ]
}