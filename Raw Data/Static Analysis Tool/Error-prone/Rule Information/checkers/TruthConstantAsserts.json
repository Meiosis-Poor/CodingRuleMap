{
  "name": "TruthConstantAsserts",
  "language": "java",
  "description": "Truth Library assert is called on a constant.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 80,
  "branches": 9,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        34
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport static com.google.common.truth.Truth.assertThat;\n\n/**\n * Positive test cases for TruthConstantAsserts check.\n *\n * @author bhagwani@google.com (Sumit Bhagwani)\n */\npublic class TruthConstantAssertsPositiveCases {\n\n  public void testAssertThat() {\n    // BUG: Diagnostic contains: assertThat(new TruthConstantAssertsPositiveCases()).isEqualTo(1);\n    assertThat(1).isEqualTo(new TruthConstantAssertsPositiveCases());\n\n    // BUG: Diagnostic contains: assertThat(someStaticMethod()).isEqualTo(\"my string\");\n    assertThat(\"my string\").isEqualTo(someStaticMethod());\n\n    // BUG: Diagnostic contains: assertThat(memberMethod()).isEqualTo(42);\n    assertThat(42).isEqualTo(memberMethod());\n\n    // BUG: Diagnostic contains: assertThat(someStaticMethod()).isEqualTo(42L);\n    assertThat(42L).isEqualTo(someStaticMethod());\n\n    // BUG: Diagnostic contains: assertThat(new Object()).isEqualTo(4.2);\n    assertThat(4.2).isEqualTo(new Object());\n  }\n\n  private static TruthConstantAssertsPositiveCases someStaticMethod() {\n    return new TruthConstantAssertsPositiveCases();\n  }\n\n  private TruthConstantAssertsPositiveCases memberMethod() {\n    return new TruthConstantAssertsPositiveCases();\n  }\n}\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        80
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n\n            /**\n             * Negative test cases for TruthConstantAsserts check.\n             *\n             * @author bhagwani@google.com (Sumit Bhagwani)\n             */\n            public class TruthConstantAssertsNegativeCases {\n\n              public void testNegativeCases() {\n                assertThat(new TruthConstantAssertsNegativeCases()).isEqualTo(Boolean.TRUE);\n                assertThat(getObject()).isEqualTo(Boolean.TRUE);\n\n                // assertion called on constant with constant expectation is ignored.\n                assertThat(Boolean.FALSE).isEqualTo(4.2);\n              }\n\n              private static TruthConstantAssertsNegativeCases getObject() {\n                return new TruthConstantAssertsNegativeCases();\n              }\n            }\\"
    }
  ]
}