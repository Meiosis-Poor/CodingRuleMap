{
  "name": "ArrayAsKeyOfSetOrMap",
  "language": "java",
  "description": "Arrays do not override equals() or hashCode, so comparisons will be done on reference equality only. If neither deduplication nor lookup are needed, consider using a List instead. Otherwise, use IdentityHashMap/Set, a Map from a library that handles object arrays, or an Iterable/List of pairs.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 39,
  "branches": 1,
  "apis": 1,
  "test": [
    {
      "description": "positive",
      "expected-problems": null,
      "expected-linenumbers": [
        37
      ],
      "code": "import java.util.Arrays;\nimport java.util.Set;\nimport java.util.Map;\nimport java.util.LinkedHashMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport com.google.common.collect.Sets;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.HashMultiset;\nimport com.google.common.collect.LinkedHashMultiset;\nimport com.google.common.collect.HashBiMap;\nimport com.google.common.collect.HashMultimap;\nimport com.google.common.collect.LinkedHashMultimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport com.google.common.collect.LinkedListMultimap;\nimport java.util.HashMap;\nimport java.util.HashSet;\n\nclass Test {\n  public static void main(String[] args) {\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    Map<String[], Integer> testNewMap = Maps.newHashMap();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    Set<String[]> testNewSet = Sets.newHashSet();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    HashMap<String[], Integer> testNewHashMap = Maps.newHashMap();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    HashSet<String[]> testNewHashSet = Sets.newHashSet();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    Map<String[], Integer> testMap = new HashMap<String[], Integer>();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    Set<String[]> testSet = new HashSet<String[]>();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    HashMap<String[], Integer> testHashMap = new HashMap<String[], Integer>();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    HashSet<String[]> testHashSet = new HashSet<String[]>();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    HashMultimap<String[], Integer> testHashMultimap = HashMultimap.create();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    ArrayListMultimap<String[], Integer> testArrayListMultimap = ArrayListMultimap.create();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    LinkedHashMultimap<String[], Integer> testLinkedHashMultimap = LinkedHashMultimap.create();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    LinkedListMultimap<String[], Integer> testLinkedListMultimap = LinkedListMultimap.create();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    HashBiMap<String[], Integer> testHashBiMap = HashBiMap.create();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    LinkedHashMap<String[], Integer> testLinkedHashMap = new LinkedHashMap<String[], Integer>();\n    ConcurrentHashMap<String[], Integer> testConcurrentHashMap =\n        // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n        new ConcurrentHashMap<String[], Integer>();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    HashMultiset<String[]> testHashMultiSet = HashMultiset.create();\n    // BUG: Diagnostic contains: ArrayAsKeyOfSetOrMap\n    LinkedHashMultiset<String[]> testLinkedHashMultiSet = LinkedHashMultiset.create();\n  }\n}"
    },
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        103
      ],
      "code": "import java.util.Arrays;\nimport java.util.Set;\nimport java.util.Map;\nimport java.util.LinkedHashMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport com.google.common.collect.Sets;\nimport com.google.common.collect.Maps;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.TreeSet;\nimport com.google.common.collect.HashMultiset;\nimport com.google.common.collect.LinkedHashMultiset;\nimport com.google.common.collect.HashBiMap;\nimport com.google.common.collect.HashMultimap;\nimport com.google.common.collect.LinkedHashMultimap;\nimport com.google.common.collect.ArrayListMultimap;\nimport com.google.common.collect.LinkedListMultimap;\nimport com.google.common.collect.Ordering;\n\nclass Test {\n  public static void main(String[] args) {\n    Map<Integer, Integer> testMap = new HashMap<Integer, Integer>();\n    Set<String> testSet = new HashSet<String>();\n    HashMap<Integer, Integer> testHashMap = new HashMap<Integer, Integer>();\n    HashSet<String> testHashSet = new HashSet<String>();\n    Set testSet2 = new HashSet();\n    Map testMap2 = new HashMap();\n    Map<Integer, Integer> mapFromMethod = Maps.newHashMap();\n    Set<String> setFromMethod = Sets.newHashSet();\n    Set<String[]> thisShouldWork =\n        new TreeSet<String[]>(Ordering.natural().lexicographical().onResultOf(Arrays::asList));\n    HashMultimap<String, Integer> testHashMultimap = HashMultimap.create();\n    ArrayListMultimap<String, Integer> testArrayListMultimap = ArrayListMultimap.create();\n    LinkedHashMultimap<String, Integer> testLinkedHashMultimap = LinkedHashMultimap.create();\n    LinkedListMultimap<String, Integer> testLinkedListMultimap = LinkedListMultimap.create();\n    HashBiMap<String, Integer> testHashBiMap = HashBiMap.create();\n    LinkedHashMap<String, Integer> testLinkedHashMap = new LinkedHashMap<String, Integer>();\n    ConcurrentHashMap<String, Integer> testConcurrentHashMap =\n        new ConcurrentHashMap<String, Integer>();\n    HashMultiset<String> testHashMultiSet = HashMultiset.create();\n    LinkedHashMultiset<String> testLinkedHashMultiSet = LinkedHashMultiset.create();\n  }\n}"
    }
  ]
}