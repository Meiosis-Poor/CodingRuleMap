{
  "name": "StringFormatWithLiteral",
  "language": "java",
  "description": "There is no need to use String.format() when all the arguments are literals.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 101,
  "branches": 7,
  "apis": 1,
  "test": [
    {
      "description": "negativeStringFormatWithNonTrivialHexFormattingLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        34
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return String.format(\"This number %02x will be formatted\", 101);\n              }\n            }"
    },
    {
      "description": "negativeStringFormatWithNonTrivialFloatFormattingLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        49
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return String.format(\"Formatting this float: %f\", 101.0);\n              }\n            }"
    },
    {
      "description": "negativeStringFormatWithVariableAsFormatString",
      "expected-problems": null,
      "expected-linenumbers": [
        64
      ],
      "code": "import java.lang.String;\n\n            public class ExampleClass {\n              String test() {\n                String formatString = \"Formatting this string: %s\";\n                return String.format(formatString, \"data\");\n              }\n            }"
    },
    {
      "description": "negativeStringFormatWithVariableAsFormatStringAndNoArguments",
      "expected-problems": null,
      "expected-linenumbers": [
        82
      ],
      "code": "public class ExampleClass {\n              String test() {\n                String formatString = \"Nothing to format\";\n                return String.format(formatString);\n              }\n            }"
    },
    {
      "description": "negativeStringFormatWithNewLine",
      "expected-problems": null,
      "expected-linenumbers": [
        98
      ],
      "code": "import java.lang.String;\n\n            public class ExampleClass {\n              String test() {\n                return String.format(\"%n\");\n              }\n            }"
    },
    {
      "description": "negativeStringFormatWithOneStringVariable",
      "expected-problems": null,
      "expected-linenumbers": [
        115
      ],
      "code": "import java.lang.String;\n\n            public class ExampleClass {\n              String test() {\n                String data = \"data\";\n                return String.format(\"Formatting this string: %s\", data);\n              }\n            }"
    },
    {
      "description": "negativeStringFormatWithOneIntegerVariable",
      "expected-problems": null,
      "expected-linenumbers": [
        133
      ],
      "code": "import java.lang.String;\n\n            public class ExampleClass {\n              String test() {\n                Integer data = 3;\n                return String.format(\"Formatting this int: %d\", data);\n              }\n            }"
    },
    {
      "description": "negativeStringFormatWithOneIntegerVariableAndStringLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        151
      ],
      "code": "import java.lang.String;\n\npublic class ExampleClass {\n  String test() {\n    Integer data = 3;\n    return String.format(\"Formatting this int: %d;Formatting this string: %s\", data, \"string\");\n  }\n}"
    },
    {
      "description": "negativeStringFormatWithOneStringVariableStaticImport",
      "expected-problems": null,
      "expected-linenumbers": [
        169
      ],
      "code": "import static java.lang.String.format;\n\n            public class ExampleClass {\n              String test() {\n                String data = \"data\";\n                return format(\"Formatting this string: %s\", data);\n              }\n            }"
    },
    {
      "description": "negativeOtherMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        187
      ],
      "code": "import java.lang.String;\n\n            public class ExampleClass {\n              String test() {\n                return String.valueOf(true);\n              }\n            }"
    },
    {
      "description": "refactoringStringFormatWithNoArguments",
      "expected-problems": null,
      "expected-linenumbers": [
        204
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return String.format(\"Formatting nothing\");\n              }\n            }\n            \n\n            public class ExampleClass {\n              String test() {\n                return \"Formatting nothing\";\n              }\n            }"
    },
    {
      "description": "refactoringFormattedWithNoArguments",
      "expected-problems": null,
      "expected-linenumbers": [
        228
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return \"Formatting nothing\".formatted();\n              }\n            }\n            \n\n            public class ExampleClass {\n              String test() {\n                return \"Formatting nothing\";\n              }\n            }"
    },
    {
      "description": "refactoringStringFormatWithIntegerLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        252
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return String.format(\"Formatting this integer: %d\", 1);\n              }\n            }\n            \n\n            public class ExampleClass {\n              String test() {\n                return \"Formatting this integer: 1\";\n              }\n            }"
    },
    {
      "description": "refactoringFormattedWithIntegerLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        276
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return \"Formatting this integer: %d\".formatted(1);\n              }\n            }\n            \n\n            public class ExampleClass {\n              String test() {\n                return \"Formatting this integer: 1\";\n              }\n            }"
    },
    {
      "description": "refactoringStringFormatWithBooleanLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        300
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return String.format(\"Formatting this boolean: %B\", true);\n              }\n            }\n            \n\n            public class ExampleClass {\n              String test() {\n                return \"Formatting this boolean: TRUE\";\n              }\n            }"
    },
    {
      "description": "refactoringStringFormatWithStringLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        324
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return String.format(\"Formatting this string: %s\", \"data\");\n              }\n            }\n            \n\n            public class ExampleClass {\n              String test() {\n                return \"Formatting this string: data\";\n              }\n            }"
    },
    {
      "description": "refactoringStringFormatWithMultipleLiterals",
      "expected-problems": null,
      "expected-linenumbers": [
        348
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return String.format(\"Formatting this string: %s;Integer: %d\", \"data\", 1);\n              }\n            }\n            \n\n            public class ExampleClass {\n              String test() {\n                return \"Formatting this string: data;Integer: 1\";\n              }\n            }"
    },
    {
      "description": "refactoringStringFormatWithLineBreak",
      "expected-problems": null,
      "expected-linenumbers": [
        372
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return String.format(\"hello \\\\n %s\", \"world\");\n              }\n            }\n            \n\n            public class ExampleClass {\n              String test() {\n                return \"hello \\\\n world\";\n              }\n            }"
    },
    {
      "description": "refactoringStringFormatWithLineBreakOnLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        396
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return String.format(\"hello %s\", \"\\\\n world\");\n              }\n            }\n            \n\n            public class ExampleClass {\n              String test() {\n                return \"hello \\\\n world\";\n              }\n            }"
    },
    {
      "description": "refactoringStringFormatWithSingleQuoteLiteral",
      "expected-problems": null,
      "expected-linenumbers": [
        420
      ],
      "code": "public class ExampleClass {\n              String test() {\n                return String.format(\"hello %s\", \"['world']\");\n              }\n            }\n            \n\n            public class ExampleClass {\n              String test() {\n                return \"hello ['world']\";\n              }\n            }"
    }
  ]
}