{
  "name": "DurationToLongTimeUnit",
  "language": "java",
  "description": "Unit mismatch when decomposing a Duration or Instant to call a <long, TimeUnit> API",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 160,
  "branches": 14,
  "apis": 4,
  "test": [
    {
      "description": "correspondingUnitsAreOk",
      "expected-problems": null,
      "expected-linenumbers": [
        30
      ],
      "code": "import com.google.protobuf.Duration;\n            import com.google.protobuf.Timestamp;\n            import java.util.concurrent.Future;\n            import java.util.concurrent.TimeUnit;\n\n            public class TestClass {\n              void javaTime(Future<String> f, java.time.Duration d) throws Exception {\n                f.get(42L, TimeUnit.SECONDS);\n                f.get(d.toNanos(), TimeUnit.NANOSECONDS);\n                f.get(d.toMillis(), TimeUnit.MILLISECONDS);\n                f.get(d.toSeconds(), TimeUnit.SECONDS);\n                f.get(d.getSeconds(), TimeUnit.SECONDS);\n                f.get(d.toMinutes(), TimeUnit.MINUTES);\n                f.get(d.toHours(), TimeUnit.HOURS);\n                f.get(d.toDays(), TimeUnit.DAYS);\n              }\n\n              void javaTime(Future<String> f, java.time.Instant i) throws Exception {\n                f.get(42L, TimeUnit.SECONDS);\n                f.get(i.toEpochMilli(), TimeUnit.MILLISECONDS);\n                f.get(i.getEpochSecond(), TimeUnit.SECONDS);\n              }\n\n              void jodaTime(Future<String> f, org.joda.time.Duration d) throws Exception {\n                f.get(42L, TimeUnit.SECONDS);\n                f.get(d.getMillis(), TimeUnit.MILLISECONDS);\n                f.get(d.getStandardSeconds(), TimeUnit.SECONDS);\n                f.get(d.getStandardMinutes(), TimeUnit.MINUTES);\n                f.get(d.getStandardHours(), TimeUnit.HOURS);\n                f.get(d.getStandardDays(), TimeUnit.DAYS);\n              }\n\n              void jodaTime(Future<String> f, org.joda.time.Instant i) throws Exception {\n                f.get(42L, TimeUnit.SECONDS);\n                f.get(i.getMillis(), TimeUnit.MILLISECONDS);\n              }\n\n              void protoTime(Future<String> f, Duration d) throws Exception {\n                f.get(42L, TimeUnit.SECONDS);\n                f.get(d.getSeconds(), TimeUnit.SECONDS);\n              }\n\n              void protoTime(Future<String> f, Timestamp t) throws Exception {\n                f.get(42L, TimeUnit.SECONDS);\n                f.get(t.getSeconds(), TimeUnit.SECONDS);\n              }\n            }"
    },
    {
      "description": "correspondingUnitsAreOk_staticImport",
      "expected-problems": null,
      "expected-linenumbers": [
        87
      ],
      "code": "import static java.util.concurrent.TimeUnit.DAYS;\n            import static java.util.concurrent.TimeUnit.HOURS;\n            import static java.util.concurrent.TimeUnit.MILLISECONDS;\n            import static java.util.concurrent.TimeUnit.MINUTES;\n            import static java.util.concurrent.TimeUnit.NANOSECONDS;\n            import static java.util.concurrent.TimeUnit.SECONDS;\n            import com.google.protobuf.Duration;\n            import com.google.protobuf.Timestamp;\n            import java.util.concurrent.Future;\n\n            public class TestClass {\n              void javaTime(Future<String> f, java.time.Duration d) throws Exception {\n                f.get(42L, SECONDS);\n                f.get(d.toNanos(), NANOSECONDS);\n                f.get(d.toMillis(), MILLISECONDS);\n                f.get(d.toSeconds(), SECONDS);\n                f.get(d.getSeconds(), SECONDS);\n                f.get(d.toMinutes(), MINUTES);\n                f.get(d.toHours(), HOURS);\n                f.get(d.toDays(), DAYS);\n              }\n\n              void javaTime(Future<String> f, java.time.Instant i) throws Exception {\n                f.get(42L, SECONDS);\n                f.get(i.toEpochMilli(), MILLISECONDS);\n                f.get(i.getEpochSecond(), SECONDS);\n              }\n\n              void jodaTime(Future<String> f, org.joda.time.Duration d) throws Exception {\n                f.get(42L, SECONDS);\n                f.get(d.getMillis(), MILLISECONDS);\n                f.get(d.getStandardSeconds(), SECONDS);\n                f.get(d.getStandardMinutes(), MINUTES);\n                f.get(d.getStandardHours(), HOURS);\n                f.get(d.getStandardDays(), DAYS);\n              }\n\n              void jodaTime(Future<String> f, org.joda.time.Instant i) throws Exception {\n                f.get(42L, SECONDS);\n                f.get(i.getMillis(), MILLISECONDS);\n              }\n\n              void protoTime(Future<String> f, Duration d) throws Exception {\n                f.get(42L, SECONDS);\n                f.get(d.getSeconds(), SECONDS);\n              }\n\n              void protoTime(Future<String> f, Timestamp t) throws Exception {\n                f.get(42L, SECONDS);\n                f.get(t.getSeconds(), SECONDS);\n              }\n            }"
    },
    {
      "description": "conflictingUnitsFail",
      "expected-problems": null,
      "expected-linenumbers": [
        149
      ],
      "code": "import com.google.protobuf.Duration;\n            import com.google.protobuf.Timestamp;\n            import java.util.concurrent.Future;\n            import java.util.concurrent.TimeUnit;\n\n            public class TestClass {\n              void javaTime(Future<String> f, java.time.Duration d) throws Exception {\n                // BUG: Diagnostic contains: f.get(d.toNanos(), TimeUnit.NANOSECONDS)\n                f.get(d.toNanos(), TimeUnit.MILLISECONDS);\n                // BUG: Diagnostic contains: f.get(d.toMillis(), TimeUnit.MILLISECONDS)\n                f.get(d.toMillis(), TimeUnit.NANOSECONDS);\n                // BUG: Diagnostic contains: f.get(d.toSeconds(), TimeUnit.SECONDS)\n                f.get(d.toSeconds(), TimeUnit.MINUTES);\n                // BUG: Diagnostic contains: f.get(d.getSeconds(), TimeUnit.SECONDS)\n                f.get(d.getSeconds(), TimeUnit.MINUTES);\n                // BUG: Diagnostic contains: f.get(d.toMinutes(), TimeUnit.MINUTES)\n                f.get(d.toMinutes(), TimeUnit.SECONDS);\n                // BUG: Diagnostic contains: f.get(d.toHours(), TimeUnit.HOURS)\n                f.get(d.toHours(), TimeUnit.DAYS);\n                // BUG: Diagnostic contains: f.get(d.toDays(), TimeUnit.DAYS)\n                f.get(d.toDays(), TimeUnit.HOURS);\n              }\n\n              void javaTime(Future<String> f, java.time.Instant i) throws Exception {\n                // BUG: Diagnostic contains: f.get(i.toEpochMilli(), TimeUnit.MILLISECONDS)\n                f.get(i.toEpochMilli(), TimeUnit.NANOSECONDS);\n                // BUG: Diagnostic contains: f.get(i.getEpochSecond(), TimeUnit.SECONDS)\n                f.get(i.getEpochSecond(), TimeUnit.MINUTES);\n              }\n\n              void jodaTime(Future<String> f, org.joda.time.Duration d) throws Exception {\n                // BUG: Diagnostic contains: f.get(d.getMillis(), TimeUnit.MILLISECONDS)\n                f.get(d.getMillis(), TimeUnit.NANOSECONDS);\n                // BUG: Diagnostic contains: f.get(d.getStandardSeconds(), TimeUnit.SECONDS)\n                f.get(d.getStandardSeconds(), TimeUnit.MINUTES);\n                // BUG: Diagnostic contains: f.get(d.getStandardMinutes(), TimeUnit.MINUTES)\n                f.get(d.getStandardMinutes(), TimeUnit.SECONDS);\n                // BUG: Diagnostic contains: f.get(d.getStandardHours(), TimeUnit.HOURS)\n                f.get(d.getStandardHours(), TimeUnit.DAYS);\n                // BUG: Diagnostic contains: f.get(d.getStandardDays(), TimeUnit.DAYS)\n                f.get(d.getStandardDays(), TimeUnit.HOURS);\n              }\n\n              void jodaTime(Future<String> f, org.joda.time.Instant i) throws Exception {\n                // BUG: Diagnostic contains: f.get(i.getMillis(), TimeUnit.MILLISECONDS)\n                f.get(i.getMillis(), TimeUnit.NANOSECONDS);\n              }\n\n              void protoTime(Future<String> f, Duration d) throws Exception {\n                // BUG: Diagnostic contains: f.get(d.getSeconds(), TimeUnit.SECONDS)\n                f.get(d.getSeconds(), TimeUnit.MINUTES);\n              }\n\n              void protoTime(Future<String> f, Timestamp t) throws Exception {\n                // BUG: Diagnostic contains: f.get(t.getSeconds(), TimeUnit.SECONDS)\n                f.get(t.getSeconds(), TimeUnit.MINUTES);\n              }\n            }"
    },
    {
      "description": "conflictingUnitsFail_staticImport",
      "expected-problems": null,
      "expected-linenumbers": [
        217
      ],
      "code": "import static java.util.concurrent.TimeUnit.DAYS;\n            import static java.util.concurrent.TimeUnit.HOURS;\n            import static java.util.concurrent.TimeUnit.MILLISECONDS;\n            import static java.util.concurrent.TimeUnit.MINUTES;\n            import static java.util.concurrent.TimeUnit.NANOSECONDS;\n            import static java.util.concurrent.TimeUnit.SECONDS;\n            import com.google.protobuf.Duration;\n            import com.google.protobuf.Timestamp;\n            import java.util.concurrent.Future;\n            import java.util.concurrent.TimeUnit;\n\n            public class TestClass {\n              void javaTime(Future<String> f, java.time.Duration d) throws Exception {\n                // BUG: Diagnostic contains: f.get(d.toNanos(), TimeUnit.NANOSECONDS)\n                f.get(d.toNanos(), MILLISECONDS);\n                // BUG: Diagnostic contains: f.get(d.toMillis(), TimeUnit.MILLISECONDS)\n                f.get(d.toMillis(), NANOSECONDS);\n                // BUG: Diagnostic contains: f.get(d.toSeconds(), TimeUnit.SECONDS)\n                f.get(d.toSeconds(), MINUTES);\n                // BUG: Diagnostic contains: f.get(d.getSeconds(), TimeUnit.SECONDS)\n                f.get(d.getSeconds(), MINUTES);\n                // BUG: Diagnostic contains: f.get(d.toMinutes(), TimeUnit.MINUTES)\n                f.get(d.toMinutes(), SECONDS);\n                // BUG: Diagnostic contains: f.get(d.toHours(), TimeUnit.HOURS)\n                f.get(d.toHours(), DAYS);\n                // BUG: Diagnostic contains: f.get(d.toDays(), TimeUnit.DAYS)\n                f.get(d.toDays(), HOURS);\n              }\n\n              void javaTime(Future<String> f, java.time.Instant i) throws Exception {\n                // BUG: Diagnostic contains: f.get(i.toEpochMilli(), TimeUnit.MILLISECONDS)\n                f.get(i.toEpochMilli(), NANOSECONDS);\n                // BUG: Diagnostic contains: f.get(i.getEpochSecond(), TimeUnit.SECONDS)\n                f.get(i.getEpochSecond(), MINUTES);\n              }\n\n              void jodaTime(Future<String> f, org.joda.time.Duration d) throws Exception {\n                // BUG: Diagnostic contains: f.get(d.getMillis(), TimeUnit.MILLISECONDS)\n                f.get(d.getMillis(), NANOSECONDS);\n                // BUG: Diagnostic contains: f.get(d.getStandardSeconds(), TimeUnit.SECONDS)\n                f.get(d.getStandardSeconds(), MINUTES);\n                // BUG: Diagnostic contains: f.get(d.getStandardMinutes(), TimeUnit.MINUTES)\n                f.get(d.getStandardMinutes(), SECONDS);\n                // BUG: Diagnostic contains: f.get(d.getStandardHours(), TimeUnit.HOURS)\n                f.get(d.getStandardHours(), DAYS);\n                // BUG: Diagnostic contains: f.get(d.getStandardDays(), TimeUnit.DAYS)\n                f.get(d.getStandardDays(), HOURS);\n              }\n\n              void jodaTime(Future<String> f, org.joda.time.Instant i) throws Exception {\n                // BUG: Diagnostic contains: f.get(i.getMillis(), TimeUnit.MILLISECONDS)\n                f.get(i.getMillis(), NANOSECONDS);\n              }\n\n              void protoTime(Future<String> f, Duration d) throws Exception {\n                // BUG: Diagnostic contains: f.get(d.getSeconds(), TimeUnit.SECONDS)\n                f.get(d.getSeconds(), MINUTES);\n              }\n\n              void protoTime(Future<String> f, Timestamp t) throws Exception {\n                // BUG: Diagnostic contains: f.get(t.getSeconds(), TimeUnit.SECONDS)\n                f.get(t.getSeconds(), MINUTES);\n              }\n            }"
    },
    {
      "description": "nonTimeUnitVariablesAreOk",
      "expected-problems": null,
      "expected-linenumbers": [
        291
      ],
      "code": "import com.google.protobuf.Duration;\n            import com.google.protobuf.Timestamp;\n\n            public class TestClass {\n              private enum MyEnum {\n                DAYS\n              };\n\n              void javaTime(java.time.Duration d) {\n                myMethod(d.toNanos(), MyEnum.DAYS);\n              }\n\n              void javaTime(java.time.Instant i) {\n                myMethod(i.toEpochMilli(), MyEnum.DAYS);\n              }\n\n              void jodaTime(org.joda.time.Duration d) {\n                myMethod(d.getMillis(), MyEnum.DAYS);\n              }\n\n              void jodaTime(org.joda.time.Instant i) {\n                myMethod(i.getMillis(), MyEnum.DAYS);\n              }\n\n              void protoTime(Duration d) {\n                myMethod(d.getSeconds(), MyEnum.DAYS);\n              }\n\n              void protoTime(Timestamp t) {\n                myMethod(t.getSeconds(), MyEnum.DAYS);\n              }\n\n              void myMethod(long value, MyEnum myEnum) {\n                // no op\n              }\n            }"
    },
    {
      "description": "intTimeUnitParameters",
      "expected-problems": null,
      "expected-linenumbers": [
        337
      ],
      "code": ""
    },
    {
      "description": "timeUnitFromConvert",
      "expected-problems": null,
      "expected-linenumbers": [
        356
      ],
      "code": "import java.time.Duration;\n            import java.util.concurrent.TimeUnit;\n\n            public class TestClass {\n              void javaTime(Duration d) {\n                // BUG: Diagnostic contains: DurationToLongTimeUnit\n                myMethod(TimeUnit.SECONDS.convert(d), TimeUnit.MINUTES);\n              }\n\n              void myMethod(long value, TimeUnit unit) {\n                // no op\n              }\n            }"
    }
  ]
}