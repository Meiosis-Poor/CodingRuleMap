{
  "name": "JavaTimeDefaultTimeZone",
  "language": "java",
  "description": "java.time APIs that silently use the default system time-zone are not allowed.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 123,
  "branches": 13,
  "apis": 1,
  "test": [
    {
      "description": "clock",
      "expected-problems": null,
      "expected-linenumbers": [
        31
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.Clock;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              Clock clock = Clock.systemDefaultZone();\n              Clock clockWithZone = Clock.system(systemDefault());\n            }"
    },
    {
      "description": "staticImportOfStaticMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        49
      ],
      "code": "import static java.time.LocalDate.now;\n\n            import java.time.LocalDate;\n\n            public class TestClass {\n              LocalDate date = now();\n            }"
    },
    {
      "description": "localDate",
      "expected-problems": null,
      "expected-linenumbers": [
        75
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.LocalDate;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              LocalDate now = LocalDate.now();\n              LocalDate nowWithZone = LocalDate.now(systemDefault());\n            }"
    },
    {
      "description": "localTime",
      "expected-problems": null,
      "expected-linenumbers": [
        93
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.LocalTime;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              LocalTime now = LocalTime.now();\n              LocalTime nowWithZone = LocalTime.now(systemDefault());\n            }"
    },
    {
      "description": "localDateTime",
      "expected-problems": null,
      "expected-linenumbers": [
        111
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.LocalDateTime;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              LocalDateTime now = LocalDateTime.now();\n              LocalDateTime nowWithZone = LocalDateTime.now(systemDefault());\n            }"
    },
    {
      "description": "monthDay",
      "expected-problems": null,
      "expected-linenumbers": [
        129
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.MonthDay;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              MonthDay now = MonthDay.now();\n              MonthDay nowWithZone = MonthDay.now(systemDefault());\n            }"
    },
    {
      "description": "offsetDateTime",
      "expected-problems": null,
      "expected-linenumbers": [
        147
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.OffsetDateTime;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              OffsetDateTime now = OffsetDateTime.now();\n              OffsetDateTime nowWithZone = OffsetDateTime.now(systemDefault());\n            }"
    },
    {
      "description": "offsetTime",
      "expected-problems": null,
      "expected-linenumbers": [
        165
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.OffsetTime;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              OffsetTime now = OffsetTime.now();\n              OffsetTime nowWithZone = OffsetTime.now(systemDefault());\n            }"
    },
    {
      "description": "year",
      "expected-problems": null,
      "expected-linenumbers": [
        183
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.Year;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              Year now = Year.now();\n              Year nowWithZone = Year.now(systemDefault());\n            }"
    },
    {
      "description": "yearMonth",
      "expected-problems": null,
      "expected-linenumbers": [
        201
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.YearMonth;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              YearMonth now = YearMonth.now();\n              YearMonth nowWithZone = YearMonth.now(systemDefault());\n            }"
    },
    {
      "description": "zonedDateTime",
      "expected-problems": null,
      "expected-linenumbers": [
        219
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.ZonedDateTime;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              ZonedDateTime now = ZonedDateTime.now();\n              ZonedDateTime nowWithZone = ZonedDateTime.now(systemDefault());\n            }"
    },
    {
      "description": "japaneseDate",
      "expected-problems": null,
      "expected-linenumbers": [
        237
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.chrono.JapaneseDate;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              JapaneseDate now = JapaneseDate.now();\n              JapaneseDate nowWithZone = JapaneseDate.now(systemDefault());\n            }"
    },
    {
      "description": "minguoDate",
      "expected-problems": null,
      "expected-linenumbers": [
        255
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.chrono.MinguoDate;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              MinguoDate now = MinguoDate.now();\n              MinguoDate nowWithZone = MinguoDate.now(systemDefault());\n            }"
    },
    {
      "description": "hijrahDate",
      "expected-problems": null,
      "expected-linenumbers": [
        273
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.chrono.HijrahDate;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              HijrahDate now = HijrahDate.now();\n              HijrahDate nowWithZone = HijrahDate.now(systemDefault());\n            }"
    },
    {
      "description": "thaiBuddhistDate",
      "expected-problems": null,
      "expected-linenumbers": [
        291
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.chrono.ThaiBuddhistDate;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              ThaiBuddhistDate now = ThaiBuddhistDate.now();\n              ThaiBuddhistDate nowWithZone = ThaiBuddhistDate.now(systemDefault());\n            }"
    },
    {
      "description": "chronology",
      "expected-problems": null,
      "expected-linenumbers": [
        309
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.chrono.Chronology;\n            import java.time.chrono.ChronoLocalDate;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              ChronoLocalDate now = Chronology.of(\"ISO\").dateNow();\n              ChronoLocalDate nowWithZone = Chronology.of(\"ISO\").dateNow(systemDefault());\n            }"
    },
    {
      "description": "hijrahChronology",
      "expected-problems": null,
      "expected-linenumbers": [
        328
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.chrono.HijrahChronology;\n            import java.time.chrono.HijrahDate;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              HijrahDate now = HijrahChronology.INSTANCE.dateNow();\n              HijrahDate nowWithZone = HijrahChronology.INSTANCE.dateNow(systemDefault());\n            }"
    },
    {
      "description": "isoChronology",
      "expected-problems": null,
      "expected-linenumbers": [
        347
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.LocalDate;\n            import java.time.chrono.IsoChronology;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              LocalDate now = IsoChronology.INSTANCE.dateNow();\n              LocalDate nowWithZone = IsoChronology.INSTANCE.dateNow(systemDefault());\n            }"
    },
    {
      "description": "japaneseChronology",
      "expected-problems": null,
      "expected-linenumbers": [
        366
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.chrono.JapaneseChronology;\n            import java.time.chrono.JapaneseDate;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              JapaneseDate now = JapaneseChronology.INSTANCE.dateNow();\n              JapaneseDate nowWithZone = JapaneseChronology.INSTANCE.dateNow(systemDefault());\n            }"
    },
    {
      "description": "minguoChronology",
      "expected-problems": null,
      "expected-linenumbers": [
        385
      ],
      "code": "import static java.time.ZoneId.systemDefault;\n            import java.time.chrono.MinguoChronology;\n            import java.time.chrono.MinguoDate;\n\n            public class TestClass {\n              // BUG: Diagnostic matches: REPLACEME\n              MinguoDate now = MinguoChronology.INSTANCE.dateNow();\n              MinguoDate nowWithZone = MinguoChronology.INSTANCE.dateNow(systemDefault());\n            }"
    },
    {
      "description": "thaiBuddhistChronology",
      "expected-problems": null,
      "expected-linenumbers": [
        404
      ],
      "code": "import static java.time.ZoneId.systemDefault;\nimport java.time.chrono.ThaiBuddhistChronology;\nimport java.time.chrono.ThaiBuddhistDate;\n\npublic class TestClass {\n  // BUG: Diagnostic matches: REPLACEME\n  ThaiBuddhistDate now = ThaiBuddhistChronology.INSTANCE.dateNow();\n  ThaiBuddhistDate nowWithZone = ThaiBuddhistChronology.INSTANCE.dateNow(systemDefault());\n}"
    }
  ]
}