{
  "name": "IsInstanceIncompatibleType",
  "language": "java",
  "description": "This use of isInstance will always evaluate to false.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 94,
  "branches": 6,
  "apis": 1,
  "test": [
    {
      "description": "positiveInstanceOf",
      "expected-problems": null,
      "expected-linenumbers": [
        31
      ],
      "code": "import java.util.Optional;\n\n            class Test {\n              Optional<String> f(Optional<String> s) {\n                // BUG: Diagnostic contains: String cannot be cast to Integer\n                return s.filter(Integer.class::isInstance);\n              }\n            }"
    },
    {
      "description": "positiveInstanceOf_methodCall",
      "expected-problems": null,
      "expected-linenumbers": [
        49
      ],
      "code": "import java.util.Optional;\n\n            class Test {\n              Optional<String> f(Optional<String> s) {\n                // BUG: Diagnostic contains: String cannot be cast to Integer\n                return s.filter(x -> Integer.class.isInstance(x));\n              }\n            }"
    },
    {
      "description": "positiveInstanceOf2",
      "expected-problems": null,
      "expected-linenumbers": [
        67
      ],
      "code": "import java.util.Optional;\n            import java.util.HashMap;\n\n            class Test {\n              Optional<HashMap<String, Integer>> f(Optional<HashMap<String, Integer>> m) {\n                // BUG: Diagnostic contains: HashMap cannot be cast to Integer\n                return m.filter(Integer.class::isInstance);\n              }\n            }"
    },
    {
      "description": "positiveInstanceOfWithGenerics",
      "expected-problems": null,
      "expected-linenumbers": [
        86
      ],
      "code": "import java.util.Optional;\n            import java.lang.Number;\n\n            class Test {\n              <T extends Number> Optional<T> f(Optional<T> t) {\n                // BUG: Diagnostic contains: Number cannot be cast to String\n                return t.filter(String.class::isInstance);\n              }\n            }"
    },
    {
      "description": "negativeInstanceOf",
      "expected-problems": null,
      "expected-linenumbers": [
        105
      ],
      "code": "import java.util.Optional;\n            import java.util.HashMap;\n            import java.util.LinkedHashMap;\n\n            class Test {\n              Optional<HashMap> f(Optional<HashMap> m) {\n                return m.filter(LinkedHashMap.class::isInstance);\n              }\n            }"
    },
    {
      "description": "negativeInstanceOf_methodCall",
      "expected-problems": null,
      "expected-linenumbers": [
        124
      ],
      "code": "import java.util.Optional;\n            import java.util.HashMap;\n            import java.util.LinkedHashMap;\n\n            class Test {\n              Optional<HashMap> f(Optional<HashMap> m) {\n                return m.filter(x -> LinkedHashMap.class.isInstance(x));\n              }\n            }"
    },
    {
      "description": "negativeInstanceOf2",
      "expected-problems": null,
      "expected-linenumbers": [
        143
      ],
      "code": "import java.util.Optional;\n            import java.util.HashMap;\n            import java.util.LinkedHashMap;\n\n            class Test {\n              Optional<HashMap<String, Integer>> f(Optional<HashMap<String, Integer>> m) {\n                return m.filter(LinkedHashMap.class::isInstance);\n              }\n            }"
    },
    {
      "description": "negativeInstanceOfWithGenerics",
      "expected-problems": null,
      "expected-linenumbers": [
        162
      ],
      "code": "import java.util.Optional;\n\n            class Test {\n              <T> Optional<T> f(Optional<T> t) {\n                return t.filter(Object.class::isInstance);\n              }\n            }"
    },
    {
      "description": "rawTypes",
      "expected-problems": null,
      "expected-linenumbers": [
        179
      ],
      "code": "import java.util.Optional;\n\n            class Test {\n              boolean f(Object o, Class c) {\n                return c.isInstance(o);\n              }\n\n              <T> Optional<T> f(Optional<T> t, Class c) {\n                return t.filter(c::isInstance);\n              }\n            }"
    }
  ]
}