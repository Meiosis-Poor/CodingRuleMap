{
  "name": "EqualsNull",
  "language": "java",
  "description": "The contract of Object.equals() states that for any non-null reference value x, x.equals(null) should return false. If x is null, a NullPointerException is thrown. Consider replacing equals() with the == operator.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 84,
  "branches": 6,
  "apis": 1,
  "test": [
    {
      "description": "negativeSimpleCase",
      "expected-problems": null,
      "expected-linenumbers": [
        37
      ],
      "code": "class Test {\n              boolean m(Object x, Object y) {\n                return x.equals(y);\n              }\n            }"
    },
    {
      "description": "negativeJUnit4TestClass",
      "expected-problems": null,
      "expected-linenumbers": [
        52
      ],
      "code": "import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            @RunWith(JUnit4.class)\n            class Test {\n              boolean m(Object x) {\n                return x.equals(null);\n              }\n            }"
    },
    {
      "description": "negativeTestNgTestClass",
      "expected-problems": null,
      "expected-linenumbers": [
        71
      ],
      "code": "package org.testng.annotations;\n\n            public @interface Test {}\n            \n\n            import org.testng.annotations.Test;\n\n            @Test\n            class MyTest {\n              boolean m(Object x) {\n                return x.equals(null);\n              }\n            }"
    },
    {
      "description": "negativeAssertClass",
      "expected-problems": null,
      "expected-linenumbers": [
        96
      ],
      "code": "import org.junit.Assert;\n\n            class AssertHelper extends Assert {\n              public static void myAssert(Object x) {\n                x.equals(null);\n              }\n            }"
    },
    {
      "description": "negativeAssertClass",
      "expected-problems": null,
      "expected-linenumbers": [
        96
      ],
      "code": "import org.junit.Assert;\n\n            class AssertHelper extends Assert {\n              public static void myAssert(Object x) {\n                x.equals(null);\n              }\n            }"
    },
    {
      "description": "negativeEnclosedByJUnitAssert",
      "expected-problems": null,
      "expected-linenumbers": [
        113
      ],
      "code": "import static org.junit.Assert.assertFalse;\n\n            class TestHelper {\n              public static void myAssert(Object x) {\n                assertFalse(x.equals(null));\n              }\n            }"
    },
    {
      "description": "negativeEnclosedByTruthAssert",
      "expected-problems": null,
      "expected-linenumbers": [
        130
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n\n            class TestHelper {\n              public static void myAssert(Object x) {\n                assertThat(x.equals(null)).isFalse();\n              }\n            }"
    },
    {
      "description": "positiveSimpleCase",
      "expected-problems": null,
      "expected-linenumbers": [
        147
      ],
      "code": ""
    },
    {
      "description": "positiveReturnObjectEqualsNullFix",
      "expected-problems": null,
      "expected-linenumbers": [
        161
      ],
      "code": "class Test {\n              boolean m(Object x) {\n                return x.equals(null);\n              }\n            }\n            \n\n            class Test {\n              boolean m(Object x) {\n                return x == null;\n              }\n            }"
    },
    {
      "description": "positiveReturnObjectNotEqualsNullFix",
      "expected-problems": null,
      "expected-linenumbers": [
        185
      ],
      "code": "class Test {\n              boolean m(Object x) {\n                return !x.equals(null);\n              }\n            }\n            \n\n            class Test {\n              boolean m(Object x) {\n                return x != null;\n              }\n            }"
    },
    {
      "description": "positiveIfObjectEqualsNullFix",
      "expected-problems": null,
      "expected-linenumbers": [
        209
      ],
      "code": "class Test {\n              void m(Object x) {\n                if (x.equals(null)) {\n                  return;\n                }\n              }\n            }\n            \n\n            class Test {\n              void m(Object x) {\n                if (x == null) {\n                  return;\n                }\n              }\n            }"
    },
    {
      "description": "positiveMethodReturnValueNotEqualsNullFix",
      "expected-problems": null,
      "expected-linenumbers": [
        237
      ],
      "code": "class Test {\n              boolean m(Object x) {\n                return !x.toString().equals(null);\n              }\n            }\n            \n\n            class Test {\n              boolean m(Object x) {\n                return x.toString() != null;\n              }\n            }"
    }
  ]
}