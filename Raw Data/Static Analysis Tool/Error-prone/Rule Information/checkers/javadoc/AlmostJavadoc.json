{
  "name": "AlmostJavadoc",
  "language": "java",
  "description": "This comment contains Javadoc or HTML tags, but isn't started with a double asterisk (/**); is it meant to be Javadoc?",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 117,
  "branches": 12,
  "apis": 1,
  "test": [
    {
      "description": "refactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        36
      ],
      "code": "public class Test {\n              /* Foo {@link Test}. */\n              void foo() {}\n\n              /*\n               * Bar.\n               *\n               * @param bar bar\n               */\n              void bar(int bar) {}\n            }\n            \n\n            public class Test {\n              /** Foo {@link Test}. */\n              void foo() {}\n\n              /**\n               * Bar.\n               *\n               * @param bar bar\n               */\n              void bar(int bar) {}\n            }"
    },
    {
      "description": "notJavadocButNoTag",
      "expected-problems": null,
      "expected-linenumbers": [
        72
      ],
      "code": "public class Test {\n              /* Foo. */\n              void foo() {}\n            }"
    },
    {
      "description": "blockCommentWithMultilineClose",
      "expected-problems": null,
      "expected-linenumbers": [
        86
      ],
      "code": "interface Test {\n              // Foo. {@link Test} */\n              void foo();\n\n              // ** Bar. {@link Test} */\n              void bar();\n\n              // /** Baz. {@link Test} */\n              void baz();\n            }\n            \n\n            interface Test {\n              /** Foo. {@link Test} */\n              void foo();\n\n              /** Bar. {@link Test} */\n              void bar();\n\n              /** Baz. {@link Test} */\n              void baz();\n            }"
    },
    {
      "description": "pathlogicalBlockCommentCases",
      "expected-problems": null,
      "expected-linenumbers": [
        120
      ],
      "code": "interface Test {\n              // */\n              void foo();\n\n              // bar /* bar */\n              void bar();\n\n              // Baz. */\n              void baz();\n\n              // ** Foobar. */\n              void foobar();\n\n              // /** Barbaz. */\n              void barbaz();\n            }"
    },
    {
      "description": "suppression",
      "expected-problems": null,
      "expected-linenumbers": [
        146
      ],
      "code": "public class Test {\n              /* Foo {@link Test}. */\n              @SuppressWarnings(\"AlmostJavadoc\")\n              void foo() {}\n            }"
    },
    {
      "description": "alreadyHasJavadoc_noMatch",
      "expected-problems": null,
      "expected-linenumbers": [
        161
      ],
      "code": "public class Test {\n              /** Foo. */\n              /* Strange extra documentation with {@link tags}. */\n              void foo() {}\n            }"
    },
    {
      "description": "htmlTag",
      "expected-problems": null,
      "expected-linenumbers": [
        176
      ],
      "code": "public class Test {\n              // BUG: Diagnostic contains:\n              /* Foo <em>Test</em>. */\n              void foo() {}\n            }"
    },
    {
      "description": "enumConstant",
      "expected-problems": null,
      "expected-linenumbers": [
        191
      ],
      "code": "public enum Test {\n              // BUG: Diagnostic contains:\n              /* Foo <em>Test</em>. */\n              FOO\n            }"
    },
    {
      "description": "abstractEnumConstant",
      "expected-problems": null,
      "expected-linenumbers": [
        206
      ],
      "code": "public enum Test {\n              // BUG: Diagnostic contains:\n              /* Foo <em>Test</em>. */\n              FOO {\n                @Override\n                public String toString() {\n                  return null;\n                }\n              }\n            }"
    },
    {
      "description": "multiField",
      "expected-problems": null,
      "expected-linenumbers": [
        226
      ],
      "code": "public class Test {\n              // BUG: Diagnostic contains:\n              /* Foo <em>Test</em>. */\n              int x = 1, y = 2;\n            }"
    },
    {
      "description": "doesNotFireOnTemplateParameters",
      "expected-problems": null,
      "expected-linenumbers": [
        241
      ],
      "code": "public class Test {\n              /* Foo<T>. */\n              int x = 1, y = 2;\n            }"
    },
    {
      "description": "nonJavadoccablePosition",
      "expected-problems": null,
      "expected-linenumbers": [
        255
      ],
      "code": "public class Test {\n              void foo() {\n                /* Foo {@link Test}. */\n                class Foo {}\n              }\n            }"
    }
  ]
}