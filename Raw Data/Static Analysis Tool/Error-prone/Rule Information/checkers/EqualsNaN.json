{
  "name": "EqualsNaN",
  "language": "java",
  "description": "== NaN always returns false; use the isNaN methods instead",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 84,
  "branches": 10,
  "apis": 2,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * @author lowasser@google.com (Louis Wasserman)\n             */\n            public class EqualsNaNPositiveCases {\n\n              // BUG: Diagnostic contains: Double.isNaN(0.0)\n              static final boolean ZERO_DOUBLE_NAN = 0.0 == Double.NaN;\n\n              // BUG: Diagnostic contains: !Double.isNaN(1.0)\n              static final boolean ONE_NOT_DOUBLE_NAN = Double.NaN != 1.0;\n\n              // BUG: Diagnostic contains: Float.isNaN(2.f)\n              static final boolean TWO_FLOAT_NAN = 2.f == Float.NaN;\n\n              // BUG: Diagnostic contains: !Float.isNaN(3.0f)\n              static final boolean THREE_NOT_FLOAT_NAN = 3.0f != Float.NaN;\n\n              // BUG: Diagnostic contains: Double.isNaN(Double.NaN)\n              static final boolean NAN_IS_NAN = Double.NaN == Double.NaN;\n\n              // BUG: Diagnostic contains: Double.isNaN(123456)\n              static final boolean INT_IS_NAN = 123456 == Double.NaN;\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        68
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * @author lowasser@google.com (Louis Wasserman)\n             */\n            public class EqualsNaNNegativeCases {\n              static final boolean NAN_AFTER_MATH = (0.0 / 0.0) == 1.0;\n              static final boolean NORMAL_COMPARISON = 1.0 == 2.0;\n            }\\"
    }
  ]
}