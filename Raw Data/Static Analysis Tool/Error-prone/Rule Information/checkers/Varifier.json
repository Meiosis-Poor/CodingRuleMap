{
  "name": "Varifier",
  "language": "java",
  "description": "Consider using `var` here to avoid boilerplate.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 106,
  "branches": 9,
  "apis": 2,
  "test": [
    {
      "description": "cast",
      "expected-problems": null,
      "expected-linenumbers": [
        30
      ],
      "code": "class Test {\n              public void t(Object o) {\n                Test t = (Test) o;\n              }\n            }\n            \n\n            class Test {\n              public void t(Object o) {\n                var t = (Test) o;\n              }\n            }"
    },
    {
      "description": "constructor",
      "expected-problems": null,
      "expected-linenumbers": [
        54
      ],
      "code": "class Test {\n              public void t() {\n                Test t = new Test();\n              }\n            }\n            \n\n            class Test {\n              public void t() {\n                var t = new Test();\n              }\n            }"
    },
    {
      "description": "constructor_usingDiamond",
      "expected-problems": null,
      "expected-linenumbers": [
        78
      ],
      "code": "import java.util.ArrayList;\n\n            class Test {\n              public void t() {\n                ArrayList<Integer> xs = new ArrayList<>();\n              }\n            }"
    },
    {
      "description": "constructor_usingExplicitType",
      "expected-problems": null,
      "expected-linenumbers": [
        96
      ],
      "code": "import java.util.ArrayList;\n\n            class Test {\n              public void t() {\n                ArrayList<Integer> xs = new ArrayList<Integer>();\n              }\n            }\n            \n\n            import java.util.ArrayList;\n\n            class Test {\n              public void t() {\n                var xs = new ArrayList<Integer>();\n              }\n            }"
    },
    {
      "description": "alreadyVar",
      "expected-problems": null,
      "expected-linenumbers": [
        124
      ],
      "code": "class Test {\n              public void t() {\n                var t = new Test();\n              }\n            }"
    },
    {
      "description": "fromInstanceMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        140
      ],
      "code": "abstract class Test {\n              public void t() {\n                Test t = t2();\n              }\n\n              public abstract Test t2();\n            }"
    },
    {
      "description": "builder",
      "expected-problems": null,
      "expected-linenumbers": [
        158
      ],
      "code": "import com.google.protobuf.Duration;\n\n            abstract class Test {\n              public void t() {\n                Duration duration = Duration.newBuilder().setSeconds(4).build();\n              }\n            }\n            \n\n            import com.google.protobuf.Duration;\n\n            abstract class Test {\n              public void t() {\n                var duration = Duration.newBuilder().setSeconds(4).build();\n              }\n            }"
    },
    {
      "description": "fromFactoryMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        186
      ],
      "code": "import java.time.Instant;\n\n            class Test {\n              public void t() {\n                Instant now = Instant.ofEpochMilli(1);\n              }\n            }\n            \n\n            import java.time.Instant;\n\n            class Test {\n              public void t() {\n                var now = Instant.ofEpochMilli(1);\n              }\n            }"
    },
    {
      "description": "varUnused",
      "expected-problems": null,
      "expected-linenumbers": [
        214
      ],
      "code": "class Test {\n              public void trim(String string) {\n                String unused = string.trim();\n              }\n            }\n            \n\n            class Test {\n              public void trim(String string) {\n                var unused = string.trim();\n              }\n            }"
    },
    {
      "description": "assertThrows",
      "expected-problems": null,
      "expected-linenumbers": [
        238
      ],
      "code": "import static org.junit.Assert.assertThrows;\n\nclass Test {\n  public void testFoo() {\n    Object nil = null;\n    NullPointerException thrown = assertThrows(NullPointerException.class, () -> nil.toString());\n  }\n}\n\n\n            import static org.junit.Assert.assertThrows;\n\n            class Test {\n              public void testFoo() {\n                Object nil = null;\n                var thrown = assertThrows(NullPointerException.class, () -> nil.toString());\n              }\n            }"
    }
  ]
}