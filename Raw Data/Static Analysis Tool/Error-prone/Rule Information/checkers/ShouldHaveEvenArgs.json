{
  "name": "ShouldHaveEvenArgs",
  "language": "java",
  "description": "This method must be called with an even number of arguments.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 71,
  "branches": 5,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        34
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n\n            import com.google.common.truth.Correspondence;\n            import java.util.HashMap;\n            import java.util.Map;\n\n            /**\n             * Positive test cases for {@link ShouldHaveEvenArgs} check.\n             *\n             * @author bhagwani@google.com (Sumit Bhagwani)\n             */\n            public class ShouldHaveEvenArgsPositiveCases {\n\n              private static final Map map = new HashMap<String, String>();\n\n              public void testWithOddArgs() {\n                // BUG: Diagnostic contains: even number of arguments\n                assertThat(map).containsExactly(\"hello\", \"there\", \"rest\");\n\n                // BUG: Diagnostic contains: even number of arguments\n                assertThat(map).containsExactly(\"hello\", \"there\", \"hello\", \"there\", \"rest\");\n\n                // BUG: Diagnostic contains: even number of arguments\n                assertThat(map).containsExactly(null, null, null, null, new Object[] {});\n              }\n\n              public void testWithArrayArgs() {\n                String key = \"hello\";\n                Object[] value = new Object[] {};\n                Object[][] args = new Object[][] {};\n\n                // BUG: Diagnostic contains: even number of arguments\n                assertThat(map).containsExactly(key, value, (Object) args);\n              }\n\n              public void testWithOddArgsWithCorrespondence() {\n                assertThat(map)\n                    .comparingValuesUsing(Correspondence.from((a, b) -> true, \"dummy\"))\n                    // BUG: Diagnostic contains: even number of arguments\n                    .containsExactly(\"hello\", \"there\", \"rest\");\n\n                assertThat(map)\n                    .comparingValuesUsing(Correspondence.from((a, b) -> true, \"dummy\"))\n                    // BUG: Diagnostic contains: even number of arguments\n                    .containsExactly(\"hello\", \"there\", \"hello\", \"there\", \"rest\");\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        93
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n\n            import java.util.HashMap;\n            import java.util.Map;\n\n            /**\n             * Negative test cases for {@link ShouldHaveEvenArgs} check.\n             *\n             * @author bhagwani@google.com (Sumit Bhagwani)\n             */\n            public class ShouldHaveEvenArgsNegativeCases {\n\n              private static final Map<String, String> map = new HashMap<String, String>();\n\n              public void testWithNoArgs() {\n                assertThat(map).containsExactly();\n              }\n\n              public void testWithMinimalArgs() {\n                assertThat(map).containsExactly(\"hello\", \"there\");\n              }\n\n              public void testWithEvenArgs() {\n                assertThat(map).containsExactly(\"hello\", \"there\", \"hello\", \"there\");\n              }\n\n              public void testWithVarargs(Object... args) {\n                assertThat(map).containsExactly(\"hello\", args);\n                assertThat(map).containsExactly(\"hello\", \"world\", args);\n              }\n\n              public void testWithArray() {\n                String[] arg = {\"hello\", \"there\"};\n                assertThat(map).containsExactly(\"yolo\", arg);\n\n                String key = \"hello\";\n                Object[] value = new Object[] {};\n                Object[][] args = new Object[][] {};\n\n                assertThat(map).containsExactly(key, value);\n                assertThat(map).containsExactly(key, value, (Object[]) args);\n                assertThat(map).containsExactly(key, value, key, value, key, value);\n              }\n            }\\"
    },
    {
      "description": "positiveCase_multimap",
      "expected-problems": null,
      "expected-linenumbers": [
        150
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n\n            import com.google.common.collect.ImmutableMultimap;\n            import com.google.common.collect.Multimap;\n            import com.google.common.truth.Correspondence;\n\n            /**\n             * Positive test cases for {@link ShouldHaveEvenArgs} check.\n             *\n             * @author monnoroch@google.com (Max Strakhov)\n             */\n            public class ShouldHaveEvenArgsMultimapPositiveCases {\n\n              private static final Multimap<String, String> multimap = ImmutableMultimap.of();\n\n              public void testWithOddArgs() {\n                // BUG: Diagnostic contains: even number of arguments\n                assertThat(multimap).containsExactly(\"hello\", \"there\", \"rest\");\n\n                // BUG: Diagnostic contains: even number of arguments\n                assertThat(multimap).containsExactly(\"hello\", \"there\", \"hello\", \"there\", \"rest\");\n\n                // BUG: Diagnostic contains: even number of arguments\n                assertThat(multimap).containsExactly(null, null, null, null, new Object[] {});\n              }\n\n              public void testWithArrayArgs() {\n                String key = \"hello\";\n                Object[] value = new Object[] {};\n                Object[][] args = new Object[][] {};\n\n                // BUG: Diagnostic contains: even number of arguments\n                assertThat(multimap).containsExactly(key, value, (Object) args);\n              }\n\n              public void testWithOddArgsWithCorrespondence() {\n                assertThat(multimap)\n                    .comparingValuesUsing(Correspondence.from((a, b) -> true, \"dummy\"))\n                    // BUG: Diagnostic contains: even number of arguments\n                    .containsExactly(\"hello\", \"there\", \"rest\");\n\n                assertThat(multimap)\n                    .comparingValuesUsing(Correspondence.from((a, b) -> true, \"dummy\"))\n                    // BUG: Diagnostic contains: even number of arguments\n                    .containsExactly(\"hello\", \"there\", \"hello\", \"there\", \"rest\");\n              }\n            }\\"
    },
    {
      "description": "negativeCase_multimap",
      "expected-problems": null,
      "expected-linenumbers": [
        210
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.truth.Truth.assertThat;\n\n            import com.google.common.collect.ImmutableMultimap;\n            import com.google.common.collect.Multimap;\n\n            /**\n             * Negative test cases for {@link ShouldHaveEvenArgs} check.\n             *\n             * @author monnoroch@google.com (Max Strakhov)\n             */\n            public class ShouldHaveEvenArgsMultimapNegativeCases {\n\n              private static final Multimap<String, String> multimap = ImmutableMultimap.of();\n\n              public void testWithMinimalArgs() {\n                assertThat(multimap).containsExactly(\"hello\", \"there\");\n              }\n\n              public void testWithEvenArgs() {\n                assertThat(multimap).containsExactly(\"hello\", \"there\", \"hello\", \"there\");\n              }\n\n              public void testWithVarargs(Object... args) {\n                assertThat(multimap).containsExactly(\"hello\", args);\n                assertThat(multimap).containsExactly(\"hello\", \"world\", args);\n              }\n\n              public void testWithArray() {\n                String[] arg = {\"hello\", \"there\"};\n                assertThat(multimap).containsExactly(\"yolo\", arg);\n\n                String key = \"hello\";\n                Object[] value = new Object[] {};\n                Object[][] args = new Object[][] {};\n\n                assertThat(multimap).containsExactly(key, value);\n                assertThat(multimap).containsExactly(key, value, (Object[]) args);\n                assertThat(multimap).containsExactly(key, value, key, value, key, value);\n              }\n            }\\"
    }
  ]
}