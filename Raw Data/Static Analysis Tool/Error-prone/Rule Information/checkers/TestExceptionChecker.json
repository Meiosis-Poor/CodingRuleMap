{
  "name": "TestExceptionChecker",
  "language": "java",
  "description": "Using @Test(expected=...) is discouraged, since the test will pass if *any* statement in the test method throws the expected exception",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 152,
  "branches": 18,
  "apis": 5,
  "test": [
    {
      "description": "positive",
      "expected-problems": null,
      "expected-linenumbers": [
        30
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test(expected = IOException.class, timeout = 0L)\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                Files.readAllBytes(p);\n                Files.readAllBytes(p);\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertThrows;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test(timeout = 0L)\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                Files.readAllBytes(p);\n                assertThrows(IOException.class, () -> Files.readAllBytes(p));\n              }\n            }"
    },
    {
      "description": "positive_markerAnnotation",
      "expected-problems": null,
      "expected-linenumbers": [
        71
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test(expected = IOException.class)\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                Files.readAllBytes(p);\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertThrows;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                assertThrows(IOException.class, () -> Files.readAllBytes(p));\n              }\n            }"
    },
    {
      "description": "positive_markerAnnotation",
      "expected-problems": null,
      "expected-linenumbers": [
        71
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test(expected = IOException.class)\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                Files.readAllBytes(p);\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertThrows;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                assertThrows(IOException.class, () -> Files.readAllBytes(p));\n              }\n            }"
    },
    {
      "description": "positive_markerAnnotation",
      "expected-problems": null,
      "expected-linenumbers": [
        71
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test(expected = IOException.class)\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                Files.readAllBytes(p);\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertThrows;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                assertThrows(IOException.class, () -> Files.readAllBytes(p));\n              }\n            }"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        100
      ],
      "code": ""
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        100
      ],
      "code": ""
    },
    {
      "description": "oneStatement",
      "expected-problems": null,
      "expected-linenumbers": [
        110
      ],
      "code": "import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test(expected = IOException.class)\n              public void test() throws Exception {\n                Files.readAllBytes(Paths.get(\"NOSUCH\"));\n              }\n            }\n            \n\n            import static org.junit.Assert.assertThrows;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test\n              public void test() throws Exception {\n                assertThrows(IOException.class, () -> Files.readAllBytes(Paths.get(\"NOSUCH\")));\n              }\n            }"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        136
      ],
      "code": ""
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        136
      ],
      "code": ""
    },
    {
      "description": "oneStatement_withFullyQualifiedTestAnnotation",
      "expected-problems": null,
      "expected-linenumbers": [
        145
      ],
      "code": "import java.io.IOException;\n            import java.nio.file.*;\n\n            class ExceptionTest {\n              @org.junit.Test(expected = IOException.class)\n              public void test() throws Exception {\n                Files.readAllBytes(Paths.get(\"NOSUCH\"));\n              }\n            }\n            \n\n            import static org.junit.Assert.assertThrows;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test\n              public void test() throws Exception {\n                assertThrows(IOException.class, () -> Files.readAllBytes(Paths.get(\"NOSUCH\")));\n              }\n            }"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        170
      ],
      "code": ""
    },
    {
      "description": "empty",
      "expected-problems": null,
      "expected-linenumbers": [
        179
      ],
      "code": "import java.io.IOException;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test(expected = IOException.class)\n              public void test() throws Exception {}\n            }\n            \n\n            import java.io.IOException;\n            import org.junit.Test;\n\n            class ExceptionTest {\n              @Test\n              public void test() throws Exception {}\n            }"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        200
      ],
      "code": ""
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        200
      ],
      "code": ""
    }
  ]
}