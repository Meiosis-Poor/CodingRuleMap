{
  "name": "ThreadJoinLoop",
  "language": "java",
  "description": "Thread.join needs to be immediately surrounded by a loop until it succeeds. Consider using Uninterruptibles.joinUninterruptibly.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 133,
  "branches": 21,
  "apis": 2,
  "test": [
    {
      "description": "positiveCases",
      "expected-problems": null,
      "expected-linenumbers": [
        34
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * @author mariasam@google.com (Maria Sam) on 7/10/17.\n             */\n            class ThreadJoinLoopPositiveCases {\n\n              public void basicCase(Thread thread) {\n                try {\n                  // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                  thread.join();\n                } catch (InterruptedException e) {\n                  // ignore\n                }\n              }\n\n              public void emptyInterruptedFullException(Thread thread) {\n                try {\n                  // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                  thread.join();\n                } catch (InterruptedException e) {\n                  // ignore\n                }\n              }\n\n              public void emptyException(Thread thread) {\n                try {\n                  // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                  thread.join();\n                } catch (Exception e) {\n                  // ignore\n                }\n              }\n\n              public void emptyCatchStatements(Thread thread) {\n                try {\n                  // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                  thread.join();\n                } catch (Exception e) {\n                  ;\n                  ;\n                }\n              }\n\n              public void whileLoop(Thread thread) {\n                while (true) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              public void whileLoopCheck(Thread thread) {\n                while (thread != null) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              public void whileLoopVariable(Thread thread, boolean threadAlive) {\n                while (threadAlive) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                    threadAlive = false;\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              public void basicLoopOtherStatements(Thread thread) {\n                while (7 == 7) {\n                  System.out.println(\"test\");\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              public void breakStatement(Thread thread) {\n                while (7 == 7) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                    break;\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              private void whileLoopBreak(Thread thread) {\n                while (true) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                    break;\n                  } catch (InterruptedException e) {\n                    /* try again */\n                  }\n                }\n              }\n\n              private void whileLoopThreadAlive(Thread thread) {\n                while (thread.isAlive()) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    // Ignore\n                  }\n                }\n              }\n\n              public void multipleStatements(Thread thread, boolean isAlive) {\n                try {\n                  // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                  thread.join();\n                  isAlive = false;\n                } catch (InterruptedException e) {\n                  // ignore\n                }\n              }\n\n              private void arrayJoin(Thread[] threads) {\n                for (int i = 0; i < threads.length; i++) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(threads[i])\n                    threads[i].join();\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              class MyThread extends Thread {\n\n                public void run() {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(this)\n                    join();\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n\n                public void whileInThread() {\n                  while (isAlive()) {\n                    try {\n                      // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(this)\n                      join();\n                    } catch (InterruptedException e) {\n                      // Ignore.\n                    }\n                  }\n                }\n              }\n            }\\"
    },
    {
      "description": "negativeCases",
      "expected-problems": null,
      "expected-linenumbers": [
        213
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import java.util.List;\n\n            /**\n             * @author mariasam@google.com (Maria Sam) on 7/10/17.\n             */\n            public class ThreadJoinLoopNegativeCases {\n\n              public void basicCase(Thread thread) throws InterruptedException {\n                thread.join();\n              }\n\n              public void inIf(Thread thread) {\n                try {\n                  if (7 == 7) {\n                    thread.join();\n                  }\n                } catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n\n              public void basicCaseTry(Thread thread) {\n                try {\n                  thread.join();\n                } catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n\n              public void basicCaseWhile(Thread thread, List<String> list) {\n                while (list.size() == 7) {\n                  try {\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    e.printStackTrace();\n                  }\n                }\n              }\n\n              public void basicCaseFor(Thread thread, List<String> list) {\n                for (int i = 0; i < list.size(); i++) {\n                  try {\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    e.printStackTrace();\n                  }\n                }\n              }\n\n              public void basicCaseForEach(Thread thread, List<String> list) {\n                for (String str : list) {\n                  try {\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    e.printStackTrace();\n                  }\n                }\n              }\n\n              public void multipleCatches(Thread thread, int[] arr) {\n                try {\n                  thread.join();\n                  int test = arr[10];\n                } catch (ArrayIndexOutOfBoundsException e) {\n                  // ignore\n                } catch (InterruptedException e) {\n                  System.out.println(\"test\");\n                }\n              }\n\n              public void fullInterruptedFullException(Thread thread) {\n                try {\n                  thread.join();\n                } catch (InterruptedException e) {\n                  e.printStackTrace();\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n              }\n\n              public void justException(Thread thread) {\n                try {\n                  thread.join();\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n              }\n\n              public void multipleMethodInvocations(Thread thread, Thread thread2) {\n                try {\n                  thread.join();\n                  thread2.join();\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n              }\n\n              public void tryFinally(Thread thread) {\n                try {\n                  thread.join();\n                } catch (InterruptedException e) {\n                  // ignore\n                } finally {\n                  System.out.println(\"test finally\");\n                }\n              }\n\n              public void tryAssigningThread(Thread thread) {\n                while (true) {\n                  try {\n                    thread.join();\n                    thread = null;\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n            }\\"
    },
    {
      "description": "fixes",
      "expected-problems": null,
      "expected-linenumbers": [
        343
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            /**\n             * @author mariasam@google.com (Maria Sam) on 7/10/17.\n             */\n            class ThreadJoinLoopPositiveCases {\n\n              public void basicCase(Thread thread) {\n                try {\n                  // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                  thread.join();\n                } catch (InterruptedException e) {\n                  // ignore\n                }\n              }\n\n              public void emptyInterruptedFullException(Thread thread) {\n                try {\n                  // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                  thread.join();\n                } catch (InterruptedException e) {\n                  // ignore\n                }\n              }\n\n              public void emptyException(Thread thread) {\n                try {\n                  // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                  thread.join();\n                } catch (Exception e) {\n                  // ignore\n                }\n              }\n\n              public void emptyCatchStatements(Thread thread) {\n                try {\n                  // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                  thread.join();\n                } catch (Exception e) {\n                  ;\n                  ;\n                }\n              }\n\n              public void whileLoop(Thread thread) {\n                while (true) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              public void whileLoopCheck(Thread thread) {\n                while (thread != null) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              public void whileLoopVariable(Thread thread, boolean threadAlive) {\n                while (threadAlive) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                    threadAlive = false;\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              public void basicLoopOtherStatements(Thread thread) {\n                while (7 == 7) {\n                  System.out.println(\"test\");\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              public void breakStatement(Thread thread) {\n                while (7 == 7) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                    break;\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              private void whileLoopBreak(Thread thread) {\n                while (true) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                    break;\n                  } catch (InterruptedException e) {\n                    /* try again */\n                  }\n                }\n              }\n\n              private void whileLoopThreadAlive(Thread thread) {\n                while (thread.isAlive()) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                    thread.join();\n                  } catch (InterruptedException e) {\n                    // Ignore\n                  }\n                }\n              }\n\n              public void multipleStatements(Thread thread, boolean isAlive) {\n                try {\n                  // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(thread)\n                  thread.join();\n                  isAlive = false;\n                } catch (InterruptedException e) {\n                  // ignore\n                }\n              }\n\n              private void arrayJoin(Thread[] threads) {\n                for (int i = 0; i < threads.length; i++) {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(threads[i])\n                    threads[i].join();\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n              }\n\n              class MyThread extends Thread {\n\n                public void run() {\n                  try {\n                    // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(this)\n                    join();\n                  } catch (InterruptedException e) {\n                    // ignore\n                  }\n                }\n\n                public void whileInThread() {\n                  while (isAlive()) {\n                    try {\n                      // BUG: Diagnostic contains: Uninterruptibles.joinUninterruptibly(this)\n                      join();\n                    } catch (InterruptedException e) {\n                      // Ignore.\n                    }\n                  }\n                }\n              }\n            }\\\n            \n\n            package com.google.errorprone.bugpatterns.testdata;\n\n            import com.google.common.util.concurrent.Uninterruptibles;\n\n            /**\n             * @author mariasam@google.com (Maria Sam) on 7/10/17.\n             */\n            class ThreadJoinLoopPositiveCases {\n\n              public void basicCase(Thread thread) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              public void emptyInterruptedFullException(Thread thread) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              public void emptyException(Thread thread) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              public void emptyCatchStatements(Thread thread) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              public void whileLoop(Thread thread) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              public void whileLoopCheck(Thread thread) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              public void whileLoopVariable(Thread thread, boolean threadAlive) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              public void basicLoopOtherStatements(Thread thread) {\n                while (7 == 7) {\n                  System.out.println(\"test\");\n                  Uninterruptibles.joinUninterruptibly(thread);\n                }\n              }\n\n              public void breakStatement(Thread thread) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              private void whileLoopBreak(Thread thread) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              private void whileLoopThreadAlive(Thread thread) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              public void multipleStatements(Thread thread, boolean isAlive) {\n                Uninterruptibles.joinUninterruptibly(thread);\n              }\n\n              private void arrayJoin(Thread[] threads) {\n                for (int i = 0; i < threads.length; i++) {\n                  Uninterruptibles.joinUninterruptibly(threads[i]);\n                }\n              }\n\n              class MyThread extends Thread {\n\n                public void run() {\n                  Uninterruptibles.joinUninterruptibly(this);\n                }\n\n                public void whileInThread() {\n                  Uninterruptibles.joinUninterruptibly(this);\n                }\n              }\n            }\\"
    }
  ]
}