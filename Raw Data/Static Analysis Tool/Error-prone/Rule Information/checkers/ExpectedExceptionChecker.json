{
  "name": "ExpectedExceptionChecker",
  "language": "java",
  "description": "Prefer assertThrows to ExpectedException",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 278,
  "branches": 31,
  "apis": 3,
  "test": [
    {
      "description": "expect",
      "expected-problems": null,
      "expected-linenumbers": [
        31
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n            import org.junit.Rule;\n            import org.hamcrest.CoreMatchers;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                if (true) {\n                  Path p = Paths.get(\"NOSUCH\");\n                  thrown.expect(IOException.class);\n                  thrown.expect(CoreMatchers.is(CoreMatchers.instanceOf(IOException.class)));\n                  thrown.expectCause(CoreMatchers.is(CoreMatchers.instanceOf(IOException.class)));\n                  thrown.expectMessage(\"error\");\n                  thrown.expectMessage(CoreMatchers.containsString(\"error\"));\n                  Files.readAllBytes(p);\n                  assertThat(Files.exists(p)).isFalse();\n                }\n              }\n            }\n            \n\nimport static com.google.common.truth.Truth.assertThat;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.junit.Assert.assertThrows;\n\nimport java.io.IOException;\nimport java.nio.file.*;\nimport org.hamcrest.CoreMatchers;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\nclass ExceptionTest {\n  @Rule ExpectedException thrown = ExpectedException.none();\n\n  @Test\n  public void test() throws Exception {\n    if (true) {\n      Path p = Paths.get(\"NOSUCH\");\n      IOException thrown = assertThrows(IOException.class, () -> Files.readAllBytes(p));\n      assertThat(thrown, CoreMatchers.is(CoreMatchers.instanceOf(IOException.class)));\n      assertThat(thrown.getCause(), CoreMatchers.is(CoreMatchers.instanceOf(IOException.class)));\n      assertThat(thrown).hasMessageThat().contains(\"error\");\n      assertThat(thrown.getMessage(), CoreMatchers.containsString(\"error\"));\n      assertThat(Files.exists(p)).isFalse();\n    }\n  }\n}"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        48
      ],
      "code": ""
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        80
      ],
      "code": ""
    },
    {
      "description": "noExceptionType",
      "expected-problems": null,
      "expected-linenumbers": [
        97
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.hamcrest.CoreMatchers;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                thrown.expect(CoreMatchers.is(CoreMatchers.instanceOf(IOException.class)));\n                Files.readAllBytes(p);\n                Files.readAllBytes(p);\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.hamcrest.MatcherAssert.assertThat;\n            import static org.junit.Assert.assertThrows;\n\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.hamcrest.CoreMatchers;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                Throwable thrown =\n                    assertThrows(\n                        Throwable.class,\n                        () -> {\n                          Files.readAllBytes(p);\n                          Files.readAllBytes(p);\n                        });\n                assertThat(thrown, CoreMatchers.is(CoreMatchers.instanceOf(IOException.class)));\n              }\n            }"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        114
      ],
      "code": ""
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        140
      ],
      "code": ""
    },
    {
      "description": "noExpectations",
      "expected-problems": null,
      "expected-linenumbers": [
        157
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.hamcrest.CoreMatchers;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                thrown.expect(IOException.class);\n                Files.readAllBytes(p);\n                assertThat(Files.exists(p)).isFalse();\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertThrows;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.hamcrest.CoreMatchers;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                assertThrows(IOException.class, () -> Files.readAllBytes(p));\n                assertThat(Files.exists(p)).isFalse();\n              }\n            }"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        174
      ],
      "code": ""
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        198
      ],
      "code": ""
    },
    {
      "description": "nonExpressionStatement",
      "expected-problems": null,
      "expected-linenumbers": [
        209
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                thrown.expect(IOException.class);\n                Files.readAllBytes(p);\n                if (true) Files.readAllBytes(p);\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertThrows;\n\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                assertThrows(\n                    IOException.class,\n                    () -> {\n                      Files.readAllBytes(p);\n                      if (true) Files.readAllBytes(p);\n                    });\n              }\n            }"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        225
      ],
      "code": ""
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        249
      ],
      "code": ""
    },
    {
      "description": "isA_hasCauseThat",
      "expected-problems": null,
      "expected-linenumbers": [
        265
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n            import org.junit.Rule;\n            import org.hamcrest.CoreMatchers;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                thrown.expect(IOException.class);\n                thrown.expectCause(CoreMatchers.isA(IOException.class));\n                thrown.expectCause(org.hamcrest.core.Is.isA(IOException.class));\n                Files.readAllBytes(p);\n                assertThat(Files.exists(p)).isFalse();\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertThrows;\n\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.hamcrest.CoreMatchers;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                IOException thrown = assertThrows(IOException.class, () -> Files.readAllBytes(p));\n                assertThat(thrown).hasCauseThat().isInstanceOf(IOException.class);\n                assertThat(thrown).hasCauseThat().isInstanceOf(IOException.class);\n                assertThat(Files.exists(p)).isFalse();\n              }\n            }"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        282
      ],
      "code": ""
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        309
      ],
      "code": ""
    },
    {
      "description": "typedMatcher",
      "expected-problems": null,
      "expected-linenumbers": [
        322
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n            import org.junit.Rule;\n            import org.hamcrest.Matcher;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n              Matcher<IOException> matcher;\n\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                thrown.expect(matcher);\n                Files.readAllBytes(p);\n                assertThat(Files.exists(p)).isFalse();\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.hamcrest.MatcherAssert.assertThat;\n            import static org.junit.Assert.assertThrows;\n\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.hamcrest.Matcher;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n              Matcher<IOException> matcher;\n\n              @Test\n              public void test() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                IOException thrown = assertThrows(IOException.class, () -> Files.readAllBytes(p));\n                assertThat(thrown, matcher);\n                assertThat(Files.exists(p)).isFalse();\n              }\n            }"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        340
      ],
      "code": ""
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        367
      ],
      "code": ""
    },
    {
      "description": "nothingButAsserts",
      "expected-problems": null,
      "expected-linenumbers": [
        379
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                thrown.expect(RuntimeException.class);\n                assertThat(false).isFalse();\n                assertThat(true).isTrue();\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void test() throws Exception {\n                assertThat(false).isFalse();\n                assertThat(true).isTrue();\n              }\n            }"
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        393
      ],
      "code": ""
    },
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        412
      ],
      "code": ""
    },
    {
      "description": "removeExplicitFail",
      "expected-problems": null,
      "expected-linenumbers": [
        422
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.fail;\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Test;\n            import org.junit.Rule;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void testThrow() throws Exception {\n                thrown.expect(IOException.class);\n                throw new IOException();\n              }\n\n              @Test\n              public void one() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                thrown.expect(IOException.class);\n                Files.readAllBytes(p);\n                assertThat(Files.exists(p)).isFalse();\n                fail();\n              }\n\n              @Test\n              public void two() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                thrown.expect(IOException.class);\n                Files.readAllBytes(p);\n                assertThat(Files.exists(p)).isFalse();\n                throw new AssertionError();\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import static org.junit.Assert.assertThrows;\n            import static org.junit.Assert.fail;\n\n            import java.io.IOException;\n            import java.nio.file.*;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void testThrow() throws Exception {}\n\n              @Test\n              public void one() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                assertThrows(IOException.class, () -> Files.readAllBytes(p));\n                assertThat(Files.exists(p)).isFalse();\n              }\n\n              @Test\n              public void two() throws Exception {\n                Path p = Paths.get(\"NOSUCH\");\n                assertThrows(IOException.class, () -> Files.readAllBytes(p));\n                assertThat(Files.exists(p)).isFalse();\n              }\n            }"
    },
    {
      "description": "testThrow",
      "expected-problems": null,
      "expected-linenumbers": [
        439
      ],
      "code": ""
    },
    {
      "description": "one",
      "expected-problems": null,
      "expected-linenumbers": [
        445
      ],
      "code": ""
    },
    {
      "description": "two",
      "expected-problems": null,
      "expected-linenumbers": [
        454
      ],
      "code": ""
    },
    {
      "description": "testThrow",
      "expected-problems": null,
      "expected-linenumbers": [
        480
      ],
      "code": ""
    },
    {
      "description": "one",
      "expected-problems": null,
      "expected-linenumbers": [
        483
      ],
      "code": ""
    },
    {
      "description": "two",
      "expected-problems": null,
      "expected-linenumbers": [
        490
      ],
      "code": ""
    },
    {
      "description": "i1072",
      "expected-problems": null,
      "expected-linenumbers": [
        502
      ],
      "code": "import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void testThrow(Class<? extends Throwable> clazz) throws Exception {\n                thrown.expect(clazz);\n                clazz.toString();\n              }\n            }\n            \n\n            import static org.junit.Assert.assertThrows;\n            import org.junit.Rule;\n            import org.junit.Test;\n            import org.junit.rules.ExpectedException;\n\n            class ExceptionTest {\n              @Rule ExpectedException thrown = ExpectedException.none();\n\n              @Test\n              public void testThrow(Class<? extends Throwable> clazz) throws Exception {\n                assertThrows(Throwable.class, () -> clazz.toString());\n              }\n            }"
    },
    {
      "description": "testThrow",
      "expected-problems": null,
      "expected-linenumbers": [
        515
      ],
      "code": ""
    },
    {
      "description": "testThrow",
      "expected-problems": null,
      "expected-linenumbers": [
        533
      ],
      "code": ""
    }
  ]
}