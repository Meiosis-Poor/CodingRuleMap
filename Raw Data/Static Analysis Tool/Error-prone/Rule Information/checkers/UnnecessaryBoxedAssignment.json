{
  "name": "UnnecessaryBoxedAssignment",
  "language": "java",
  "description": "This expression can be implicitly boxed.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 84,
  "branches": 6,
  "apis": 1,
  "test": [
    {
      "description": "cases",
      "expected-problems": null,
      "expected-linenumbers": [
        32
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import java.util.function.Function;\n\n            /**\n             * @author awturner@google.com (Andy Turner)\n             */\n            class UnnecessaryBoxedAssignmentCases {\n              void negative_void() {\n                return;\n              }\n\n              boolean positive_booleanPrimitive(boolean aBoolean) {\n                return Boolean.valueOf(aBoolean);\n              }\n\n              Boolean positive_booleanWrapped(boolean aBoolean) {\n                Boolean b = Boolean.valueOf(aBoolean);\n                return Boolean.valueOf(aBoolean);\n              }\n\n              Boolean negative_booleanString(String aString) {\n                Boolean b = Boolean.valueOf(aString);\n                return Boolean.valueOf(aString);\n              }\n\n              byte positive_bytePrimitive(byte aByte) {\n                return Byte.valueOf(aByte);\n              }\n\n              Byte positive_byteWrapped(byte aByte) {\n                Byte b = Byte.valueOf(aByte);\n                return Byte.valueOf(aByte);\n              }\n\n              Byte negative_byteString(String aString) {\n                Byte b = Byte.valueOf(aString);\n                return Byte.valueOf(aString);\n              }\n\n              int positive_integerPrimitive(int aInteger) {\n                return Integer.valueOf(aInteger);\n              }\n\n              Integer positive_integerWrapped(int aInteger) {\n                Integer i = Integer.valueOf(aInteger);\n                return Integer.valueOf(aInteger);\n              }\n\n              Integer negative_integerString(String aString) {\n                Integer i = Integer.valueOf(aString);\n                return Integer.valueOf(aString);\n              }\n\n              Long negative_integerWrapped(int aInteger) {\n                Long aLong = Long.valueOf(aInteger);\n                return Long.valueOf(aInteger);\n              }\n\n              Integer positive_wrappedAgain(int aInteger) {\n                Integer a = Integer.valueOf(aInteger);\n                a = Integer.valueOf(aInteger);\n                return Integer.valueOf(a);\n              }\n\n              void negative_methodReference() {\n                Function<String, Boolean> toBoolean = Boolean::valueOf;\n              }\n            }\\\n            \n\n            package com.google.errorprone.bugpatterns.testdata;\n\n            import java.util.function.Function;\n\n            /**\n             * @author awturner@google.com (Andy Turner)\n             */\n            class UnnecessaryBoxedAssignmentCases {\n              void negative_void() {\n                return;\n              }\n\n              boolean positive_booleanPrimitive(boolean aBoolean) {\n                return aBoolean;\n              }\n\n              Boolean positive_booleanWrapped(boolean aBoolean) {\n                Boolean b = aBoolean;\n                return aBoolean;\n              }\n\n              Boolean negative_booleanString(String aString) {\n                Boolean b = Boolean.valueOf(aString);\n                return Boolean.valueOf(aString);\n              }\n\n              byte positive_bytePrimitive(byte aByte) {\n                return aByte;\n              }\n\n              Byte positive_byteWrapped(byte aByte) {\n                Byte b = aByte;\n                return aByte;\n              }\n\n              Byte negative_byteString(String aString) {\n                Byte b = Byte.valueOf(aString);\n                return Byte.valueOf(aString);\n              }\n\n              int positive_integerPrimitive(int aInteger) {\n                return aInteger;\n              }\n\n              Integer positive_integerWrapped(int aInteger) {\n                Integer i = aInteger;\n                return aInteger;\n              }\n\n              Integer negative_integerString(String aString) {\n                Integer i = Integer.valueOf(aString);\n                return Integer.valueOf(aString);\n              }\n\n              Long negative_integerWrapped(int aInteger) {\n                Long aLong = Long.valueOf(aInteger);\n                return Long.valueOf(aInteger);\n              }\n\n              Integer positive_wrappedAgain(int aInteger) {\n                Integer a = aInteger;\n                a = aInteger;\n                return a;\n              }\n\n              void negative_methodReference() {\n                Function<String, Boolean> toBoolean = Boolean::valueOf;\n              }\n            }\\"
    }
  ]
}