{
  "name": "PreferInstanceofOverGetKind",
  "language": "java",
  "description": "Prefer instanceof over getKind() checks where possible, as these work well with pattern matching instanceofs",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 133,
  "branches": 9,
  "apis": 1,
  "test": [
    {
      "description": "positive",
      "expected-problems": null,
      "expected-linenumbers": [
        29
      ],
      "code": "import com.sun.source.tree.Tree;\n\n            class Test {\n              boolean isMemberSelect(Tree tree) {\n                return tree.getKind() == Tree.Kind.MEMBER_SELECT;\n              }\n            }\n            \n\n            import com.sun.source.tree.MemberSelectTree;\n            import com.sun.source.tree.Tree;\n\n            class Test {\n              boolean isMemberSelect(Tree tree) {\n                return tree instanceof MemberSelectTree;\n              }\n            }"
    },
    {
      "description": "instanceEquals",
      "expected-problems": null,
      "expected-linenumbers": [
        58
      ],
      "code": "import com.sun.source.tree.Tree;\n\n            class Test {\n              boolean isMemberSelect(Tree tree) {\n                return tree.getKind().equals(Tree.Kind.MEMBER_SELECT);\n              }\n            }\n            \n\n            import com.sun.source.tree.MemberSelectTree;\n            import com.sun.source.tree.Tree;\n\n            class Test {\n              boolean isMemberSelect(Tree tree) {\n                return tree instanceof MemberSelectTree;\n              }\n            }"
    },
    {
      "description": "instanceEquals_negated",
      "expected-problems": null,
      "expected-linenumbers": [
        87
      ],
      "code": "import com.sun.source.tree.Tree;\n\n            class Test {\n              boolean isMemberSelect(Tree tree) {\n                return !tree.getKind().equals(Tree.Kind.MEMBER_SELECT);\n              }\n            }\n            \n\n            import com.sun.source.tree.MemberSelectTree;\n            import com.sun.source.tree.Tree;\n\n            class Test {\n              boolean isMemberSelect(Tree tree) {\n                return !(tree instanceof MemberSelectTree);\n              }\n            }"
    },
    {
      "description": "negated",
      "expected-problems": null,
      "expected-linenumbers": [
        116
      ],
      "code": "import com.sun.source.tree.Tree;\n\n            class Test {\n              boolean isMemberSelect(Tree tree) {\n                return tree.getKind() != Tree.Kind.MEMBER_SELECT;\n              }\n            }\n            \n\n            import com.sun.source.tree.MemberSelectTree;\n            import com.sun.source.tree.Tree;\n\n            class Test {\n              boolean isMemberSelect(Tree tree) {\n                return !(tree instanceof MemberSelectTree);\n              }\n            }"
    },
    {
      "description": "multipleResolveToBinaryTree_noFinding",
      "expected-problems": null,
      "expected-linenumbers": [
        145
      ],
      "code": "import com.sun.source.tree.Tree;\n\n            class Test {\n              boolean isMemberSelect(Tree tree) {\n                return tree.getKind() == Tree.Kind.EQUAL_TO;\n              }\n            }"
    },
    {
      "description": "comparedToWrongType_noFinding",
      "expected-problems": null,
      "expected-linenumbers": [
        163
      ],
      "code": "import com.sun.source.tree.Tree;\n\n            class Test {\n              boolean isWrongType(Tree tree) {\n                return tree.getKind().equals(1);\n              }\n            }"
    }
  ]
}