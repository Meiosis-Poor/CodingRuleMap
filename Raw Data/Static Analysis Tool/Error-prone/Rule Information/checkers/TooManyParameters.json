{
  "name": "TooManyParameters",
  "language": "java",
  "description": "A large number of parameters on public APIs should be avoided.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 91,
  "branches": 6,
  "apis": 2,
  "test": [
    {
      "description": "zeroLimit",
      "expected-problems": null,
      "expected-linenumbers": [
        35
      ],
      "code": ""
    },
    {
      "description": "negativeLimit",
      "expected-problems": null,
      "expected-linenumbers": [
        44
      ],
      "code": ""
    },
    {
      "description": "constructor",
      "expected-problems": null,
      "expected-linenumbers": [
        53
      ],
      "code": "public class ConstructorTest {\n              public ConstructorTest() {}\n\n              public ConstructorTest(int a) {}\n\n              public ConstructorTest(int a, int b) {}\n\n              public ConstructorTest(int a, int b, int c) {}\n\n              // BUG: Diagnostic contains: 4 parameters\n              public ConstructorTest(int a, int b, int c, int d) {}\n\n              // BUG: Diagnostic contains: 5 parameters\n              public ConstructorTest(int a, int b, int c, int d, int e) {}\n\n              // BUG: Diagnostic contains: 6 parameters\n              public ConstructorTest(int a, int b, int c, int d, int e, int f) {}\n\n              private ConstructorTest(int a, int b, int c, int d, int e, int f, int g) {}\n            }"
    },
    {
      "description": "recordConstructor",
      "expected-problems": null,
      "expected-linenumbers": [
        84
      ],
      "code": "public record RecordExample(int p0, int p1, int p2, int p3, int p4, int p5) {\n              public RecordExample {}\n            }"
    },
    {
      "description": "constructor_withAtInject",
      "expected-problems": null,
      "expected-linenumbers": [
        98
      ],
      "code": "import javax.inject.Inject;\n\n            public class ConstructorTest {\n              public ConstructorTest() {}\n\n              public ConstructorTest(int a) {}\n\n              public ConstructorTest(int a, int b) {}\n\n              public ConstructorTest(int a, int b, int c) {}\n\n              @Inject\n              public ConstructorTest(int a, int b, int c, int d) {}\n\n              // BUG: Diagnostic contains: 4 parameters\n              public ConstructorTest(short a, short b, short c, short d) {}\n            }"
    },
    {
      "description": "ignoresAutoFactoryOnClass",
      "expected-problems": null,
      "expected-linenumbers": [
        126
      ],
      "code": "package com.google.auto.factory;\n\n            public @interface AutoFactory {}\n            \n\n            @com.google.auto.factory.AutoFactory\n            public class Test {\n              public Test(int a, int b, int c, int d) {}\n            }\n            \n\n            public class TestWithoutAutoFactory {\n              // BUG: Diagnostic contains: 4 parameters\n              public TestWithoutAutoFactory(int a, int b, int c, int d) {}\n            }"
    },
    {
      "description": "ignoresAutoFactoryOnConstructor",
      "expected-problems": null,
      "expected-linenumbers": [
        156
      ],
      "code": "package com.google.auto.factory;\n\n            public @interface AutoFactory {}\n            \n\n            public class Test {\n              @com.google.auto.factory.AutoFactory\n              public Test(int a, int b, int c, int d) {}\n            }\n            \n\n            public class TestWithoutAutoFactory {\n              // BUG: Diagnostic contains: 4 parameters\n              public TestWithoutAutoFactory(int a, int b, int c, int d) {}\n            }"
    },
    {
      "description": "method",
      "expected-problems": null,
      "expected-linenumbers": [
        186
      ],
      "code": "public class MethodTest {\n              public void foo() {}\n\n              public void foo(int a) {}\n\n              public void foo(int a, int b) {}\n\n              public void foo(int a, int b, int c) {}\n\n              // BUG: Diagnostic contains: 4 parameters\n              public void foo(int a, int b, int c, int d) {}\n\n              // BUG: Diagnostic contains: 5 parameters\n              public void foo(int a, int b, int c, int d, int e) {}\n\n              // BUG: Diagnostic contains: 6 parameters\n              public void foo(int a, int b, int c, int d, int e, int f) {}\n\n              private void foo(int a, int b, int c, int d, int e, int f, int g) {}\n            }"
    },
    {
      "description": "testJUnitTestMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        217
      ],
      "code": "import com.google.common.collect.ImmutableList;\nimport com.google.testing.junit.testparameterinjector.TestParameters;\nimport com.google.testing.junit.testparameterinjector.TestParametersValuesProvider;\nimport org.junit.Test;\n\npublic class ExampleWithTestParametersTest {\n  @Test\n  @TestParameters(valuesProvider = TestArgs.class)\n  public void myTest(\n      String a,\n      String b,\n      String c,\n      String d,\n      String e,\n      String f,\n      String g,\n      String h,\n      String i,\n      String j,\n      String k,\n      String l)\n      throws Exception {}\n\n  static class TestArgs extends TestParametersValuesProvider {\n    @Override\n    public ImmutableList<TestParameters.TestParametersValues> provideValues(Context context) {\n      return ImmutableList.of();\n    }\n  }\n}"
    }
  ]
}