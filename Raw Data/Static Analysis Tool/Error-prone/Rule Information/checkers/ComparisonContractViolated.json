{
  "name": "ComparisonContractViolated",
  "language": "java",
  "description": "This comparison method violates the contract",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 222,
  "branches": 31,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        32
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import java.util.Comparator;\n\n            public class ComparisonContractViolatedPositiveCases {\n\n              static final int POSITIVE_CONSTANT = 50;\n\n              static class Struct {\n                int intField;\n                long longField;\n\n                @Override\n                public boolean equals(Object o) {\n                  return o instanceof Struct\n                      && intField == ((Struct) o).intField\n                      && longField == ((Struct) o).longField;\n                }\n\n                @Override\n                public int hashCode() {\n                  return intField + (int) longField;\n                }\n              }\n\n              static final Comparator<Struct> intComparisonNoZero1 =\n                  new Comparator<Struct>() {\n                    @Override\n                    public int compare(Struct left, Struct right) {\n                      // BUG: Diagnostic contains: Integer.compare(left.intField, right.intField)\n                      return (left.intField < right.intField) ? -1 : 1;\n                    }\n                  };\n\n              static final Comparator<Struct> intComparisonNoZero2 =\n                  new Comparator<Struct>() {\n                    @Override\n                    public int compare(Struct left, Struct right) {\n                      // BUG: Diagnostic contains: Integer.compare(left.intField, right.intField)\n                      return (right.intField < left.intField) ? 1 : -1;\n                    }\n                  };\n\n              static final Comparator<Struct> intComparisonNoZero3 =\n                  new Comparator<Struct>() {\n                    @Override\n                    public int compare(Struct left, Struct right) {\n                      // BUG: Diagnostic contains: Integer.compare(left.intField, right.intField)\n                      return (left.intField > right.intField) ? 1 : -1;\n                    }\n                  };\n\n              static final Comparator<Struct> intComparisonNoZero4 =\n                  new Comparator<Struct>() {\n                    @Override\n                    public int compare(Struct left, Struct right) {\n                      // BUG: Diagnostic contains: Integer.compare(left.intField, right.intField)\n                      return (left.intField <= right.intField) ? -1 : 1;\n                    }\n                  };\n\n              static final Comparator<Struct> longComparisonNoZero1 =\n                  new Comparator<Struct>() {\n                    @Override\n                    public int compare(Struct left, Struct right) {\n                      // BUG: Diagnostic contains: Long.compare(left.longField, right.longField)\n                      return (left.longField < right.longField) ? -1 : 1;\n                    }\n                  };\n\n              static final Comparator<Struct> longComparisonNoZero2 =\n                  new Comparator<Struct>() {\n                    @Override\n                    public int compare(Struct left, Struct right) {\n                      // BUG: Diagnostic contains: Long.compare(left.longField, right.longField)\n                      return (left.longField < right.longField) ? -1 : POSITIVE_CONSTANT;\n                    }\n                  };\n\n              static final Comparator<Struct> zeroOrOneComparator =\n                  new Comparator<Struct>() {\n\n                    @Override\n                    // BUG: Diagnostic contains: violates the contract\n                    public int compare(Struct o1, Struct o2) {\n                      return o1.equals(o2) ? 0 : 1;\n                    }\n                  };\n\n              static final Comparator<Struct> zeroOrNegativeOneComparator =\n                  new Comparator<Struct>() {\n\n                    @Override\n                    // BUG: Diagnostic contains: violates the contract\n                    public int compare(Struct o1, Struct o2) {\n                      return o1.equals(o2) ? 0 : -1;\n                    }\n                  };\n\n              static final Comparator<Struct> zeroOrPositiveConstantComparator =\n                  new Comparator<Struct>() {\n\n                    @Override\n                    // BUG: Diagnostic contains: violates the contract\n                    public int compare(Struct o1, Struct o2) {\n                      return o1.equals(o2) ? 0 : POSITIVE_CONSTANT;\n                    }\n                  };\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        151
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            public class ComparisonContractViolatedNegativeCases {\n              abstract static class IntOrInfinity implements Comparable<IntOrInfinity> {}\n\n              static class IntOrInfinityInt extends IntOrInfinity {\n                private final int value;\n\n                IntOrInfinityInt(int value) {\n                  this.value = value;\n                }\n\n                @Override\n                public int compareTo(IntOrInfinity o) {\n                  return (o instanceof IntOrInfinityInt)\n                      ? Integer.compare(value, ((IntOrInfinityInt) o).value)\n                      : 1;\n                }\n              }\n\n              static class NegativeInfinity extends IntOrInfinity {\n                @Override\n                public int compareTo(IntOrInfinity o) {\n                  return (o instanceof NegativeInfinity) ? 0 : -1;\n                }\n              }\n            }\\"
    }
  ]
}