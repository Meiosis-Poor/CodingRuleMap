{
  "name": "UnnecessaryParentheses",
  "language": "java",
  "description": "These parentheses are unnecessary; it is unlikely the code will be misinterpreted without them",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 71,
  "branches": 6,
  "apis": 1,
  "test": [
    {
      "description": "test",
      "expected-problems": null,
      "expected-linenumbers": [
        35
      ],
      "code": "class Test {\n              void f(int x) {\n                if (true) System.err.println((x));\n              }\n            }\n            \n\n            class Test {\n              void f(int x) {\n                if (true) System.err.println(x);\n              }\n            }"
    },
    {
      "description": "anonymousClass",
      "expected-problems": null,
      "expected-linenumbers": [
        59
      ],
      "code": "import com.google.common.base.Function;\n            import com.google.common.collect.Iterables;\n            import java.util.List;\n\n            class Test {\n              Iterable<Integer> f(List<Integer> l) {\n                return Iterables.transform(\n                    l,\n                    (new Function<Integer, Integer>() {\n                      public Integer apply(Integer a) {\n                        return a * 2;\n                      }\n                    }));\n              }\n            }\n            \n\n            import com.google.common.base.Function;\n            import com.google.common.collect.Iterables;\n            import java.util.List;\n\n            class Test {\n              Iterable<Integer> f(List<Integer> l) {\n                return Iterables.transform(\n                    l,\n                    new Function<Integer, Integer>() {\n                      public Integer apply(Integer a) {\n                        return a * 2;\n                      }\n                    });\n              }\n            }"
    },
    {
      "description": "binaryTrees",
      "expected-problems": null,
      "expected-linenumbers": [
        103
      ],
      "code": "class Test {\n              int e() {\n                // BUG: Diagnostic contains:\n                return (\"b\").hashCode();\n              }\n\n              int f() {\n                return (\"a\" + \"b\").hashCode();\n              }\n\n              int g() {\n                return (1 + 2) & 3;\n              }\n            }"
    },
    {
      "description": "methodReference",
      "expected-problems": null,
      "expected-linenumbers": [
        127
      ],
      "code": "import java.util.function.Predicate;\n\n            class Test {\n              Predicate<Test> foo(Predicate<Test> a) {\n                // BUG: Diagnostic contains:\n                return foo((this::equals));\n              }\n            }"
    },
    {
      "description": "lambdaLambda",
      "expected-problems": null,
      "expected-linenumbers": [
        145
      ],
      "code": "import java.util.function.Function;\n\n            class Test {\n              Function<Void, Function<Void, Void>> r = x -> (y -> y);\n            }"
    },
    {
      "description": "lambda",
      "expected-problems": null,
      "expected-linenumbers": [
        160
      ],
      "code": "import java.util.function.Function;\n\n            class Test {\n              Function<Void, Void> f() {\n                // BUG: Diagnostic contains:\n                Function<Void, Void> r = (y -> y);\n                // BUG: Diagnostic contains:\n                return (y -> y);\n              }\n            }"
    },
    {
      "description": "unaryPostFixParenthesesNotNeeded",
      "expected-problems": null,
      "expected-linenumbers": [
        180
      ],
      "code": "class Test {\n              void print(Integer i) {\n                int j = (i++) + 2;\n              }\n            }\n            \n\n            class Test {\n              void print(Integer i) {\n                int j = i++ + 2;\n              }\n            }"
    },
    {
      "description": "unaryPostFixParenthesesNeeded",
      "expected-problems": null,
      "expected-linenumbers": [
        204
      ],
      "code": "class Test {\n              void print(Integer i) {\n                (i++).toString();\n              }\n            }"
    },
    {
      "description": "unaryPreFixParenthesesNeeded",
      "expected-problems": null,
      "expected-linenumbers": [
        219
      ],
      "code": "class Test {\n              void print(Integer i) {\n                (++i).toString();\n              }\n            }"
    },
    {
      "description": "negativeStatements",
      "expected-problems": null,
      "expected-linenumbers": [
        234
      ],
      "code": "class Test {\n              void print(boolean b, int i) {\n                if (b) {}\n                while (b) {}\n                do {} while (b);\n                switch (i) {\n                }\n                synchronized (this) {\n                }\n              }\n            }"
    },
    {
      "description": "positiveStatements",
      "expected-problems": null,
      "expected-linenumbers": [
        255
      ],
      "code": "class Test {\n              int f(boolean b, Integer x) {\n                assert (b);\n                return (x);\n              }\n            }\n            \n\n            class Test {\n              int f(boolean b, Integer x) {\n                assert b;\n                return x;\n              }\n            }"
    },
    {
      "description": "switchExpression",
      "expected-problems": null,
      "expected-linenumbers": [
        281
      ],
      "code": "class Test {\n              public boolean match(String value) {\n                return switch (value) {\n                  case \"true\" -> true;\n                  case \"false\" -> false;\n                  default -> throw new RuntimeException(\"Unable to match\");\n                };\n              }\n            }"
    },
    {
      "description": "unaryMinus",
      "expected-problems": null,
      "expected-linenumbers": [
        301
      ],
      "code": "class Test {\n              public void f() {\n                Double d = (Double) (-1.0);\n                d = (double) (-1.0);\n              }\n            }\n            \n\n            class Test {\n              public void f() {\n                Double d = (Double) (-1.0);\n                d = (double) -1.0;\n              }\n            }"
    },
    {
      "description": "annotationsWithoutTrailingParentheses",
      "expected-problems": null,
      "expected-linenumbers": [
        327
      ],
      "code": "@Deprecated(forRemoval = true)\n            class Test {\n              @Override\n              public String toString() {\n                return \"Test\";\n              }\n            }"
    },
    {
      "description": "annotationWithTrailingParentheses",
      "expected-problems": null,
      "expected-linenumbers": [
        345
      ],
      "code": "@Deprecated(forRemoval = true)\n            class Test {\n              @Override()\n              public String toString() {\n                return \"Test\";\n              }\n            }\n            \n\n            @Deprecated(forRemoval = true)\n            class Test {\n              @Override\n              public String toString() {\n                return \"Test\";\n              }\n            }"
    },
    {
      "description": "recordParameters",
      "expected-problems": null,
      "expected-linenumbers": [
        374
      ],
      "code": "import org.checkerframework.checker.nullness.qual.Nullable;\n            import org.checkerframework.dataflow.qual.Pure;\n            import com.google.auto.value.AutoBuilder;\n\n            /**\n             * A record with parameters.\n             *\n             * @param x parameter x\n             * @param y parameter y\n             * @param z parameter z\n             */\n            public record R(@Pure boolean x, @Pure @Nullable String y, @Pure @Nullable String z) {\n              @AutoBuilder\n              public abstract static class Builder {}\n            }"
    }
  ]
}