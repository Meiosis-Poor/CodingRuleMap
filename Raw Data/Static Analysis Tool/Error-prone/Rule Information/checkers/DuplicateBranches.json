{
  "name": "DuplicateBranches",
  "language": "java",
  "description": "Both branches contain identical code",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 90,
  "branches": 13,
  "apis": 2,
  "test": [
    {
      "description": "positive",
      "expected-problems": null,
      "expected-linenumbers": [
        32
      ],
      "code": "class Test {\n              String f(boolean a, String b, String c) {\n                // BUG: Diagnostic contains:\n                return a ? b : b;\n              }\n\n              String g(boolean a, String b, String c) {\n                // BUG: Diagnostic contains:\n                if (a) {\n                  return b;\n                } else {\n                  return b;\n                }\n              }\n            }"
    },
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        57
      ],
      "code": "class Test {\n              String f(boolean a, String b, String c) {\n                return a ? b : c;\n              }\n\n              String g(boolean a, String b, String c) {\n                if (a) {\n                  return b;\n                } else {\n                  return c;\n                }\n              }\n\n              String h(boolean a, String b, String c) {\n                if (a) {\n                  return b;\n                }\n                return \"\";\n              }\n            }"
    },
    {
      "description": "statementRefactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        87
      ],
      "code": "class Test {\n              String g(boolean a, String b, String c) {\n                if (a) {\n                  return b;\n                } else {\n                  return b;\n                }\n              }\n            }\n            \n\n            class Test {\n              String g(boolean a, String b, String c) {\n                return b;\n              }\n            }"
    },
    {
      "description": "statementRefactoringChain",
      "expected-problems": null,
      "expected-linenumbers": [
        115
      ],
      "code": "class Test {\n              String g(boolean a, String b, String c) {\n                if (a) {\n                  return c;\n                } else if (a) {\n                  return b;\n                } else {\n                  return b;\n                }\n              }\n            }\n            \n\n            class Test {\n              String g(boolean a, String b, String c) {\n                if (a) {\n                  return c;\n                } else {\n                  return b;\n                }\n              }\n            }"
    },
    {
      "description": "commentRefactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        149
      ],
      "code": "class Test {\n              String g(boolean a, String b, String c) {\n                if (a) {\n                  // foo\n                  return b;\n                } else {\n                  // bar\n                  return b;\n                }\n              }\n            }\n            \n\n            class Test {\n              String g(boolean a, String b, String c) {\n                // foo\n                // bar\n                return b;\n              }\n            }"
    },
    {
      "description": "commentRefactoringIfElse",
      "expected-problems": null,
      "expected-linenumbers": [
        181
      ],
      "code": "class Test {\n              boolean g(boolean a, boolean b) {\n                if (a) {\n                  return true;\n                } else if (a) {\n                  // foo\n                  return b;\n                } else {\n                  // bar\n                  return b;\n                }\n              }\n            }\n            \n\n            class Test {\n              boolean g(boolean a, boolean b) {\n                if (a) {\n                  return true;\n                } else {\n                  // foo\n                  // bar\n                  return b;\n                }\n              }\n            }"
    },
    {
      "description": "negativeEmpty",
      "expected-problems": null,
      "expected-linenumbers": [
        219
      ],
      "code": "class Test {\n              void f(boolean a) {\n                if (a) {\n                } else {\n                }\n              }\n            }\n            \n\n            class Test {\n              void f(boolean a) {}\n            }"
    }
  ]
}