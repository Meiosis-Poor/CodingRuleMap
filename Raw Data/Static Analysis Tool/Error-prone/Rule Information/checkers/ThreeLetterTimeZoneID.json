{
  "name": "ThreeLetterTimeZoneID",
  "language": "java",
  "description": "Three-letter time zone identifiers are deprecated, may be ambiguous, and might not do what you intend; the full IANA time zone ID should be used instead.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 163,
  "branches": 19,
  "apis": 7,
  "test": [
    {
      "description": "allThreeLetterIdsAreCoveredByZoneIdShortIds",
      "expected-problems": null,
      "expected-linenumbers": [
        43
      ],
      "code": ""
    },
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        68
      ],
      "code": "package a;\n\n            import java.util.TimeZone;\n\n            class A {\n              public static void test_PST() {\n                // BUG: Diagnostic contains: TimeZone.getTimeZone(\"America/Los_Angeles\")\n                TimeZone.getTimeZone(\"PST\");\n              }\n\n              public static void test_EST() {\n                // BUG: Diagnostic contains: TimeZone.getTimeZone(\"Etc/GMT+5\")\n                TimeZone.getTimeZone(\"EST\");\n              }\n\n              public static void test_noPreferredReplacements() {\n                // BUG: Diagnostic contains: TimeZone.getTimeZone(\"Asia/Dhaka\")\n                TimeZone.getTimeZone(\"BST\");\n              }\n            }"
    },
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        68
      ],
      "code": "package a;\n\n            import java.util.TimeZone;\n\n            class A {\n              public static void test_PST() {\n                // BUG: Diagnostic contains: TimeZone.getTimeZone(\"America/Los_Angeles\")\n                TimeZone.getTimeZone(\"PST\");\n              }\n\n              public static void test_EST() {\n                // BUG: Diagnostic contains: TimeZone.getTimeZone(\"Etc/GMT+5\")\n                TimeZone.getTimeZone(\"EST\");\n              }\n\n              public static void test_noPreferredReplacements() {\n                // BUG: Diagnostic contains: TimeZone.getTimeZone(\"Asia/Dhaka\")\n                TimeZone.getTimeZone(\"BST\");\n              }\n            }"
    },
    {
      "description": "positiveCaseJodaTime",
      "expected-problems": null,
      "expected-linenumbers": [
        98
      ],
      "code": "package a;\n\n            import java.util.TimeZone;\n            import org.joda.time.DateTimeZone;\n\n            class A {\n              public static void test_EST() {\n                // BUG: Diagnostic contains: TimeZone.getTimeZone(\"America/New_York\")\n                DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"EST\"));\n              }\n\n              public static void test_HST() {\n                // BUG: Diagnostic contains: TimeZone.getTimeZone(\"Pacific/Honolulu\")\n                DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"HST\"));\n              }\n\n              public static void test_MST() {\n                // BUG: Diagnostic contains: TimeZone.getTimeZone(\"America/Denver\")\n                DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"MST\"));\n              }\n\n              public static void test_PST() {\n                // Not a special case, but should still work.\n                // BUG: Diagnostic contains: TimeZone.getTimeZone(\"America/Los_Angeles\")\n                DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"PST\"));\n              }\n            }"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        135
      ],
      "code": "package a;\n\n            import java.util.TimeZone;\n\n            class A {\n              public static void notThreeLetter() {\n                TimeZone.getTimeZone(\"\");\n                TimeZone.getTimeZone(\"America/Los_Angeles\");\n              }\n\n              public static void threeLetterButAllowed() {\n                TimeZone.getTimeZone(\"GMT\");\n                TimeZone.getTimeZone(\"UTC\");\n                TimeZone.getTimeZone(\"CET\");\n                TimeZone.getTimeZone(\"PRC\");\n              }\n            }"
    },
    {
      "description": "replacements_pST",
      "expected-problems": null,
      "expected-linenumbers": [
        162
      ],
      "code": ""
    },
    {
      "description": "replacements_eST",
      "expected-problems": null,
      "expected-linenumbers": [
        169
      ],
      "code": ""
    },
    {
      "description": "replacements_iST",
      "expected-problems": null,
      "expected-linenumbers": [
        177
      ],
      "code": ""
    },
    {
      "description": "replacements_cST",
      "expected-problems": null,
      "expected-linenumbers": [
        183
      ],
      "code": ""
    }
  ]
}