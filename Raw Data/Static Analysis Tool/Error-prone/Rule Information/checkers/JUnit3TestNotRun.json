{
  "name": "JUnit3TestNotRun",
  "language": "java",
  "description": "Test method will not be run; please correct method signature (Should be public, non-static, and method name should begin with \\",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 150,
  "branches": 12,
  "apis": 2,
  "test": [
    {
      "description": "positiveCases",
      "expected-problems": null,
      "expected-linenumbers": [
        36
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import junit.framework.TestCase;\n\n            /**\n             * @author rburny@google.com (Radoslaw Burny)\n             */\n            public class JUnit3TestNotRunPositiveCases extends TestCase {\n              // BUG: Diagnostic contains: JUnit3TestNotRun\n              public static void tesNameStatic() {}\n\n              // These names are trickier to correct, but we should still indicate the bug\n              // BUG: Diagnostic contains: JUnit3TestNotRun\n              public void tetsName() {}\n\n              // BUG: Diagnostic contains: JUnit3TestNotRun\n              public void tesstName() {}\n\n              // BUG: Diagnostic contains: JUnit3TestNotRun\n              public void tesetName() {}\n\n              // BUG: Diagnostic contains: JUnit3TestNotRun\n              public void tesgName() {}\n\n              // tentative - can cause false positives\n              // BUG: Diagnostic contains: JUnit3TestNotRun\n              public void textName() {}\n            }\\"
    },
    {
      "description": "misspelledTest",
      "expected-problems": null,
      "expected-linenumbers": [
        74
      ],
      "code": "import junit.framework.TestCase;\n            import org.junit.Test;\n\n            public class PositiveCases extends TestCase {\n              public void tesName1() {}\n\n              public void ttestName2() {}\n\n              public void teestName3() {}\n\n              public void tstName4() {}\n\n              public void tetName5() {}\n\n              public void etstName6() {}\n\n              public void tsetName7() {}\n\n              public void teatName8() {}\n\n              public void TestName9() {}\n\n              public void TEST_NAME_10() {}\n\n              public void tesname11() {}\n            }\n            \n\n            import junit.framework.TestCase;\n            import org.junit.Test;\n\n            public class PositiveCases extends TestCase {\n              public void testName1() {}\n\n              public void testName2() {}\n\n              public void testName3() {}\n\n              public void testName4() {}\n\n              public void testName5() {}\n\n              public void testName6() {}\n\n              public void testName7() {}\n\n              public void testName8() {}\n\n              public void testName9() {}\n\n              public void test_NAME_10() {}\n\n              public void testname11() {}\n            }"
    },
    {
      "description": "substitutionShouldBeWellFormed",
      "expected-problems": null,
      "expected-linenumbers": [
        140
      ],
      "code": "import junit.framework.TestCase;\n            import org.junit.Test;\n\n            public class PositiveCases extends TestCase {\n              public void tesBasic() {}\n\n              public void tesMoreSpaces() {}\n\n              public void tesMultiline() {}\n            }\n            \n\n            import junit.framework.TestCase;\n            import org.junit.Test;\n\n            public class PositiveCases extends TestCase {\n              public void testBasic() {}\n\n              public void testMoreSpaces() {}\n\n              public void testMultiline() {}\n            }"
    },
    {
      "description": "privateNamedTest",
      "expected-problems": null,
      "expected-linenumbers": [
        174
      ],
      "code": "import junit.framework.TestCase;\n\n            public class Test extends TestCase {\n              // BUG: Diagnostic contains:\n              private void testDoesStuff() {}\n            }"
    },
    {
      "description": "privateMisspelledTest",
      "expected-problems": null,
      "expected-linenumbers": [
        190
      ],
      "code": "import junit.framework.TestCase;\n\n            public class Test extends TestCase {\n              // BUG: Diagnostic contains:\n              private void tsetDoesStuff() {}\n            }"
    },
    {
      "description": "hasModifiersAndThrows",
      "expected-problems": null,
      "expected-linenumbers": [
        206
      ],
      "code": "import junit.framework.TestCase;\n            import org.junit.Test;\n\n            public class DoesStuffTest extends TestCase {\n              private static void tsetDoesStuff() throws Exception {}\n            }\n            \n\n            import junit.framework.TestCase;\n            import org.junit.Test;\n\n            public class DoesStuffTest extends TestCase {\n              public void testDoesStuff() throws Exception {}\n            }"
    },
    {
      "description": "hasParameters_butOtherwiseLooksLikeATestMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        232
      ],
      "code": "import junit.framework.TestCase;\n\n            public class Test extends TestCase {\n              // BUG: Diagnostic contains:\n              public void testDoesStuff(boolean param) {}\n            }"
    },
    {
      "description": "suppressionWorks",
      "expected-problems": null,
      "expected-linenumbers": [
        248
      ],
      "code": "import junit.framework.TestCase;\n\n            public class Test extends TestCase {\n              @SuppressWarnings(\"JUnit3TestNotRun\")\n              public void testDoesStuff(boolean param) {}\n            }"
    },
    {
      "description": "hasParameters_butInABaseClass",
      "expected-problems": null,
      "expected-linenumbers": [
        264
      ],
      "code": "import junit.framework.TestCase;\n\n            public class TestBase extends TestCase {\n              public void testDoesStuff(boolean param) {}\n            }"
    },
    {
      "description": "hasParameters_calledElsewhere_noFinding",
      "expected-problems": null,
      "expected-linenumbers": [
        279
      ],
      "code": "import junit.framework.TestCase;\n\n            public class Test extends TestCase {\n              public void testActually() {\n                testDoesStuff(true);\n              }\n\n              public void testDoesStuff(boolean param) {}\n            }"
    },
    {
      "description": "hasParameters_isOverride_noFinding",
      "expected-problems": null,
      "expected-linenumbers": [
        298
      ],
      "code": "interface Foo {\n              void testDoesStuff(boolean param);\n            }\n            \n\n            import junit.framework.TestCase;\n\n            public class Test extends TestCase implements Foo {\n              public void testDoesStuff(boolean param) {}\n            }"
    },
    {
      "description": "noModifiers",
      "expected-problems": null,
      "expected-linenumbers": [
        320
      ],
      "code": "import junit.framework.TestCase;\n            import org.junit.Test;\n\n            public class DoesStuffTest extends TestCase {\n              void tsetDoesStuff() {}\n            }\n            \n\n            import junit.framework.TestCase;\n            import org.junit.Test;\n\n            public class DoesStuffTest extends TestCase {\n              public void testDoesStuff() {}\n            }"
    },
    {
      "description": "negativeCase1",
      "expected-problems": null,
      "expected-linenumbers": [
        346
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import junit.framework.TestCase;\n            import org.junit.Ignore;\n            import org.junit.Test;\n\n            /**\n             * @author rburny@google.com (Radoslaw Burny)\n             */\n            public class JUnit3TestNotRunNegativeCase1 extends TestCase {\n\n              // correctly spelled\n              public void test() {}\n\n              public void testCorrectlySpelled() {}\n\n              // real words\n              public void bestNameEver() {}\n\n              public void destroy() {}\n\n              public void restore() {}\n\n              public void establish() {}\n\n              public void estimate() {}\n\n              // different signature\n              public boolean teslaInventedLightbulb() {\n                return true;\n              }\n\n              public void tesselate(float f) {}\n\n              // surrounding class is not a JUnit3 TestCase\n              private static class TestCase {\n                private void tesHelper() {}\n\n                private void destroy() {}\n              }\n\n              // correct test, despite redundant annotation\n              @Test\n              public void testILikeAnnotations() {}\n\n              // both @Test & @Ignore\n              @Test\n              @Ignore\n              public void ignoredTest2() {}\n\n              @Ignore\n              @Test\n              public void ignoredTest() {}\n            }\\"
    },
    {
      "description": "testILikeAnnotations",
      "expected-problems": null,
      "expected-linenumbers": [
        394
      ],
      "code": ""
    },
    {
      "description": "ignoredTest",
      "expected-problems": null,
      "expected-linenumbers": [
        403
      ],
      "code": ""
    },
    {
      "description": "ignoredTest",
      "expected-problems": null,
      "expected-linenumbers": [
        403
      ],
      "code": ""
    },
    {
      "description": "ignoredTest",
      "expected-problems": null,
      "expected-linenumbers": [
        403
      ],
      "code": ""
    },
    {
      "description": "negativeCase2",
      "expected-problems": null,
      "expected-linenumbers": [
        410
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import org.junit.Test;\n            import org.junit.runner.RunWith;\n            import org.junit.runners.JUnit4;\n\n            /**\n             * JUnit4 test class - we should not issue errors on that.\n             *\n             * @author rburny@google.com (Radoslaw Burny)\n             */\n            @RunWith(JUnit4.class)\n            public class JUnit3TestNotRunNegativeCase2 {\n\n              // JUnit4 tests should be ignored, no matter what their names are.\n              @Test\n              public void nameDoesNotStartWithTest() {}\n\n              @Test\n              public void tesName() {}\n\n              @Test\n              public void tstName() {}\n\n              @Test\n              public void TestName() {}\n            }\\"
    },
    {
      "description": "nameDoesNotStartWithTest",
      "expected-problems": null,
      "expected-linenumbers": [
        431
      ],
      "code": ""
    },
    {
      "description": "tesName",
      "expected-problems": null,
      "expected-linenumbers": [
        434
      ],
      "code": ""
    },
    {
      "description": "tstName",
      "expected-problems": null,
      "expected-linenumbers": [
        437
      ],
      "code": ""
    },
    {
      "description": "TestName",
      "expected-problems": null,
      "expected-linenumbers": [
        440
      ],
      "code": ""
    },
    {
      "description": "negativeCase3",
      "expected-problems": null,
      "expected-linenumbers": [
        447
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import junit.framework.TestCase;\n            import org.junit.Test;\n            import org.junit.runner.RunWith;\n            import org.junit.runner.Runner;\n\n            /**\n             * Tricky case - mixed JUnit3 and JUnit4.\n             *\n             * @author rburny@google.com (Radoslaw Burny)\n             */\n            @RunWith(Runner.class)\n            public class JUnit3TestNotRunNegativeCase3 extends TestCase {\n\n              @Test\n              public void name() {}\n\n              public void tesMisspelled() {}\n\n              @Test\n              public void tesBothIssuesAtOnce() {}\n            }\\"
    },
    {
      "description": "name",
      "expected-problems": null,
      "expected-linenumbers": [
        468
      ],
      "code": ""
    },
    {
      "description": "tesBothIssuesAtOnce",
      "expected-problems": null,
      "expected-linenumbers": [
        473
      ],
      "code": ""
    },
    {
      "description": "negativeCase4",
      "expected-problems": null,
      "expected-linenumbers": [
        480
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport junit.framework.TestCase;\nimport org.junit.Test;\n\n/**\n * Abstract class - let's ignore those for now, it's hard to say what are they run with.\n *\n * @author rburny@google.com (Radoslaw Burny)\n */\npublic abstract class JUnit3TestNotRunNegativeCase4 extends TestCase {\n\n  @Test\n  public void name() {}\n\n  public void tesMisspelled() {}\n\n  @Test\n  public void tesBothIssuesAtOnce() {}\n}\\"
    },
    {
      "description": "name",
      "expected-problems": null,
      "expected-linenumbers": [
        498
      ],
      "code": ""
    },
    {
      "description": "tesBothIssuesAtOnce",
      "expected-problems": null,
      "expected-linenumbers": [
        503
      ],
      "code": ""
    },
    {
      "description": "negativeCase5",
      "expected-problems": null,
      "expected-linenumbers": [
        510
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import junit.framework.TestCase;\n            import org.junit.Test;\n            import org.junit.runner.RunWith;\n            import org.junit.runner.Runner;\n\n            /**\n             * Tricky case - mixed JUnit3 and JUnit4.\n             *\n             * @author rburny@google.com (Radoslaw Burny)\n             */\n            @RunWith(Runner.class)\n            public class JUnit3TestNotRunNegativeCase3 extends TestCase {\n\n              @Test\n              public void name() {}\n\n              public void tesMisspelled() {}\n\n              @Test\n              public void tesBothIssuesAtOnce() {}\n            }\\\n            \n\n            package com.google.errorprone.bugpatterns.testdata;\n\n            import org.junit.Test;\n\n            /**\n             * Class inherits RunWith from superclass, so should not emit errors.\n             *\n             * @author rburny@google.com (Radoslaw Burny)\n             */\n            public class JUnit3TestNotRunNegativeCase5 extends JUnit3TestNotRunNegativeCase3 {\n\n              public void testEasyCase() {}\n\n              @Test\n              public void name() {}\n\n              public void tesMisspelled() {}\n\n              @Test\n              public void tesBothIssuesAtOnce() {}\n            }\\"
    },
    {
      "description": "name",
      "expected-problems": null,
      "expected-linenumbers": [
        531
      ],
      "code": ""
    },
    {
      "description": "tesBothIssuesAtOnce",
      "expected-problems": null,
      "expected-linenumbers": [
        536
      ],
      "code": ""
    },
    {
      "description": "name",
      "expected-problems": null,
      "expected-linenumbers": [
        557
      ],
      "code": ""
    },
    {
      "description": "tesBothIssuesAtOnce",
      "expected-problems": null,
      "expected-linenumbers": [
        562
      ],
      "code": ""
    }
  ]
}