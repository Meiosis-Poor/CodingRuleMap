{
  "name": "UseEnumSwitch",
  "language": "java",
  "description": "Prefer using a switch instead of a chained if-else for enums",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 37,
  "branches": 6,
  "apis": 1,
  "test": [
    {
      "description": "refactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        31
      ],
      "code": "class Test {\n              enum E {\n                ONE,\n                TWO,\n                THREE\n              }\n\n              int f(E e) {\n                if (e.equals(E.ONE)) {\n                  return 1;\n                } else if (e.equals(E.TWO)) {\n                  return 2;\n                } else {\n                  return 3;\n                }\n              }\n            }\n            \n\n            class Test {\n              enum E {\n                ONE,\n                TWO,\n                THREE\n              }\n\n              int f(E e) {\n                switch (e) {\n                  case ONE:\n                    return 1;\n                  case TWO:\n                    return 2;\n                  default:\n                    return 3;\n                }\n              }\n            }"
    },
    {
      "description": "nonConstantEnum",
      "expected-problems": null,
      "expected-linenumbers": [
        80
      ],
      "code": "class Test {\n              enum E {\n                ONE,\n                TWO,\n                THREE;\n\n                E one() {\n                  return ONE;\n                }\n              }\n\n              int f(E e) {\n                if (e == e.one()) {\n                  return 1;\n                } else if (e == E.TWO) {\n                  return 2;\n                } else {\n                  return 3;\n                }\n              }\n            }"
    },
    {
      "description": "notActuallyEnum_noFinding",
      "expected-problems": null,
      "expected-linenumbers": [
        112
      ],
      "code": "class Test {\n              interface A {}\n\n              enum E implements A {\n                ONE,\n                TWO,\n                THREE\n              }\n\n              int f(A e) {\n                if (e.equals(E.ONE)) {\n                  return 1;\n                } else if (e.equals(E.TWO)) {\n                  return 2;\n                } else {\n                  return 3;\n                }\n              }\n            }"
    }
  ]
}