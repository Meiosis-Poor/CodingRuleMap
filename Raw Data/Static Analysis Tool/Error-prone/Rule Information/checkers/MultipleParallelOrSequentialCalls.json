{
  "name": "MultipleParallelOrSequentialCalls",
  "language": "java",
  "description": "Multiple calls to either parallel or sequential are unnecessary and cause confusion.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 85,
  "branches": 11,
  "apis": 1,
  "test": [
    {
      "description": "positiveCases",
      "expected-problems": null,
      "expected-linenumbers": [
        36
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Stream;\n\n/**\n * @author @mariasam (Maria Sam) on 7/6/17.\n */\nclass MultipleParallelOrSequentialCallsPositiveCases {\n\n  public void basicCaseParallel(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel();'?\n    list.stream().parallel().parallel();\n  }\n\n  public void basicCaseParallelNotFirst(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel().map(m -> m);'?\n    list.stream().map(m -> m).parallel().parallel();\n  }\n\n  public void basicCollection(Collection<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel();'?\n    list.stream().parallel().parallel();\n  }\n\n  public void parallelStream(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.parallelStream();'?\n    list.parallelStream().parallel().parallel();\n  }\n\n  public void basicCaseParallelThisInMethodArg(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'this.hello(list.stream().parallel());'?\n    this.hello(list.stream().parallel().parallel());\n  }\n\n  public void onlyOneError(List<String> list) {\n    this.hello(\n        // BUG: Diagnostic contains: Multiple calls\n        list.stream().parallel().parallel());\n  }\n\n  public void mapMethod(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'hello(list.stream().parallel().map(m ->\n    // this.hello(null)));'?\n    hello(list.stream().map(m -> this.hello(null)).parallel().parallel());\n  }\n\n  public void betweenMethods(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel().map(m -> m.toString());'?\n    list.stream().parallel().map(m -> m.toString()).parallel();\n  }\n\n  public void basicCaseParallelNotLast(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel().map(m ->\n    // m.toString()).findFirst();'?\n    list.stream().parallel().map(m -> m.toString()).parallel().findFirst();\n  }\n\n  public void basicCaseSequential(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().sequential().map(m -> m.toString());'?\n    list.stream().sequential().map(m -> m.toString()).sequential();\n  }\n\n  public void bothSequentialAndParallel(List<String> list) {\n    // this case is unlikely (wrong, even) but just checking that this works\n    // BUG: Diagnostic contains: Did you mean 'list.stream().sequential().parallel();'?\n    list.stream().sequential().parallel().sequential();\n  }\n\n  public void bothSequentialAndParallelMultiple(List<String> list) {\n    // this is even more messed up, this test is here to make sure the checker doesn't throw an\n    // exception\n    // BUG: Diagnostic contains: Multiple calls\n    list.stream().sequential().parallel().sequential().parallel();\n  }\n\n  public void parallelMultipleLines(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel()\n    list.stream().parallel().map(m -> m.toString()).parallel();\n  }\n\n  public void multipleParallelCalls(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.parallelStream();'?\n    list.parallelStream().sequential();\n  }\n\n  public String hello(Stream st) {\n    return \"\";\n  }\n\n  public void streamWithinAStream(List<String> list, List<String> list2) {\n    // BUG: Diagnostic contains: Did you mean\n    list.stream()\n        .flatMap(childDir -> list2.stream())\n        .parallel()\n        .flatMap(a -> list2.stream())\n        .parallel();\n  }\n\n  public void streamWithinAStreamImmediatelyAfterOtherParallel(\n      List<String> list, List<String> list2) {\n    // BUG: Diagnostic contains: Did you mean\n    list.stream().parallel().map(m -> list2.stream().parallel()).parallel();\n  }\n\n  public void parallelAndNestedStreams(List<String> list, List<String> list2) {\n    // BUG: Diagnostic contains: Did you mean\n    list.parallelStream()\n        .flatMap(childDir -> list2.stream())\n        .parallel()\n        .filter(m -> (new TestClass(\"test\")).testClass())\n        .map(\n            a -> {\n              if (a == null) {\n                return a;\n              }\n              return null;\n            })\n        .filter(a -> a != null)\n        .flatMap(a -> list2.stream())\n        .parallel();\n  }\n\n  private class TestClass {\n    public TestClass(String con) {}\n\n    private boolean testClass() {\n      return true;\n    }\n  }\n}\\"
    },
    {
      "description": "negativeCases",
      "expected-problems": null,
      "expected-linenumbers": [
        178
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import java.util.List;\n\n            /** Created by mariasam on 7/6/17. */\n            public class MultipleParallelOrSequentialCallsNegativeCases {\n\n              public void basicCase(List<String> list) {\n                list.stream().parallel();\n              }\n\n              public void basicCaseSequential(List<String> list) {\n                list.stream().sequential();\n              }\n\n              public void basicCaseNotLast(List<String> list) {\n                list.stream().parallel().findFirst();\n              }\n\n              public void middleParallel(List<String> list) {\n                list.stream().map(m -> m).parallel().filter(m -> m.isEmpty());\n              }\n\n              public void otherMethod() {\n                SomeObject someObject = new SomeObject();\n                someObject.parallel().parallel();\n              }\n\n              public void otherMethodNotParallel(List<String> list) {\n                list.stream().filter(m -> m.isEmpty()).findFirst();\n              }\n\n              public void streamWithinAStreamImmediatelyAfter(List<String> list) {\n                list.stream().map(m -> list.stream().parallel()).parallel();\n              }\n\n              public void streamWithinAStreamImmediatelyAfterOtherParallelBothFirstAndWithin(\n                  List<String> list) {\n                list.stream().parallel().map(m -> list.stream().parallel());\n              }\n\n              public void streamWithinAStreamImmediatelyAfterOtherParallelBoth(List<String> list) {\n                list.stream().sequential().map(m -> list.stream().parallel()).parallel();\n              }\n\n              class SomeObject {\n                public SomeObject parallel() {\n                  return null;\n                }\n              }\n            }\\"
    },
    {
      "description": "fixes",
      "expected-problems": null,
      "expected-linenumbers": [
        239
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Stream;\n\n/**\n * @author @mariasam (Maria Sam) on 7/6/17.\n */\nclass MultipleParallelOrSequentialCallsPositiveCases {\n\n  public void basicCaseParallel(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel();'?\n    list.stream().parallel().parallel();\n  }\n\n  public void basicCaseParallelNotFirst(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel().map(m -> m);'?\n    list.stream().map(m -> m).parallel().parallel();\n  }\n\n  public void basicCollection(Collection<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel();'?\n    list.stream().parallel().parallel();\n  }\n\n  public void parallelStream(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.parallelStream();'?\n    list.parallelStream().parallel().parallel();\n  }\n\n  public void basicCaseParallelThisInMethodArg(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'this.hello(list.stream().parallel());'?\n    this.hello(list.stream().parallel().parallel());\n  }\n\n  public void onlyOneError(List<String> list) {\n    this.hello(\n        // BUG: Diagnostic contains: Multiple calls\n        list.stream().parallel().parallel());\n  }\n\n  public void mapMethod(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'hello(list.stream().parallel().map(m ->\n    // this.hello(null)));'?\n    hello(list.stream().map(m -> this.hello(null)).parallel().parallel());\n  }\n\n  public void betweenMethods(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel().map(m -> m.toString());'?\n    list.stream().parallel().map(m -> m.toString()).parallel();\n  }\n\n  public void basicCaseParallelNotLast(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel().map(m ->\n    // m.toString()).findFirst();'?\n    list.stream().parallel().map(m -> m.toString()).parallel().findFirst();\n  }\n\n  public void basicCaseSequential(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().sequential().map(m -> m.toString());'?\n    list.stream().sequential().map(m -> m.toString()).sequential();\n  }\n\n  public void bothSequentialAndParallel(List<String> list) {\n    // this case is unlikely (wrong, even) but just checking that this works\n    // BUG: Diagnostic contains: Did you mean 'list.stream().sequential().parallel();'?\n    list.stream().sequential().parallel().sequential();\n  }\n\n  public void bothSequentialAndParallelMultiple(List<String> list) {\n    // this is even more messed up, this test is here to make sure the checker doesn't throw an\n    // exception\n    // BUG: Diagnostic contains: Multiple calls\n    list.stream().sequential().parallel().sequential().parallel();\n  }\n\n  public void parallelMultipleLines(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel()\n    list.stream().parallel().map(m -> m.toString()).parallel();\n  }\n\n  public void multipleParallelCalls(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.parallelStream();'?\n    list.parallelStream().sequential();\n  }\n\n  public String hello(Stream st) {\n    return \"\";\n  }\n\n  public void streamWithinAStream(List<String> list, List<String> list2) {\n    // BUG: Diagnostic contains: Did you mean\n    list.stream()\n        .flatMap(childDir -> list2.stream())\n        .parallel()\n        .flatMap(a -> list2.stream())\n        .parallel();\n  }\n\n  public void streamWithinAStreamImmediatelyAfterOtherParallel(\n      List<String> list, List<String> list2) {\n    // BUG: Diagnostic contains: Did you mean\n    list.stream().parallel().map(m -> list2.stream().parallel()).parallel();\n  }\n\n  public void parallelAndNestedStreams(List<String> list, List<String> list2) {\n    // BUG: Diagnostic contains: Did you mean\n    list.parallelStream()\n        .flatMap(childDir -> list2.stream())\n        .parallel()\n        .filter(m -> (new TestClass(\"test\")).testClass())\n        .map(\n            a -> {\n              if (a == null) {\n                return a;\n              }\n              return null;\n            })\n        .filter(a -> a != null)\n        .flatMap(a -> list2.stream())\n        .parallel();\n  }\n\n  private class TestClass {\n    public TestClass(String con) {}\n\n    private boolean testClass() {\n      return true;\n    }\n  }\n}\\\n\n\npackage com.google.errorprone.bugpatterns.testdata;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Stream;\n\n/**\n * @author @mariasam (Maria Sam) on 7/6/17.\n */\nclass MultipleParallelOrSequentialCallsPositiveCases {\n\n  public void basicCaseParallel(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel();'?\n    list.stream().parallel();\n  }\n\n  public void basicCaseParallelNotFirst(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel().map(m -> m);'?\n    list.stream().parallel().map(m -> m);\n  }\n\n  public void basicCollection(Collection<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel();'?\n    list.stream().parallel();\n  }\n\n  public void parallelStream(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.parallelStream();'?\n    list.parallelStream();\n  }\n\n  public void basicCaseParallelThisInMethodArg(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'this.hello(list.stream().parallel());'?\n    this.hello(list.stream().parallel());\n  }\n\n  public void onlyOneError(List<String> list) {\n    this.hello(\n        // BUG: Diagnostic contains: Multiple calls\n        list.stream().parallel());\n  }\n\n  public void mapMethod(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'hello(list.stream().parallel().map(m ->\n    // this.hello(null)));'?\n    hello(list.stream().parallel().map(m -> this.hello(null)));\n  }\n\n  public void betweenMethods(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel().map(m -> m.toString());'?\n    list.stream().parallel().map(m -> m.toString());\n  }\n\n  public void basicCaseParallelNotLast(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel().map(m ->\n    // m.toString()).findFirst();'?\n    list.stream().parallel().map(m -> m.toString()).findFirst();\n  }\n\n  public void basicCaseSequential(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().sequential().map(m -> m.toString());'?\n    list.stream().sequential().map(m -> m.toString());\n  }\n\n  public void bothSequentialAndParallel(List<String> list) {\n    // this case is unlikely (wrong, even) but just checking that this works\n    // BUG: Diagnostic contains: Did you mean 'list.stream().sequential().parallel();'?\n    list.stream().sequential().parallel();\n  }\n\n  public void bothSequentialAndParallelMultiple(List<String> list) {\n    // this is even more messed up, this test is here to make sure the checker doesn't throw an\n    // exception\n    // BUG: Diagnostic contains: Multiple calls\n    list.stream().sequential().parallel().parallel();\n  }\n\n  public void parallelMultipleLines(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.stream().parallel()\n    list.stream().parallel().map(m -> m.toString());\n  }\n\n  public void multipleParallelCalls(List<String> list) {\n    // BUG: Diagnostic contains: Did you mean 'list.parallelStream();'?\n    list.parallelStream();\n  }\n\n  public String hello(Stream st) {\n    return \"\";\n  }\n\n  public void streamWithinAStream(List<String> list, List<String> list2) {\n    // BUG: Diagnostic contains: Did you mean\n    list.stream().parallel().flatMap(childDir -> list2.stream()).flatMap(a -> list2.stream());\n  }\n\n  public void streamWithinAStreamImmediatelyAfterOtherParallel(\n      List<String> list, List<String> list2) {\n    // BUG: Diagnostic contains: Did you mean\n    list.stream().parallel().map(m -> list2.stream().parallel());\n  }\n\n  public void parallelAndNestedStreams(List<String> list, List<String> list2) {\n    // BUG: Diagnostic contains: Did you mean\n    list.parallelStream()\n        .flatMap(childDir -> list2.stream())\n        .filter(m -> (new TestClass(\"test\")).testClass())\n        .map(\n            a -> {\n              if (a == null) {\n                return a;\n              }\n              return null;\n            })\n        .filter(a -> a != null)\n        .flatMap(a -> list2.stream());\n  }\n\n  private class TestClass {\n    public TestClass(String con) {}\n\n    private boolean testClass() {\n      return true;\n    }\n  }\n}\\"
    }
  ]
}