{
  "name": "UndefinedEquals",
  "language": "java",
  "description": "This type is not guaranteed to implement a useful equals() method.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 150,
  "branches": 13,
  "apis": 1,
  "test": [
    {
      "description": "positiveInstanceEquals",
      "expected-problems": null,
      "expected-linenumbers": [
        37
      ],
      "code": "import java.util.Queue;\n\n            class Test {\n              void f(Queue a, Queue b) {\n                // BUG: Diagnostic contains: Queue does not have well-defined equality semantics\n                a.equals(b);\n              }\n            }"
    },
    {
      "description": "positiveStaticEquals",
      "expected-problems": null,
      "expected-linenumbers": [
        55
      ],
      "code": "import java.util.Collection;\n            import java.util.Objects;\n\n            class Test {\n              void f(Collection a, Collection b) {\n                // BUG: Diagnostic contains: Collection\n                Objects.equals(a, b);\n              }\n            }"
    },
    {
      "description": "immutableCollection",
      "expected-problems": null,
      "expected-linenumbers": [
        74
      ],
      "code": "import com.google.common.collect.ImmutableCollection;\n            import java.util.Objects;\n\n            class Test {\n              void f(ImmutableCollection a, ImmutableCollection b) {\n                // BUG: Diagnostic contains: ImmutableCollection\n                Objects.equals(a, b);\n              }\n            }"
    },
    {
      "description": "positiveAssertEquals",
      "expected-problems": null,
      "expected-linenumbers": [
        93
      ],
      "code": "import java.util.List;\n            import com.google.common.collect.FluentIterable;\n            import com.google.common.collect.Iterables;\n            import static org.junit.Assert.assertEquals;\n            import static org.junit.Assert.assertNotEquals;\n\n            class Test {\n              void test(List myList, List otherList) {\n                // BUG: Diagnostic contains: Iterable\n                assertEquals(FluentIterable.of(1), FluentIterable.of(1));\n                // BUG: Diagnostic contains: Iterable\n                assertEquals(Iterables.skip(myList, 1), Iterables.skip(myList, 2));\n                // BUG: Diagnostic contains: Iterable\n                assertNotEquals(Iterables.skip(myList, 1), Iterables.skip(myList, 2));\n                // BUG: Diagnostic contains: Iterable\n                assertEquals(\"foo\", Iterables.skip(myList, 1), Iterables.skip(myList, 2));\n              }\n            }"
    },
    {
      "description": "positiveWithGenerics",
      "expected-problems": null,
      "expected-linenumbers": [
        121
      ],
      "code": "import java.util.Queue;\n\n            class Test {\n              <T> void f(Queue<String> a, Queue<T> b) {\n                // BUG: Diagnostic contains: Queue\n                a.equals(b);\n              }\n            }"
    },
    {
      "description": "positiveTruth",
      "expected-problems": null,
      "expected-linenumbers": [
        139
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.util.Queue;\n\n            class Test {\n              <T> void f(Queue<String> a, Queue<T> b) {\n                // BUG: Diagnostic contains: Queue\n                assertThat(a).isEqualTo(b);\n                // BUG: Diagnostic contains: Queue\n                assertThat(a).isNotEqualTo(b);\n              }\n            }"
    },
    {
      "description": "truthFixAssertWithMessage",
      "expected-problems": null,
      "expected-linenumbers": [
        358
      ],
      "code": "import static com.google.common.truth.Truth.assertWithMessage;\n            import java.lang.Iterable;\n\n            class Test {\n              void f(Iterable a, Iterable b) {\n                assertWithMessage(\"message\").that(a).isEqualTo(b);\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertWithMessage;\n            import java.lang.Iterable;\n\n            class Test {\n              void f(Iterable a, Iterable b) {\n                assertWithMessage(\"message\").that(a).containsExactlyElementsIn(b);\n              }\n            }"
    },
    {
      "description": "truthFixAssertWithMessage",
      "expected-problems": null,
      "expected-linenumbers": [
        358
      ],
      "code": "import static com.google.common.truth.Truth.assertWithMessage;\n            import java.lang.Iterable;\n\n            class Test {\n              void f(Iterable a, Iterable b) {\n                assertWithMessage(\"message\").that(a).isEqualTo(b);\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertWithMessage;\n            import java.lang.Iterable;\n\n            class Test {\n              void f(Iterable a, Iterable b) {\n                assertWithMessage(\"message\").that(a).containsExactlyElementsIn(b);\n              }\n            }"
    },
    {
      "description": "truthFixDontRewriteIsNotEqualTo",
      "expected-problems": null,
      "expected-linenumbers": [
        388
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.lang.Iterable;\n\n            class Test {\n              void f(Iterable a, Iterable b) {\n                assertThat(a).isNotEqualTo(b);\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n            import java.lang.Iterable;\n\n            class Test {\n              void f(Iterable a, Iterable b) {\n                assertThat(a).isNotEqualTo(b);\n              }\n            }"
    },
    {
      "description": "truthFixAcrossMultipleLinesAndPoorlyFormatted",
      "expected-problems": null,
      "expected-linenumbers": [
        418
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n            import java.lang.Iterable;\n\n            class Test {\n              void f(Iterable a, Iterable b) {\n                assertThat(a).containsExactlyElementsIn(b);\n              }\n            }"
    },
    {
      "description": "positiveSparseArray",
      "expected-problems": null,
      "expected-linenumbers": [
        446
      ],
      "code": "package android.util;\n\n            public class SparseArray<T> {}\n            \n\n            import android.util.SparseArray;\n\n            class Test {\n              <T> boolean f(SparseArray<T> a, SparseArray<T> b) {\n                // BUG: Diagnostic contains: SparseArray\n                return a.equals(b);\n              }\n            }"
    },
    {
      "description": "negative",
      "expected-problems": null,
      "expected-linenumbers": [
        471
      ],
      "code": "import java.util.PriorityQueue;\n\n            class Test {\n              void f(PriorityQueue a, PriorityQueue b) {\n                a.equals(b);\n              }\n            }"
    },
    {
      "description": "charSequenceFix",
      "expected-problems": null,
      "expected-linenumbers": [
        488
      ],
      "code": "import static com.google.common.truth.Truth.assertThat;\n\n            class Test {\n              void f(CharSequence a, String b) {\n                assertThat(a).isEqualTo(b);\n                assertThat(b).isEqualTo(a);\n              }\n            }\n            \n\n            import static com.google.common.truth.Truth.assertThat;\n\n            class Test {\n              void f(CharSequence a, String b) {\n                assertThat(a.toString()).isEqualTo(b);\n                assertThat(b).isEqualTo(a.toString());\n              }\n            }"
    },
    {
      "description": "futures",
      "expected-problems": null,
      "expected-linenumbers": [
        518
      ],
      "code": "import com.google.common.util.concurrent.ListenableFuture;\n            import com.google.common.util.concurrent.SettableFuture;\n            import java.util.concurrent.CompletableFuture;\n            import java.util.concurrent.Future;\n\n            class Test {\n              void listenableFuture(ListenableFuture a, ListenableFuture b) {\n                // BUG: Diagnostic contains: Future does not have well-defined equality semantics\n                a.equals(b);\n              }\n\n              void settableFuture(SettableFuture a, SettableFuture b) {\n                // BUG: Diagnostic contains: Future does not have well-defined equality semantics\n                a.equals(b);\n              }\n\n              void completableFuture(CompletableFuture a, CompletableFuture b) {\n                // BUG: Diagnostic contains: Future does not have well-defined equality semantics\n                a.equals(b);\n              }\n\n              void future(Future a, Future b) {\n                // BUG: Diagnostic contains: Future does not have well-defined equality semantics\n                a.equals(b);\n              }\n            }"
    }
  ]
}