{
  "name": "DoNotMockChecker",
  "language": "java",
  "description": "Identifies undesirable mocks.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 39,
  "branches": 2,
  "apis": 2,
  "test": [
    {
      "description": "matchesMockitoDotMock_doNotMock",
      "expected-problems": null,
      "expected-linenumbers": [
        81
      ],
      "code": ""
    },
    {
      "description": "matchesMockitoMockAnnotation_doNotMock",
      "expected-problems": null,
      "expected-linenumbers": [
        112
      ],
      "code": ""
    },
    {
      "description": "matchesMockAnnotation_doNotMock_extends",
      "expected-problems": null,
      "expected-linenumbers": [
        145
      ],
      "code": ""
    },
    {
      "description": "matchesMockAnnotation_doNotMock_implements",
      "expected-problems": null,
      "expected-linenumbers": [
        180
      ],
      "code": ""
    },
    {
      "description": "matchesMockAnnotation_metaDoNotMock",
      "expected-problems": null,
      "expected-linenumbers": [
        216
      ],
      "code": "package lib;\n\n            import org.mockito.Mock;\n            import lib.DoNotMockObjects.*;\n\n            class Lib {\n\n              // BUG: Diagnostic contains:\n              @Mock MetaDoNotMockObject metaAnnotatedDoNotMockObject;\n              // BUG: Diagnostic contains:\n              @Mock MetaDoNotMockInterface metaDoNotMockInterface;\n              @Mock MockableObject mockableObject;\n              @Mock DoubleMetaAnnotatedDoNotMock doubleMetaAnnotatedDoNotMock; // mockable\n            }"
    },
    {
      "description": "matchesMockitoDotMock_autoValue",
      "expected-problems": null,
      "expected-linenumbers": [
        240
      ],
      "code": "package lib;\n\n            import org.mockito.Mockito;\n            import lib.AutoValueObjects.*;\n\n            public class Lib {\n\n              class MockableObject {}\n\n              public static void f() {\n                Mockito.mock(MockableObject.class);\n                // BUG: Diagnostic contains:\n                Mockito.mock(DoNotMockMyAutoValue.class);\n                Mockito.mock(MyAutoValue.class);\n                MyAutoValue myAutoValue = MyAutoValue.create(1);\n                DoNotMockMyAutoValue doNotMockMyAutoValue = DoNotMockMyAutoValue.create(1);\n              }\n            }"
    },
    {
      "description": "typaram",
      "expected-problems": null,
      "expected-linenumbers": [
        289
      ],
      "code": "import org.mockito.Mockito;\n            import org.mockito.Mock;\n\n            class Test<E> {\n              @Mock E e;\n\n              <T> T f(T x) {\n                T m = Mockito.spy(x);\n                return m;\n              }\n            }"
    },
    {
      "description": "rawClass",
      "expected-problems": null,
      "expected-linenumbers": [
        310
      ],
      "code": "import org.mockito.Mockito;\n\n            class Test {\n              <T> T evil(Class<T> clazz) {\n                return (T) Mockito.mock((Class) clazz);\n              }\n            }"
    },
    {
      "description": "mockArray",
      "expected-problems": null,
      "expected-linenumbers": [
        327
      ],
      "code": "import java.lang.annotation.Annotation;\n            import org.mockito.Mock;\n\n            class Test {\n              @Mock Annotation[] annotations;\n            }"
    },
    {
      "description": "noMetaAnnotationIncompleteClasspath",
      "expected-problems": null,
      "expected-linenumbers": [
        354
      ],
      "code": ""
    }
  ]
}