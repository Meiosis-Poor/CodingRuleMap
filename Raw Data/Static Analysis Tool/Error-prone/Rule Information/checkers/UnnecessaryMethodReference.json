{
  "name": "UnnecessaryMethodReference",
  "language": "java",
  "description": "This method reference is unnecessary, and can be replaced with the variable itself.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 115,
  "branches": 7,
  "apis": 3,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        31
      ],
      "code": "import java.util.function.Function;\n            import java.util.stream.Stream;\n\n            class Test {\n              Stream<String> map(Stream<Integer> xs, Function<Integer, String> fn) {\n                // BUG: Diagnostic contains: (fn)\n                return xs.map(fn::apply);\n              }\n            }"
    },
    {
      "description": "positiveCase_refactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        50
      ],
      "code": "import java.util.function.Function;\n            import java.util.stream.Stream;\n\n            class Test {\n              Stream<String> map(Stream<Integer> xs, Function<Integer, String> fn) {\n                return xs.map(fn::apply);\n              }\n            }\n            \n\n            import java.util.function.Function;\n            import java.util.stream.Stream;\n\n            class Test {\n              Stream<String> map(Stream<Integer> xs, Function<Integer, String> fn) {\n                return xs.map(fn);\n              }\n            }"
    },
    {
      "description": "positiveWithExtraInheritance",
      "expected-problems": null,
      "expected-linenumbers": [
        80
      ],
      "code": "import java.util.function.Function;\n            import java.util.stream.Stream;\n\n            class Test {\n              Stream<String> map(Stream<Integer> xs, A fn) {\n                // BUG: Diagnostic contains: (fn)\n                return xs.map(fn::apply);\n              }\n\n              abstract static class A implements Function<Integer, String> {\n                @Override\n                public String apply(Integer i) {\n                  return i.toString();\n                }\n              }\n            }"
    },
    {
      "description": "negativeWithExtraInheritance",
      "expected-problems": null,
      "expected-linenumbers": [
        106
      ],
      "code": "import java.util.function.Function;\n            import java.util.stream.Stream;\n\n            class Test {\n              Stream<String> map(Stream<Integer> xs, A fn) {\n                return xs.map(fn::frobnicate);\n              }\n\n              abstract static class A implements Function<Integer, String> {\n                abstract String frobnicate(Integer i);\n              }\n            }"
    },
    {
      "description": "withNonAbstractMethodOnInterface",
      "expected-problems": null,
      "expected-linenumbers": [
        128
      ],
      "code": "import java.util.function.Function;\n            import java.util.stream.Stream;\n\n            abstract class Test {\n              void test(A a) {\n                // BUG: Diagnostic contains:\n                foo(a::foo);\n                foo(a::bar);\n              }\n\n              abstract void foo(A a);\n\n              interface A {\n                String foo(Integer i);\n\n                default String bar(Integer i) {\n                  return null;\n                }\n              }\n            }"
    },
    {
      "description": "positiveCaseViaKnownDelegate",
      "expected-problems": null,
      "expected-linenumbers": [
        158
      ],
      "code": "import com.google.common.base.Predicate;\n            import java.util.function.Function;\n            import java.util.stream.Stream;\n\n            class Test {\n              Stream<Integer> map(Stream<Integer> xs, Predicate<Integer> p) {\n                // BUG: Diagnostic contains: (p)\n                return xs.filter(p::apply);\n              }\n            }"
    },
    {
      "description": "positiveCaseViaConvert",
      "expected-problems": null,
      "expected-linenumbers": [
        178
      ],
      "code": "import com.google.common.base.Converter;\n            import java.util.stream.Stream;\n\n            class Test {\n              Stream<String> map(Stream<Integer> xs, Converter<Integer, String> fn) {\n                // BUG: Diagnostic contains: (fn)\n                return xs.map(fn::convert);\n              }\n            }"
    },
    {
      "description": "positiveCaseViaConvert_viaIntermediateType",
      "expected-problems": null,
      "expected-linenumbers": [
        197
      ],
      "code": "import com.google.common.base.Converter;\n            import com.google.common.base.Function;\n\n            class Test {\n              void a(Converter<Integer, String> fn) {\n                // BUG: Diagnostic contains: b(fn)\n                b(fn::convert);\n              }\n\n              void b(Function<Integer, String> fn) {}\n            }"
    },
    {
      "description": "ignoreSuper",
      "expected-problems": null,
      "expected-linenumbers": [
        218
      ],
      "code": "class S implements Runnable {\n              public void run() {}\n            }\n            \n\n            abstract class Test extends S {\n              abstract void r(Runnable r);\n\n              public void run() {\n                r(super::run);\n              }\n            }"
    },
    {
      "description": "subType",
      "expected-problems": null,
      "expected-linenumbers": [
        242
      ],
      "code": "import java.util.function.Consumer;\n\n            abstract class T {\n              void f(Consumer<String> c) {}\n\n              void g(Consumer<Object> c) {\n                f(c::accept);\n              }\n            }"
    },
    {
      "description": "range_isJavaPredicate",
      "expected-problems": null,
      "expected-linenumbers": [
        261
      ],
      "code": "import com.google.common.collect.Range;\n            import java.util.stream.Stream;\n\n            abstract class T {\n              Stream<Long> g(Stream<Long> x, Range<Long> range) {\n                // BUG: Diagnostic contains: filter(range)\n                return x.filter(range::contains);\n              }\n            }"
    },
    {
      "description": "range_isGuavaPredicate",
      "expected-problems": null,
      "expected-linenumbers": [
        280
      ],
      "code": "import com.google.common.base.Predicate;\n            import com.google.common.collect.Range;\n            import java.util.stream.Stream;\n\n            abstract class T {\n              void g(Range<Long> range) {\n                // BUG: Diagnostic contains: b(range)\n                b(range::contains);\n              }\n\n              abstract void b(Predicate<Long> p);\n            }"
    },
    {
      "description": "listToIterator",
      "expected-problems": null,
      "expected-linenumbers": [
        302
      ],
      "code": "import com.google.common.collect.ImmutableList;\n            import java.util.List;\n\n            abstract class T {\n              void test() {\n                List<Integer> x = ImmutableList.of(1, 2);\n                // BUG: Diagnostic contains:\n                Iterable<Integer> xi = x::iterator;\n              }\n            }"
    }
  ]
}