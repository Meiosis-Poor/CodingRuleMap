{
  "name": "AutoFactoryAtInject",
  "language": "java",
  "description": "@AutoFactory and @Inject should not be used in the same type.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 70,
  "branches": 5,
  "apis": 2,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.google.errorprone.bugpatterns.inject.testdata;\n\n            import com.google.auto.factory.AutoFactory;\n            import javax.inject.Inject;\n\n            class AssistedInjectAndInjectOnSameConstructorPositiveCases {\n\n              @AutoFactory\n              static class HasAutoFactoryOnClass {\n                // BUG: Diagnostic contains: remove\n                @Inject\n                HasAutoFactoryOnClass() {}\n              }\n\n              @AutoFactory\n              static class UsesGuiceInject {\n                // BUG: Diagnostic contains: remove\n                @com.google.inject.Inject\n                UsesGuiceInject() {}\n              }\n\n              static class HasAutoFactoryOnConstructor {\n                // BUG: Diagnostic contains: remove\n                @Inject\n                @AutoFactory\n                HasAutoFactoryOnConstructor() {}\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        71
      ],
      "code": "package com.google.errorprone.bugpatterns.inject.testdata;\n\n            import com.google.auto.factory.AutoFactory;\n            import javax.inject.Inject;\n\n            class AutoFactoryAtInjectNegativeCases {\n\n              @AutoFactory\n              static class AtInjectOnInnerType {\n                static class InnerType {\n                  @Inject\n                  InnerType() {}\n                }\n              }\n\n              static class AutoFactoryOnInnerType {\n                @Inject\n                AutoFactoryOnInnerType() {}\n\n                @AutoFactory\n                static class InnerType {}\n              }\n\n              static class OnDifferentConstructors {\n                @Inject\n                OnDifferentConstructors(String string) {}\n\n                @AutoFactory\n                OnDifferentConstructors(Object object) {}\n              }\n            }\\"
    }
  ]
}