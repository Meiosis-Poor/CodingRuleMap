{
  "name": "InjectOnMemberAndConstructor",
  "language": "java",
  "description": "Members shouldn't be annotated with @Inject if constructor is already annotated @Inject",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 119,
  "branches": 16,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        36
      ],
      "code": "import javax.inject.Inject;\n\npublic class InjectOnMemberAndConstructorPositiveCases {\n  @Inject private final String stringFieldWithInject;\n  @Inject private final Long longFieldWithInject;\n  private final String stringFieldWithoutInject;\n\n  @Inject\n  public InjectOnMemberAndConstructorPositiveCases(\n      String stringFieldWithInject, String stringFieldWithoutInject, Long longFieldWithInject) {\n    this.stringFieldWithInject = stringFieldWithInject;\n    this.stringFieldWithoutInject = stringFieldWithoutInject;\n    this.longFieldWithInject = longFieldWithInject;\n  }\n}\n\n\nimport javax.inject.Inject;\n\npublic class InjectOnMemberAndConstructorPositiveCases {\n  private final String stringFieldWithInject;\n  private final Long longFieldWithInject;\n  private final String stringFieldWithoutInject;\n\n  @Inject\n  public InjectOnMemberAndConstructorPositiveCases(\n      String stringFieldWithInject, String stringFieldWithoutInject, Long longFieldWithInject) {\n    this.stringFieldWithInject = stringFieldWithInject;\n    this.stringFieldWithoutInject = stringFieldWithoutInject;\n    this.longFieldWithInject = longFieldWithInject;\n  }\n}"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        80
      ],
      "code": "package com.google.errorprone.bugpatterns.inject.testdata;\n\n            import javax.inject.Inject;\n\n            /**\n             * Negative test cases for {@link InjectOnMemberAndConstructor} check.\n             *\n             * @author bhagwani@google.com (Sumit Bhagwani)\n             */\n            public class InjectOnMemberAndConstructorNegativeCases {\n\n              public class InjectOnConstructorOnly {\n                private final String stringFieldWithoutInject;\n\n                @Inject\n                public InjectOnConstructorOnly(String stringFieldWithoutInject) {\n                  this.stringFieldWithoutInject = stringFieldWithoutInject;\n                }\n              }\n\n              public class InjectOnFieldOnly {\n                @Inject private String stringFieldWithInject;\n              }\n\n              public class MixedInject {\n                @Inject private String stringFieldWithInject;\n\n                @Inject\n                public MixedInject() {}\n              }\n            }\\"
    }
  ]
}