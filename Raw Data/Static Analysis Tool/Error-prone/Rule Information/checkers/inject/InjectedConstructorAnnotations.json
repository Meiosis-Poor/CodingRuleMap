{
  "name": "InjectedConstructorAnnotations",
  "language": "java",
  "description": "Injected constructors cannot be optional nor have binding annotations",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 84,
  "branches": 11,
  "apis": 3,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        31
      ],
      "code": "package com.google.errorprone.bugpatterns.inject.testdata;\n\n            import com.google.inject.BindingAnnotation;\n            import com.google.inject.Inject;\n\n            /** A positive test case for InjectedConstructorAnnotation. */\n            public class InjectedConstructorAnnotationsPositiveCases {\n\n              /** A binding annotation. */\n              @BindingAnnotation\n              public @interface TestBindingAnnotation {}\n\n              /** A class with an optionally injected constructor. */\n              public class TestClass1 {\n                @Inject(optional = true)\n                // BUG: Diagnostic contains:\n                public TestClass1() {}\n              }\n\n              /** A class with an injected constructor that has a binding annotation. */\n              public class TestClass2 {\n                @TestBindingAnnotation\n                @Inject\n                // BUG: Diagnostic contains:\n                public TestClass2() {}\n              }\n\n              /** A class whose constructor is optionally injected and has a binding annotation. */\n              public class TestClass3 {\n                @TestBindingAnnotation\n                @Inject(optional = true)\n                // BUG: Diagnostic contains:\n                public TestClass3() {}\n              }\n            }"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        76
      ],
      "code": "package com.google.errorprone.bugpatterns.inject.testdata;\n\n            import com.google.inject.BindingAnnotation;\n            import com.google.inject.Inject;\n\n            /** A negative test case for InjectedConstructorAnnotation. */\n            public class InjectedConstructorAnnotationsNegativeCases {\n\n              private @interface TestAnnotation {}\n\n              @BindingAnnotation\n              private @interface TestBindingAnnotation {}\n\n              /** A class with a constructor that has no annotations. */\n              public class TestClass1 {\n                public TestClass1() {}\n              }\n\n              /** A class with a constructor that has a binding Annotation. */\n              public class TestClass2 {\n                @TestBindingAnnotation\n                public TestClass2() {}\n              }\n\n              /** A class with an injected constructor. */\n              public class TestClass3 {\n                @Inject\n                public TestClass3() {}\n              }\n\n              /** A class with an injected constructor that has a non-binding annotation. */\n              public class TestClass4 {\n                @Inject\n                @TestAnnotation\n                public TestClass4() {}\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        76
      ],
      "code": "package com.google.errorprone.bugpatterns.inject.testdata;\n\n            import com.google.inject.BindingAnnotation;\n            import com.google.inject.Inject;\n\n            /** A negative test case for InjectedConstructorAnnotation. */\n            public class InjectedConstructorAnnotationsNegativeCases {\n\n              private @interface TestAnnotation {}\n\n              @BindingAnnotation\n              private @interface TestBindingAnnotation {}\n\n              /** A class with a constructor that has no annotations. */\n              public class TestClass1 {\n                public TestClass1() {}\n              }\n\n              /** A class with a constructor that has a binding Annotation. */\n              public class TestClass2 {\n                @TestBindingAnnotation\n                public TestClass2() {}\n              }\n\n              /** A class with an injected constructor. */\n              public class TestClass3 {\n                @Inject\n                public TestClass3() {}\n              }\n\n              /** A class with an injected constructor that has a non-binding annotation. */\n              public class TestClass4 {\n                @Inject\n                @TestAnnotation\n                public TestClass4() {}\n              }\n            }\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        76
      ],
      "code": "package com.google.errorprone.bugpatterns.inject.testdata;\n\n            import com.google.inject.BindingAnnotation;\n            import com.google.inject.Inject;\n\n            /** A negative test case for InjectedConstructorAnnotation. */\n            public class InjectedConstructorAnnotationsNegativeCases {\n\n              private @interface TestAnnotation {}\n\n              @BindingAnnotation\n              private @interface TestBindingAnnotation {}\n\n              /** A class with a constructor that has no annotations. */\n              public class TestClass1 {\n                public TestClass1() {}\n              }\n\n              /** A class with a constructor that has a binding Annotation. */\n              public class TestClass2 {\n                @TestBindingAnnotation\n                public TestClass2() {}\n              }\n\n              /** A class with an injected constructor. */\n              public class TestClass3 {\n                @Inject\n                public TestClass3() {}\n              }\n\n              /** A class with an injected constructor that has a non-binding annotation. */\n              public class TestClass4 {\n                @Inject\n                @TestAnnotation\n                public TestClass4() {}\n              }\n            }\\"
    }
  ]
}