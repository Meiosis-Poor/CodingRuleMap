{
  "name": "MoreThanOneQualifier",
  "language": "java",
  "description": "Using more than one qualifier annotation on the same element is not allowed.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 62,
  "branches": 5,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "package com.google.errorprone.bugpatterns.inject.testdata;\n\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport com.google.inject.BindingAnnotation;\nimport java.lang.annotation.Retention;\nimport javax.inject.Qualifier;\n\n/**\n * @author sgoldfeder@google.com (Steven Goldfeder)\n */\npublic class MoreThanOneQualifierPositiveCases {\n\n  /**\n   * A class in which the class, a constructor, a field, a method, and a method parameter each have\n   * two com.google.inject.BindingAnnotation annotations.\n   */\n  // BUG: Diagnostic contains: remove\n  @Foo1\n  // BUG: Diagnostic contains: remove\n  @Foo2\n  public class TestClass1 {\n    // BUG: Diagnostic contains: remove\n    @Foo1\n    // BUG: Diagnostic contains: remove\n    @Foo2\n    private int n;\n\n    // BUG: Diagnostic contains: remove\n    @Foo1\n    // BUG: Diagnostic contains: remove\n    @Foo2\n    public TestClass1() {}\n\n    // BUG: Diagnostic contains: remove\n    @Foo1\n    // BUG: Diagnostic contains: remove\n    @Foo2\n    public void setN(\n        // BUG: Diagnostic contains: remove\n        @Foo1\n            // BUG: Diagnostic contains: remove\n            @Foo2\n            int n) {}\n  }\n\n  /**\n   * A class in which the class, a constructor, a field, a method, and a method parameter each have\n   * two javax.inject.Qualifier annotations.\n   */\n\n  // BUG: Diagnostic contains: remove\n  @Bar1\n  // BUG: Diagnostic contains: remove\n  @Bar2\n  public class TestClass2 {\n    // BUG: Diagnostic contains: remove\n    @Bar1\n    // BUG: Diagnostic contains: remove\n    @Bar2\n    private int n;\n\n    // BUG: Diagnostic contains: remove\n    @Bar1\n    // BUG: Diagnostic contains: remove\n    @Bar2\n    public TestClass2() {}\n\n    // BUG: Diagnostic contains: remove\n    @Bar1\n    // BUG: Diagnostic contains: remove\n    @Bar2\n    public void setN(\n        // BUG: Diagnostic contains: remove\n        @Bar1\n            // BUG: Diagnostic contains: remove\n            @Bar2\n            int n) {}\n  }\n\n  /**\n   * A class in which the class, a constructor, a field, a method, and a method parameter each have\n   * one javax.inject.Qualifier annotation and one com.google.inject.BindingAnnotation annotation.\n   */\n\n  // BUG: Diagnostic contains: remove\n  @Foo1\n  // BUG: Diagnostic contains: remove\n  @Bar1\n  public class TestClass3 {\n    // BUG: Diagnostic contains: remove\n    @Foo1\n    // BUG: Diagnostic contains: remove\n    @Bar1\n    private int n;\n\n    // BUG: Diagnostic contains: remove\n    @Foo1\n    // BUG: Diagnostic contains: remove\n    @Bar1\n    public TestClass3() {}\n\n    // BUG: Diagnostic contains: remove\n    @Foo1\n    // BUG: Diagnostic contains: remove\n    @Bar1\n    public void setN(\n        // BUG: Diagnostic contains: remove\n        @Foo1\n            // BUG: Diagnostic contains: remove\n            @Bar1\n            int n) {}\n  }\n\n  @Qualifier\n  @Retention(RUNTIME)\n  public @interface Foo1 {}\n\n  @Qualifier\n  @Retention(RUNTIME)\n  public @interface Foo2 {}\n\n  @BindingAnnotation\n  @Retention(RUNTIME)\n  public @interface Bar1 {}\n\n  @BindingAnnotation\n  @Retention(RUNTIME)\n  public @interface Bar2 {}\n}\\"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        173
      ],
      "code": "package com.google.errorprone.bugpatterns.inject.testdata;\n\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport com.google.inject.BindingAnnotation;\nimport java.lang.annotation.Retention;\nimport javax.inject.Qualifier;\n\n/**\n * @author sgoldfeder@google.com (Steven Goldfeder)\n */\npublic class MoreThanOneQualifierNegativeCases {\n  /** A class in with no annotations on any of its members. */\n  public class TestClass1 {\n    private int n;\n\n    public TestClass1() {}\n\n    public void setN(int n) {}\n  }\n\n  /**\n   * A class in which a single javax.inject.Qualifier annotation is on the class, on a constructor,\n   * on a field, on a method, and on a method parameter.\n   */\n  @Foo\n  public class TestClass2 {\n    @Foo private int n;\n\n    @Foo\n    public TestClass2() {}\n\n    @Foo\n    public void setN(@Foo int n) {}\n  }\n\n  /**\n   * A class in which a single com.google.inject.BindingAnnotation annotation is on the class, on a\n   * constructor, on a field, on a method, and on a method parameter.\n   */\n  @Bar\n  public class TestClass3 {\n    @Bar private int n;\n\n    @Bar\n    public TestClass3() {}\n\n    @Bar\n    public void setN(@Bar int n) {}\n  }\n\n  @Qualifier\n  @Retention(RUNTIME)\n  public @interface Foo {}\n\n  @BindingAnnotation\n  @Retention(RUNTIME)\n  public @interface Bar {}\n}\\"
    }
  ]
}