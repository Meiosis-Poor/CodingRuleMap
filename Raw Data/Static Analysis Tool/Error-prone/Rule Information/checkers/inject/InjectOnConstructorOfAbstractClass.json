{
  "name": "InjectOnConstructorOfAbstractClass",
  "language": "java",
  "description": "Constructors on abstract classes are never directly @Inject'ed, only the constructors of their subclasses can be @Inject'ed.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 67,
  "branches": 3,
  "apis": 1,
  "test": [
    {
      "description": "positiveCase",
      "expected-problems": null,
      "expected-linenumbers": [
        33
      ],
      "code": "import javax.inject.Inject;\n\n            abstract class Foo {\n              // BUG: Diagnostic contains:\n              @Inject\n              Foo() {}\n            }"
    },
    {
      "description": "guiceConstructor",
      "expected-problems": null,
      "expected-linenumbers": [
        50
      ],
      "code": "import com.google.inject.Inject;\n\n            abstract class Foo {\n              // BUG: Diagnostic contains:\n              @Inject\n              Foo() {}\n            }"
    },
    {
      "description": "abstractClassInConcreteClass",
      "expected-problems": null,
      "expected-linenumbers": [
        67
      ],
      "code": "import javax.inject.Inject;\n\n            class Bar {\n              abstract static class Foo {\n                // BUG: Diagnostic contains:\n                @Inject\n                Foo() {}\n              }\n            }"
    },
    {
      "description": "negativeCase",
      "expected-problems": null,
      "expected-linenumbers": [
        86
      ],
      "code": "import javax.inject.Inject;\n\n            class Foo {\n              @Inject\n              Foo() {}\n            }"
    },
    {
      "description": "concreteClassInAbstractClass",
      "expected-problems": null,
      "expected-linenumbers": [
        102
      ],
      "code": "import javax.inject.Inject;\n\n            abstract class Bar {\n              static class Foo {\n                @Inject\n                Foo() {}\n              }\n            }"
    }
  ]
}