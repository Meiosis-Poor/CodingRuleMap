{
  "name": "UnnecessaryBoxedVariable",
  "language": "java",
  "description": "It is unnecessary for this variable to be boxed. Use the primitive instead.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 399,
  "branches": 59,
  "apis": 3,
  "test": [
    {
      "description": "cases",
      "expected-problems": null,
      "expected-linenumbers": [
        37
      ],
      "code": "package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.base.Preconditions.checkNotNull;\n\n            import java.util.List;\n            import java.util.stream.Stream;\n            import org.jspecify.annotations.Nullable;\n\n            /**\n             * @author awturner@google.com (Andy Turner)\n             */\n            class UnnecessaryBoxedVariableCases {\n              void positive_local() {\n                Integer i = 0;\n              }\n\n              int positive_local_return() {\n                Integer i = 0;\n                return i;\n              }\n\n              Integer positive_local_addition() {\n                Integer i = 0;\n                return i + 1;\n              }\n\n              void positive_local_compoundAddition(Integer addend) {\n                Integer i = 0;\n                i += addend;\n\n                int j = 0;\n                j += i;\n              }\n\n              void positive_methodInvocation() {\n                Integer i = 0;\n                methodPrimitiveArg(i);\n              }\n\n              void negative_methodInvocation() {\n                Integer i = 0;\n                methodBoxedArg(i);\n              }\n\n              void positive_assignedValueOf() {\n                Integer i = Integer.valueOf(0);\n              }\n\n              int positive_assignedValueOf_return() {\n                Integer i = Integer.valueOf(0);\n                return i;\n              }\n\n              int positive_noInitializer() {\n                Integer i;\n                i = 0;\n                return i;\n              }\n\n              void negative_enhancedForLoopOverCollection(List<Integer> list) {\n                for (Integer i : list) {}\n              }\n\n              void negative_enhancedForLoopOverWrappedArray(Integer[] array) {\n                for (Integer i : array) {}\n              }\n\n              void positive_enhancedForLoopOverPrimitiveArray(int[] array) {\n                for (Integer i : array) {}\n              }\n\n              final void negative_invokeMethod(Integer i) throws InterruptedException {\n                i.wait(0);\n              }\n\n              final Object[] negative_objectArray(Long l) {\n                return new Object[] {\"\", l};\n              }\n\n              void negative_null() {\n                Integer i = null;\n              }\n\n              void negative_null_noInitializer() {\n                Integer i;\n                i = null;\n                i = 0;\n              }\n\n              void negative_null_reassignNull() {\n                Integer i = 0;\n                i = null;\n              }\n\n              void negative_enhancedForLoopOverPrimitiveArray_assignInLoop(int[] array) {\n                for (Integer i : array) {\n                  i = null;\n                }\n              }\n\n              void negative_boxedVoid() {\n                Void v;\n              }\n\n              int negative_assignmentInReturn() {\n                Integer myVariable;\n                return myVariable = methodBoxedArg(42);\n              }\n\n              int positive_assignmentInReturn() {\n                Integer myVariable;\n                return myVariable = Integer.valueOf(42);\n              }\n\n              int positive_assignmentInReturn2() {\n                Integer myVariable;\n                return myVariable = Integer.valueOf(42);\n              }\n\n              int positive_hashCode() {\n                Integer myVariable = 0;\n                return myVariable.hashCode();\n              }\n\n              short positive_castMethod() {\n                Integer myVariable = 0;\n                return myVariable.shortValue();\n              }\n\n              int positive_castMethod_sameType() {\n                Integer myVariable = 0;\n                return myVariable.intValue();\n              }\n\n              void positive_castMethod_statementExpression() {\n                Integer myVariable = 0;\n                myVariable.longValue();\n              }\n\n              void negative_methodReference() {\n                Integer myVariable = 0;\n                Stream<Integer> stream = Stream.of(1).filter(myVariable::equals);\n              }\n\n              static void positive_parameter_staticMethod(Boolean b) {\n                boolean a = b;\n              }\n\n              static void negative_parameter_staticMethod(Boolean b) {\n                System.out.println(\"a \" + b);\n              }\n\n              static boolean positive_parameter_returnType(Boolean b) {\n                return b;\n              }\n\n              void negative_parameter_instanceMethod_nonFinal(Boolean b) {\n                boolean a = b;\n              }\n\n              final void negative_parameter_instanceMethod_final(Boolean b) {\n                boolean a = b;\n              }\n\n              static void negative_parameter_unused(Integer i) {}\n\n              static void positive_removeNullable_parameter(@Nullable Integer i) {\n                int j = i;\n              }\n\n              static void positive_removeNullable_localVariable() {\n                @Nullable Integer i = 0;\n                @org.jspecify.annotations.Nullable Integer j = 0;\n                int k = i + j;\n              }\n\n              static int positive_nullChecked_expression(Integer i) {\n                return checkNotNull(i);\n              }\n\n              static int positive_nullChecked_expression_message(Integer i) {\n                return checkNotNull(i, \"Null: [%s]\", i);\n              }\n\n              static int positive_nullChecked_statement(Integer i) {\n                checkNotNull(i);\n                return i;\n              }\n\n              static int positive_nullChecked_statement_message(Integer i) {\n                checkNotNull(i, \"Null: [%s]\", i);\n                return i;\n              }\n\n              private void methodPrimitiveArg(int i) {}\n\n              private Integer methodBoxedArg(Integer i) {\n                return i;\n              }\n            }\n            \n\n            package com.google.errorprone.bugpatterns.testdata;\n\n            import static com.google.common.base.Preconditions.checkNotNull;\n\n            import java.util.List;\n            import java.util.stream.Stream;\n            import org.jspecify.annotations.Nullable;\n\n            /**\n             * @author awturner@google.com (Andy Turner)\n             */\n            class UnnecessaryBoxedVariableCases {\n              void positive_local() {\n                int i = 0;\n              }\n\n              int positive_local_return() {\n                int i = 0;\n                return i;\n              }\n\n              Integer positive_local_addition() {\n                int i = 0;\n                return i + 1;\n              }\n\n              void positive_local_compoundAddition(Integer addend) {\n                int i = 0;\n                i += addend;\n\n                int j = 0;\n                j += i;\n              }\n\n              void positive_methodInvocation() {\n                int i = 0;\n                methodPrimitiveArg(i);\n              }\n\n              void negative_methodInvocation() {\n                Integer i = 0;\n                methodBoxedArg(i);\n              }\n\n              void positive_assignedValueOf() {\n                int i = Integer.valueOf(0);\n              }\n\n              int positive_assignedValueOf_return() {\n                int i = Integer.valueOf(0);\n                return i;\n              }\n\n              int positive_noInitializer() {\n                int i;\n                i = 0;\n                return i;\n              }\n\n              void negative_enhancedForLoopOverCollection(List<Integer> list) {\n                for (Integer i : list) {}\n              }\n\n              void negative_enhancedForLoopOverWrappedArray(Integer[] array) {\n                for (Integer i : array) {}\n              }\n\n              void positive_enhancedForLoopOverPrimitiveArray(int[] array) {\n                for (int i : array) {}\n              }\n\n              final void negative_invokeMethod(Integer i) throws InterruptedException {\n                i.wait(0);\n              }\n\n              final Object[] negative_objectArray(Long l) {\n                return new Object[] {\"\", l};\n              }\n\n              void negative_null() {\n                Integer i = null;\n              }\n\n              void negative_null_noInitializer() {\n                Integer i;\n                i = null;\n                i = 0;\n              }\n\n              void negative_null_reassignNull() {\n                Integer i = 0;\n                i = null;\n              }\n\n              void negative_enhancedForLoopOverPrimitiveArray_assignInLoop(int[] array) {\n                for (Integer i : array) {\n                  i = null;\n                }\n              }\n\n              void negative_boxedVoid() {\n                Void v;\n              }\n\n              int negative_assignmentInReturn() {\n                Integer myVariable;\n                return myVariable = methodBoxedArg(42);\n              }\n\n              int positive_assignmentInReturn() {\n                int myVariable;\n                return myVariable = Integer.valueOf(42);\n              }\n\n              int positive_assignmentInReturn2() {\n                int myVariable;\n                return myVariable = Integer.valueOf(42);\n              }\n\n              int positive_hashCode() {\n                int myVariable = 0;\n                return Integer.hashCode(myVariable);\n              }\n\n              short positive_castMethod() {\n                int myVariable = 0;\n                return (short) myVariable;\n              }\n\n              int positive_castMethod_sameType() {\n                int myVariable = 0;\n                return myVariable;\n              }\n\n              void positive_castMethod_statementExpression() {\n                int myVariable = 0;\n              }\n\n              void negative_methodReference() {\n                Integer myVariable = 0;\n                Stream<Integer> stream = Stream.of(1).filter(myVariable::equals);\n              }\n\n              static void positive_parameter_staticMethod(boolean b) {\n                boolean a = b;\n              }\n\n              static void negative_parameter_staticMethod(Boolean b) {\n                System.out.println(\"a \" + b);\n              }\n\n              static boolean positive_parameter_returnType(boolean b) {\n                return b;\n              }\n\n              void negative_parameter_instanceMethod_nonFinal(Boolean b) {\n                boolean a = b;\n              }\n\n              final void negative_parameter_instanceMethod_final(boolean b) {\n                boolean a = b;\n              }\n\n              static void negative_parameter_unused(Integer i) {}\n\n              static void positive_removeNullable_parameter(int i) {\n                int j = i;\n              }\n\n              static void positive_removeNullable_localVariable() {\n                int i = 0;\n                int j = 0;\n                int k = i + j;\n              }\n\n              static int positive_nullChecked_expression(int i) {\n                return i;\n              }\n\n              static int positive_nullChecked_expression_message(int i) {\n                return i;\n              }\n\n              static int positive_nullChecked_statement(int i) {\n                return i;\n              }\n\n              static int positive_nullChecked_statement_message(int i) {\n                return i;\n              }\n\n              private void methodPrimitiveArg(int i) {}\n\n              private Integer methodBoxedArg(Integer i) {\n                return i;\n              }\n            }"
    },
    {
      "description": "suppression",
      "expected-problems": null,
      "expected-linenumbers": [
        448
      ],
      "code": "class Test {\n              @SuppressWarnings(\"UnnecessaryBoxedVariable\")\n              private int a(Integer o) {\n                return o;\n              }\n            }"
    },
    {
      "description": "lambdas",
      "expected-problems": null,
      "expected-linenumbers": [
        465
      ],
      "code": "class Test {\n              interface Boxed<O> {\n                void a(O b);\n              }\n\n              void boxed(Boxed<?> b) {}\n\n              private void test() {\n                boxed(\n                    (Double a) -> {\n                      double b = a + 1;\n                    });\n              }\n            }"
    },
    {
      "description": "lambdaReturn",
      "expected-problems": null,
      "expected-linenumbers": [
        489
      ],
      "code": "class Test {\n              interface F {\n                int f(Integer i);\n              }\n\n              Test() {\n                F f =\n                    (Integer i) -> {\n                      return i;\n                    };\n              }\n            }"
    },
    {
      "description": "positiveFactory",
      "expected-problems": null,
      "expected-linenumbers": [
        511
      ],
      "code": "import com.google.auto.value.AutoValue;\n\n            @AutoValue\n            abstract class Foo {\n              abstract int getFoo();\n\n              abstract boolean isBar();\n\n              // BUG: Diagnostic contains: int foo\n              static Foo create(Integer foo, Boolean bar) {\n                return new AutoValue_Foo(foo, bar);\n              }\n            }"
    },
    {
      "description": "recordsIgnored",
      "expected-problems": null,
      "expected-linenumbers": [
        535
      ],
      "code": "import static com.google.common.base.Preconditions.checkNotNull;\n\n            record Foo(Integer foo, boolean bar) {\n              Foo {\n                checkNotNull(foo);\n              }\n            }"
    }
  ]
}