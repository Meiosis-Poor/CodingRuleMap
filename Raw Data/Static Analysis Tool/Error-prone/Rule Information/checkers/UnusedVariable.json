{
  "name": "UnusedVariable",
  "language": "java",
  "description": "Unused.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 913,
  "branches": 124,
  "apis": 13,
  "test": [
    {
      "description": "exemptedByReceiverParameter",
      "expected-problems": null,
      "expected-linenumbers": [
        38
      ],
      "code": "package unusedvars;\n\n            public class ExemptedByReceiverParameter {\n              public void test() {\n                used();\n              }\n\n              private void used(ExemptedByReceiverParameter this) {\n                // the receiver parameter should not be marked as unused\n              }\n\n              class Inner {\n                private Inner(ExemptedByReceiverParameter ExemptedByReceiverParameter.this) {\n                  // the receiver parameter should not be marked as unused\n                }\n              }\n            }"
    },
    {
      "description": "unicodeBytes",
      "expected-problems": null,
      "expected-linenumbers": [
        65
      ],
      "code": "package unusedvars;\n\n            /** This file contains Unicode characters: ❁❁❁❁❁❁❁❁❁ */\n            public class UnicodeBytes {\n              public void test() {\n                // BUG: Diagnostic contains: is never read\n                int notUsedLocal;\n                String usedLocal = \"\";\n                System.out.println(usedLocal);\n              }\n            }"
    },
    {
      "description": "unusedArray",
      "expected-problems": null,
      "expected-linenumbers": [
        86
      ],
      "code": "package unusedvars;\n\n            public class UnusedArray {\n              private int[] ints;\n\n              public void test() {\n                ints[0] = 0;\n                ints[0]++;\n                ints[0]--;\n                ints[0] -= 0;\n              }\n            }"
    },
    {
      "description": "unusedEnhancedForLoop",
      "expected-problems": null,
      "expected-linenumbers": [
        108
      ],
      "code": "package unusedvars;\n\n            import java.util.ArrayList;\n            import java.util.List;\n\n            class UnusedEnhancedForLoop {\n              public List<String> makeList(List<String> input) {\n                List<String> output = new ArrayList<>();\n                for (final String firstVar : input) {\n                  output.add(\"a string\");\n                }\n                return output;\n              }\n\n              public List<String> listData(List<List<String>> input) {\n                List<String> output = new ArrayList<>();\n                for (List<String> secondVar : input) {\n                  output.add(\"a string\");\n                }\n                return output;\n              }\n            }\n            \n\n            package unusedvars;\n\n            import java.util.ArrayList;\n            import java.util.List;\n\n            class UnusedEnhancedForLoop {\n              public List<String> makeList(List<String> input) {\n                List<String> output = new ArrayList<>();\n                for (final String unused : input) {\n                  output.add(\"a string\");\n                }\n                return output;\n              }\n\n              public List<String> listData(List<List<String>> input) {\n                List<String> output = new ArrayList<>();\n                for (List<String> unused : input) {\n                  output.add(\"a string\");\n                }\n                return output;\n              }\n            }"
    },
    {
      "description": "unusedField",
      "expected-problems": null,
      "expected-linenumbers": [
        166
      ],
      "code": "package unusedvars;\n\n            import java.util.ArrayList;\n            import java.util.List;\n\n            public class UnusedField {\n              // BUG: Diagnostic contains: is never read\n              private int notUsedInt;\n              // BUG: Diagnostic contains: is never read\n              private List<String> list = new ArrayList<>();\n\n              public void test() {\n                notUsedInt = 0;\n                if (hashCode() > 0) {\n                  list = null;\n                } else {\n                  list = makeList();\n                }\n              }\n\n              private List<String> makeList() {\n                return null;\n              }\n\n              public UnusedField(List<String> list) {\n                this.list = list;\n              }\n\n              // These fields are special, and should not be flagged as unused.\n              private static final long serialVersionUID = 0;\n              private static final String TAG = \"UnusedFieldTestThingy\";\n\n              @SuppressWarnings(\"unchecked\")\n              // BUG: Diagnostic contains: is never read\n              private long fieldWithAnn;\n            }"
    },
    {
      "description": "unusedFieldRefactoringInEnum",
      "expected-problems": null,
      "expected-linenumbers": [
        212
      ],
      "code": ""
    },
    {
      "description": "unusedLocalVarInitialized",
      "expected-problems": null,
      "expected-linenumbers": [
        234
      ],
      "code": "package unusedvars;\n\n            public class UnusedLocalVarInitialized {\n              public void test() {\n                String s = \"\";\n                System.out.println(s);\n                // BUG: Diagnostic contains: is never read\n                int notUsed = UnusedLocalVarInitialized.setData();\n                notUsed = this.hashCode();\n              }\n\n              public static int setData() {\n                return 0;\n              }\n            }"
    },
    {
      "description": "unusedLocalVar",
      "expected-problems": null,
      "expected-linenumbers": [
        259
      ],
      "code": "package unusedvars;\n\n            public class UnusedLocalVar {\n              public void test() {\n                // BUG: Diagnostic contains: is never read\n                int notUsedLocal;\n                notUsedLocal = 0;\n                String usedLocal = \"\";\n                if (usedLocal.length() == 0) {\n                  notUsedLocal = 10 + usedLocal.length();\n                } else {\n                  notUsedLocal = this.calculate() + 1;\n                  notUsedLocal--;\n                  notUsedLocal += Integer.valueOf(1);\n                  System.out.println(usedLocal);\n                }\n                System.out.println(usedLocal);\n              }\n\n              int calculate() {\n                return 0;\n              }\n            }"
    },
    {
      "description": "unusedNative",
      "expected-problems": null,
      "expected-linenumbers": [
        292
      ],
      "code": "package unusedvars;\n\n            public class UnusedNative {\n              private int usedInNative1 = 0;\n              private String usedInNative2 = \"\";\n\n              private native void aNativeMethod();\n            }"
    },
    {
      "description": "unusedParamInPrivateMethod",
      "expected-problems": null,
      "expected-linenumbers": [
        310
      ],
      "code": "package unusedvars;\n\n            public class UnusedParamInPrivateMethod {\n              // BUG: Diagnostic contains: 'j' is never read\n              private void test(int i, int j) {\n                System.out.println(i);\n              }\n\n              private class Inner {\n                // BUG: Diagnostic contains: 'j' is never read\n                public void test(int i, int j) {\n                  System.out.println(i);\n                }\n              }\n\n              private interface Foo {\n                void foo(int a);\n              }\n\n              public void main() {\n                test(1, 2);\n              }\n            }"
    },
    {
      "description": "unuseds",
      "expected-problems": null,
      "expected-linenumbers": [
        343
      ],
      "code": "package unusedvars;\n\n            import java.io.IOException;\n            import java.io.ObjectStreamException;\n            import java.util.List;\n            import javax.inject.Inject;\n\n            public class Unuseds {\n              // BUG: Diagnostic contains:\n              private static final String NOT_USED_CONST_STR = \"unused_test\";\n              private static final String CONST_STR = \"test\";\n              // BUG: Diagnostic contains:\n              private int notUsed;\n              private List<String> used;\n              public int publicOne;\n              private int[] ints;\n              @Inject private int unusedExemptedByAnnotation;\n\n              @Inject\n              private void unusedMethodExemptedByAnnotation() {}\n\n              void test() {\n                this.notUsed = 0;\n                this.notUsed++;\n                this.notUsed += 0;\n                // BUG: Diagnostic contains:\n                int notUsedLocal;\n                notUsedLocal = 10;\n                int usedLocal = 0;\n                if (!used.get(usedLocal).toString().equals(CONST_STR)) {\n                  used.add(\"test\");\n                }\n                // j is used\n                int j = 0;\n                used.get(j++);\n                ints[j--]++;\n                ints[1] = 0;\n                // Negative case (:( data flow analysis...).\n                byte[] notUsedLocalArray = new byte[] {};\n                notUsedLocalArray[0] += this.used.size();\n                char[] out = new char[] {};\n                for (int m = 0, n = 0; m < 1; m++) {\n                  out[n++] = out[m];\n                }\n                // Negative case\n                double timestamp = 0.0;\n                set(timestamp += 1.0);\n                int valuesIndex1 = 0;\n                int valuesIndex2 = 0;\n                double[][][] values = null;\n                values[0][valuesIndex1][valuesIndex2] = 10;\n                System.out.println(values);\n              }\n\n              public void set(double d) {}\n\n              public void usedInMethodCall(double d) {\n                List<Unuseds> notUseds = null;\n                int indexInMethodCall = 0;\n                // Must not be reported as unused\n                notUseds.get(indexInMethodCall).publicOne = 0;\n              }\n\n              void memberSelectUpdate1() {\n                List<Unuseds> l = null;\n                // `u` should not be reported as unused.\n                Unuseds u = getFirst(l);\n                u.notUsed = 10;\n                System.out.println(l);\n                getFirst(l).notUsed = 100;\n              }\n\n              void memberSelectUpdate2() {\n                List<Unuseds> l = null;\n                // `l` should not be reported as unused.\n                l.get(0).notUsed = 10;\n              }\n\n              Unuseds getFirst(List<Unuseds> l) {\n                return l.get(0);\n              }\n\n              // Negative case. Must not report.\n              private int usedCount = 0;\n\n              int incCounter() {\n                return usedCount += 2;\n              }\n\n              // For testing the lack of NPE on return statement.\n              public void returnNothing() {\n                return;\n              }\n\n              // Negative case. Must not report.\n              public void testUsedArray() {\n                ints[0] = 0;\n                ints[0]++;\n                ints[0]--;\n                ints[0] -= 0;\n              }\n\n              @SuppressWarnings({\"deprecation\", \"unused\"})\n              class UsesSuppressWarning {\n                private int f1;\n\n                private void test1() {\n                  int local;\n                }\n              }\n            }"
    },
    {
      "description": "refactoring",
      "expected-problems": null,
      "expected-linenumbers": [
        464
      ],
      "code": "package unusedvars;\n\n            public class Unuseds {\n              private static final String NOT_USED_CONST_STR = \"unused_test\";\n              private static final String CONST_STR = \"test\";\n              private int notUsed;\n              public int publicOne;\n\n              void test() {\n                this.notUsed = 0;\n                this.notUsed++;\n                this.notUsed += 0;\n                int notUsedLocal;\n                notUsedLocal = 10;\n                System.out.println(CONST_STR);\n              }\n            }\n            \n\n            package unusedvars;\n\n            public class Unuseds {\n              private static final String CONST_STR = \"test\";\n              public int publicOne;\n\n              void test() {\n                System.out.println(CONST_STR);\n              }\n            }"
    },
    {
      "description": "overridableMethods",
      "expected-problems": null,
      "expected-linenumbers": [
        505
      ],
      "code": "package unusedvars;\n\n            public class Unuseds {\n              // BUG: Diagnostic contains: The parameter 'j' is never read\n              private int usedPrivateMethodWithUnusedParam(int i, int j) {\n                return i * 2;\n              }\n\n              int a = usedPrivateMethodWithUnusedParam(1, 2);\n\n              // In the following three cases, parameters should not be reported as unused,\n              // because methods are non-private.\n              public void publicMethodWithUnusedParam(int i, int j) {}\n\n              public void protectedMethodWithUnusedParam(int i, int j) {}\n\n              public void packageMethodWithUnusedParam(int i, int j) {}\n            }"
    },
    {
      "description": "exemptedByName",
      "expected-problems": null,
      "expected-linenumbers": [
        533
      ],
      "code": "package unusedvars;\n\n            class ExemptedByName {\n              private int unused;\n              private int unusedInt;\n              private static final int UNUSED_CONSTANT = 5;\n              private int ignored;\n              private int customUnused1;\n              private int customUnused2;\n              private int prefixUnused1Field;\n              private int prefixUnused2Field;\n            }"
    },
    {
      "description": "suppressions",
      "expected-problems": null,
      "expected-linenumbers": [
        558
      ],
      "code": "package unusedvars;\n\n            class Suppressed {\n              @SuppressWarnings({\"deprecation\", \"unused\"})\n              class UsesSuppressWarning {\n                private int f1;\n\n                private void test1() {\n                  int local;\n                }\n\n                @SuppressWarnings(value = \"unused\")\n                private void test2() {\n                  int local;\n                }\n              }\n            }"
    },
    {
      "description": "unusedStaticField",
      "expected-problems": null,
      "expected-linenumbers": [
        585
      ],
      "code": "package unusedvars;\n\n            import java.util.ArrayList;\n            import java.util.List;\n\n            public class UnusedStaticField {\n              // BUG: Diagnostic contains: is never read\n              private static final List<String> DATA = new ArrayList<>();\n            }"
    },
    {
      "description": "unusedStaticPrivate",
      "expected-problems": null,
      "expected-linenumbers": [
        604
      ],
      "code": "package unusedvars;\n\n            public class UnusedStaticPrivate {\n              // BUG: Diagnostic contains: is never read\n              private static final String NOT_USED_CONST_STR = \"unused_test\";\n              static final String CONST_STR = \"test\";\n            }"
    },
    {
      "description": "unusedTryResource",
      "expected-problems": null,
      "expected-linenumbers": [
        621
      ],
      "code": "package unusedvars;\n\n            public class UnusedTryResource {\n              public static void main(String[] args) {\n                try (A a = new A()) {}\n              }\n            }\n\n            class A implements AutoCloseable {\n              public void close() {}\n            }"
    },
    {
      "description": "removal_javadocsAndNonJavadocs",
      "expected-problems": null,
      "expected-linenumbers": [
        642
      ],
      "code": "package unusedvars;\n\n            public class UnusedWithComment {\n              /** Comment for a field */\n              @SuppressWarnings(\"test\")\n              private Object field;\n            }\n            \n\n            package unusedvars;\n\n            public class UnusedWithComment {}"
    },
    {
      "description": "removal_trailingComment",
      "expected-problems": null,
      "expected-linenumbers": [
        666
      ],
      "code": "public class Test {\n              public static final int A = 1; // foo\n\n              private static final int B = 2;\n            }\n            \n\n            public class Test {\n              public static final int A = 1; // foo\n            }"
    },
    {
      "description": "removal_javadocAndSingleLines",
      "expected-problems": null,
      "expected-linenumbers": [
        688
      ],
      "code": "public class Test {\n              public static final int A = 1; // foo\n\n              /** Javadoc. */\n              // TODO: fix\n              // BUG: bug\n              private static final int B = 2;\n            }\n            \n\n            public class Test {\n              public static final int A = 1; // foo\n            }"
    },
    {
      "description": "unusedWithComment_interspersedComments",
      "expected-problems": null,
      "expected-linenumbers": [
        733
      ],
      "code": "package unusedvars;\n\n            public class UnusedWithComment {\n              private static final String foo = null, // foo\n                  // BUG: Diagnostic contains:\n                  bar = null;\n\n              public static String foo() {\n                return foo;\n              }\n            }"
    },
    {
      "description": "utf8Handling",
      "expected-problems": null,
      "expected-linenumbers": [
        754
      ],
      "code": "package unusedvars;\n\n            public class Utf8Handling {\n              private int foo = 1;\n\n              public void test() {\n                System.out.println(\"広\");\n                for (int i = 0; i < 10; ++i) {\n                  // BUG: Diagnostic contains: is never read\n                  int notUsedLocal = calculate();\n                }\n                System.out.println(foo);\n              }\n\n              int calculate() {\n                return ++foo;\n              }\n            }"
    },
    {
      "description": "methodAnnotationsExemptingParameters",
      "expected-problems": null,
      "expected-linenumbers": [
        782
      ],
      "code": "package unusedvars;\n\n            class A {\n              {\n                foo(1);\n              }\n\n              @B\n              private static void foo(int a) {}\n            }\n\n            @interface B {}"
    },
    {
      "description": "usedUnaryExpression",
      "expected-problems": null,
      "expected-linenumbers": [
        806
      ],
      "code": "package unusedvars;\n\n            import java.util.Map;\n            import java.util.HashMap;\n\n            public class Test {\n              private int next = 1;\n              private Map<String, Integer> xs = new HashMap<>();\n\n              public int frobnicate(String s) {\n                Integer x = xs.get(s);\n                if (x == null) {\n                  x = next++;\n                  xs.put(s, x);\n                }\n                return x;\n              }\n            }"
    },
    {
      "description": "unusedInject",
      "expected-problems": null,
      "expected-linenumbers": [
        834
      ],
      "code": ""
    },
    {
      "description": "unusedInjectConstructorParameter",
      "expected-problems": null,
      "expected-linenumbers": [
        852
      ],
      "code": "package unusedvars;\n\n            import javax.inject.Inject;\n\n            public class Test {\n              @Inject\n              Test(\n                  // BUG: Diagnostic contains:\n                  String foo) {}\n            }"
    },
    {
      "description": "unusedInjectMethodParameter",
      "expected-problems": null,
      "expected-linenumbers": [
        872
      ],
      "code": "package unusedvars;\n\n            import com.google.inject.Provides;\n\n            class Test {\n              @Provides\n              public String test(\n                  // BUG: Diagnostic contains:\n                  String foo) {\n                return \"test\";\n              }\n            }"
    },
    {
      "description": "unusedInject_notByDefault",
      "expected-problems": null,
      "expected-linenumbers": [
        894
      ],
      "code": "package unusedvars;\n\n            import javax.inject.Inject;\n\n            public class Test {\n              @Inject Object foo;\n              @Inject public Object bar;\n            }"
    },
    {
      "description": "variableKeepingSideEffects",
      "expected-problems": null,
      "expected-linenumbers": [
        912
      ],
      "code": "import com.google.common.collect.ImmutableList;\n\n            class Test {\n              private final ImmutableList<Integer> foo = ImmutableList.of();\n\n              void test() {\n                ImmutableList<Integer> foo = ImmutableList.of();\n              }\n            }\n            \n\n            import com.google.common.collect.ImmutableList;\n\n            class Test {\n              {\n                ImmutableList.of();\n              }\n\n              void test() {\n                ImmutableList.of();\n              }\n            }"
    },
    {
      "description": "variableRemovingSideEffects",
      "expected-problems": null,
      "expected-linenumbers": [
        947
      ],
      "code": "import com.google.common.collect.ImmutableList;\n\n            class Test {\n              private final ImmutableList<Integer> foo = ImmutableList.of();\n\n              void test() {\n                ImmutableList<Integer> foo = ImmutableList.of();\n              }\n            }\n            \n\n            import com.google.common.collect.ImmutableList;\n\n            class Test {\n              void test() {}\n            }"
    },
    {
      "description": "exemptedFieldsByType",
      "expected-problems": null,
      "expected-linenumbers": [
        975
      ],
      "code": "import org.junit.rules.TestRule;\n\n            class Test {\n              private TestRule rule;\n            }"
    },
    {
      "description": "findingBaseSymbol",
      "expected-problems": null,
      "expected-linenumbers": [
        990
      ],
      "code": "class Test {\n              int a;\n\n              void test() {\n                Test o = new Test();\n                ((Test) o).a = 1;\n                (((o))).a = 1;\n                Test p = new Test();\n                id(p).a = 1;\n              }\n\n              Test id(Test t) {\n                return t;\n              }\n            }"
    },
    {
      "description": "fixPrivateMethod_usagesToo",
      "expected-problems": null,
      "expected-linenumbers": [
        1015
      ],
      "code": "class Test {\n              int a = foo(1);\n\n              private int foo(int b) {\n                b = 1;\n                return 1;\n              }\n            }\n            \n\n            class Test {\n              int a = foo();\n\n              private int foo() {\n                return 1;\n              }\n            }"
    },
    {
      "description": "fixPrivateMethod_parameterLocations",
      "expected-problems": null,
      "expected-linenumbers": [
        1044
      ],
      "code": "class Test {\n              int a = foo(1, 2, 3) + bar(1, 2, 3) + baz(1, 2, 3);\n\n              private int foo(int a, int b, int c) {\n                return a * b;\n              }\n\n              private int bar(int a, int b, int c) {\n                return b * c;\n              }\n\n              private int baz(int a, int b, int c) {\n                return a * c;\n              }\n            }\n            \n\n            class Test {\n              int a = foo(1, 2) + bar(2, 3) + baz(1, 3);\n\n              private int foo(int a, int b) {\n                return a * b;\n              }\n\n              private int bar(int b, int c) {\n                return b * c;\n              }\n\n              private int baz(int a, int c) {\n                return a * c;\n              }\n            }"
    },
    {
      "description": "fixPrivateMethod_varArgs",
      "expected-problems": null,
      "expected-linenumbers": [
        1088
      ],
      "code": "class Test {\n              int a = foo(1, 2, 3, 4);\n\n              private int foo(int a, int... b) {\n                return a;\n              }\n            }\n            \n\n            class Test {\n              int a = foo(1);\n\n              private int foo(int a) {\n                return a;\n              }\n            }"
    },
    {
      "description": "fixPrivateMethod_varArgs_noArgs",
      "expected-problems": null,
      "expected-linenumbers": [
        1116
      ],
      "code": "class Test {\n              int a = foo(1);\n\n              private int foo(int a, int... b) {\n                return a;\n              }\n            }\n            \n\n            class Test {\n              int a = foo(1);\n\n              private int foo(int a) {\n                return a;\n              }\n            }"
    },
    {
      "description": "enumField",
      "expected-problems": null,
      "expected-linenumbers": [
        1145
      ],
      "code": "enum Test {\n              ONE(\"1\", 1) {};\n              private String a;\n\n              private Test(String a, int x) {\n                this.a = a;\n              }\n\n              String a() {\n                return a;\n              }\n            }\n            \n\n            enum Test {\n              ONE(\"1\") {};\n              private String a;\n\n              private Test(String a) {\n                this.a = a;\n              }\n\n              String a() {\n                return a;\n              }\n            }"
    },
    {
      "description": "onlyEnumField",
      "expected-problems": null,
      "expected-linenumbers": [
        1184
      ],
      "code": "enum Test {\n              ONE(1) {};\n\n              private Test(int x) {}\n            }\n            \n\n            enum Test {\n              ONE() {};\n\n              private Test() {}\n            }"
    },
    {
      "description": "sideEffectFix",
      "expected-problems": null,
      "expected-linenumbers": [
        1208
      ],
      "code": "class Test {\n              private static final int[] xs = new int[0];\n            }\n            \n\n            class Test {}"
    },
    {
      "description": "sideEffectFieldFix",
      "expected-problems": null,
      "expected-linenumbers": [
        1226
      ],
      "code": "class Test {\n              private int x = 1;\n\n              public int a() {\n                x = a();\n                return 1;\n              }\n            }\n            \n\n            class Test {\n              public int a() {\n                a();\n                return 1;\n              }\n            }"
    },
    {
      "description": "blockFixTest",
      "expected-problems": null,
      "expected-linenumbers": [
        1255
      ],
      "code": "class Test {\n              void foo() {\n                int a = 1;\n                if (hashCode() > 0) a = 2;\n              }\n            }\n            \n\n            class Test {\n              void foo() {\n                if (hashCode() > 0) {}\n              }\n            }"
    },
    {
      "description": "unusedAssignment",
      "expected-problems": null,
      "expected-linenumbers": [
        1280
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public void test() {\n                Integer a = 1;\n                a.hashCode();\n                // BUG: Diagnostic contains: assignment to\n                a = 2;\n              }\n            }"
    },
    {
      "description": "unusedAssignment_messages",
      "expected-problems": null,
      "expected-linenumbers": [
        1300
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public int test() {\n                // BUG: Diagnostic contains: This assignment to the local variable\n                int a = 1;\n                a = 2;\n                int b = a;\n                int c = b;\n                // BUG: Diagnostic contains: This assignment to the local variable\n                b = 2;\n                b = 3;\n                return b + c;\n              }\n            }"
    },
    {
      "description": "unusedAssignment_nulledOut_noWarning",
      "expected-problems": null,
      "expected-linenumbers": [
        1325
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public void test() {\n                Integer a = 1;\n                a.hashCode();\n                a = null;\n              }\n            }"
    },
    {
      "description": "unusedAssignment_nulledOut_thenAssignedAgain",
      "expected-problems": null,
      "expected-linenumbers": [
        1344
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public void test() {\n                Integer a = 1;\n                a.hashCode();\n                a = null;\n                a = 2;\n              }\n            }\n            \n\n            package unusedvars;\n\n            public class Test {\n              public void test() {\n                Integer a = 1;\n                a.hashCode();\n                a = null;\n              }\n            }"
    },
    {
      "description": "unusedAssignment_initialAssignmentNull_givesWarning",
      "expected-problems": null,
      "expected-linenumbers": [
        1377
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public String test() {\n                String a = null;\n                hashCode();\n                a = toString();\n                return a;\n              }\n            }\n            \n\n            package unusedvars;\n\n            public class Test {\n              public String test() {\n                hashCode();\n                String a = toString();\n                return a;\n              }\n            }"
    },
    {
      "description": "unusedAssignmentAfterUse",
      "expected-problems": null,
      "expected-linenumbers": [
        1410
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public void test() {\n                int a = 1;\n                System.out.println(a);\n                a = 2;\n              }\n            }\n            \n\n            package unusedvars;\n\n            public class Test {\n              public void test() {\n                int a = 1;\n                System.out.println(a);\n              }\n            }"
    },
    {
      "description": "unusedAssignmentWithFinalUse",
      "expected-problems": null,
      "expected-linenumbers": [
        1441
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public void test() {\n                int a = 1;\n                a = 2;\n                a = 3;\n                System.out.println(a);\n              }\n            }\n            \n\n            package unusedvars;\n\n            public class Test {\n              public void test() {\n                int a = 3;\n                System.out.println(a);\n              }\n            }"
    },
    {
      "description": "assignmentUsedInExpression",
      "expected-problems": null,
      "expected-linenumbers": [
        1473
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public int test() {\n                int a = 1;\n                a = a * 2;\n                return a;\n              }\n            }"
    },
    {
      "description": "assignmentToParameter",
      "expected-problems": null,
      "expected-linenumbers": [
        1492
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public void test(int a) {\n                a = 2;\n              }\n            }\n            \n\n            package unusedvars;\n\n            public class Test {\n              public void test(int a) {}\n            }"
    },
    {
      "description": "assignmentToParameter_thenUsed",
      "expected-problems": null,
      "expected-linenumbers": [
        1518
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public int test(int a) {\n                a = 2;\n                return a;\n              }\n            }"
    },
    {
      "description": "assignmentToEnhancedForLoop",
      "expected-problems": null,
      "expected-linenumbers": [
        1536
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public void test(Iterable<Integer> as) {\n                for (int a : as) {\n                  System.out.println(a);\n                  a = 2;\n                }\n              }\n            }\n            \n\n            package unusedvars;\n\n            public class Test {\n              public void test(Iterable<Integer> as) {\n                for (int a : as) {\n                  System.out.println(a);\n                }\n              }\n            }"
    },
    {
      "description": "assignmentWithinForLoop",
      "expected-problems": null,
      "expected-linenumbers": [
        1569
      ],
      "code": "public class Test {\n              public void test() {\n                for (int a = 0; a < 10; a = a + 1) {}\n              }\n            }"
    },
    {
      "description": "assignmentSeparateFromDeclaration_noComplaint",
      "expected-problems": null,
      "expected-linenumbers": [
        1584
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public void test() {\n                int a;\n                a = 1;\n                System.out.println(a);\n              }\n            }"
    },
    {
      "description": "unusedAssignment_negatives",
      "expected-problems": null,
      "expected-linenumbers": [
        1603
      ],
      "code": "package unusedvars;\n\n            public class Test {\n              public int frobnicate() {\n                int a = 1;\n                if (hashCode() == 0) {\n                  a = 2;\n                }\n                return a;\n              }\n            }"
    },
    {
      "description": "exemptedMethods",
      "expected-problems": null,
      "expected-linenumbers": [
        1624
      ],
      "code": "package unusedvars;\n\n            import java.io.IOException;\n            import java.io.ObjectStreamException;\n\n            public class Unuseds implements java.io.Serializable {\n              private void readObject(java.io.ObjectInputStream in) throws IOException {}\n\n              private void writeObject(java.io.ObjectOutputStream out) throws IOException {}\n\n              private Object readResolve() {\n                return null;\n              }\n\n              private void readObjectNoData() throws ObjectStreamException {}\n            }"
    },
    {
      "description": "unusedReassignment_removeSideEffectsFix",
      "expected-problems": null,
      "expected-linenumbers": [
        1650
      ],
      "code": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport static java.util.stream.Collectors.toList;\n\npublic class Test {\n  public void f(List<List<String>> lists) {\n    List<String> result =\n        lists.stream().collect(ArrayList::new, Collection::addAll, Collection::addAll);\n    result = lists.stream().collect(ArrayList::new, ArrayList::addAll, ArrayList::addAll);\n  }\n}\n\n\n            import java.util.ArrayList;\n            import java.util.Collection;\n            import java.util.List;\n            import static java.util.stream.Collectors.toList;\n\n            public class Test {\n              public void f(List<List<String>> lists) {}\n            }"
    },
    {
      "description": "unusedReassignment_keepSideEffectsFix",
      "expected-problems": null,
      "expected-linenumbers": [
        1685
      ],
      "code": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport static java.util.stream.Collectors.toList;\n\npublic class Test {\n  public void f(List<List<String>> lists) {\n    List<String> result =\n        lists.stream().collect(ArrayList::new, Collection::addAll, Collection::addAll);\n    result = lists.stream().collect(ArrayList::new, ArrayList::addAll, ArrayList::addAll);\n  }\n}\n\n\n            import java.util.ArrayList;\n            import java.util.Collection;\n            import java.util.List;\n            import static java.util.stream.Collectors.toList;\n\n            public class Test {\n              public void f(List<List<String>> lists) {\n                lists.stream().collect(ArrayList::new, Collection::addAll, Collection::addAll);\n                lists.stream().collect(ArrayList::new, ArrayList::addAll, ArrayList::addAll);\n              }\n            }"
    },
    {
      "description": "simpleRecord",
      "expected-problems": null,
      "expected-linenumbers": [
        1723
      ],
      "code": "//            public record SimpleRecord(Integer foo, Long bar) {}\n            //\\"
    },
    {
      "description": "nestedRecord",
      "expected-problems": null,
      "expected-linenumbers": [
        1736
      ],
      "code": "public class SimpleClass {\n              public record SimpleRecord(Integer foo, Long bar) {}\n            }"
    },
    {
      "description": "recordWithStaticFields",
      "expected-problems": null,
      "expected-linenumbers": [
        1750
      ],
      "code": "public class SimpleClass {\n              public record MyRecord(int foo) {\n                private static int a = 1;\n                private static int b = 1;\n                // BUG: Diagnostic contains: is never read\n                private static int c = 1;\n\n                public MyRecord {\n                  foo = Math.max(a, foo);\n                }\n              }\n\n              public int b() {\n                return MyRecord.b;\n              }\n            }"
    },
    {
      "description": "nestedPrivateRecord",
      "expected-problems": null,
      "expected-linenumbers": [
        1780
      ],
      "code": "public class SimpleClass {\n              private record SimpleRecord(Integer foo, Long bar) {}\n            }"
    },
    {
      "description": "nestedPrivateRecordCompactCanonicalConstructor",
      "expected-problems": null,
      "expected-linenumbers": [
        1794
      ],
      "code": ""
    },
    {
      "description": "nestedPrivateRecordNormalCanonicalConstructor",
      "expected-problems": null,
      "expected-linenumbers": [
        1811
      ],
      "code": "public class SimpleClass {\n              private record SimpleRecord(Integer foo, Long bar) {\n                private SimpleRecord(Integer foo, Long bar) {\n                  this.foo = foo;\n                  this.bar = bar;\n                }\n              }\n            }"
    },
    {
      "description": "unusedRecordConstructorParameter",
      "expected-problems": null,
      "expected-linenumbers": [
        1830
      ],
      "code": "public record SimpleRecord(int x) {\n              // BUG: Diagnostic contains: The parameter 'b' is never read\n              private SimpleRecord(int a, int b) {\n                this(a);\n              }\n            }"
    },
    {
      "description": "unusedInRecord",
      "expected-problems": null,
      "expected-linenumbers": [
        1846
      ],
      "code": "public class SimpleClass {\n              public record SimpleRecord(Integer foo, Long bar) {\n                void f() {\n                  // BUG: Diagnostic contains: is never read\n                  int x = foo;\n                }\n              }\n            }"
    },
    {
      "description": "manyUnusedAssignments_terminalAssignmentBecomesVariable",
      "expected-problems": null,
      "expected-linenumbers": [
        1864
      ],
      "code": "public class Test {\n              public void test() {\n                Integer a = 1;\n                a = 2;\n                a = 3;\n                a.hashCode();\n              }\n            }\n            \n\n            public class Test {\n              public void test() {\n                Integer a = 3;\n                a.hashCode();\n              }\n            }"
    },
    {
      "description": "unusedVariable_withinPrivateInnerClass",
      "expected-problems": null,
      "expected-linenumbers": [
        1892
      ],
      "code": "class Test {\n              private class Inner {\n                // BUG: Diagnostic contains:\n                public int foo = 1;\n              }\n            }"
    },
    {
      "description": "parcelableCreator_noFinding",
      "expected-problems": null,
      "expected-linenumbers": [
        1908
      ],
      "code": "import android.os.Parcelable;\n\n            class Test {\n              private static final Parcelable.Creator<Test> CREATOR = null;\n            }"
    },
    {
      "description": "nestedParameterRemoval",
      "expected-problems": null,
      "expected-linenumbers": [
        1925
      ],
      "code": "class Test {\n              private int foo(int a, int b) {\n                return b;\n              }\n\n              void test() {\n                foo(foo(1, 2), 2);\n              }\n            }\n            \n\n            class Test {\n              private int foo(int b) {\n                return b;\n              }\n\n              void test() {\n                foo(2);\n              }\n            }"
    },
    {
      "description": "unusedFunctionalInterfaceParameter",
      "expected-problems": null,
      "expected-linenumbers": [
        1957
      ],
      "code": "import java.util.Collections;\n            import java.util.Comparator;\n            import java.util.List;\n\n            class Test {\n              public void test(List<Integer> xs) {\n                // BUG: Diagnostic contains: 'b' is never read\n                Collections.sort(xs, (a, b) -> a > a ? 1 : 0);\n                Collections.sort(xs, (a, unused) -> a > a ? 1 : 0);\n              }\n\n              public class TestComparator implements Comparator<Integer> {\n                @Override\n                // BUG: Diagnostic contains: 'b' is never read\n                public int compare(Integer a, Integer b) {\n                  return a;\n                }\n\n                public void foo(int a, int b) {}\n              }\n            }"
    },
    {
      "description": "unusedWithinAnotherVariableTree",
      "expected-problems": null,
      "expected-linenumbers": [
        1988
      ],
      "code": "import java.util.Collections;\n            import java.util.Comparator;\n            import java.util.List;\n\n            class Test {\n              public void test(List<Integer> xs) {\n                var unusedLocal =\n                    xs.stream()\n                        .sorted(\n                            // BUG: Diagnostic contains: 'b' is never read\n                            (a, b) -> a > a ? 1 : 0);\n              }\n            }"
    },
    {
      "description": "unusedFunctionalInterfaceParameter_noFix",
      "expected-problems": null,
      "expected-linenumbers": [
        2011
      ],
      "code": "import java.util.Collections;\n            import java.util.Comparator;\n            import java.util.List;\n\n            class Test {\n              public void test(List<Integer> xs) {\n                Collections.sort(xs, (a, b) -> a > a ? 1 : 0);\n                Collections.sort(xs, (a, unused) -> a > a ? 1 : 0);\n                Collections.sort(\n                    xs,\n                    new Comparator<Integer>() {\n                      @Override\n                      public int compare(Integer a, Integer b) {\n                        return a;\n                      }\n                    });\n              }\n            }"
    },
    {
      "description": "parameterUsedInOverride",
      "expected-problems": null,
      "expected-linenumbers": [
        2040
      ],
      "code": "public class App {\n              private static class Base {\n                protected void doStuff(String usedInDescendants) {}\n              }\n\n              private static class Descendant extends Base {\n                @Override\n                protected void doStuff(String actuallyUsed) {\n                  System.out.println(actuallyUsed);\n                }\n              }\n\n              public static void main(String[] args) {\n                Base b = new Descendant();\n                b.doStuff(\"some string\");\n              }\n            }"
    },
    {
      "description": "underscoreVariable",
      "expected-problems": null,
      "expected-linenumbers": [
        2068
      ],
      "code": "class Test {\n              public static void main(String[] args) {\n                var _ = new Object();\n              }\n            }"
    },
    {
      "description": "testParameters",
      "expected-problems": null,
      "expected-linenumbers": [
        2085
      ],
      "code": "import org.junit.Test;\n\n            class FooTest {\n              @Test\n              // BUG: Diagnostic contains:\n              public void foo(int xs) {}\n            }"
    },
    {
      "description": "patternMatchingInstanceof_variableUnused",
      "expected-problems": null,
      "expected-linenumbers": [
        2103
      ],
      "code": "class Test {\n              private boolean eq(Object o) {\n                return o instanceof Test t;\n              }\n            }\n            \n\n            class Test {\n              private boolean eq(Object o) {\n                return o instanceof Test;\n              }\n            }"
    },
    {
      "description": "patternMatchingInstanceof_variableUnused",
      "expected-problems": null,
      "expected-linenumbers": [
        2103
      ],
      "code": "class Test {\n              private boolean eq(Object o) {\n                return o instanceof Test t;\n              }\n            }\n            \n\n            class Test {\n              private boolean eq(Object o) {\n                return o instanceof Test;\n              }\n            }"
    },
    {
      "description": "patternMatchingInstanceofs_variableUsed",
      "expected-problems": null,
      "expected-linenumbers": [
        2127
      ],
      "code": "class Test {\n              private int a;\n\n              private boolean eq(Object o) {\n                return o instanceof Test t && a == t.a;\n              }\n            }"
    }
  ]
}