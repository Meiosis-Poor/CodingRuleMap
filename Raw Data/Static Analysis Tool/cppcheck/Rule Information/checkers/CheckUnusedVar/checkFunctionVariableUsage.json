{
  "name": "checkFunctionVariableUsage",
  "language": "cpp",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 257,
  "branches": 93,
  "apis": 270,
  "test": [
    {
      "description": null,
      "expected-problems": 1,
      "expected-linenumbers": [
        274
      ],
      "code": "\n/*\n * Cppcheck - A tool for static C/C++ code analysis\n * Copyright (C) 2007-2025 Cppcheck team.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"checkunusedvar.h\"\n#include \"errortypes.h\"\n#include \"fixture.h\"\n#include \"helpers.h\"\n#include \"preprocessor.h\"\n#include \"settings.h\"\n\n#include <list>\n#include <string>\n\nclass TestUnusedVar : public TestFixture {\npublic:\n    TestUnusedVar() : TestFixture(\"TestUnusedVar\") {}\n\nprivate:\n    const Settings settings = settingsBuilder().severity(Severity::style).checkLibrary().library(\"std.cfg\").build();\n\n    void run() override {\n        mNewTemplate = true;\n        TEST_CASE(isRecordTypeWithoutSideEffects);\n        TEST_CASE(cleanFunction);\n\n        TEST_CASE(emptyclass);  // #5355 - False positive: Variable is not assigned a value.\n        TEST_CASE(emptystruct);  // #5355 - False positive: Variable is not assigned a value.\n\n        TEST_CASE(structmember1);\n        TEST_CASE(structmember2);\n        TEST_CASE(structmember3);\n        TEST_CASE(structmember4);\n        TEST_CASE(structmember5);\n        TEST_CASE(structmember6);\n        TEST_CASE(structmember7);\n        TEST_CASE(structmember8);\n        TEST_CASE(structmember9);  // #2017 - struct is inherited\n        TEST_CASE(structmember_extern); // No false positives for extern structs\n        TEST_CASE(structmember10);\n        TEST_CASE(structmember11); // #4168 - initialization with {} / passed by address to unknown function\n        TEST_CASE(structmember12); // #7179 - FP unused structmember\n        TEST_CASE(structmember13); // #3088 - __attribute__((packed))\n        TEST_CASE(structmember14); // #6508 - (struct x){1,2,..}\n        TEST_CASE(structmember15); // #3088 - #pragma pack(1)\n        TEST_CASE(structmember_sizeof);\n        TEST_CASE(structmember16); // #10485\n        TEST_CASE(structmember17); // #10591\n        TEST_CASE(structmember18); // #10684\n        TEST_CASE(structmember19); // #10826, #10848, #10852\n        TEST_CASE(structmember20); // #10737\n        TEST_CASE(structmember21); // #4759\n        TEST_CASE(structmember22); // #11016\n        TEST_CASE(structmember23);\n        TEST_CASE(structmember24); // #10847\n        TEST_CASE(structmember25);\n        TEST_CASE(structmember26); // #13345\n        TEST_CASE(structmember27); // #13367\n        TEST_CASE(structmember28);\n        TEST_CASE(structmember_macro);\n        TEST_CASE(structmember_template_argument); // #13887 - do not report that member used in template argument is unused\n        TEST_CASE(classmember);\n        TEST_CASE(structmemberStructuredBinding); // #13107\n\n        TEST_CASE(localvar1);\n        TEST_CASE(localvar2);\n        TEST_CASE(localvar3);\n        TEST_CASE(localvar4);\n        TEST_CASE(localvar5);\n        TEST_CASE(localvar6);\n        TEST_CASE(localvar8);\n        TEST_CASE(localvar9); // ticket #1605\n        TEST_CASE(localvar10);\n        TEST_CASE(localvar11);\n        TEST_CASE(localvar12);\n        TEST_CASE(localvar13); // ticket #1640\n        TEST_CASE(localvar14); // ticket #5\n        TEST_CASE(localvar15);\n        TEST_CASE(localvar16); // ticket #1709\n        TEST_CASE(localvar17); // ticket #1720\n        TEST_CASE(localvar18); // ticket #1723\n        TEST_CASE(localvar19); // ticket #1776\n        TEST_CASE(localvar20); // ticket #1799\n        TEST_CASE(localvar21); // ticket #1807\n        TEST_CASE(localvar22); // ticket #1811\n        TEST_CASE(localvar23); // ticket #1808\n        TEST_CASE(localvar24); // ticket #1803\n        TEST_CASE(localvar25); // ticket #1729\n        TEST_CASE(localvar26); // ticket #1894\n        TEST_CASE(localvar27); // ticket #2160\n        TEST_CASE(localvar28); // ticket #2205\n        TEST_CASE(localvar29); // ticket #2206 (array initialization)\n        TEST_CASE(localvar30);\n        TEST_CASE(localvar31); // ticket #2286\n        TEST_CASE(localvar32); // ticket #2330\n        TEST_CASE(localvar33); // ticket #2346\n        TEST_CASE(localvar34); // ticket #2368\n        TEST_CASE(localvar35); // ticket #2535\n        TEST_CASE(localvar36); // ticket #2805\n        TEST_CASE(localvar37); // ticket #3078\n        TEST_CASE(localvar38);\n        TEST_CASE(localvar39); // ticket #3454\n        TEST_CASE(localvar40); // ticket #3473\n        TEST_CASE(localvar41); // ticket #3603\n        TEST_CASE(localvar42); // ticket #3742\n        TEST_CASE(localvar43); // ticket #3602\n        TEST_CASE(localvar44); // ticket #4020\n        TEST_CASE(localvar45); // ticket #4899\n        TEST_CASE(localvar46); // ticket #5491 (C++11 style initialization)\n        TEST_CASE(localvar47); // ticket #6603\n        TEST_CASE(localvar48); // ticket #6954\n        TEST_CASE(localvar49); // ticket #7594\n        TEST_CASE(localvar50); // ticket #6261 : dostuff(cond ? buf1 : buf2)\n        TEST_CASE(localvar51); // ticket #8128 - FN : tok = tok->next();\n        TEST_CASE(localvar52);\n        TEST_CASE(localvar53); // continue\n        TEST_CASE(localvar54); // ast, {}\n        TEST_CASE(localvar55);\n        TEST_CASE(localvar56);\n        TEST_CASE(localvar57); // #8974 - increment\n        TEST_CASE(localvar58); // #9901 - increment false positive\n        TEST_CASE(localvar59); // #9737\n        TEST_CASE(localvar60);\n        TEST_CASE(localvar61); // #9407\n        TEST_CASE(localvar62); // #10824\n        TEST_CASE(localvar63); // #6928\n        TEST_CASE(localvar64); // #9997\n        TEST_CASE(localvar65); // #9876, #10006\n        TEST_CASE(localvar66); // #11143\n        TEST_CASE(localvar67); // #9946\n        TEST_CASE(localvar68);\n        TEST_CASE(localvar69);\n        TEST_CASE(localvar70);\n        TEST_CASE(localvar71);\n        TEST_CASE(localvarloops); // loops\n        TEST_CASE(localvaralias1);\n        TEST_CASE(localvaralias2); // ticket #1637\n        TEST_CASE(localvaralias3); // ticket #1639\n        TEST_CASE(localvaralias4); // ticket #1643\n        TEST_CASE(localvaralias5); // ticket #1647\n        TEST_CASE(localvaralias6); // ticket #1729\n        TEST_CASE(localvaralias7); // ticket #1732\n        TEST_CASE(localvaralias8);\n        TEST_CASE(localvaralias9); // ticket #1996\n        TEST_CASE(localvaralias10); // ticket #2004\n        TEST_CASE(localvaralias11); // ticket #4423 - iterator\n        TEST_CASE(localvaralias12); // ticket #4394\n        TEST_CASE(localvaralias13); // ticket #4487\n        TEST_CASE(localvaralias14); // ticket #5619\n        TEST_CASE(localvaralias15); // ticket #6315\n        TEST_CASE(localvaralias16);\n        TEST_CASE(localvaralias17); // ticket #8911\n        TEST_CASE(localvaralias18); // ticket #9234 - iterator\n        TEST_CASE(localvaralias19); // ticket #9828\n        TEST_CASE(localvaralias20); // ticket #10966\n        TEST_CASE(localvaralias21);\n        TEST_CASE(localvaralias22);\n        TEST_CASE(localvaralias23);\n        TEST_CASE(localvarasm);\n        TEST_CASE(localvarstatic);\n        TEST_CASE(localvarextern);\n        TEST_CASE(localvardynamic1);\n        TEST_CASE(localvardynamic2); // ticket #2904\n        TEST_CASE(localvardynamic3); // ticket #3467\n        TEST_CASE(localvararray1);  // ticket #2780\n        TEST_CASE(localvararray2);  // ticket #3438\n        TEST_CASE(localvararray3);  // ticket #3980\n        TEST_CASE(localvararray4);  // ticket #4839\n        TEST_CASE(localvararray5);  // ticket #7092\n        TEST_CASE(localvararray6);\n        TEST_CASE(localvarstring1);\n        TEST_CASE(localvarstring2); // ticket #2929\n        TEST_CASE(localvarconst1);\n        TEST_CASE(localvarconst2);\n        TEST_CASE(localvarreturn); // ticket #9167\n        TEST_CASE(localvarmaybeunused);\n        TEST_CASE(localvarrvalue); // ticket #13977\n\n        TEST_CASE(localvarthrow); // ticket #3687\n\n        TEST_CASE(localVarStd);\n        TEST_CASE(localVarClass);\n        TEST_CASE(localVarSmartPtr);\n\n        // Don't give false positives for variables in structs/unions\n        TEST_CASE(localvarStruct1);\n        TEST_CASE(localvarStruct2);\n        TEST_CASE(localvarStruct3);\n        TEST_CASE(localvarStruct5);\n        TEST_CASE(localvarStruct6);\n        TEST_CASE(localvarStruct7);\n        TEST_CASE(localvarStruct8);\n        TEST_CASE(localvarStruct9);\n        TEST_CASE(localvarStruct10);\n        TEST_CASE(localvarStruct11); // 10095\n        TEST_CASE(localvarStruct12); // #10495\n        TEST_CASE(localvarStruct13); // #10398\n        TEST_CASE(localvarStruct14);\n        TEST_CASE(localvarStructArray);\n        TEST_CASE(localvarUnion1);\n\n        TEST_CASE(localvarOp);          // Usage with arithmetic operators\n        TEST_CASE(localvarInvert);      // Usage with inverted variable\n        TEST_CASE(localvarIf);          // Usage in if\n        TEST_CASE(localvarIfElse);      // return tmp1 ? tmp2 : tmp3;\n        TEST_CASE(localvarDeclaredInIf);\n        TEST_CASE(localvarOpAssign);    // a |= b;\n        TEST_CASE(localvarFor);         // for ( ; var; )\n        TEST_CASE(localvarForEach);     // #4155 - BOOST_FOREACH, hlist_for_each, etc\n        TEST_CASE(localvarShift1);      // 1 >> var\n        TEST_CASE(localvarShift3);      // x << y\n        TEST_CASE(localvarCast);\n        TEST_CASE(localvarClass);\n        TEST_CASE(localvarUnused);\n        TEST_CASE(localvarFunction); // ticket #1799\n        TEST_CASE(localvarIfNOT);    // #3104 - if ( NOT var )\n        TEST_CASE(localvarAnd);      // #3672\n        TEST_CASE(localvarSwitch);   // #3744 - false positive when localvar is used in switch\n        TEST_CASE(localvarNULL);     // #4203 - Setting NULL value is not redundant - it is safe\n        TEST_CASE(localvarUnusedGoto);    // #4447, #4558 goto\n        TEST_CASE(localvarRangeBasedFor); // #7075\n        TEST_CASE(localvarAssignInWhile);\n        TEST_CASE(localvarTemplate); // #4955 - variable is used as template parameter\n        TEST_CASE(localvarFuncPtr); // #7194\n        TEST_CASE(localvarAddr); // #7477\n        TEST_CASE(localvarDelete);\n        TEST_CASE(localvarLambda); // #8941, #8948\n        TEST_CASE(localvarStructuredBinding); // #10368\n\n        TEST_CASE(localvarCppInitialization);\n        TEST_CASE(localvarCpp11Initialization);\n\n        TEST_CASE(chainedAssignment); // #5466\n\n        TEST_CASE(crash1);\n        TEST_CASE(crash2);\n        TEST_CASE(crash3);\n        TEST_CASE(usingNamespace);     // #4585\n\n        TEST_CASE(lambdaFunction); // #5078\n        TEST_CASE(namespaces); // #7557\n        TEST_CASE(bracesInitCpp11);// #7895 - \"int var{123}\" initialization\n\n        TEST_CASE(argument);\n        TEST_CASE(argumentClass);\n        TEST_CASE(escapeAlias); // #9150\n        TEST_CASE(volatileData); // #9280\n        TEST_CASE(globalData);\n\n        TEST_CASE(structuredBinding); // #13269\n    }\n\n    struct FunctionVariableUsageOptions\n    {\n        FunctionVariableUsageOptions() = default;\n        bool cpp = true;\n    };\n\n#define functionVariableUsage(...) functionVariableUsage_(__FILE__, __LINE__, __VA_ARGS__)\n    void functionVariableUsage_(const char* file, int line, const char code[], const FunctionVariableUsageOptions& options = make_default_obj()) {\n        // Tokenize..\n        SimpleTokenizer tokenizer(settings, *this, options.cpp);\n        ASSERT_LOC(tokenizer.tokenize(code), file, line);\n\n        // Check for unused variables..\n        CheckUnusedVar checkUnusedVar(&tokenizer, &settings, this);\n        checkUnusedVar.checkFunctionVariableUsage();\n    }\n\n    struct CheckStructMemberUsageOptions\n    {\n        CheckStructMemberUsageOptions() = default;\n        const std::list<Directive>* directives = nullptr;\n        bool cpp = true;\n    };\n\n#define checkStructMemberUsage(...) checkStructMemberUsage_(__FILE__, __LINE__, __VA_ARGS__)\n    void checkStructMemberUsage_(const char* file, int line, const char code[], const CheckStructMemberUsageOptions& options = make_default_obj()) {\n        // Tokenize..\n        SimpleTokenizer tokenizer(settings, *this, options.cpp);\n        if (options.directives)\n            tokenizer.setDirectives(*options.directives);\n        ASSERT_LOC(tokenizer.tokenize(code), file, line);\n\n        // Check for unused variables..\n        CheckUnusedVar checkUnusedVar(&tokenizer, &settings, this);\n        (checkUnusedVar.checkStructMemberUsage)();\n    }\n\n#define checkStructMemberUsageP(...) checkStructMemberUsageP_(__FILE__, __LINE__, __VA_ARGS__)\n    void checkStructMemberUsageP_(const char* file, int line, const char code[]) {\n        SimpleTokenizer2 tokenizer(settings, *this, code, \"test.cpp\");\n\n        // Tokenizer..\n        ASSERT_LOC(tokenizer.simplifyTokens1(\"\"), file, line);\n\n        // Check for unused variables..\n        CheckUnusedVar checkUnusedVar(&tokenizer, &settings, this);\n        (checkUnusedVar.checkStructMemberUsage)();\n    }\n\n#define checkFunctionVariableUsageP(...) checkFunctionVariableUsageP_(__FILE__, __LINE__, __VA_ARGS__)\n    void checkFunctionVariableUsageP_(const char* file, int line, const char code[]) {\n        SimpleTokenizer2 tokenizer(settings, *this, code, \"test.cpp\");\n\n        // Tokenizer..\n        ASSERT_LOC(tokenizer.simplifyTokens1(\"\"), file, line);\n\n        // Check for unused variables..\n        CheckUnusedVar checkUnusedVar(&tokenizer, &settings, this);\n        (checkUnusedVar.checkFunctionVariableUsage)();\n    }\n\n\n    void isRecordTypeWithoutSideEffects() {\n        functionVariableUsage(\n            \"class A {};\\n\"\n            \"void f() {\\n\"\n            \"   A a;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:6]: (style) Unused variable: a [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"class A {};\\n\"\n            \"class B {\\n\"\n            \"public:\\n\"\n            \"   A a;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   B b;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7:6]: (style) Unused variable: b [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() = default;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"class D {\\n\"\n            \"public:\\n\"\n            \"   D() {}\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   D d;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:6]: (style) Unused variable: d [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"class E {\\n\"\n            \"public:\\n\"\n            \"   uint32_t u{1};\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   E e;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:6]: (style) Unused variable: e [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(0) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7:6]: (style) Unused variable: f [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x{0} {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7:6]: (style) Unused variable: f [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"int y = 0;\\n\"\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(y) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:8:6]: (style) Unused variable: f [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"int y = 0;\"\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(++y) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7:6]: (style) Unused variable: f [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"int y = 0;\"\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(--y) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7:6]: (style) Unused variable: f [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"int y = 0;\"\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(y+=1) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7:6]: (style) Unused variable: f [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"int y = 0;\"\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(y-=1) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7:6]: (style) Unused variable: f [unusedVariable]\\n\", errout_str());\n\n        // non-empty constructor\n        functionVariableUsage(\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() {\\n\"\n            \"       int i = 0;\\n\"\n            \"       (void) i;\"\n            \"   }\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        TODO_ASSERT_EQUALS(\"error\", \"\", errout_str());\n\n        // constructor with hidden definition\n        functionVariableUsage(\n            \"class B {\\n\"\n            \"public:\\n\"\n            \"   B();\\n\"\n            \"};\\n\"\n            \"class A {\\n\"\n            \"   B* b = new B;\\n\"\n            \"};\\n\"\n            \"int main() {\\n\"\n            \"   A a;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // side-effect variable\n        functionVariableUsage(\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() {\\n\"\n            \"       int i = 0;\\n\"\n            \"       (void) i;\"\n            \"   }\\n\"\n            \"};\\n\"\n            \"class G {\\n\"\n            \"public:\\n\"\n            \"   F f;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   G g;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // side-effect variable in initialization list\n        functionVariableUsage(\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() {\\n\"\n            \"       int i = 0;\\n\"\n            \"       (void) i;\"\n            \"   }\\n\"\n            \"};\\n\"\n            \"class G {\\n\"\n            \"public:\\n\"\n            \"   G() : f(F()) {}\\n\"\n            \"   F f;\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   G g;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // unknown variable type\n        functionVariableUsage(\n            \"class H {\\n\"\n            \"public:\\n\"\n            \"   unknown_type u{1};\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   H h;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // unknown variable type in initialization list\n        functionVariableUsage(\n            \"class H {\\n\"\n            \"public:\\n\"\n            \"   H() : x{0}, u(1) {}\\n\"\n            \"   int x;\"\n            \"   unknown_type u;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   H h;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // unknown variable type used for initialization\n        functionVariableUsage(\n            \"unknown_type y = 0;\\n\"\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(y) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"int sideEffectFunc();\\n\"\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(sideEffectFunc()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(++unknownValue) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(--unknownValue) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(unknownValue+=1) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(unknownValue-=1) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"struct S {\\n\"\n            \"    static void f() { std::cout << \\\"f()\\\"; }\\n\"\n            \"    ~S() { f(); }\\n\"\n            \"};\\n\"\n            \"void g() {\\n\"\n            \"    S s;\\n\"\n            \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage( // #11109\n            \"class D { public: D(); };\\n\"\n            \"class E { public: ~E(); };\\n\"\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"    F();\\n\"\n            \"    ~F();\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"    D d;\\n\"\n            \"    E e;\\n\"\n            \"    F f;\\n\"\n            \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void cleanFunction() {\n        // unknown function\n        functionVariableUsage(\n            \"class F {\\n\"\n            \"public:\\n\"\n            \"   F() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   F f;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // function forward declaration\n        functionVariableUsage(\n            \"int func();\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // return literal\n        functionVariableUsage(\n            \"int func() { return 1; }\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:8:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // return variable without side effects\n        functionVariableUsage(\n            \"int func() {\\n\"\n            \"   int x = 1;\\n\"\n            \"   return x;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:11:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // return variable with side effects\n        functionVariableUsage(\n            \"int func() {\\n\"\n            \"   unknown_type x = 1;\\n\"\n            \"   return x;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // return unknown variable\n        functionVariableUsage(\n            \"int func() {\\n\"\n            \"   return unknown_var;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // return variable is global, but not changed\n        functionVariableUsage(\n            \"int x = 1;\\n\"\n            \"int func() {\\n\"\n            \"   return x;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:11:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // changing global variable in return\n        functionVariableUsage(\n            \"int x = 1;\\n\"\n            \"int func() {\\n\"\n            \"   return x++;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // changing global variable in function body\n        functionVariableUsage(\n            \"int x = 1;\\n\"\n            \"int func() {\\n\"\n            \"   x++;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"int x = 1;\\n\"\n            \"int func() {\\n\"\n            \"   --x;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"int x = 1;\\n\"\n            \"int func() {\\n\"\n            \"   x += 2;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"int x = 1;\\n\"\n            \"int func() {\\n\"\n            \"   x = 2;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // global variable use in function body without change\n        functionVariableUsage(\n            \"int global = 1;\\n\"\n            \"int func() {\\n\"\n            \"   int x = global + 1;\\n\"\n            \"   return x;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:12:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // changing global array variable in function body\n        functionVariableUsage(\n            \"int x[] = {0, 1, 3};\\n\"\n            \"int func() {\\n\"\n            \"   x[0] = 4;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"int x[] = {0, 1, 3};\\n\"\n            \"int func() {\\n\"\n            \"   *x = 2;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"int x[] = {0, 1, 3};\\n\"\n            \"int func() {\\n\"\n            \"   *(x) = 2;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // pointer arithmetic on global array\n        functionVariableUsage(\n            \"int x[] = {0, 1, 3};\\n\"\n            \"int func() {\\n\"\n            \"   *(x + 1) = 2;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"int x[][] = {{0, 1}, {2, 3}};\\n\"\n            \"int func() {\\n\"\n            \"   *((x + 1) + 1) = 4;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"int x[] = {0, 1, 3};\\n\"\n            \"int func() {\\n\"\n            \"   int local = *(x + 1);\\n\"\n            \"   (void) local;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:13:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"int x[] = {0, 1, 3};\\n\"\n            \"int func() {\\n\"\n            \"   int* local = x + 2;\\n\"\n            \"   (void) local;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:13:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"int x[] = {0, 1, 3};\\n\"\n            \"int func() {\\n\"\n            \"   int* local = x + 2;\\n\"\n            \"   return *local;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"int x[] = {0, 1, 3};\\n\"\n            \"int func() {\\n\"\n            \"   return *(x + 1);\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // changing local variable\n        functionVariableUsage(\n            \"int func() {\\n\"\n            \"   int x = 1;\\n\"\n            \"   x = 2;\\n\"\n            \"   x++;\\n\"\n            \"   return x;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:13:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // variable of user-defined class without side effects\n        functionVariableUsage(\n            \"class A {};\\n\"\n            \"A func() {\\n\"\n            \"   A a;\\n\"\n            \"   return a;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   A x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:12:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // variable of user-defined class with side effects\n        functionVariableUsage(\n            \"class A {\\n\"\n            \"public:\\n\"\n            \"   unknown_type u{1};\\n\"\n            \"};\\n\"\n            \"int func() {\\n\"\n            \"   A a;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // unknown type variable\n        functionVariableUsage(\n            \"int func() {\\n\"\n            \"   unknown_type a;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // nested clean function call\n        functionVariableUsage(\n            \"int another_func() { return 1;}\\n\"\n            \"int func() {\\n\"\n            \"   another_func();\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:12:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // nested side-effects function call\n        functionVariableUsage(\n            \"int global = 1;\"\n            \"int another_func() {\\n\"\n            \"   global++;\\n\"\n            \"   return global;}\\n\"\n            \"int func() {\\n\"\n            \"   another_func();\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // unknown nested function\n        functionVariableUsage(\n            \"int func() {\\n\"\n            \"   unknown_func();\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // clean function recursion\n        functionVariableUsage(\n            \"int func(int i) {\\n\"\n            \"   if (i != 2) {\\n\"\n            \"       func(i++);\\n\"\n            \"       return 2;\\n\"\n            \"   }\\n\"\n            \"   return i;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func(0)) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:14:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // indirect clean function recursion\n        functionVariableUsage(\n            \"void another_func() {\\n\"\n            \"   func(0);\\n\"\n            \"}\\n\"\n            \"int func(int i) {\\n\"\n            \"   if (i != 2) {\\n\"\n            \"       another_func();\\n\"\n            \"       return 2;\\n\"\n            \"   }\\n\"\n            \"   return i;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func(0)) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:17:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // side-effect function recursion\n        functionVariableUsage(\n            \"int global = 1;\\n\"\n            \"int func(int i) {\\n\"\n            \"   if (i != 2) {\\n\"\n            \"       global++;\\n\"\n            \"       func(i++);\\n\"\n            \"       return 2;\\n\"\n            \"   }\\n\"\n            \"   return i;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func(0)) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // multiple returns (side-effect & clean)\n        functionVariableUsage(\n            \"int func(int i) {\\n\"\n            \"   if (i == 0) { return 0;}\\n\"\n            \"   else { return unknownSideEffectFunction(); }\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func(0)) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // multiple clean returns\n        functionVariableUsage(\n            \"int func(int i) {\\n\"\n            \"   if (i == 0) { return 0;}\\n\"\n            \"   else { return i; }\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func(0)) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:11:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // multiple side-effect returns\n        functionVariableUsage(\n            \"int func(int i) {\\n\"\n            \"   if (i == 0) { return unknownSideEffectFunction();}\\n\"\n            \"   else { return unknown_var; }\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func(0)) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // argument return\n        functionVariableUsage(\n            \"int func(int i) {\\n\"\n            \"    return i;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func(0)) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:10:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // global variable modifying through function argument\n        functionVariableUsage(\n            \"char buf[10];\\n\"\n            \"int func(char* p) {\\n\"\n            \"   *p = 0;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func(buf)) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // global variable modifying through local pointer\n        functionVariableUsage(\n            \"int global = 1;\\n\"\n            \"int func() {\\n\"\n            \"   int* p = &global;\\n\"\n            \"   *p = 0;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // global variable assigning to local pointer, but not modifying\n        functionVariableUsage(\n            \"int global = 1;\\n\"\n            \"int func() {\\n\"\n            \"   int* p = &global;\\n\"\n            \"   (void) p;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:13:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // global struct variable modification\n        functionVariableUsage(\n            \"struct S { int x; } s;\\n\"\n            \"int func() {\\n\"\n            \"   s.x = 1;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // global struct variable without modification\n        functionVariableUsage(\n            \"struct S { int x; } s;\\n\"\n            \"int func() {\\n\"\n            \"   int y = s.x + 1;\\n\"\n            \"   return y;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:12:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        // global pointer to struct variable modification\n        functionVariableUsage(\n            \"struct S { int x; };\\n\"\n            \"struct S* s = new(struct S);\\n\"\n            \"int func() {\\n\"\n            \"   s->x = 1;\\n\"\n            \"   return 1;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // global pointer to struct variable without modification\n        functionVariableUsage(\n            \"struct S { int x; };\\n\"\n            \"struct S* s = new(struct S);\\n\"\n            \"int func() {\\n\"\n            \"   int y = s->x + 1;\\n\"\n            \"   return y;\\n\"\n            \"}\\n\"\n            \"class C {\\n\"\n            \"public:\\n\"\n            \"   C() : x(func()) {}\\n\"\n            \"   int x;\\n\"\n            \"};\\n\"\n            \"void f() {\\n\"\n            \"   C c;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:13:6]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n    }\n\n    // #5355 - False positive: Variable is not assigned a value.\n    void emptyclass() {\n        functionVariableUsage(\"class Carla {\\n\"\n                              \"};\\n\"\n                              \"class Fred : Carla {\\n\"\n                              \"};\\n\"\n                              \"void foo() {\\n\"\n                              \"    Fred fred;\\n\"\n                              \"    throw fred;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    // #5355 - False positive: Variable is not assigned a value.\n    void emptystruct() {\n        functionVariableUsage(\"struct Fred {\\n\"\n                              \"};\\n\"\n                              \"void foo() {\\n\"\n                              \"    Fred fred;\\n\"\n                              \"    throw fred;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember1() {\n        checkStructMemberUsage(\"struct abc\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"    int c;\\n\"\n                               \"};\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) struct member 'abc::a' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:4:9]: (style) struct member 'abc::b' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:5:9]: (style) struct member 'abc::c' is never used. [unusedStructMember]\\n\", errout_str());\n\n        checkStructMemberUsage(\"union abc\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"    int c;\\n\"\n                               \"};\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) union member 'abc::a' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:4:9]: (style) union member 'abc::b' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:5:9]: (style) union member 'abc::c' is never used. [unusedStructMember]\\n\", errout_str());\n    }\n\n    void structmember2() {\n        checkStructMemberUsage(\"struct ABC\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"    int c;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    struct ABC abc;\\n\"\n                               \"    int a = abc.a;\\n\"\n                               \"    int b = abc.b;\\n\"\n                               \"    int c = abc.c;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember3() {\n        checkStructMemberUsage(\"struct ABC\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"    int c;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"static struct ABC abc[] = { {1, 2, 3} };\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    int a = abc[0].a;\\n\"\n                               \"    int b = abc[0].b;\\n\"\n                               \"    int c = abc[0].c;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember4() {\n        checkStructMemberUsage(\"struct ABC\\n\"\n                               \"{\\n\"\n                               \"    const int a;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    ABC abc;\\n\"\n                               \"    if (abc.a == 2);\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember5() {\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"    void reset()\\n\"\n                               \"    {\\n\"\n                               \"        a = 1;\\n\"\n                               \"        b = 2;\\n\"\n                               \"    }\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    struct AB ab;\\n\"\n                               \"    ab.reset();\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember6() {\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo(char *buf)\\n\"\n                               \"{\\n\"\n                               \"    struct AB *ab = (struct AB *)&buf[10];\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo(char *buf)\\n\"\n                               \"{\\n\"\n                               \"    struct AB *ab = (AB *)&buf[10];\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember7() {\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo(struct AB *ab)\\n\"\n                               \"{\\n\"\n                               \"    ab->a = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:9]: (style) struct member 'AB::b' is never used. [unusedStructMember]\\n\", errout_str());\n\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo(struct AB _shuge *ab)\\n\"\n                               \"{\\n\"\n                               \"    ab->a = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:9]: (style) struct member 'AB::b' is never used. [unusedStructMember]\\n\", errout_str());\n    }\n\n    void structmember8() {\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"void foo(char *ab)\\n\"\n                               \"{\\n\"\n                               \"    ((AB *)ab)->b = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember9() {\n        checkStructMemberUsage(\"struct base {\\n\"\n                               \"    int a;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"struct derived : public base {\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember10() {\n        // Fred may have some useful side-effects\n        checkStructMemberUsage(\"struct abc {\\n\"\n                               \"    Fred fred;\\n\"\n                               \"};\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember11() { // #4168\n        checkStructMemberUsage(\"struct abc { int x; };\\n\"\n                               \"struct abc s = {0};\\n\"\n                               \"void f() { do_something(&s); }\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct abc { int x; };\\n\"\n                               \"struct abc s = {0};\\n\"\n                               \"void f() { }\");\n        TODO_ASSERT_EQUALS(\"abc::x is not used\", \"\", errout_str());\n    }\n\n    void structmember12() { // #7179\n        checkStructMemberUsage(\"#include <stdio.h>\\n\"\n                               \"struct\\n\"\n                               \"{\\n\"\n                               \"    union\\n\"\n                               \"    {\\n\"\n                               \"        struct\\n\"\n                               \"        {\\n\"\n                               \"            int a;\\n\"\n                               \"        } struct1;\\n\"\n                               \"    };\\n\"\n                               \"} var = {0};\\n\"\n                               \"int main(int argc, char *argv[])\\n\"\n                               \"{\\n\"\n                               \"    printf(\\\"var.struct1.a = %d\\\", var.struct1.a);\\n\"\n                               \"    return 1;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember13() { // #3088 - struct members required by hardware\n        checkStructMemberUsage(\"struct S {\\n\"\n                               \"  int x;\\n\"\n                               \"} __attribute__((packed));\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember14() { // #6508\n        checkStructMemberUsage(\"struct bstr { char *bstart; size_t len; };\\n\"\n                               \"struct bstr bstr0(void) {\\n\"\n                               \"  return (struct bstr){\\\"hello\\\",6};\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember15() { // #3088\n        std::list<Directive> directives;\n        directives.emplace_back(\"test.cpp\", 1, \"#pragma pack(1)\");\n        checkStructMemberUsage(\"\\nstruct Foo { int x; int y; };\", dinit(CheckStructMemberUsageOptions, $.directives = &directives));\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember_extern() {\n        // extern struct => no false positive\n        checkStructMemberUsage(\"extern struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"} ab;\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    ab.b = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // global linkage => no false positive\n        checkStructMemberUsage(\"struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"} ab;\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    ab.b = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // static linkage => error message\n        checkStructMemberUsage(\"static struct AB\\n\"\n                               \"{\\n\"\n                               \"    int a;\\n\"\n                               \"    int b;\\n\"\n                               \"} ab;\\n\"\n                               \"\\n\"\n                               \"void foo()\\n\"\n                               \"{\\n\"\n                               \"    ab.b = 0;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) struct member 'AB::a' is never used. [unusedStructMember]\\n\", errout_str());\n\n        checkStructMemberUsage(\"struct A\\n\"\n                               \"{\\n\"\n                               \"    static const int a = 0;\\n\"\n                               \"};\\n\"\n                               \"\\n\"\n                               \"int foo()\\n\"\n                               \"{\\n\"\n                               \"    return A::a;\\n\"\n                               \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember_sizeof() {\n        checkStructMemberUsage(\"struct Header {\\n\"\n                               \"  uint8_t message_type;\\n\"\n                               \"}\\n\"\n                               \"\\n\"\n                               \"input.skip(sizeof(Header));\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct Header {\\n\"\n                               \"  uint8_t message_type;\\n\"\n                               \"}\\n\"\n                               \"\\n\"\n                               \"input.skip(sizeof(struct Header));\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int a, b, c; };\\n\" // #6561\n                               \"int f(FILE * fp) {\\n\"\n                               \"    S s;\\n\"\n                               \"    ::fread(&s, sizeof(S), 1, fp);\\n\"\n                               \"    return s.b;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember16() {\n        checkStructMemberUsage(\"struct S {\\n\"\n                               \"  static const int N = 128;\\n\" // <- used\n                               \"  char E[N];\\n\" // <- not used\n                               \"};\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:8]: (style) struct member 'S::E' is never used. [unusedStructMember]\\n\", errout_str());\n    }\n\n    void structmember17() { // #10591\n        checkStructMemberUsage(\"struct tagT { int i; };\\n\"\n                               \"void f() {\\n\"\n                               \"    struct tagT t{};\\n\"\n                               \"    t.i = 0;\\n\" // <- used\n                               \"    g(t);\\n\"\n                               \"};\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"typedef struct tagT { int i; } typeT;\\n\"\n                               \"void f() {\\n\"\n                               \"    struct typeT t{};\\n\"\n                               \"    t.i = 0;\\n\" // <- used\n                               \"    g(t);\\n\"\n                               \"};\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct T { int i; };\\n\"\n                               \"void f() {\\n\"\n                               \"    struct T t{};\\n\"\n                               \"    t.i = 0;\\n\" // <- used\n                               \"    g(t);\\n\"\n                               \"};\\n\");\n        ASSERT_EQUALS(\"\", errout_str()); // due to removeMacroInClassDef()\n    }\n\n    void structmember18() { // #10684\n        checkStructMemberUsage(\"struct S { uint8_t padding[500]; };\\n\"\n                               \"static S s = { 0 };\\n\"\n                               \"uint8_t f() {\\n\"\n                               \"    uint8_t* p = (uint8_t*)&s;\\n\"\n                               \"    return p[10];\\n\"\n                               \"};\\n\");\n        ASSERT_EQUALS(\"[test.cpp:1:20]: (style) struct member 'S::padding' is never used. [unusedStructMember]\\n\", errout_str());\n\n        checkStructMemberUsage(\"struct S { uint8_t padding[500]; };\\n\"\n                               \"uint8_t f(const S& s) {\\n\"\n                               \"    std::cout << &s;\\n\"\n                               \"    auto p = reinterpret_cast<const uint8_t*>(&s);\\n\"\n                               \"    return p[10];\\n\"\n                               \"};\\n\");\n        ASSERT_EQUALS(\"[test.cpp:1:20]: (style) struct member 'S::padding' is never used. [unusedStructMember]\\n\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int i, j; };\\n\" // #11577\n                               \"void f(S s) {\\n\"\n                               \"  void* p = (void*)&s;\\n\"\n                               \"  if (s.i) {}\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:1:19]: (style) struct member 'S::j' is never used. [unusedStructMember]\\n\", errout_str());\n    }\n\n    void structmember19() {\n        checkStructMemberUsage(\"class C {};\\n\" // #10826\n                               \"struct S {\\n\"\n                               \"    char* p;\\n\"\n                               \"    std::string str;\\n\"\n                               \"    C c;\\n\"\n                               \"};\\n\"\n                               \"void f(S* s) {}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:11]: (style) struct member 'S::p' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:4:17]: (style) struct member 'S::str' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:5:7]: (style) struct member 'S::c' is never used. [unusedStructMember]\\n\",\n                      errout_str());\n\n        checkStructMemberUsage(\"class C {};\\n\"\n                               \"struct S {\\n\"\n                               \"    char* p;\\n\"\n                               \"    std::string str;\\n\"\n                               \"    C c;\\n\"\n                               \"};\\n\"\n                               \"void f(S& s) {}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:11]: (style) struct member 'S::p' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:4:17]: (style) struct member 'S::str' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:5:7]: (style) struct member 'S::c' is never used. [unusedStructMember]\\n\",\n                      errout_str());\n\n        checkStructMemberUsage(\"struct S {\\n\" // #10848\n                               \"    struct T {\\n\"\n                               \"        int i;\\n\"\n                               \"    } t[2];\\n\"\n                               \"};\\n\"\n                               \"S s[1];\\n\"\n                               \"int f() {\\n\"\n                               \"    return s[0].t[1].i;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int a; };\\n\"\n                               \"struct T { S s; };\\n\"\n                               \"int f(const T** tp) {\\n\"\n                               \"    return tp[0]->s.a;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int a; };\\n\"\n                               \"int f(const S* sp) {\\n\"\n                               \"    return (*sp).a; \\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int a; };\\n\"\n                               \"int f(const S** spp) {\\n\"\n                               \"    return spp[0]->a;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int a; };\\n\"\n                               \"int f(const S** spp) {\\n\"\n                               \"    return spp[0][0].a;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int a; };\\n\"\n                               \"int f(const S* sp) {\\n\"\n                               \"    return sp[0].a;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int a; };\\n\"\n                               \"int f(const S* sp) {\\n\"\n                               \"    return sp->a;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"typedef struct { int i; } A;\\n\"\n                               \"typedef struct { std::vector<A> v; } B;\\n\"\n                               \"const A& f(const std::vector<const B*>& b, int idx) {\\n\"\n                               \"    const A& a = b[0]->v[idx];\\n\"\n                               \"    return a;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:1:22]: (style) struct member 'A::i' is never used. [unusedStructMember]\\n\",\n                      errout_str());\n\n        checkStructMemberUsage(\"struct A {\\n\" // #10852\n                               \"    struct B {\\n\"\n                               \"        int x;\\n\"\n                               \"    } b;\\n\"\n                               \"} a;\\n\"\n                               \"void f() {\\n\"\n                               \"    struct B* pb = &a.b;\\n\"\n                               \"    pb->x = 1;\\n\"\n                               \"}\\n\", dinit(CheckStructMemberUsageOptions, $.cpp = false));\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"union U {\\n\"\n                               \"    struct A {\\n\"\n                               \"        struct B {\\n\"\n                               \"            int x;\\n\"\n                               \"        } b;\\n\"\n                               \"    } a;\\n\"\n                               \"    struct C {\\n\"\n                               \"        short s[2];\\n\"\n                               \"    } c;\\n\"\n                               \"} u;\\n\"\n                               \"void f() {\\n\"\n                               \"    struct B* pb = &u.a.b;\\n\"\n                               \"    pb->x = 1;\\n\"\n                               \"    struct C* pc = &u.c;\\n\"\n                               \"    pc->s[0] = 1;\\n\"\n                               \"}\\n\", dinit(CheckStructMemberUsageOptions, $.cpp = false));\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember20() { // #10737\n        checkStructMemberUsage(\"void f() {\\n\"\n                               \"    {\\n\"\n                               \"    }\\n\"\n                               \"    {\\n\"\n                               \"        struct S { int a; };\\n\"\n                               \"        S s{};\\n\"\n                               \"        {\\n\"\n                               \"            if (s.a) {}\\n\"\n                               \"        }\\n\"\n                               \"    }\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember21() { // #4759\n        checkStructMemberUsage(\"class C {\\n\"\n                               \"public:\\n\"\n                               \"    int f() { return 0; }\\n\"\n                               \"};\\n\"\n                               \"C c;\\n\"\n                               \"int g() {\\n\"\n                               \"    return c.f();\\n\"\n                               \"}\\n\"\n                               \"struct S {\\n\"\n                               \"    int f;\\n\"\n                               \"};\\n\");\n        ASSERT_EQUALS(\"[test.cpp:10:9]: (style) struct member 'S::f' is never used. [unusedStructMember]\\n\", errout_str());\n\n        checkStructMemberUsage(\"struct A { int i; };\\n\"\n                               \"struct B { struct A* pA; };\");\n        ASSERT_EQUALS(\"[test.cpp:1:16]: (style) struct member 'A::i' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:2:22]: (style) struct member 'B::pA' is never used. [unusedStructMember]\\n\",\n                      errout_str());\n    }\n\n    void structmember22() { // #11016\n        checkStructMemberUsage(\"struct A { bool b; };\\n\"\n                               \"void f(const std::vector<A>& v) {\\n\"\n                               \"    std::vector<A>::const_iterator it = b.begin();\\n\"\n                               \"    if (it->b) {}\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember23() {\n        checkStructMemberUsage(\"namespace N {\\n\"\n                               \"    struct S { std::string s; };\\n\"\n                               \"}\\n\"\n                               \"std::string f() {\\n\"\n                               \"    std::map<int, N::S> m = { { 0, { \\\"abc\\\" } } };\\n\"\n                               \"    return m[0].s;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember24() { // #10847\n        checkStructMemberUsage(\"struct S { std::map<int, S*> m; };\\n\"\n                               \"std::map<int, S*> u;\\n\"\n                               \"std::map<int, S*>::iterator f() {\\n\"\n                               \"    return u.find(0)->second->m.begin();\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int i; };\\n\"\n                               \"void f() {\\n\"\n                               \"    std::map<int, S> m = { { 0, S() } };\\n\"\n                               \"    m[0].i = 1;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { bool b; };\\n\"\n                               \"std::vector<S> v;\\n\"\n                               \"bool f() {\\n\"\n                               \"    return v.begin()->b;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"int f(int s) {\\n\" // #10587\n                               \"    const struct S { int a, b; } Map[] = { { 0, 1 }, { 2, 3 } };\\n\"\n                               \"    auto it = std::find_if(std::begin(Map), std::end(Map), [&](const auto& m) { return s == m.a; });\\n\"\n                               \"    if (it != std::end(Map))\\n\"\n                               \"        return it->b;\\n\"\n                               \"    return 0;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"int f(int s) {\\n\"\n                               \"    const struct S { int a, b; } Map[] = { { 0, 1 }, { 2, 3 } };\\n\"\n                               \"    for (auto&& m : Map)\\n\"\n                               \"        if (m.a == s)\\n\"\n                               \"            return m.b;\\n\"\n                               \"    return 0;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct R { bool b{ false }; };\\n\" // #11539\n                               \"void f(std::optional<R> r) {\\n\"\n                               \"    if (r.has_value())\\n\"\n                               \"        std::cout << r->b;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember25() {\n        checkStructMemberUsage(\"struct S {\\n\" // #12485\n                               \"    S* p;\\n\"\n                               \"    int i;\\n\"\n                               \"};\\n\"\n                               \"struct T {\\n\"\n                               \"    S s;\\n\"\n                               \"    int j;\\n\"\n                               \"};\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:8]: (style) struct member 'S::p' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:3:9]: (style) struct member 'S::i' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:6:7]: (style) struct member 'T::s' is never used. [unusedStructMember]\\n\"\n                      \"[test.cpp:7:9]: (style) struct member 'T::j' is never used. [unusedStructMember]\\n\",\n                      errout_str());\n    }\n\n    void structmember26() { // #13345\n        checkStructMemberUsage(\"struct foobar {\\n\"\n                               \"   char unused;\\n\"\n                               \"};\\n\"\n                               \"size_t offset_unused = offsetof(struct foobar, unused);\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember27() { // #13367\n        checkStructMemberUsage(\"typedef struct pathNode_s {\\n\"\n                               \"    struct pathNode_s*  next;\\n\"\n                               \"} pathNode_t;\\n\"\n                               \"void f() {\\n\"\n                               \"    x<pathNode_t, offsetof( pathNode_t, next )> y;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", // don't crash\n                      errout_str());\n    }\n\n    void structmember28() {\n        checkStructMemberUsage(\"struct S {\\n\"\n                               \"    unsigned int a : 16;\\n\"\n                               \"    unsigned int : 16;\\n\"\n                               \"};\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:18]: (style) struct member 'S::a' is never used. [unusedStructMember]\\n\", errout_str());\n    }\n\n    void structmember_macro() {\n        checkStructMemberUsageP(\"#define S(n) struct n { int a, b, c; };\\n\"\n                                \"S(unused);\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmember_template_argument() { // #13887 - False positive\n        checkStructMemberUsage(\"template <class T, int i> struct A{ T buf[i]; }\\n\"\n                               \"struct B {\\n\"\n                               \"    constexpr int x = 20;\\n\" // <- not unused\n                               \"    A<uint32_t, x> a;\\n\" // <- unused\n                               \"};\");\n        ASSERT_EQUALS(\"[test.cpp:4:20]: (style) struct member 'B::a' is never used. [unusedStructMember]\\n\", errout_str());\n    }\n\n    void classmember() {\n        checkStructMemberUsage(\"class C {\\n\"\n                               \"    int i{};\\n\"\n                               \"};\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:9]: (style) class member 'C::i' is never used. [unusedStructMember]\\n\", errout_str());\n\n        checkStructMemberUsage(\"class C {\\n\"\n                               \"    int i{}, j{};\\n\"\n                               \"public:\\n\"\n                               \"    int& get() { return i; }\\n\"\n                               \"};\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:14]: (style) class member 'C::j' is never used. [unusedStructMember]\\n\", errout_str());\n\n        checkStructMemberUsage(\"class C {\\n\"\n                               \"private:\\n\"\n                               \"    int i;\\n\"\n                               \"};\\n\"\n                               \"class D : public C {};\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) class member 'C::i' is never used. [unusedStructMember]\\n\", errout_str());\n\n        checkStructMemberUsage(\"class C {\\n\"\n                               \"public:\\n\"\n                               \"    int i;\\n\"\n                               \"};\\n\"\n                               \"class D : C {};\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) class member 'C::i' is never used. [unusedStructMember]\\n\", errout_str());\n\n        checkStructMemberUsage(\"class C {\\n\"\n                               \"public:\\n\"\n                               \"    int i;\\n\"\n                               \"};\\n\"\n                               \"class D : public C {};\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structmemberStructuredBinding() { // #13107\n        checkStructMemberUsage(\"struct S { int a, b; };\\n\"\n                               \"void f(S &s) {\\n\"\n                               \"    auto& [x, y] = s;\\n\"\n                               \"    x = y;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int a, b; };\\n\"\n                               \"struct T { S s; };\\n\"\n                               \"void f(T &t) {\\n\"\n                               \"    auto& [x, y] = t.s;\\n\"\n                               \"    x = y;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkStructMemberUsage(\"struct S { int a, b; };\\n\"\n                               \"void f(std::vector<S> &sv) {\\n\"\n                               \"    for (auto& [x, y] : sv)\\n\"\n                               \"        x = y;\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // #13551 - don't crash\n        checkStructMemberUsage(\"struct S {};\\n\"\n                               \"void f(vector<std::pair<int, int>> p) {\\n\"\n                               \"    for (auto [a, _] : p) {\\n\"\n                               \"        if (a == 0) {}\\n\"\n                               \"    }\\n\"\n                               \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar1() {\n        // extracttests.disable\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:11]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:9]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i(0);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        // if a is undefined then Cppcheck can't determine if \"int i(a)\" is a\n        // * variable declaration\n        // * function declaration\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int j = 0;\\n\"\n                              \"    int i(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:10]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int j = 0;\\n\"\n                              \"    int & i = j;\\n\"\n                              \"    x(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:13]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int j = 0;\\n\"\n                              \"    const int & i = j;\\n\"\n                              \"    x(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:19]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int j = 0;\\n\"\n                              \"    int & i(j);\\n\"\n                              \"    x(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:12]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int j = 0;\\n\"\n                              \"    const int & i(j);\\n\"\n                              \"    x(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:18]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * j = Data;\\n\"\n                              \"    int * i(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:12]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * j = Data;\\n\"\n                              \"    const int * i(j);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:18]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    bool i = false;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:12]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:10]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    bool i = true;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:12]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:10]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char *i;\\n\"\n                              \"    i = fgets();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:7]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        // undefined variables are not reported because they may be classes with constructors\n        functionVariableUsage(\"undefined foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:17]: (information) --check-library: Provide <type-checks><unusedvar> configuration for undefined [checkLibraryCheckType]\\n\", errout_str());\n\n        functionVariableUsage(\"undefined foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined i = 0;\\n\"\n                              \"}\\n\",\n                              dinit(FunctionVariableUsageOptions, $.cpp = false));\n        ASSERT_EQUALS(\n            \"[test.c:3:17]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.c:3:15]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = undefined;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:11]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:9]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * i = Data;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:13]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:11]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void * i = Data;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:14]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:12]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const void * i = Data;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:20]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:18]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct S * i = DATA;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:18]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:16]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const struct S * i = DATA;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:24]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:22]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct S & i = j;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:18]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const struct S & i = j;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:24]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined * i = X;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:19]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:17]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    int j = i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:4:11]: (style) Variable 'j' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:9]: (style) Variable 'j' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i[10] = { 0 };\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:15]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo(int n)\\n\"\n                              \"{\\n\"\n                              \"    int i[n] = { 0 };\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:14]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char i[10] = \\\"123456789\\\";\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:16]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char *i = \\\"123456789\\\";\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:13]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:11]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:11]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:9]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0,code=10;\\n\"\n                              \"    for(i = 0; i < 10; i++) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0,code=10,d=10;\\n\"\n                              \"    for(i = 0; i < 10; i++) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        d = code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:24]: (style) Variable 'd' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:7:11]: (style) Variable 'd' is assigned a value that is never used. [unreadVariable]\\n\",\n                      errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0,code=10,d=10;\\n\"\n                              \"    for(i = 0; i < 10; i++) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        g(d);\\n\"\n                              \"        d = code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0,code=10,d=10;\\n\"\n                              \"    for(i = 0; i < 10; i++) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        if (i == 3) {\\n\"\n                              \"            return d;\\n\"\n                              \"        }\\n\"\n                              \"        d = code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0,a=10,b=20;\\n\"\n                              \"    for(i = 0; i < 10; i++) {\\n\"\n                              \"        std::cout<<a<<std::endl;\\n\"\n                              \"        int tmp=a;\\n\"\n                              \"        a=b;\\n\"\n                              \"        b=tmp;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    while(code < 20) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    while(code < 20) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        d += code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:18]: (style) Variable 'd' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:7:11]: (style) Variable 'd' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    while(code < 20) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        g(d);\\n\"\n                              \"        d += code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    while(code < 20) {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        if (i == 3) {\\n\"\n                              \"            return d;\\n\"\n                              \"        }\\n\"\n                              \"        d += code;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a=10,b=20;\\n\"\n                              \"    while(a != 30) {\\n\"\n                              \"        std::cout<<a<<std::endl;\\n\"\n                              \"        int tmp=a;\\n\"\n                              \"        a=b;\\n\"\n                              \"        b=tmp;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    do {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"    } while(code < 20);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    do {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        d += code;\\n\"\n                              \"    } while(code < 20);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:18]: (style) Variable 'd' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:7:11]: (style) Variable 'd' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    do {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        g(d);\\n\"\n                              \"        d += code;\\n\"\n                              \"    } while(code < 20);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10,d=10;\\n\"\n                              \"    do {\\n\"\n                              \"        std::cout<<code<<std::endl;\\n\"\n                              \"        code += 2;\\n\"\n                              \"        if (i == 3) {\\n\"\n                              \"            return d;\\n\"\n                              \"        }\\n\"\n                              \"        d += code;\\n\"\n                              \"    } while(code < 20);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a=10,b=20;\\n\"\n                              \"    do {\\n\"\n                              \"        std::cout<<a<<std::endl;\\n\"\n                              \"        int tmp=a;\\n\"\n                              \"        a=b;\\n\"\n                              \"        b=tmp;\\n\"\n                              \"    } while( a!=30 );\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    for(int i=0; i < 10; i++) {\\n\"\n                              \"        if(true) {\\n\"\n                              \"            std::cout<<code<<std::endl;\\n\"\n                              \"            code += 2;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    for(int i=0; i < 10; i++) {\\n\"\n                              \"        if(true) {\\n\"\n                              \"            std::cout<<code<<std::endl;\\n\"\n                              \"        }\\n\"\n                              \"        code += 2;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    while(code < 20) {\\n\"\n                              \"        if(true) {\\n\"\n                              \"            std::cout<<code<<std::endl;\\n\"\n                              \"            code += 2;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int code=10;\\n\"\n                              \"    do {\\n\"\n                              \"        if(true) {\\n\"\n                              \"            std::cout<<code<<std::endl;\\n\"\n                              \"            code += 2;\\n\"\n                              \"        }\\n\"\n                              \"    } while(code < 20);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo(int j = 0) {\\n\" // #5985 - default function parameters should not affect checking results\n                              \"    int i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:2:11]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:2:9]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n        // extracttests.enable\n    }\n\n    void localvar2() {\n        // extracttests.disable: uninitialized variables and stuff\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Variable 'i' is not assigned a value. [unassignedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"bool foo()\\n\"\n                              \"{\\n\"\n                              \"    bool i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style) Variable 'i' is not assigned a value. [unassignedVariable]\\n\", errout_str());\n\n        // undefined variables are not reported because they may be classes with constructors\n        functionVariableUsage(\"undefined foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"undefined foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\\n\",\n                              dinit(FunctionVariableUsageOptions, $.cpp = false));\n        ASSERT_EQUALS(\"[test.c:3:15]: (style) Variable 'i' is not assigned a value. [unassignedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"undefined *foo()\\n\"\n                              \"{\\n\"\n                              \"    undefined * i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:17]: (style) Variable 'i' is not assigned a value. [unassignedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"int *foo()\\n\"\n                              \"{\\n\"\n                              \"    int * i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:11]: (style) Variable 'i' is not assigned a value. [unassignedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"const int *foo()\\n\"\n                              \"{\\n\"\n                              \"    const int * i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:17]: (style) Variable 'i' is not assigned a value. [unassignedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"struct S *foo()\\n\"\n                              \"{\\n\"\n                              \"    struct S * i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:16]: (style) Variable 'i' is not assigned a value. [unassignedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"const struct S *foo()\\n\"\n                              \"{\\n\"\n                              \"    const struct S * i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:22]: (style) Variable 'i' is not assigned a value. [unassignedVariable]\\n\", errout_str());\n\n        // assume f() can write a\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(a[0]);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // assume f() can write a\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(a[0], 0);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // assume f() can write a\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(0, a[0]);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // assume f() can write a\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(0, a[0], 0);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // f() can not write a (not supported yet)\n        functionVariableUsage(\"void f(const int & i) { }\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(a[0]);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'a' is not assigned a value.\\n\",\n                           \"\", errout_str());\n\n        // f() writes a\n        functionVariableUsage(\"void f(int & i) { }\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(a[0]);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(int * i);\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    f(a+1);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n        // extracttests.enable\n    }\n\n    void localvar3() {\n        functionVariableUsage(\"void foo(int abc)\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    if ( abc )\\n\"\n                              \"        ;\\n\"\n                              \"    else i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:12]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar4() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    f(i);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    f(&i);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar5() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 0;\\n\"\n                              \"    b = (char)a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar6() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int b[10];\\n\"\n                              \"    for (int i=0;i<10;++i)\\n\"\n                              \"        b[i] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:14]: (style) Variable 'b[i]' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int a = 0;\\n\"\n                              \"    int b[10];\\n\"\n                              \"    for (int i=0;i<10;++i)\\n\"\n                              \"        b[i] = ++a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:14]: (style) Variable 'b[i]' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int b[10];\\n\"\n                              \"    for (int i=0;i<10;++i)\\n\"\n                              \"        *(b+i) = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable '*(b+i)' is assigned a value that is never used.\\n\", \"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\" // #11832, #11923\n                              \"    int b;\\n\"\n                              \"    *(&b) = 0;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:11]: (style) Variable '*(&b)' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar8() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i[2];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void * i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:12]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const void * i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:18]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        // extracttests.start: struct A {int x;};\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    A * i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct A * i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:16]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const struct A * i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:22]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", \"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const int * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", \"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", \"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const void * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", \"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct A * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", \"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    const struct A * i[2];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", \"\", errout_str());\n\n        functionVariableUsage(\"void foo(int n)\\n\"\n                              \"{\\n\"\n                              \"    int i[n];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    int &j = i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:12]: (style) Variable 'j' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:3:9]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\",\n                      errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    int &j = i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:12]: (style) Variable 'j' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    int &j = i;\\n\"\n                              \"    j = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'i' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"double foo()\\n\"\n                              \"{\\n\"\n                              \"    double i = 0.0;\\n\"\n                              \"    const double j = i;\\n\"\n                              \"    return j;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    A * i;\\n\"\n                              \"    i->f();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char * i;\\n\"\n                              \"    if (i);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char * i = 0;\\n\"\n                              \"    if (i);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char * i = new char[10];\\n\"\n                              \"    if (i);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char *i;\\n\"\n                              \"    f(i);\\n\"\n                              \"}\");\n\n        functionVariableUsage(\"int a;\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    return &a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *p = a;\\n\"\n                              \"    for (int i = 0; i < 10; i++)\\n\"\n                              \"        p[i] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *p = &a[0];\\n\"\n                              \"    for (int i = 0; i < 10; i++)\\n\"\n                              \"        p[i] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int x;\\n\"\n                              \"    a[0] = 0;\\n\"\n                              \"    x = a[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:7]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        // extracttests.start: int f();\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a, b, c;\\n\"\n                              \"    a = b = c = f();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:7]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:4:11]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:4:15]: (style) Variable 'c' is assigned a value that is never used. [unreadVariable]\\n\",\n                      errout_str());\n\n        functionVariableUsage(\"int * foo()\\n\"\n                              \"{\\n\"\n                              \"    return &undefined[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar9() {\n        // ticket #1605\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    for (int i = 0; i < 10; )\\n\"\n                              \"        a[i++] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:16]: (style) Variable 'a[i++]' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar10() {\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    if (x) {\\n\"\n                              \"        int i;\\n\"\n                              \"    } else {\\n\"\n                              \"        int i;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\"\n                      \"[test.cpp:5:13]: (style) Unused variable: i [unusedVariable]\\n\"\n                      \"[test.cpp:7:13]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    if (x)\\n\"\n                              \"        int i;\\n\"\n                              \"    else\\n\"\n                              \"        int i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\"\n                      \"[test.cpp:5:13]: (style) Unused variable: i [unusedVariable]\\n\"\n                      \"[test.cpp:7:13]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    if (x) {\\n\"\n                              \"        int i;\\n\"\n                              \"    } else {\\n\"\n                              \"        int i = 0;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:7:15]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\"\n                      \"[test.cpp:5:13]: (style) Unused variable: i [unusedVariable]\\n\"\n                      \"[test.cpp:7:13]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n                      errout_str());\n\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int i;\\n\"\n                              \"    if (x) {\\n\"\n                              \"        int i;\\n\"\n                              \"    } else {\\n\"\n                              \"        int i;\\n\"\n                              \"    }\\n\"\n                              \"    i = 1;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:9:7]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:5:13]: (style) Unused variable: i [unusedVariable]\\n\"\n                      \"[test.cpp:7:13]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n    }\n\n    void localvar11() {\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int a = 0;\\n\"\n                              \"    if (x == 1)\\n\"\n                              \"    {\\n\"\n                              \"        a = 123;\\n\"    // redundant assignment\n                              \"        return;\\n\"\n                              \"    }\\n\"\n                              \"    x = a;\\n\"  // redundant assignment\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:11]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:9:7]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        // The variable 'a' is initialized. But the initialized value is\n        // never used. It is only initialized for security reasons.\n        functionVariableUsage(\"void foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    int a = 0;\\n\"\n                              \"    if (x == 1)\\n\"\n                              \"        a = 123;\\n\"\n                              \"    else if (x == 2)\\n\"\n                              \"        a = 456;\\n\"\n                              \"    else\\n\"\n                              \"        return;\\n\"\n                              \"    x = a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:10:7]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar12() {\n        // ticket #1574\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a, b, c, d, e, f;\\n\"\n                              \"    a = b = c = d = e = f = 15;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:4:7]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:11]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:15]: (style) Variable 'c' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:19]: (style) Variable 'd' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:23]: (style) Variable 'e' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:27]: (style) Variable 'f' is assigned a value that is never used. [unreadVariable]\\n\",\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a, b, c = 0;\\n\"\n                              \"    a = b = c;\\n\"\n                              \"\\n\"\n                              \"}\");\n\n        TODO_ASSERT_EQUALS(\n            \"[test.cpp:4:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:7]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3]: (style) Variable 'c' is assigned a value that is never used. [unreadVariable]\\n\",\n\n            \"[test.cpp:4:7]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:11]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\",\n            errout_str());\n    }\n\n    void localvar13() { // ticket #1640\n        // extracttests.start: struct OBJECT { int ySize; };\n        functionVariableUsage(\"void foo( OBJECT *obj )\\n\"\n                              \"{\\n\"\n                              \"    int x;\\n\"\n                              \"    x = obj->ySize / 8;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:7]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar14() {\n        // ticket #5\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: a [unusedVariable]\\n\", errout_str());\n    }\n\n    void localvar15() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 5;\\n\"\n                              \"    int b[a];\\n\"\n                              \"    b[0] = 0;\\n\"\n                              \"    return b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 5;\\n\"\n                              \"    int * b[a];\\n\"\n                              \"    b[0] = &c;\\n\"\n                              \"    return *b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int * foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 5;\\n\"\n                              \"    const int * b[a];\\n\"\n                              \"    b[0] = &c;\\n\"\n                              \"    return b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct B * foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 5;\\n\"\n                              \"    struct B * b[a];\\n\"\n                              \"    b[0] = &c;\\n\"\n                              \"    return b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"const struct B * foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 5;\\n\"\n                              \"    const struct B * b[a];\\n\"\n                              \"    b[0] = &c;\\n\"\n                              \"    return b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar16() { // ticket #1709\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[5];\\n\"\n                              \"    char *ptr = buf;\\n\"\n                              \"    *(ptr++) = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'buf' is assigned a value that is never used.\\n\", \"\", errout_str());\n\n        // #3910\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    char buf[5];\\n\"\n                              \"    char *data[2];\\n\"\n                              \"    data[0] = buf;\\n\"\n                              \"    do_something(data);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    char buf1[5];\\n\"\n                              \"    char buf2[5];\\n\"\n                              \"    char *data[2];\\n\"\n                              \"    data[0] = buf1;\\n\"\n                              \"    data[1] = buf2;\\n\"\n                              \"    do_something(data);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar17() { // ticket #1720\n        // extracttests.disable\n        // Don't crash when checking the code below!\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct DATA *data = DATA;\\n\"\n                              \"    char *k = data->req;\\n\"\n                              \"    char *ptr;\\n\"\n                              \"    char *line_start;\\n\"\n                              \"    ptr = data->buffer;\\n\"\n                              \"    line_start = ptr;\\n\"\n                              \"    data->info = k;\\n\"\n                              \"    line_start = ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:10:16]: (style) Variable 'line_start' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n        // extracttests.enable\n    }\n\n    void localvar18() { // ticket #1723\n        functionVariableUsage(\"A::A(int iValue) {\\n\"\n                              \"    UserDefinedException* pe = new UserDefinedException();\\n\"\n                              \"    throw pe;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar19() { // ticket #1776\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int c;\\n\"\n                              \"    c = *(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:7]: (style) Variable 'c' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:2:9]: (style) Variable 'a' is not assigned a value. [unassignedVariable]\\n\", errout_str());\n    }\n\n    void localvar20() { // ticket #1799\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char c1 = 'c';\\n\"\n                              \"    char c2[] = { c1 };\\n\"\n                              \"    a(c2);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar21() { // ticket #1807\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buffer[1024];\\n\"\n                              \"    bar((void *)buffer);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar22() { // ticket #1811\n        functionVariableUsage(\"int foo(int u, int v)\\n\"\n                              \"{\\n\"\n                              \"    int h, i;\\n\"\n                              \"    h = 0 ? u : v;\\n\"\n                              \"    i = 1 ? u : v;\\n\"\n                              \"    return h + i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar23() { // ticket #1808\n        functionVariableUsage(\"int foo(int c)\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    int b[10];\\n\"\n                              \"    a = b[c] = 0;\\n\"\n                              \"    return a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:14]: (style) Variable 'b[c]' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar24() { // ticket #1803\n        functionVariableUsage(\"class MyException\\n\"\n                              \"{\\n\"\n                              \"    virtual void raise() const\\n\"\n                              \"    {\\n\"\n                              \"        throw *this;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar25() { // ticket #1729\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    int ppos = 1;\\n\"\n                              \"    int pneg = 0;\\n\"\n                              \"    const char*edge = ppos? \\\" +\\\" : pneg ? \\\" -\\\" : \\\"\\\";\\n\"\n                              \"    printf(\\\"This should be a '+' -> %s\\\\n\\\", edge);\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar26() { // ticket #1894\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    const Fred &fred = getfred();\\n\"\n                              \"    int *p = fred.x();\\n\"\n                              \"    *p = 0;\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar27() { // ticket #2160\n        functionVariableUsage(\"void f(struct s *ptr) {\\n\"\n                              \"    int param = 1;\\n\"\n                              \"    ptr->param = param++;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:23]: (style) Variable 'param' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar28() { // ticket #2205\n        functionVariableUsage(\"void f(char* buffer, int value) {\\n\"\n                              \"    char* pos = buffer;\\n\"\n                              \"    int size = value;\\n\"\n                              \"    *(int*)pos = size;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar29() { // ticket #2206\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    float s_ranges[] = { 0, 256 };\\n\"\n                              \"    float* ranges[] = { s_ranges };\\n\"\n                              \"    cout << ranges[0][0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar30() { // ticket #2264\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    Engine *engine = e;\\n\"\n                              \"    x->engine = engine->clone();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar31() { // ticket #2286\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x = 0;\\n\"\n                              \"    a.x = x - b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar32() {\n        // ticket #2330 - fstream >> x\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x;\\n\"\n                              \"    fstream &f = getfile();\\n\"\n                              \"    f >> x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // ticket #4596 - if (c >>= x) {}\n        functionVariableUsage(\"void f(int x) {\\n\"\n                              \"    C c;\\n\" // possibly some stream class\n                              \"    if (c >>= x) {}\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:11]: (information) --check-library: Provide <type-checks><unusedvar> configuration for C [checkLibraryCheckType]\\n\", errout_str());\n\n        functionVariableUsage(\"void f(int x) {\\n\"\n                              \"    C c;\\n\"\n                              \"    if (c >>= x) {}\\n\"\n                              \"}\", dinit(FunctionVariableUsageOptions, $.cpp = false));\n        ASSERT_EQUALS(\"[test.c:3:11]: (style) Variable 'c' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x, y;\\n\"\n                              \"    std::cin >> x >> y;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // ticket #8494\n        functionVariableUsage(\"void f(C c) {\\n\"\n                              \"  int x;\\n\"\n                              \"  c & x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar33() { // ticket #2345\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    Abc* abc = getabc();\\n\"\n                              \"    while (0 != (abc = abc->next())) {\\n\"\n                              \"        ++nOldNum;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar34() { // ticket #2368\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    if (false) {\\n\"\n                              \"    } else {\\n\"\n                              \"        j -= i;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar35() { // ticket #2535\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int a, b;\\n\"\n                              \"    x(1,a,b);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar36() { // ticket #2805\n        functionVariableUsage(\"int f() {\\n\"\n                              \"    int a, b;\\n\"\n                              \"    a = 2 * (b = 3);\\n\"\n                              \"    return a + b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int f() {\\n\" // ticket #4318\n                              \"    int a,b;\\n\"\n                              \"    x(a, b=2);\\n\"  // <- if param2 is passed-by-reference then b might be used in x\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo() {\\n\" // ticket #6147\n                              \"    int a = 0;\\n\"\n                              \"    bar(a=a+2);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo() {\\n\" // ticket #6147\n                              \"    int a = 0;\\n\"\n                              \"    bar(a=2);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"error\", \"\", errout_str());\n\n        functionVariableUsage(\"void bar(int);\\n\"\n                              \"int foo() {\\n\"\n                              \"    int a = 0;\\n\"\n                              \"    bar(a=a+2);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"error\", \"\", errout_str());\n    }\n\n    void localvar37() { // ticket #3078\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int a = 2;\\n\"\n                              \"    ints.at(a) = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar38() {\n        functionVariableUsage(\"std::string f() {\\n\"\n                              \"    const char code[] = \\\"foo\\\";\\n\"\n                              \"    const std::string s1(sizeof_(code));\\n\"\n                              \"    const std::string s2 = sizeof_(code);\\n\"\n                              \"    return(s1+s2);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar39() {\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    foo(x*a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar40() {\n        functionVariableUsage(\"int f() {\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    return x & a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar41() {\n        // #3603 - false positive 'x is assigned a value that is never used'\n        functionVariableUsage(\"int f() {\\n\"\n                              \"    int x = 1;\\n\"\n                              \"    int y = FOO::VALUE * x;\\n\"\n                              \"    return y;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar42() { // #3742\n        functionVariableUsage(\"float g_float = 1;\\n\"\n                              \"extern void SomeTestFunc(float);\\n\"\n                              \"void MyFuncError()\\n\"\n                              \"{\\n\"\n                              \"    const float floatA = 2.2f;\\n\"\n                              \"    const float floatTot = g_float * floatA;\\n\"\n                              \"    SomeTestFunc(floatTot);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"float g_float = 1;\\n\"\n                              \"extern void SomeTestFunc(float);\\n\"\n                              \"void MyFuncNoError()\\n\"\n                              \"{\\n\"\n                              \"    const float floatB = 2.2f;\\n\"\n                              \"    const float floatTot = floatB * g_float;\\n\"\n                              \"    SomeTestFunc(floatTot);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"float g_float = 1;\\n\"\n                              \"extern void SomeTestFunc(float);\\n\"\n                              \"void MyFuncNoError2()\\n\"\n                              \"{\\n\"\n                              \"    const float floatC = 2.2f;\\n\"\n                              \"    float floatTot = g_float * floatC;\\n\"\n                              \"    SomeTestFunc(floatTot);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar43() { // ticket #3602 (false positive)\n        functionVariableUsage(\"void bar()\\n\"\n                              \"{\\n\"\n                              \"    int * piArray = NULL;\\n\"\n                              \"    unsigned int uiArrayLength = 2048;\\n\"\n                              \"    unsigned int uiIndex;\\n\"\n                              \"\\n\"\n                              \"    try\\n\"\n                              \"    {\\n\"\n                              \"        piArray = new int[uiArrayLength];\\n\" // Allocate memory\n                              \"    }\\n\"\n                              \"    catch (...)\\n\"\n                              \"    {\\n\"\n                              \"        SOME_MACRO\\n\"\n                              \"        delete [] piArray;\\n\"\n                              \"        return;\\n\"\n                              \"    }\\n\"\n                              \"    for (uiIndex = 0; uiIndex < uiArrayLength; uiIndex++)\\n\"\n                              \"    {\\n\"\n                              \"        piArray[uiIndex] = -1234;\\n\"\n                              \"    }\\n\"\n                              \"    delete [] piArray;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int f() {\\n\" // #9877\n                              \"    const std::vector<int> x = get();\\n\"\n                              \"    MACRO(2U, x.size())\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar44() { // #4020 - FP\n        functionVariableUsage(\"void func() {\\n\"\n                              \"    int *sp_mem[2] = { global1, global2 };\\n\"\n                              \"    sp_mem[0][3] = 123;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar45() { // #4899 - FP\n        functionVariableUsage(\"int func() {\\n\"\n                              \"    int a = 123;\\n\"\n                              \"    int b = (short)-a;;\\n\"\n                              \"    return b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar46() { // #5491/#5494/#6301\n        functionVariableUsage(\"int func() {\\n\"\n                              \"    int i = 0;\\n\"\n                              \"    int j{i};\\n\"\n                              \"    return j;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(bool b, bool c, double& r) {\\n\"\n                              \"    double d{};\\n\"\n                              \"    if (b) {\\n\"\n                              \"      d = g();\\n\"\n                              \"      r += d;\\n\"\n                              \"    }\\n\"\n                              \"    if (c) {\\n\"\n                              \"      d = h();\\n\"\n                              \"      r += d;\\n\"\n                              \"    }\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int func() {\\n\"\n                              \"    std::mutex m;\\n\"\n                              \"    std::unique_lock<std::mutex> l{ m };\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int func() {\\n\"\n                              \"    std::shared_lock<std::shared_timed_mutex> lock( m );\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\" // #10490\n                              \"    std::shared_lock lock = GetLock();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    auto&& g = std::lock_guard<std::mutex> { mutex };\\n\"\n                              \"}\\n\");\n        TODO_ASSERT_EQUALS(\"\", \"[test.cpp:2:14]: (style) Variable 'g' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    auto a = RAII();\\n\"\n                              \"    auto b { RAII() };\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct RAIIWrapper {\\n\" // #10894\n                              \"    RAIIWrapper();\\n\"\n                              \"    ~RAIIWrapper();\\n\"\n                              \"};\\n\"\n                              \"static void foo() {\\n\"\n                              \"    auto const guard = RAIIWrapper();\\n\"\n                              \"    auto const& guard2 = RAIIWrapper();\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar47() { // #6603\n        // extracttests.disable\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int (SfxUndoManager::*retrieveCount)(bool) const\\n\"\n                              \"        = (flag) ? &SfxUndoManager::foo : &SfxUndoManager::bar;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Variable 'retrieveCount' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n        // extracttests.enable\n    }\n\n    void localvar48() { // #6954\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"  long (*pKoeff)[256] = new long[9][256];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar49() { // #7594\n        functionVariableUsage(\"class A {\\n\"\n                              \"    public:\\n\"\n                              \"        typedef enum { ID1,ID2,ID3 } Id_t;\\n\"\n                              \"        typedef struct {Id_t id; std::string a; } x_t;\\n\"\n                              \"        std::vector<x_t> m_vec;\\n\"\n                              \"        std::vector<x_t> Get(void);\\n\"\n                              \"        void DoSomething();\\n\"\n                              \"};\\n\"\n                              \"std::vector<A::x_t> A::Get(void) {\\n\"\n                              \"    return m_vec;\\n\"\n                              \"}\\n\"\n                              \"const std::string Bar() {\\n\"\n                              \"    return \\\"x\\\";\\n\"\n                              \"}\\n\"\n                              \"void A::DoSomething(void) {\\n\"\n                              \"    const std::string x = Bar();\\n\"  // <- warning\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:16:25]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:16:23]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n    }\n\n    void localvar50() { // #6261, #6542\n        // #6261 - ternary operator in function call\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"  char buf1[10];\\n\"\n                              \"  dostuff(cond?buf1:buf2);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"  char buf1[10];\\n\"\n                              \"  dostuff(cond?buf2:buf1);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // #6542 - ternary operator\n        functionVariableUsage(\"void foo(int c) {\\n\"\n                              \"  char buf1[10], buf2[10];\\n\"\n                              \"  char *p = c ? buf1 : buf2;\\n\"\n                              \"  dostuff(p);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar51() { // #8128 FN\n        // extracttests.start: struct Token { const Token* next() const; }; const Token* nameToken();\n        functionVariableUsage(\"void foo(const Token *var) {\\n\"\n                              \"  const Token *tok = nameToken();\\n\"\n                              \"  tok = tok->next();\\n\"  // read+write\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:7]: (style) Variable 'tok' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"  int x = 4;\\n\"\n                              \"  x = 15 + x;\\n\"  // read+write\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:5]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar52() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"  std::vector<int> data;\\n\"\n                              \"  data[2] = 32;\\n\"\n                              \"  return data;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar53() {\n        functionVariableUsage(\"void foo(int a, int loop) {\\n\"\n                              \"  bool x = false;\\n\"\n                              \"  while (loop) {\\n\"\n                              \"    if (a) {\\n\"\n                              \"      x = true;\\n\" // unused value\n                              \"      continue;\\n\"\n                              \"    }\\n\"\n                              \"  }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo(int a, int loop) {\\n\"\n                              \"  bool x = false;\\n\"\n                              \"  while (loop) {\\n\"\n                              \"    if (a) {\\n\"\n                              \"      x = true;\\n\"\n                              \"      continue;\\n\"\n                              \"    }\\n\"\n                              \"  }\\n\"\n                              \"  return x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar54() {\n        functionVariableUsage(\"Padding fun() {\\n\"\n                              \"  Distance d = DISTANCE;\\n\"\n                              \"  return (Padding){ d, d, d, d };\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar55() {\n        functionVariableUsage(\"void f(int mode) {\\n\"\n                              \"    int x = 0;\\n\" // <- redundant assignment\n                              \"\\n\"\n                              \"    for (int i = 0; i < 10; i++) {\\n\"\n                              \"        if (mode == 0x04)\\n\"\n                              \"            x = 0;\\n\" // <- redundant assignment\n                              \"        if (mode == 0x0f) {\\n\"\n                              \"            x = address;\\n\"\n                              \"            data[x] = 0;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:11]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:6:15]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\",\n                      errout_str());\n    }\n\n    void localvar56() {\n        functionVariableUsage(\"void f()\\n\"\n                              \"{\\n\"\n                              \"    int x = 31;\\n\"\n                              \"    mask[x] |= 123;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar57() {\n        functionVariableUsage(\"void f()\\n\"\n                              \"{\\n\"\n                              \"    int x = 0;\\n\"\n                              \"    x++;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:6]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar58() { // #9901 - increment false positive\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x = 0;\\n\"\n                              \"    if (--x > 0) {}\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    int x = 0;\\n\"\n                              \"    if (x-- > 0) {}\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar59() { // #9737\n        functionVariableUsage(\"Response foo() {\\n\"\n                              \"    const std::vector<char> cmanifest = z;\\n\"\n                              \"    return {.a = cmanifest, .b =0};\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar60() {\n        functionVariableUsage(\"void Scale(double scale) {\\n\" // #10531\n                              \"    for (int i = 0; i < m_points.size(); ++i) {\\n\"\n                              \"        auto& p = m_points[i];\\n\"\n                              \"        p += scale;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo(int c[]) {\\n\" // #10597\n                              \"    int& cc = c[0];\\n\"\n                              \"    cc &= ~0xff;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar61() { // #9407\n        functionVariableUsage(\"void g(int& i);\\n\"\n                              \"void f() {\\n\"\n                              \"    int var = 0;\\n\"\n                              \"    g(var);\\n\"\n                              \"    var = 2;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:5:9]: (style) Variable 'var' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar62() {\n        functionVariableUsage(\"void f() {\\n\" // #10824\n                              \"    S* s = nullptr;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:8]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    S* s{};\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:9]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"int f() {\\n\"\n                              \"    int i = 0, j = 1;\\n\"\n                              \"    return i;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\n            \"[test.cpp:2:18]: (style) Variable 'j' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:2:16]: (style) Variable 'j' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"int f() {\\n\"\n                              \"    int i = 0, j = 1;\\n\"\n                              \"    return j;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\n            \"[test.cpp:2:11]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:2:9]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void f() {\\n\" // #10846\n                              \"    int i = 1; while (i) { i = g(); }\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar63() { // #6928\n        functionVariableUsage(\"void f(void) {\\n\"\n                              \"  int x=3;\\n\"             // <- set but not used\n                              \"  goto y;\\n\"\n                              \"  y:return;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:7]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar64() { // #9997\n        functionVariableUsage(\"class S {\\n\"\n                              \"    ~S();\\n\"\n                              \"    S* f();\\n\"\n                              \"    S* g(int);\\n\"\n                              \"};\\n\"\n                              \"void h(S* s, bool b) {\\n\"\n                              \"    S* p = nullptr;\\n\"\n                              \"    S* q = nullptr;\\n\"\n                              \"    if (b) {\\n\"\n                              \"        p = s;\\n\"\n                              \"        q = s->f()->g(-2);\\n\"\n                              \"    }\\n\"\n                              \"    else\\n\"\n                              \"        q = s;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:10:11]: (style) Variable 'p' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:11:11]: (style) Variable 'q' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:14:11]: (style) Variable 'q' is assigned a value that is never used. [unreadVariable]\\n\",\n                      errout_str());\n    }\n\n    void localvar65() {\n        functionVariableUsage(\"bool b();\\n\" // #9876\n                              \"void f() {\\n\"\n                              \"    for (;;) {\\n\"\n                              \"        const T* t = tok->next()->link()->next();\\n\"\n                              \"        if (!b())\\n\"\n                              \"            continue;\\n\"\n                              \"    }\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:4:18]: (style) Variable 't' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\" // #10006\n                              \"    std::string s = \\\"\\\";\\n\"\n                              \"    try {}\\n\"\n                              \"    catch (...) {}\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:17]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvar66() { // #11143\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    double phi = 42.0;\\n\"\n                              \"    std::cout << pow(sin(phi), 2) + pow(cos(phi), 2) << std::endl;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar67() { // #9946\n        functionVariableUsage(\"struct B {\\n\"\n                              \"    virtual ~B() {}\\n\"\n                              \"    bool operator() () const { return true; }\\n\"\n                              \"    virtual bool f() const = 0;\\n\"\n                              \"};\\n\"\n                              \"class D : B {\\n\"\n                              \"public:\\n\"\n                              \"    bool f() const override { return false; }\\n\"\n                              \"};\\n\"\n                              \"void f1() {\\n\"\n                              \"    const D d1;\\n\"\n                              \"    d1.f();\\n\"\n                              \"}\\n\"\n                              \"void f2() {\\n\"\n                              \"    const D d2;\\n\"\n                              \"    d2();\\n\"\n                              \"        B() {}\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar68() {\n        checkFunctionVariableUsageP(\"#define X0 int x = 0\\n\"\n                                    \"void f() { X0; }\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        checkFunctionVariableUsageP(\"#define X0 int (*x)(int) = 0\\n\"\n                                    \"void f() { X0; }\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar69() {\n        functionVariableUsage(\"int g();\\n\" // #11063\n                              \"int h(int);\\n\"\n                              \"int f() {\\n\"\n                              \"    int i = g();\\n\"\n                              \"    return (::h)(i);\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar70() {\n        functionVariableUsage(\"struct S { int i = 0; };\\n\" // #12176\n                              \"void f(S s) {\\n\"\n                              \"    S s1;\\n\"\n                              \"    if (s == s1) {}\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvar71() {\n        functionVariableUsage(\"struct A { explicit A(int i); };\\n\" // #12363\n                              \"void f() { A a(0); }\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarloops() {\n        // loops\n        functionVariableUsage(\"void fun(int c) {\\n\"\n                              \"  int x;\\n\"\n                              \"  while (c) { x=10; }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:16]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void dostuff(int x);\\n\"\n                              \"void fun(int y, int c) {\\n\"\n                              \"  int x = 1;\\n\"\n                              \"  while (c) {\\n\"\n                              \"    dostuff(x);\\n\"\n                              \"    if (y) { x=10; break; }\\n\"\n                              \"  }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:15]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void dostuff(int &x);\\n\"\n                              \"void fun() {\\n\"\n                              \"  int x = 1;\\n\"\n                              \"  while (c) {\\n\"\n                              \"    dostuff(x);\\n\"\n                              \"    if (y) { x=10; break; }\\n\"\n                              \"  }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:15]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void fun() {\\n\"\n                              \"  int x = 0;\\n\"\n                              \"  while (c) {\\n\"\n                              \"    dostuff(x);\\n\"\n                              \"    x = 10;\\n\"\n                              \"  }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void fun() {\\n\"\n                              \"  int x = 0;\\n\"\n                              \"  while (x < 10) { x = x + 1; }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void fun()\\n\"\n                              \"{\\n\"\n                              \"    int   status = 0;\\n\"\n                              \"    for (ind = 0; ((ind < nrArgs) && (status < 10)); ind++)\\n\"\n                              \"        status = x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f()\\n\"\n                              \"{\\n\"\n                              \"    int sum = 0U;\\n\"\n                              \"    for (i = 0U; i < 2U; i++)\\n\"\n                              \"        sum += 123;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:13]: (style) Variable 'sum' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:5:13]: (style) Variable 'sum' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f(int c) {\\n\" // #7908\n                              \"    int b = 0;\\n\"\n                              \"    while (g()) {\\n\"\n                              \"        int a = c;\\n\"\n                              \"        b = a;\\n\"\n                              \"        if (a == 4)\\n\"\n                              \"            a = 5;\\n\"\n                              \"    }\\n\"\n                              \"    h(b);\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:7:15]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f(const std::vector<int>& v) {\\n\"\n                              \"    while (g()) {\\n\"\n                              \"        const std::vector<int>& v2 = h();\\n\"\n                              \"        if (std::vector<int>{ 1, 2, 3 }.size() > v2.size()) {}\\n\"\n                              \"    }\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(const std::vector<int>& v) {\\n\"\n                              \"    while (g()) {\\n\"\n                              \"        const std::vector<int>& v2 = h();\\n\"\n                              \"        if (std::vector<int>({ 1, 2, 3 }).size() > v2.size()) {}\\n\"\n                              \"    }\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(const std::string &c) {\\n\"\n                              \"    std::string s = str();\\n\"\n                              \"    if (s[0] == '>')\\n\"\n                              \"        s[0] = '<';\\n\"\n                              \"    if (s == c) {}\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(bool b) {\\n\"\n                              \"    std::map<std::string, std::vector<std::string>> m;\\n\"\n                              \"    if (b) {\\n\"\n                              \"        const std::string n = g();\\n\"\n                              \"        std::vector<std::string> c = h();\\n\"\n                              \"        m[n] = c;\\n\"\n                              \"    }\\n\"\n                              \"    j(m);\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct S { int i; };\\n\"\n                              \"S f(S s, bool b) {\\n\"\n                              \"    if (b)\\n\"\n                              \"        s.i = 1;\\n\"\n                              \"    return s;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias1() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:12]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:3:9]: (style) Unused variable: a [unusedVariable]\\n\"\n                      \"[test.cpp:4:10]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n                      errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int *b = a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:12]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:3:9]: (style) Unused variable: a [unusedVariable]\\n\"\n                      \"[test.cpp:4:10]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n                      errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    char *b = (char *)&a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    char *b = (char *)(&a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    const char *b = (const char *)&a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    const char *b = (const char *)(&a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    char *b = static_cast<char *>(&a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    const char *b = static_cast<const char *>(&a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        // a is not a local variable and b is aliased to it\n        functionVariableUsage(\"int a;\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:4:12]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:10]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        // a is not a local variable and b is aliased to it\n        functionVariableUsage(\"void foo(int a)\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:12]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:10]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        // a is not a local variable and b is aliased to it\n        functionVariableUsage(\"class A\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    void foo()\\n\"\n                              \"    {\\n\"\n                              \"        int *b = &a;\\n\"\n                              \"    }\\n\"\n                              \"};\");\n        ASSERT_EQUALS(\n            \"[test.cpp:6:16]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:6:14]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"int a;\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo(int a)\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"class A\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    void foo()\\n\"\n                              \"    {\\n\"\n                              \"        int *b = &a;\\n\"\n                              \"        *b = 0;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    char *b = (char *)a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    char *b = (char *)(a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    const char *b = (const char *)a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    const char *b = (const char *)(a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    char *b = static_cast<char *>(a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    const char *b = static_cast<const char *>(a);\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int *c = b;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int *c = b;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int *c = b;\\n\"\n                              \"    *c = b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // extracttests.start: int a[10];\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int c = b[0];\\n\"\n                              \"    x(c);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int c = b[0];\\n\"\n                              \"    x(c);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a[0];\\n\"\n                              \"    a[0] = b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = &a[0];\\n\"\n                              \"    a[0] = b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    a[0] = b[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo(int a[10])\\n\"\n                              \"{\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    *b = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"class A\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    void foo()\\n\"\n                              \"    {\\n\"\n                              \"        int *b = a;\\n\"\n                              \"        *b = 0;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int *b = a;\\n\"\n                              \"    int *c = b;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'a' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int b[10];\\n\"\n                              \"    int *c = a;\\n\"\n                              \"    int *d = b;\\n\"\n                              \"    *d = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:12]: (style) Variable 'c' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:3:9]: (style) Unused variable: a [unusedVariable]\\n\"\n                      \"[test.cpp:5:10]: (style) Variable 'c' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n                      errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int b[10];\\n\"\n                              \"    int *c = a;\\n\"\n                              \"    c = b;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Unused variable: a [unusedVariable]\\n\",\n                      errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10];\\n\"\n                              \"    int b[10];\\n\"\n                              \"    int *c = a;\\n\"\n                              \"    c = b;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"    c = a;\\n\"\n                              \"    *c = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:9]: (style) Variable 'a' is assigned a value that is never used.\\n\"\n                           \"[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10], * b = a + 10;\\n\"\n                              \"    b[-10] = 1;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:4]: (style) Variable 'b[-10]' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10], * b = a + 10;\\n\"\n                              \"    b[-10] = 0;\\n\"\n                              \"    int * c = b - 10;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\n            \"[test.cpp:4:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\",\n            \"[test.cpp:5:13]: (style) Variable 'c' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:5:11]: (style) Variable 'c' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10], * b = a + 10;\\n\"\n                              \"    int * c = b - 10;\\n\"\n                              \"    c[1] = 3;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'c[1]' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a[10], * b = a + 10;\\n\"\n                              \"    int * c = b - 10;\\n\"\n                              \"    c[1] = c[0];\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'c[1]' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\" // #4022 - FP (a is assigned a value that is never used)\n                              \"    int a[2], *b[2];\\n\"\n                              \"    a[0] = 123;\\n\"\n                              \"    b[0] = &a[0];\\n\"\n                              \"    int *d = b[0];\\n\"\n                              \"    return *d;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\" // #4022 - FP (a is assigned a value that is never used)\n                              \"    entry a[2], *b[2];\\n\"\n                              \"    a[0].value = 123;\\n\"\n                              \"    b[0] = &a[0];\\n\"\n                              \"    int d = b[0].value;\\n\"\n                              \"    return d;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct S { char c[100]; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[100];\\n\"\n                              \"    struct S * s = (struct S *)a;\\n\"\n                              \"    s->c[0] = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct S { char c[100]; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[100];\\n\"\n                              \"    struct S * s = (struct S *)a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:18]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:4:10]: (style) Unused variable: a [unusedVariable]\\n\"\n                      \"[test.cpp:5:16]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n                      errout_str());\n\n        functionVariableUsage(\"struct S { char c[100]; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[100];\\n\"\n                              \"    const struct S * s = (const struct S *)a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:24]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:4:10]: (style) Unused variable: a [unusedVariable]\\n\"\n                      \"[test.cpp:5:22]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n                      errout_str());\n\n        functionVariableUsage(\"struct S { char c[100]; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[100];\\n\"\n                              \"    struct S * s = static_cast<struct S *>(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:18]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:4:10]: (style) Unused variable: a [unusedVariable]\\n\"\n                      \"[test.cpp:5:16]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n                      errout_str());\n\n        functionVariableUsage(\"struct S { char c[100]; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[100];\\n\"\n                              \"    const struct S * s = static_cast<const struct S *>(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:24]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:4:10]: (style) Unused variable: a [unusedVariable]\\n\"\n                      \"[test.cpp:5:22]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n                      errout_str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int b[10];\\n\"\n                              \"    int c[10];\\n\"\n                              \"    int *d;\\n\"\n                              \"    d = b;\\n\"\n                              \"    d = a;\\n\"\n                              \"    d = c;\\n\"\n                              \"    *d = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:9]: (style) Unused variable: b [unusedVariable]\\n\",\n                      errout_str());\n\n        functionVariableUsage(\"int a[10];\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int b[10];\\n\"\n                              \"    int c[10];\\n\"\n                              \"    int *d;\\n\"\n                              \"    d = b; *d = 0;\\n\"\n                              \"    d = a; *d = 0;\\n\"\n                              \"    d = c; *d = 0;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:7]: (style) Variable 'b' is assigned a value that is never used.\\n\"\n                           \"[test.cpp:9]: (style) Variable 'c' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n    }\n\n    void localvaralias2() { // ticket 1637\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * a;\\n\"\n                              \"    x(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias3() { // ticket 1639\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    BROWSEINFO    info;\\n\"\n                              \"    char          szDisplayName[MAX_PATH];\\n\"\n                              \"    info.pszDisplayName = szDisplayName;\\n\"\n                              \"    SHBrowseForFolder(&info);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias4() { // ticket 1643\n        functionVariableUsage(\"struct AB { int a; int b; } ab;\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * a = &ab.a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:4:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:11]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"struct AB { int a; int b; } ab;\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int * a = &ab.a;\\n\"\n                              \"    *a = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct AB { int a; int b; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct AB ab;\\n\"\n                              \"    int * a = &ab.a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:13]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:4:15]: (style) Variable 'ab' is not assigned a value. [unassignedVariable]\\n\"\n                      \"[test.cpp:5:11]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n                      errout_str());\n\n        functionVariableUsage(\"struct AB { int a; int b; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct AB ab;\\n\"\n                              \"    int * a = &ab.a;\\n\"\n                              \"    *a = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias5() { // ticket 1647\n        functionVariableUsage(\"char foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *p = &buf[0];\\n\"\n                              \"    *p++ = 0;\\n\"\n                              \"    return buf[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"char foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *p = &buf[1];\\n\"\n                              \"    *p-- = 0;\\n\"\n                              \"    return buf[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"char foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *p = &buf[0];\\n\"\n                              \"    *++p = 0;\\n\"\n                              \"    return buf[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"char foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *p = &buf[1];\\n\"\n                              \"    *--p = 0;\\n\"\n                              \"    return buf[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias6() { // ticket 1729\n        // extracttests.start: int a(); void b(const char *);\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    } else {\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'buf' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = vdata;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:6]: (style) Variable 'buf' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo(char *vdata)\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = vdata;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style) Unused variable: buf [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = buf;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    char vdata[8];\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    } else {\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    char vdata[8];\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:7]: (style) Variable 'buf' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    char vdata[8];\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        buf[0] = 1;\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = vdata;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:7]: (style) Variable 'buf' is assigned a value that is never used.\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    char vdata[8];\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        srcdata = buf;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = vdata;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style) Unused variable: buf [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char buf[8];\\n\"\n                              \"    char *srcdata;\\n\"\n                              \"    char vdata[8];\\n\"\n                              \"    if (a()) {\\n\"\n                              \"        srcdata = vdata;\\n\"\n                              \"    }\\n\"\n                              \"    srcdata = buf;\\n\"\n                              \"    b(srcdata);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:10]: (style) Unused variable: vdata [unusedVariable]\\n\", errout_str());\n    }\n\n    void localvaralias7() { // ticket 1732\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char *c[10];\\n\"\n                              \"    char **cp;\\n\"\n                              \"    cp = c;\\n\"\n                              \"    *cp = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias8() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else if (a == 2)\\n\"\n                              \"        pb = b2;\\n\"\n                              \"    else if (a == 3)\\n\"\n                              \"        pb = b3;\\n\"\n                              \"    else\\n\"\n                              \"        pb = b4;\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else if (a == 2)\\n\"\n                              \"        pb = b2;\\n\"\n                              \"    else if (a == 3)\\n\"\n                              \"        pb = b3;\\n\"\n                              \"    else {\\n\"\n                              \"        pb = b1;\\n\"\n                              \"        pb = b4;\\n\"\n                              \"    }\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else if (a == 2)\\n\"\n                              \"        pb = b2;\\n\"\n                              \"    else if (a == 3)\\n\"\n                              \"        pb = b3;\\n\"\n                              \"    else {\\n\"\n                              \"        pb = b1;\\n\"\n                              \"        pb = b2;\\n\"\n                              \"        pb = b3;\\n\"\n                              \"        pb = b4;\\n\"\n                              \"    }\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else if (a == 2)\\n\"\n                              \"        pb = b2;\\n\"\n                              \"    else if (a == 3)\\n\"\n                              \"        pb = b3;\\n\"\n                              \"    pb = b4;\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style) Unused variable: b1 [unusedVariable]\\n\"\n                      \"[test.cpp:4:10]: (style) Unused variable: b2 [unusedVariable]\\n\"\n                      \"[test.cpp:5:10]: (style) Unused variable: b3 [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else {\\n\"\n                              \"        if (a == 2)\\n\"\n                              \"            pb = b2;\\n\"\n                              \"        else {\\n\"\n                              \"            if (a == 3)\\n\"\n                              \"                pb = b3;\\n\"\n                              \"            else\\n\"\n                              \"                pb = b4;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else {\\n\"\n                              \"        if (a == 2)\\n\"\n                              \"            pb = b2;\\n\"\n                              \"        else {\\n\"\n                              \"            if (a == 3)\\n\"\n                              \"                pb = b3;\\n\"\n                              \"            else {\\n\"\n                              \"                pb = b1;\\n\"\n                              \"                pb = b4;\\n\"\n                              \"            }\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else {\\n\"\n                              \"        if (a == 2)\\n\"\n                              \"            pb = b2;\\n\"\n                              \"        else {\\n\"\n                              \"            if (a == 3)\\n\"\n                              \"                pb = b3;\\n\"\n                              \"            else {\\n\"\n                              \"                pb = b1;\\n\"\n                              \"                pb = b2;\\n\"\n                              \"                pb = b3;\\n\"\n                              \"                pb = b4;\\n\"\n                              \"            }\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char b1[8];\\n\"\n                              \"    char b2[8];\\n\"\n                              \"    char b3[8];\\n\"\n                              \"    char b4[8];\\n\"\n                              \"    char *pb;\\n\"\n                              \"    if (a == 1)\\n\"\n                              \"        pb = b1;\\n\"\n                              \"    else {\\n\"\n                              \"        if (a == 2)\\n\"\n                              \"            pb = b2;\\n\"\n                              \"        else {\\n\"\n                              \"            if (a == 3)\\n\"\n                              \"                pb = b3;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"    pb = b4;\\n\"\n                              \"    b(pb);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style) Unused variable: b1 [unusedVariable]\\n\"\n                      \"[test.cpp:4:10]: (style) Unused variable: b2 [unusedVariable]\\n\"\n                      \"[test.cpp:5:10]: (style) Unused variable: b3 [unusedVariable]\\n\", errout_str());\n    }\n\n    void localvaralias9() { // ticket 1996\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Foo foo;\\n\"\n                              \"    Foo &ref = foo;\\n\"\n                              \"    ref[0] = 123;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias10() { // ticket 2004\n        functionVariableUsage(\"void foo(Foo &foo)\\n\"\n                              \"{\\n\"\n                              \"    Foo &ref = foo;\\n\"\n                              \"    int *x = &ref.x();\\n\"\n                              \"    *x = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias11() { // #4423 - iterator\n        functionVariableUsage(\"void f(Foo &foo) {\\n\"\n                              \"    std::set<int>::iterator x = foo.dostuff();\\n\"\n                              \"    *(x) = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias12() { // #4394\n        functionVariableUsage(\"void f(void) {\\n\"\n                              \"    int a[4];\\n\"\n                              \"    int *b = (int*)((int*)a+1);\\n\"\n                              \"    x(b);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int f(void) {\\n\" // #4628\n                              \"    int x=1,y;\\n\"\n                              \"    y = (x * a) / 100;\\n\"\n                              \"    return y;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias13() { // #4487\n        functionVariableUsage(\"void f(char *p) {\\n\"\n                              \"    char a[4];\\n\"\n                              \"    p = a;\\n\"\n                              \"    strcpy(p, \\\"x\\\");\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(char *p) {\\n\"\n                              \"    char a[4];\\n\"\n                              \"    p = a;\\n\"\n                              \"    strcpy(p, \\\"x\\\");\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"a is assigned value that is never used\", \"\", errout_str());\n    }\n\n    void localvaralias14() { // #5619\n        functionVariableUsage(\"char * dostuff(char *p);\\n\"\n                              \"void f() {\\n\"\n                              \"    char a[4], *p=a;\\n\"\n                              \"    p = dostuff(p);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:7]: (style) Variable 'p' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"char * dostuff(char *&p);\\n\"\n                              \"void f() {\\n\"\n                              \"    char a[4], *p=a;\\n\"\n                              \"    p = dostuff(p);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str()); // TODO: we can warn in this special case; variable is local and there are no function calls after the assignment\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    char a[4], *p=a;\\n\"\n                              \"    p = dostuff(p);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str()); // TODO: we can warn in this special case; variable is local and there are no function calls after the assignment\n    }\n\n    void localvaralias15() { // #6315\n        functionVariableUsage(\"void f() {\\n\"\n                              \"  int x=3;\\n\"\n                              \"  int *p = &x;\\n\"\n                              \"  int *p2[1] = {p};\\n\"\n                              \"  dostuff(p2);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias16() {\n        functionVariableUsage(\"void f() {\\n\"\n                              \"  auto x = dostuff();\\n\"\n                              \"  p = x;\\n\"\n                              \"  x->data[0] = 9;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias17() {\n        functionVariableUsage(\"void f() {\\n\"\n                              \"  int x;\\n\"\n                              \"  unknown_type p = &x;\\n\"\n                              \"  *p = 9;\\n\"\n                              \"}\", dinit(FunctionVariableUsageOptions, $.cpp = false));\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias18() {\n        functionVariableUsage(\"void add( std::vector< std::pair< int, double > >& v)\\n\"\n                              \"{\\n\"\n                              \"    std::vector< std::pair< int, double > >::iterator it;\\n\"\n                              \"    for ( it = v.begin(); it != v.end(); ++it )\\n\"\n                              \"    {\\n\"\n                              \"        if ( x )\\n\"\n                              \"        {\\n\"\n                              \"            ( *it ).second = 0;\\n\"\n                              \"            break;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias19() { // #9828\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    bool b0{}, b1{};\\n\"\n                              \"    struct {\\n\"\n                              \"        bool* pb;\\n\"\n                              \"        int val;\\n\"\n                              \"    } Map[] = { {&b0, 0}, {&b1, 1} };\\n\"\n                              \"    b0 = true;\\n\"\n                              \"    for (auto & m : Map)\\n\"\n                              \"        if (m.pb && *m.pb)\\n\"\n                              \"            m.val = 1;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias20() { // #10966\n        functionVariableUsage(\"struct A {};\\n\"\n                              \"A g();\\n\"\n                              \"void f() {\\n\"\n                              \"    const auto& a = g();\\n\"\n                              \"    const auto& b = a;\\n\"\n                              \"    const auto&& c = g();\\n\"\n                              \"    auto&& d = c;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:5:19]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:7:14]: (style) Variable 'd' is assigned a value that is never used. [unreadVariable]\\n\",\n                      errout_str());\n    }\n\n    void localvaralias21() { // #11728\n        functionVariableUsage(\"void f(int i) {\\n\"\n                              \"    bool b = true;\\n\"\n                              \"    bool* p = &b;\\n\"\n                              \"    int j{};\\n\"\n                              \"    if (i)\\n\"\n                              \"        b = false;\\n\"\n                              \"    if (*p) {}\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:4:10]: (style) Variable 'j' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvaralias22() { // #11139\n        functionVariableUsage(\"int f() {\\n\"\n                              \"    int x[1], *p = x;\\n\"\n                              \"    x[0] = 42;\\n\"\n                              \"    return *p;\\n\"\n                              \"}\\n\"\n                              \"int g() {\\n\"\n                              \"    int x[1], *p{ x };\\n\"\n                              \"    x[0] = 42;\\n\"\n                              \"    return *p;\\n\"\n                              \"}\\n\"\n                              \"int h() {\\n\"\n                              \"    int x[1], *p(x);\\n\"\n                              \"    x[0] = 42;\\n\"\n                              \"    return *p;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvaralias23() { // #11817\n        functionVariableUsage(\"void f(int& r, bool a, bool b) {\\n\"\n                              \"    int& e = r;\\n\"\n                              \"    if (a)\\n\"\n                              \"        e = 42;\\n\"\n                              \"    else if (b)\\n\"\n                              \"        e = 1;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarasm() {\n\n        functionVariableUsage(\"void foo(int &b)\\n\"\n                              \"{\\n\"\n                              \"    int a;\\n\"\n                              \"    asm();\\n\"\n                              \"    b = a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarStruct1() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static const struct{ int x, y, w, h; } bounds = {1,2,3,4};\\n\"\n                              \"    return bounds.x + bounds.y + bounds.w + bounds.h;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarStruct2() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct ABC { int a, b, c; };\\n\"\n                              \"    struct ABC abc = { 1, 2, 3 };\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:4:20]: (style) Variable 'abc' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:4:16]: (style) Variable 'abc' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n    }\n\n    void localvarStruct3() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 10;\\n\"\n                              \"    union { struct { unsigned char x; }; unsigned char z; };\\n\"\n                              \"    do {\\n\"\n                              \"        func();\\n\"\n                              \"    } while(a--);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:4]: (style) Unused variable: x\\n\"\n                           \"[test.cpp:4]: (style) Unused variable: z\\n\", \"\", errout_str());\n    }\n\n    void localvarStruct5() {\n        // extracttests.disable\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return a.i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\\n\",\n                              dinit(FunctionVariableUsageOptions, $.cpp = false));\n        ASSERT_EQUALS(\"[test.c:2:7]: (style) Unused variable: a [unusedVariable]\\n\", errout_str());\n        // extracttests.enable\n\n        functionVariableUsage(\"struct A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return a.i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    a.i = 0;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:9]: (style) Variable 'a.i' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"struct A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a = { 0 };\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:9]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:7]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        // extracttests.disable\n        functionVariableUsage(\"class A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a = { 0 };\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:9]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:7]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        // extracttests.enable\n        functionVariableUsage(\"class A { int i; public: A(); { } };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:7]: (style) Unused variable: a [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"class A { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:7]: (style) Unused variable: a [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"class A { int i; public: A(); { } };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"class A { unknown i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"class A : public Fred { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"class Fred {char c;};\\n\"\n                              \"class A : public Fred { int i; };\\n\"\n                              \"int foo() {\\n\"\n                              \"    A a;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:7]: (style) Unused variable: a [unusedVariable]\\n\", errout_str());\n    }\n\n    void localvarStruct6() {\n        functionVariableUsage(\"class Type { };\\n\"\n                              \"class A {\\n\"\n                              \"public:\\n\"\n                              \"    Type & get() { return t; }\\n\"\n                              \"private:\\n\"\n                              \"    Type t;\\n\"\n                              \"};\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarStruct7() {\n        functionVariableUsage(\"struct IMAPARG {\\n\"\n                              \"  void *text;\\n\"\n                              \"};\\n\"\n                              \"\\n\"\n                              \"void fun() {\\n\"\n                              \"  IMAPARG *args, aatt;\\n\"\n                              \"  args = &aatt;\\n\"\n                              \"  aatt.text = tmp;\\n\"\n                              \"  dostuff(args);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // extracttests.start: void dostuff(int*);\n        functionVariableUsage(\"struct ARG {\\n\"\n                              \"  int a;\\n\"\n                              \"  int b;\\n\"\n                              \"};\\n\"\n                              \"\\n\"\n                              \"void fun() {\\n\"\n                              \"  ARG aatt;\\n\"\n                              \"  int *p = &aatt.b;\\n\"\n                              \"  aatt.a = 123;\\n\"\n                              \"  dostuff(p);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:9:10]: (style) Variable 'aatt.a' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"struct AB {\\n\"\n                              \"  int a;\\n\"\n                              \"  int b;\\n\"\n                              \"};\\n\"\n                              \"\\n\"\n                              \"void fun() {\\n\"\n                              \"  AB ab;\\n\"\n                              \"  int &a = ab.a;\\n\"\n                              \"  ab.a = 123;\\n\"\n                              \"  dostuff(a);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarStruct8() {\n        functionVariableUsage(\"struct s {\\n\"\n                              \"     union {\\n\"\n                              \"         struct {\\n\"\n                              \"             int fld1 : 16;\\n\"\n                              \"             int fld2 : 16;\\n\"\n                              \"         };\\n\"\n                              \"         int raw;\\n\"\n                              \"     };\\n\"\n                              \"};\\n\"\n                              \"\\n\"\n                              \"void foo() {\\n\"\n                              \"      struct s test;\\n\"\n                              \"      test.raw = 0x100;\\n\"\n                              \"      dostuff(test.fld1, test.fld2);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarStruct9() {\n        functionVariableUsage(\"struct XY { int x; int y; };\\n\"\n                              \"\\n\"\n                              \"void foo() {\\n\"\n                              \"      struct XY xy(get());\\n\"\n                              \"      return xy.x + xy.y;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarStruct10() { // #6766\n        functionVariableUsage(\"struct S { int x; };\\n\"\n                              \"\\n\"\n                              \"void foo(const struct S s2) {\\n\"\n                              \"    struct S s;\\n\"\n                              \"    s.x = 3;\\n\"\n                              \"    memcpy (&s, &s2, sizeof (S));\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:9]: (style) Variable 's.x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvarStruct11() { // #10095\n        functionVariableUsage(\"struct Point { int x; int y; };\\n\"\n                              \"Point scale(Point *p);\\n\"\n                              \"\\n\"\n                              \"int foo() {\\n\"\n                              \"    Point p;\\n\"\n                              \"    p.x = 42;\\n\"\n                              \"    return scale(&p).y;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarStruct12() { // #10495\n        functionVariableUsage(\"struct S { bool& Ref(); };\\n\"\n                              \"\\n\"\n                              \"void Set() {\\n\"\n                              \"    S s;\\n\"\n                              \"    s.Ref() = true;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarStruct13() { // #10398\n        functionVariableUsage(\"int f() {\\n\"\n                              \"    std::vector<std::string> Mode;\\n\"\n                              \"    Info Block = {\\n\"\n                              \"        {\\n\"\n                              \"            { &Mode  },\\n\"\n                              \"            { &Level }\\n\"\n                              \"        }\\n\"\n                              \"    };\\n\"\n                              \"    Mode.resize(N);\\n\"\n                              \"    for (int i = 0; i < N; ++i)\\n\"\n                              \"        Mode[i] = \\\"abc\\\";\\n\"\n                              \"    return Save(&Block);\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarStruct14() { // #12142\n        functionVariableUsage(\"struct S { int i; };\\n\"\n                              \"int f() {\\n\"\n                              \"    S s;\\n\"\n                              \"    int S::* p = &S::i;\\n\"\n                              \"    s.*p = 123;\\n\"\n                              \"    return s.i;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarStructArray() {\n        // extracttests.start: struct X {int a;};\n\n        // #3633 - detect that struct array is assigned a value\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    struct X x[10];\\n\"\n                              \"    x[0].a = 5;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:12]: (style) Variable 'x[0].a' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvarUnion1() {\n        // #9707\n        functionVariableUsage(\"static short read(FILE *fp) {\\n\"\n                              \"    typedef union { short s; unsigned char c[2]; } u;\\n\"\n                              \"    u x;\\n\"\n                              \"    x.c[0] = fgetuc(fp);\\n\"\n                              \"    x.c[1] = fgetuc(fp);\\n\"\n                              \"    return x.s;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarOp() {\n        constexpr char op[] = \"+-*/%&|^\";\n        for (const char *p = op; *p; ++p) {\n            std::string code(\"int main()\\n\"\n                             \"{\\n\"\n                             \"    int tmp = 10;\\n\"\n                             \"    return 123 \" + std::string(1, *p) + \" tmp;\\n\"\n                             \"}\");\n            functionVariableUsage(code.c_str());\n            ASSERT_EQUALS(\"\", errout_str());\n        }\n    }\n\n    void localvarInvert() {\n        functionVariableUsage(\"int main()\\n\"\n                              \"{\\n\"\n                              \"    int tmp = 10;\\n\"\n                              \"    return ~tmp;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarIf() {\n        functionVariableUsage(\"int main()\\n\"\n                              \"{\\n\"\n                              \"    int tmp = 10;\\n\"\n                              \"    if ( tmp )\\n\"\n                              \"        return 1;\\n\"\n                              \"    return 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"bool argsMatch(const Token *first, const Token *second) {\\n\" // #6145\n                              \"    if (first->str() == \\\")\\\")\\n\"\n                              \"        return true;\\n\"\n                              \"    else if (first->next()->str() == \\\"=\\\")\\n\"\n                              \"        first = first->nextArgument();\\n\"\n                              \"    else if (second->next()->str() == \\\"=\\\") {\\n\"\n                              \"        second = second->nextArgument();\\n\"\n                              \"        if (second)\\n\"\n                              \"            second = second->tokAt(-2);\\n\"\n                              \"        if (!first || !second) {\\n\"\n                              \"            return !first && !second;\\n\"\n                              \"        }\\n\"\n                              \"    }\\n\"\n                              \"    return false;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:5:15]: (style) Variable 'first' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvarIfElse() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int tmp1 = 1;\\n\"\n                              \"    int tmp2 = 2;\\n\"\n                              \"    int tmp3 = 3;\\n\"\n                              \"    return tmp1 ? tmp2 : tmp3;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarDeclaredInIf() {\n        functionVariableUsage(\"int foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    if (int y = x % 2)\\n\"\n                              \"        return 2;\\n\"\n                              \"    else\\n\"\n                              \"        return 1;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:3:15]: (style) Variable 'y' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:3:13]: (style) Variable 'y' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"int foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    if (int y = x % 2)\\n\"\n                              \"        return y;\\n\"\n                              \"    else\\n\"\n                              \"        return 1;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    if (int y = x % 2)\\n\"\n                              \"        return 2;\\n\"\n                              \"    else\\n\"\n                              \"        return y;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int f(int i) {\\n\" // #11788\n                              \"    if (int x = i) {\\n\"\n                              \"        return x;\\n\"\n                              \"    }\\n\"\n                              \"    else {\\n\"\n                              \"        x = 12;\\n\"\n                              \"        return x;\\n\"\n                              \"    }\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(int i) {\\n\"\n                              \"    if (int x = i) {\\n\"\n                              \"        while (x < 100) {\\n\"\n                              \"            if (x % 2 == 0) {\\n\"\n                              \"                x += 3;\\n\"\n                              \"            }\\n\"\n                              \"            else if (x % 3 == 0) {\\n\"\n                              \"                x += 5;\\n\"\n                              \"            }\\n\"\n                              \"            else {\\n\"\n                              \"                x += 7;\\n\"\n                              \"            }\\n\"\n                              \"            x += 6;\\n\"\n                              \"        }\\n\"\n                              \"        return x;\\n\"\n                              \"    }\\n\"\n                              \"    return i;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarOpAssign() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    int b = 2;\\n\"\n                              \"    a |= b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:11]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:5:7]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    (b).x += a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int a=1, b[10];\\n\"\n                              \"    b[0] = x;\\n\"\n                              \"    a += b[0];\\n\"\n                              \"    return a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(int *start, int *stop) {\\n\"\n                              \"  int length = *start - *stop;\\n\"\n                              \"  if (length < 10000)\\n\"\n                              \"    length = 10000;\\n\"\n                              \"  *stop -= length;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(int a) {\\n\"\n                              \"  int x = 3;\\n\"\n                              \"  a &= ~x;\\n\"\n                              \"  return a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // extracttests.disable\n        functionVariableUsage(\"void f() {\\n\"  // unknown class => library configuration is needed\n                              \"  Fred fred;\\n\"\n                              \"  int *a; a = b;\\n\"\n                              \"  fred += a;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:8]: (information) --check-library: Provide <type-checks><unusedvar> configuration for Fred [checkLibraryCheckType]\\n\", errout_str());\n        // extracttests.enable\n\n        functionVariableUsage(\"void f(std::pair<int,int> x) {\\n\"\n                              \"  std::pair<int,int> fred;\\n\"  // class with library configuration\n                              \"  fred = x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:8]: (style) Variable 'fred' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvarFor() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    for (;a;);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    for (int i = 0; (pci = cdi_list_get(pciDevices, i)); i++)\\n\"\n                              \"    {}\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarForEach() { // #4155 - foreach\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int i = -1;\\n\"\n                              \"    int a[] = {1,2,3};\\n\"\n                              \"    FOREACH_X (int x, a) {\\n\"\n                              \"        if (i==x) return x;\\n\"\n                              \"        i = x;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // #5154 - MSVC 'for each'\n        functionVariableUsage(\"void f() {\\n\"\n                              \"  std::map<int,int> ints;\\n\"\n                              \"  ints[0]= 1;\\n\"\n                              \"  for each(std::pair<int,int> i in ints) { x += i.first; }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarShift1() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int var = 1;\\n\"\n                              \"    return 1 >> var;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarShift3() {  // #3509\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    QList<int *> ints;\\n\"\n                              \"    ints << 1;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo() {\\n\" // #4320\n                              \"    int x;\\n\"\n                              \"    x << 1;\\n\"\n                              \"    return x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarCast() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    int a = 1;\\n\"\n                              \"    int b = static_cast<int>(a);\\n\"\n                              \"    return b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarClass() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    class B : public A {\\n\"\n                              \"        int a;\\n\"\n                              \"        int f() { return a; }\\n\"\n                              \"    } b;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarUnused() {\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool test __attribute__((unused));\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool test __attribute__((unused)) = true;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool __attribute__((unused)) test;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool __attribute__((unused)) test = true;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool test __attribute__((used));\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    bool __attribute__((used)) test;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo()\\n\"\n                              \"{\\n\"\n                              \"    char a[1] __attribute__((unused));\\n\"\n                              \"    char b[1][2] __attribute__((unused));\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarFunction() {\n        functionVariableUsage(\"void check_dlsym(void*& h)\\n\"\n                              \"{\\n\"\n                              \"  typedef void (*function_type) (void);\\n\"\n                              \"  function_type fn;\\n\"\n                              \"  fn = reinterpret_cast<function_type>(dlsym(h, \\\"try_allocation\\\"));\\n\"\n                              \"  fn();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarstatic() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static int i;\\n\"\n                              \"    static const int ci;\\n\"\n                              \"    static std::string s;\\n\"\n                              \"    static const std::string cs;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:16]: (style) Unused variable: i [unusedVariable]\\n\"\n                      \"[test.cpp:4:22]: (style) Unused variable: ci [unusedVariable]\\n\"\n                      \"[test.cpp:5:24]: (style) Unused variable: s [unusedVariable]\\n\"\n                      \"[test.cpp:6:30]: (style) Unused variable: cs [unusedVariable]\\n\",\n                      errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static int i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:16]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\",\n                      errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static int i(0);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3:11]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static int j = 0;\\n\"\n                              \"    static int i(j);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:4:10]: (style) Variable 'i' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"int * foo(int x)\\n\"\n                              \"{\\n\"\n                              \"    static int a[] = { 3, 4, 5, 6 };\\n\"\n                              \"    static int b[] = { 4, 5, 6, 7 };\\n\"\n                              \"    static int c[] = { 5, 6, 7, 8 };\\n\"\n                              \"    b[1] = 1;\\n\"\n                              \"    return x ? a : c;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:6:16]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"\",\n                           errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    static int i = 0;\\n\"\n                              \"    if(i < foo())\\n\"\n                              \"        i += 5;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    static int x = 0;\\n\"\n                              \"    print(x);\\n\"\n                              \"    if(x > 5)\\n\"\n                              \"        x = 0;\\n\"\n                              \"    else\\n\"\n                              \"        x++;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo(int value) {\\n\"\n                              \"    static int array[16] = {0};\\n\"\n                              \"    if(array[value]) {}\\n\"\n                              \"    array[value] = 1;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int fun() {\\n\" // #11310\n                              \"    static int k;\\n\"\n                              \"    k++;\\n\"\n                              \"    return k;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int& f() {\\n\" // #12935\n                              \"    static int i;\\n\"\n                              \"    return i;\\n\"\n                              \"}\\n\"\n                              \"int* g() {\\n\"\n                              \"    static int j;\\n\"\n                              \"    return &j;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarextern() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    extern int i;\\n\"\n                              \"    i = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvardynamic1() {\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void* ptr = malloc(16);\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:17]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = new char[16];\\n\"\n                              \"    delete[] ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:11]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        // extracttests.disable\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = new ( nothrow ) char[16];\\n\"\n                              \"    delete[] ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:11]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = new ( std::nothrow ) char[16];\\n\"\n                              \"    delete[] ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:11]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        // extracttests.enable\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = new char;\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:11]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    void* ptr = malloc(16);\\n\"\n                              \"    ptr[0] = 123;\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = new char[16];\\n\"\n                              \"    ptr[0] = 123;\\n\"\n                              \"    delete[] ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* fred = new Fred;\\n\"\n                              \"    std::cout << \\\"test\\\" << std::endl;\\n\"\n                              \"    delete fred;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct Fred { int a; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* fred = new Fred;\\n\"\n                              \"    std::cout << \\\"test\\\" << std::endl;\\n\"\n                              \"    delete fred;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:11]: (style) Variable 'fred' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"struct Fred { int a; Fred() : a(0) {} };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* fred = new Fred;\\n\"\n                              \"    std::cout << \\\"test\\\" << std::endl;\\n\"\n                              \"    delete fred;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:11]: (style) Variable 'fred' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* fred = malloc(sizeof(Fred));\\n\"\n                              \"    std::cout << \\\"test\\\" << std::endl;\\n\"\n                              \"    free(fred);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:18]: (style) Variable 'fred' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n\n        functionVariableUsage(\"void foo()\\n\"\n                              \"{\\n\"\n                              \"    char* ptr = names[i];\\n\"\n                              \"    delete[] ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvardynamic2() {\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = (Fred*)malloc(sizeof(Fred));\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:31]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = (Fred*)malloc(sizeof(Fred));\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct Fred* ptr = (Fred*)malloc(sizeof(Fred));\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:38]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct Fred* ptr = (Fred*)malloc(sizeof(Fred));\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new Fred();\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:11]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        // extracttests.disable\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new (nothrow ) Fred();\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:11]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new (std::nothrow) Fred();\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:11]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        // extracttests.enable\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new Fred();\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct Fred* ptr = new Fred();\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:18]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"struct Fred { int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    struct Fred* ptr = new Fred();\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"class Fred { public: int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = (Fred*)malloc(sizeof(Fred));\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:31]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"class Fred { public: int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = (Fred*)malloc(sizeof(Fred));\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    free(ptr);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"class Fred { public: int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new Fred();\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:11]: (style) Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]\\n\", errout_str());\n\n        functionVariableUsage(\"class Fred { public: int i; };\\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"    Fred* ptr = new Fred();\\n\"\n                              \"    ptr->i = 0;\\n\"\n                              \"    delete ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvardynamic3() {\n        // Ticket #3467 - False positive that 'data' is not assigned a value\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int* data = new int[100];\\n\"\n                              \"    int* p = data;\\n\"\n                              \"    for ( int i = 0; i < 10; ++i )\\n\"\n                              \"        p++;\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:5]: (style) Variable 'p' is modified but its new value is never used.\\n\",\n                           \"\",\n                           errout_str());\n    }\n\n    void localvararray1() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int p[5];\\n\"\n                              \"    *p = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvararray2() {\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    int p[5][5];\\n\"\n                              \"    p[0][0] = 0;\\n\"\n                              \"    return p[0][0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvararray3() {\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    int p[5][5];\\n\"\n                              \"    *((int*)p[0]) = 0;\\n\"\n                              \"    return p[0][0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvararray4() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int p[1];\\n\"\n                              \"    int *pp[0];\\n\"\n                              \"    p[0] = 1;\\n\"\n                              \"    *pp[0] = p[0];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvararray5() {\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    int p[5][5];\\n\"\n                              \"    dostuff(*p);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    int p[5];\\n\"\n                              \"    dostuff(*p);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    int p[5][5][5];\\n\"\n                              \"    dostuff(**p);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\" // #11872\n                              \"    char v[1][2];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (style) Unused variable: v [unusedVariable]\\n\", errout_str());\n    }\n\n    void localvararray6() {\n        functionVariableUsage(\"struct S { int* p; };\\n\" // #11012\n                              \"void g(struct S* ps);\\n\"\n                              \"void f() {\\n\"\n                              \"    int i[2];\\n\"\n                              \"    struct S s = { i };\\n\"\n                              \"    g(&s);\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarstring1() { // ticket #1597\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    std::string s;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:17]: (style) Unused variable: s [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    std::string s;\\n\"\n                              \"    s = \\\"foo\\\";\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:7]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    std::string s = \\\"foo\\\";\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:2:19]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:2:17]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void foo() {\\n\" // #8901\n                              \"    const std::string s = \\\"foo\\\";\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:2:25]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:2:23]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"std::string foo() {\\n\"\n                              \"    std::string s;\\n\" // Class instances are initialized. Assignment is not necessary\n                              \"    return s;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"std::string foo() {\\n\"\n                              \"    std::string s = \\\"foo\\\";\\n\"\n                              \"    return s;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::string s(\\\"foo\\\");\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:18]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::string s{ \\\"foo\\\" };\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:18]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvarstring2() { // ticket #2929\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    std::string s;\\n\"\n                              \"    int i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:17]: (style) Unused variable: s [unusedVariable]\\n\"\n                      \"[test.cpp:3:9]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n    }\n\n    void localvarconst1() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    const bool b = true;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:2:18]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:2:16]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n    }\n\n    void localvarconst2() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    const int N = 10;\\n\"\n                              \"    struct X { int x[N]; };\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarreturn() { // ticket #9167\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    const int MyInt = 1;\\n\"\n                              \"    class bar {\\n\"\n                              \"      public:\\n\"\n                              \"        bool operator()(const int &uIndexA, const int &uIndexB) const {\\n\"\n                              \"            return true;\\n\"\n                              \"        }\\n\"\n                              \"        bar() {}\\n\"\n                              \"    };\\n\"\n                              \"    return MyInt;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarmaybeunused() {\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] int x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"[[nodiscard]] int getX() { return 4; }\\n\"\n                              \"int main() {\\n\"\n                              \"    [[maybe_unused]] int x = getX();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"[[nodiscard]] int getX() { return 4; }\\n\"\n                              \"int main() {\\n\"\n                              \"    [[maybe_unused]] int x = getX();\\n\"\n                              \"    x = getX();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"[[nodiscard]] int getX() { return 4; }\\n\"\n                              \"int main() {\\n\"\n                              \"    [[maybe_unused]] int x = getX();\\n\"\n                              \"    x = getX();\\n\"\n                              \"    std::cout << x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] const int x = getX();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] const int& x = getX();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] const int* x = getX();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] int& x = getX();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] int* x = getX();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] auto x = getX();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] auto&& x = getX();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] int x[] = getX();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] constexpr volatile static int x = 1;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"[[maybe_unused]] inline int x = 1;\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] [[anotherattribute]] const int* = 1;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    [[maybe_unused]] char a[1];\\n\"\n                              \"    [[maybe_unused]] char b[1][2];\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarrvalue() { // ticket #13977\n        functionVariableUsage(\"void f(void) {\\n\"\n                              \"    std::string s;\\n\"\n                              \"    std::string&& m = std::move(s);\\n\"\n                              \"    cb();\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:21]: (style) Variable 'm' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvarthrow() { // ticket #3687\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    try {}\"\n                              \"    catch(Foo& bar) {}\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localVarStd() {\n        // extracttests.start: struct MyClass {int x;}; std::string foo();\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::string x = foo();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:2:19]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\"\n            \"[test.cpp:2:17]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n            errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::vector<int> x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:22]: (style) Unused variable: x [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::vector<int> x(100);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:23]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::vector<MyClass> x;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:26]: (style) Unused variable: x [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::lock_guard<MyClass> lock(mutex_);\\n\" // Has a side-effect #4385\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    pLocker = std::shared_ptr<jfxLocker>(new jfxLocker(m_lock, true));\\n\" // Could have side-effects (#4355)\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::mutex m;\\n\"\n                              \"    std::unique_lock<std::mutex> lock(m);\\n\" // #4624\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\" // #7732\n                              \"    const std::pair<std::string, std::string> p(\\\"a\\\", \\\"b\\\");\\n\"\n                              \"    std::pair<std::string, std::string> q{\\\"a\\\", \\\"b\\\" };\\n\"\n                              \"    auto r = std::pair<std::string, std::string>(\\\"a\\\", \\\"b\\\");\\n\"\n                              \"    auto s = std::pair<std::string, std::string>{ \\\"a\\\", \\\"b\\\" };\\n\"\n                              \"}\\n\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:2]: (style) Variable 'p' is assigned a value that is never used. [unreadVariable]\\n\"\n                           \"[test.cpp:2:48]: (style) Variable 'p' is assigned a value that is never used. [unreadVariable]\\n\"\n                           \"[test.cpp:4]: (style) Variable 'r' is assigned a value that is never used. [unreadVariable]\\n\"\n                           \"[test.cpp:5:18]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\",\n                           \"[test.cpp:2:48]: (style) Variable 'p' is assigned a value that is never used. [unreadVariable]\\n\"\n                           \"[test.cpp:3:42]: (style) Variable 'q' is assigned a value that is never used. [unreadVariable]\\n\",\n                           errout_str());\n\n        functionVariableUsage(\"void f(std::span<int> s) {\\n\" // #11545\n                              \"    s[0] = 0;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct S {\\n\"\n                              \"    std::mutex m;\\n\"\n                              \"    void f();\\n\"\n                              \"};\\n\"\n                              \"void S::f() {\\n\"\n                              \"    const ::std::lock_guard g(m);\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(const std::string& str, int i) {\\n\" // #11879\n                              \"    const std::string s = str;\\n\"\n                              \"    switch (i) {\\n\"\n                              \"    default:\\n\"\n                              \"        break;\\n\"\n                              \"    }\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:23]: (style) Variable 's' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localVarClass() {\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    Fred f;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"class C { int x; };\\n\"\n                              \"void f() {\\n\"\n                              \"    C c;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:7]: (style) Unused variable: c [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"class ExampleClass\\n\" // #10000\n                              \"{\\n\"\n                              \"public:\\n\"\n                              \"   ExampleClass(int xScale, int yScale, int x, int y)\\n\"\n                              \"      : XScale(xScale)\\n\"\n                              \"      , YScale(yScale)\\n\"\n                              \"      , X(x)\\n\"\n                              \"      , Y(y)\\n\"\n                              \"   {\\n\"\n                              \"   }\\n\"\n                              \" \\n\"\n                              \"   int XScale;\\n\"\n                              \"   int YScale;\\n\"\n                              \"   int X;\\n\"\n                              \"   int Y;\\n\"\n                              \"};\\n\"\n                              \" \\n\"\n                              \"void foo()\\n\"\n                              \"{\\n\"\n                              \"   ExampleClass ex(1, 2, 3, 4);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:20:19]: (style) Variable 'ex' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"class C { public: C(int); ~C(); };\\n\"\n                              \"void f() {\\n\"\n                              \"    C c(12);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localVarSmartPtr() {\n        // handling of smart pointers (#9680)\n        functionVariableUsage(\"static int s_i = 0;\\n\"\n                              \"\\n\"\n                              \"class A {\\n\"\n                              \"public:\\n\"\n                              \"    ~A() {\\n\"\n                              \"        ++s_i;\\n\"\n                              \"    }\\n\"\n                              \"};\\n\"\n                              \"\\n\"\n                              \"static void func() {\\n\"\n                              \"    auto a = std::make_shared<A>();\\n\"\n                              \"    auto a2 = std::unique_ptr<A>(new A());\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"class A {\\n\"\n                              \"public:\\n\"\n                              \"    std::string x;\\n\"\n                              \"};\\n\"\n                              \"\\n\"\n                              \"static void func() {\\n\"\n                              \"    auto a = std::make_shared<A>();\\n\"\n                              \"    auto a2 = std::unique_ptr<A>(new A());\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:7:12]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:8:13]: (style) Variable 'a2' is assigned a value that is never used. [unreadVariable]\\n\", // duplicate\n                      errout_str());\n\n        functionVariableUsage(\"void g();\\n\" // #11094\n                              \"void f() {\\n\"\n                              \"    auto p = std::make_unique<S>();\\n\"\n                              \"    p = nullptr;\\n\"\n                              \"    g();\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int f(int *p) {\\n\" // #10703\n                              \"    std::unique_ptr<int> up(p);\\n\"\n                              \"    return *p;\\n\"\n                              \"}\\n\"\n                              \"int g(int* p) {\\n\"\n                              \"    auto up = std::unique_ptr<int>(p);\\n\"\n                              \"    return *p;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"struct S { S(); };\\n\" // #11108\n                              \"void f(std::unique_ptr<S> p) {\\n\"\n                              \"    p = nullptr;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    // ticket #3104 - false positive when variable is read with \"if (NOT var)\"\n    void localvarIfNOT() {\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    bool x = foo();\\n\"\n                              \"    if (NOT x) { }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarAnd() { // #3672\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    unsigned flag = 0x1 << i;\\n\"\n                              \"    if (m_errorflags & flag) {\\n\"\n                              \"        return 1;\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarSwitch() { // #3744 - false positive when used in switch\n        functionVariableUsage(\"const char *f(int x) {\\n\"\n                              \"    const char a[] = \\\"abc\\\";\\n\"\n                              \"    const char def[] = \\\"def\\\";\\n\"\n                              \"    const char *ptr;\\n\"\n                              \"    switch(x) {\\n\"\n                              \"        case 1:  ptr=a; break;\\n\"\n                              \"        default: ptr=def; break;\\n\"\n                              \"    }\\n\"\n                              \"    return ptr;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str()); // Don't write an error that \"a\" is not used\n\n        functionVariableUsage(\"void x() {\\n\"\n                              \"    unsigned char* pcOctet = NULL;\\n\"\n                              \"    float fValeur;\\n\"\n                              \"    switch (pnodeCurrent->left.pnode->usLen) {\\n\"\n                              \"    case 4:\\n\"\n                              \"        fValeur = (float)pevalDataLeft->data.fd;\\n\"\n                              \"        pcOctet = (unsigned char*)&fValeur;\\n\"\n                              \"        break;\\n\"\n                              \"    case 8:\\n\"\n                              \"        pcOctet = (unsigned char*)&pevalDataLeft->data.fd;\\n\"\n                              \"        break;\\n\"\n                              \"    }\\n\"\n                              \"    for (iIndice = 1; iIndice <= (pnodeCurrent->usLen / 2); iIndice++) {\\n\"\n                              \"        *pcData = gacHexChar[(*pcOctet >> 4) & 0x0F];\\n\"\n                              \"    }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str()); // Don't write an error that \"fValeur\" is not used\n    }\n\n    void localvarNULL() { // #4203 - Setting NULL value is not redundant - it is safe\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    char *p = malloc(100);\\n\"\n                              \"    foo(p);\\n\"\n                              \"    free(p);\\n\"\n                              \"    p = NULL;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(Foo *p) {\\n\"\n                              \"    free(p);\\n\"\n                              \"    p = (Foo *)NULL;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\" // #11079\n                              \"    std::string s1{ nullptr };\\n\"\n                              \"    std::string s2{ NULL };\\n\"\n                              \"    std::string s4(nullptr);\\n\"\n                              \"    std::string s5(NULL);\\n\"\n                              \"}\\n\"\n                              \"struct A { A(void*) {} };\\n\"\n                              \"static void g() {\\n\"\n                              \"    A a1{ nullptr };\\n\"\n                              \"    A a2{ NULL };\\n\"\n                              \"    A a4(nullptr);\\n\"\n                              \"    A a5(NULL);\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:19]: (style) Variable 's1' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:3:19]: (style) Variable 's2' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:4:19]: (style) Variable 's4' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:5:19]: (style) Variable 's5' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:9:9]: (style) Variable 'a1' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:10:9]: (style) Variable 'a2' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:11:9]: (style) Variable 'a4' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:12:9]: (style) Variable 'a5' is assigned a value that is never used. [unreadVariable]\\n\",\n                      errout_str());\n    }\n\n    void localvarUnusedGoto() {\n        // #4447\n        functionVariableUsage(\"bool f(const int &i) {\\n\"\n                              \" int X = i;\\n\"\n                              \"label:\\n\"\n                              \" if ( X == 0 ) {\\n\"\n                              \"    X -= 101;\\n\"\n                              \"    return true;\\n\"\n                              \" }\\n\"\n                              \" if ( X < 1001 )  {\\n\"\n                              \"    X += 1;\\n\"\n                              \"    goto label;\\n\"\n                              \" }\\n\"\n                              \" return false;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:7]: (style) Variable 'X' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        // #4558\n        functionVariableUsage(\"int f() {\\n\"\n                              \" int i,j=0;\\n\"\n                              \" start:\\n\"\n                              \" i=j;\\n\"\n                              \" i++;\\n\"\n                              \" j=i;\\n\"\n                              \" if (i<3)\\n\"\n                              \"     goto start;\\n\"\n                              \" return i;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarLambda() {\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    auto f = []{return 1};\\n\"\n                              \"    return f();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    auto f = []{return 1};\\n\"\n                              \"    auto g = []{return 1};\\n\"\n                              \"    return f() + g();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void foo(std::vector<int>& v) {\\n\"\n                              \"    int n = 0;\\n\"\n                              \"    std::generate(v.begin(), v.end(), [&n] {\\n\"\n                              \"        int r = n;\\n\"\n                              \"        n += 2;\\n\"\n                              \"        return r;\\n\"\n                              \"    });\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int f() {\\n\" // #8433\n                              \"    float a;\\n\"\n                              \"    auto lambda = []() {};\\n\"\n                              \"    return 0;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:11]: (style) Unused variable: a [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\" // #9823\n                              \"    auto cb = []() {\\n\"\n                              \"        int i;\\n\"\n                              \"    };\\n\"\n                              \"    (void)cb;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:13]: (style) Unused variable: i [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\" // #9822\n                              \"    int i;\\n\"\n                              \"    auto cb = []() {\\n\"\n                              \"        int i;\\n\"\n                              \"    };\\n\"\n                              \"    (void)cb;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:9]: (style) Unused variable: i [unusedVariable]\\n\"\n                      \"[test.cpp:4:13]: (style) Unused variable: i [unusedVariable]\\n\",\n                      errout_str());\n    }\n\n\n    void localvarStructuredBinding() {\n        functionVariableUsage(\"void f() {\\n\" // #10368\n                              \"    std::map<int, double> m;\\n\"\n                              \"    m[2] = 2.0;\\n\"\n                              \"    for (auto& [k, v] : m) {}\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarCppInitialization() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int buf[6];\\n\"\n                              \"    Data data(buf);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:14]: (information) --check-library: Provide <type-checks><unusedvar> configuration for Data [checkLibraryCheckType]\\n\", errout_str());\n    }\n\n    void localvarCpp11Initialization() {\n        // #6160\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"    int myNewValue{ 3u };\\n\"\n                              \"    myManager.theDummyTable.addRow(UnsignedIndexValue{ myNewValue }, DummyRowData{ false });\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"    std::list<std::list<int>>::value_type a{ 1, 2, 3, 4 };\\n\"\n                              \"}\\n\");\n        TODO_ASSERT_EQUALS(\"\", \"[test.cpp:2:44]: (information) --check-library: Provide <type-checks><unusedvar> configuration for std::list::value_type [checkLibraryCheckType]\\n\", errout_str());\n\n        functionVariableUsage(\"void f(int* p) {\\n\"\n                              \"    int* q{ p };\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:11]: (style) Variable 'q' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void localvarRangeBasedFor() {\n        // #7075\n        functionVariableUsage(\"void reset() {\\n\"\n                              \"    for (auto & e : array)\\n\"\n                              \"        e = 0;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarAssignInWhile() {\n        functionVariableUsage(\"void foo() {\\n\"\n                              \"  int a = 0;\\n\"\n                              \"  do {\\n\"\n                              \"    dostuff(a);\\n\"\n                              \"  } while((a += x) < 30);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"    int var = 1;\\n\"\n                              \"    while (var = var >> 1) { }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarTemplate() {\n        functionVariableUsage(\"template<int A> void f() {}\\n\"\n                              \"void foo() {\\n\"\n                              \"  const int x = 0;\\n\"\n                              \"  f<x>();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"  constexpr std::size_t ArraySize(5);\\n\"\n                              \"  std::array<int, ArraySize> X; X.dostuff();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\" // #10686\n                              \"    std::array<int, 1> a;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:2:24]: (style) Unused variable: a [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"class A {};\\n\" // #9471\n                              \"    namespace std {\\n\"\n                              \"    template<>\\n\"\n                              \"    struct hash<A> {};\\n\"\n                              \"}\\n\"\n                              \"char f() {\\n\"\n                              \"    std::string hash = \\\"-\\\";\\n\"\n                              \"    return hash[0];\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarFuncPtr() {\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    void(*funcPtr)(void)(x);\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:2]: (style) Variable 'funcPtr' is assigned a value never used.\\n\", \"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    void(*funcPtr)(void);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:11]: (style) Unused variable: funcPtr [unusedVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    void(*funcPtr)(void)(x);\\n\"\n                              \"    funcPtr();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main() {\\n\"\n                              \"    void(*funcPtr)(void) = x;\\n\"\n                              \"    funcPtr();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarAddr() { // #7747\n        functionVariableUsage(\"void f() {\\n\"\n                              \"  int x = 0;\\n\"\n                              \"  dostuff(&x);\\n\"\n                              \"  x = 1;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f() {\\n\"\n                              \"  int x = 0;\\n\"\n                              \"  dostuff(std::ref(x));\\n\"\n                              \"  x = 1;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void localvarDelete() { // #8339\n        functionVariableUsage(\"void reassign(char*& data, int size)\"\n                              \"{\"\n                              \"    char* buf = new char[size];\"\n                              \"\"\n                              \"    char* tmp = data;\"\n                              \"    data = buf;\"\n                              \"    buf = tmp;\"\n                              \"\"\n                              \"    delete [] buf;\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void chainedAssignment() {\n        // #5466\n        functionVariableUsage(\"void NotUsed(double* pdD, int n) {\\n\"\n                              \"    double sum = 0.0;\\n\"\n                              \"    for (int i = 0; i<n; ++i)\\n\"\n                              \"        pdD[i] = (sum += pdD[i]);\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void crash1() {\n        functionVariableUsage(\"SAL_WNODEPRECATED_DECLARATIONS_PUSH\\n\"\n                              \"void convertToTokenArray() {\\n\"\n                              \"}\\n\"\n                              \"SAL_WNODEPRECATED_DECLARATIONS_POP\"); // #4033\n    }\n\n    void crash2() {\n        functionVariableUsage(\"template<unsigned dim>\\n\"\n                              \"struct Y: Y<dim-1> { };\\n\"\n                              \"template<>\\n\"\n                              \"struct Y<0> {};\\n\"\n                              \"void f() {\\n\"\n                              \"    Y y;\\n\"\n                              \"}\"); // #4695\n    }\n\n    void crash3() {\n        functionVariableUsage(\"void f(int a, int b, const int* p) {\\n\" // #12531\n                              \"    const int* s[] = { p, p + 1, p + 2 };\\n\"\n                              \"    a = *(s[a] + b);\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:7]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void usingNamespace() {\n        functionVariableUsage(\"int foo() {\\n\"\n                              \"   using namespace ::com::sun::star::i18n;\\n\"\n                              \"   bool b = false;\\n\"\n                              \"   int j = 0;\\n\"\n                              \"   for (int i = 0; i < 3; i++) {\\n\"\n                              \"          if (!b) {\\n\"\n                              \"             j = 3;\\n\"\n                              \"             b = true;\\n\"\n                              \"          }\\n\"\n                              \"   }\\n\"\n                              \"   return j;\\n\"\n                              \"}\"); // #4585\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void lambdaFunction() {\n        // #7026\n        functionVariableUsage(\"void f() {\\n\"\n                              \"  bool first = true;\\n\"\n                              \"\\n\"\n                              \"  auto do_something = [&first]() {\\n\"\n                              \"    if (first) {\\n\"\n                              \"      first = false;\\n\"\n                              \"    } else {\\n\"\n                              \"      dostuff();\\n\"\n                              \"    }\\n\"\n                              \"  };\\n\"\n                              \"  do_something();\\n\"\n                              \"  do_something();\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n\n        // #4956 - assignment in for_each\n        functionVariableUsage(\"void f(std::vector<int> ints) {\\n\"\n                              \"  int x = 0;\\n\"\n                              \"  std::for_each(ints.begin(), ints.end(), [&x](int i){ dostuff(x); x = i; });\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"void f(std::vector<int> ints) {\\n\"\n                              \"  int x = 0;\\n\"\n                              \"  std::for_each(ints.begin(), ints.end(), [&x](int i){ x += i; });\\n\"\n                              \"}\");\n        TODO_ASSERT_EQUALS(\"[test.cpp:3:5]: (style) Variable 'x' is assigned a value that is never used. [unreadVariable]\\n\", \"\", errout_str());\n\n        functionVariableUsage(\"int f(const std::vector<int>& v) {\\n\"\n                              \"    auto it = std::find_if(v.begin(), v.end(), [&](int i) { return i > 0 && i < 7; });\\n\"\n                              \"    std::unordered_map<std::string, std::vector<int*>> exprs;\\n\"\n                              \"    return *it;\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:56]: (style) Unused variable: exprs [unusedVariable]\\n\", errout_str());\n    }\n\n    void namespaces() { // #7557\n        functionVariableUsage(\"namespace t { namespace g {\\n\"\n                              \"   typedef std::pair<BoostBox, size_t> value;\\n\"\n                              \"} }\\n\"\n                              \"namespace t { namespace g {} }\\n\"\n                              \"namespace t {\\n\"\n                              \"  inline double getTime() const {\\n\"\n                              \"     iterator it=find();\\n\"\n                              \"     double& value=it->second.values[index];\\n\"\n                              \"     if(isnan(value)) {\\n\"\n                              \"       value=get();\\n\"\n                              \"     }\\n\"\n                              \"     return value;\\n\"\n                              \"  }\\n\"\n                              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void bracesInitCpp11() {\n        functionVariableUsage(\n            \"int fun() {\\n\"\n            \" static int fpUnread{0};\\n\"\n            \" const int var{fpUnread++};\\n\"\n            \" return var;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void argument() {\n        functionVariableUsage(\n            \"void fun(Value value) {\\n\"\n            \" value[10] = 123;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\n            \"void fun(std::string s) {\\n\"\n            \" s[10] = 123;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:8]: (style) Variable 's[10]' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\n            \"void fun(short data[2]) {\\n\"\n            \"  data[2] = 1;\\n\"\n            \"}\"\n            );\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // Unknown argument type\n        functionVariableUsage(\n            \"void A::b(Date& result) {\"\n            \"  result = 12;\\n\"\n            \"}\"\n            );\n        ASSERT_EQUALS(\"\", errout_str());\n\n        {\n            // #8914\n            functionVariableUsage( // assume unknown argument type is reference\n                \"void fun(Date result) {\"\n                \"  result.x = 12;\\n\"\n                \"}\"\n                );\n            ASSERT_EQUALS(\"\", errout_str());\n\n            functionVariableUsage( // there is no reference type in C\n                \"void fun(Date result) {\"\n                \"  result.x = 12;\\n\"\n                \"}\",\n                dinit(FunctionVariableUsageOptions, $.cpp = false)\n                );\n            ASSERT_EQUALS(\"[test.c:1:35]: (style) Variable 'result.x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n            functionVariableUsage(\n                \"struct Date { int x; };\\n\"\n                \"void fun(Date result) {\"\n                \"  result.x = 12;\\n\"\n                \"}\"\n                );\n            ASSERT_EQUALS(\"[test.cpp:2:35]: (style) Variable 'result.x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n        }\n\n        // Unknown struct type\n        functionVariableUsage(\n            \"void fun() {\"\n            \"  struct FOO foo;\\n\"\n            \"  foo.x = 123;\\n\"\n            \"}\"\n            );\n        ASSERT_EQUALS(\"[test.cpp:2:9]: (style) Variable 'foo.x' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n    }\n\n    void argumentClass() {\n        functionVariableUsage(\n            \"void foo(std::insert_iterator<C> it) {\\n\"\n            \"  it = 123;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void escapeAlias() {\n        functionVariableUsage(\n            \"struct A {\\n\"\n            \"    std::map<int, int> m;\\n\"\n            \"    void f(int key, int number) {\\n\"\n            \"        auto pos = m.find(key);\\n\"\n            \"        if (pos == m.end())\\n\"\n            \"            m.insert(std::map<int, int>::value_type(key, number));\\n\"\n            \"        else\\n\"\n            \"            (*pos).second = number;\\n\"\n            \"    }\\n\"\n            \"};\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void volatileData() {\n        functionVariableUsage(\n            \"struct Data { unsigned int n; };\\n\"\n            \"int main() {\\n\"\n            \"  (*(volatile struct Data*)0x4200).n = 1;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void globalData() {\n        // #10276\n        functionVariableUsage(\n            \"void f(void) {\\n\"\n            \"    ((uint8_t *) (uint16_t)0x1000)[0] = 0x42;\\n\"\n            \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void structuredBinding() { // #13269\n        functionVariableUsage(\"int main()\\n\"\n                              \"{\\n\"\n                              \"    auto [a, b] = std::make_pair(42, 0.42);\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:17]: (style) Variable 'a' is assigned a value that is never used. [unreadVariable]\\n\"\n                      \"[test.cpp:3:17]: (style) Variable 'b' is assigned a value that is never used. [unreadVariable]\\n\", errout_str());\n\n        functionVariableUsage(\"int main()\\n\"\n                              \"{\\n\"\n                              \"    auto [a, b] = std::make_pair(42, 0.42);\\n\"\n                              \"    (void) a;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main()\\n\"\n                              \"{\\n\"\n                              \"    auto [a, b] = std::make_pair(42, 0.42);\\n\"\n                              \"    (void) b;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main()\\n\"\n                              \"{\\n\"\n                              \"    auto [a, b, c] = std::make_pair(42, 0.42);\\n\"\n                              \"    (void) b;\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        functionVariableUsage(\"int main()\\n\"\n                              \"{\\n\"\n                              \"    [[maybe_unused]] auto [a2, b3] = std::make_pair(42, 0.42);\\n\"\n                              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n};\n\nREGISTER_TEST(TestUnusedVar)\n"
    }
  ]
}