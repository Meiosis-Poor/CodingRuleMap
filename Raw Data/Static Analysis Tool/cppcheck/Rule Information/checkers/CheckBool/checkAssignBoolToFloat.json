{
  "name": "checkAssignBoolToFloat",
  "language": "cpp",
  "description": null,
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 15,
  "branches": 5,
  "apis": 16,
  "test": [
    {
      "description": null,
      "expected-problems": 1,
      "expected-linenumbers": [
        186
      ],
      "code": "\n/*\n * Cppcheck - A tool for static C/C++ code analysis\n * Copyright (C) 2007-2025 Cppcheck team.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"checkbool.h\"\n#include \"errortypes.h\"\n#include \"fixture.h\"\n#include \"helpers.h\"\n#include \"settings.h\"\n\n#include <cstddef>\n\nclass TestBool : public TestFixture {\npublic:\n    TestBool() : TestFixture(\"TestBool\") {}\n\nprivate:\n    const Settings settings = settingsBuilder().severity(Severity::style).severity(Severity::warning).certainty(Certainty::inconclusive).build();\n\n    void run() override {\n        mNewTemplate = true;\n        TEST_CASE(bitwiseOnBoolean);      // if (bool & bool)\n        TEST_CASE(incrementBoolean);\n        TEST_CASE(assignBoolToPointer);\n        TEST_CASE(assignBoolToFloat);\n\n        TEST_CASE(comparisonOfBoolExpressionWithInt1);\n        TEST_CASE(comparisonOfBoolExpressionWithInt2);\n        TEST_CASE(comparisonOfBoolExpressionWithInt3);\n        TEST_CASE(comparisonOfBoolExpressionWithInt4);\n\n        TEST_CASE(comparisonOfBoolWithInt1);\n        TEST_CASE(comparisonOfBoolWithInt2);\n        TEST_CASE(comparisonOfBoolWithInt3);\n        TEST_CASE(comparisonOfBoolWithInt4);\n        TEST_CASE(comparisonOfBoolWithInt5);\n        TEST_CASE(comparisonOfBoolWithInt6); // #4224 - integer is casted to bool\n        TEST_CASE(comparisonOfBoolWithInt7); // #4846 - (!x == true)\n        TEST_CASE(comparisonOfBoolWithInt8); // #9165\n        TEST_CASE(comparisonOfBoolWithInt9); // #9304\n        TEST_CASE(comparisonOfBoolWithInt10); // #10935\n\n        TEST_CASE(checkComparisonOfFuncReturningBool1);\n        TEST_CASE(checkComparisonOfFuncReturningBool2);\n        TEST_CASE(checkComparisonOfFuncReturningBool3);\n        TEST_CASE(checkComparisonOfFuncReturningBool4);\n        TEST_CASE(checkComparisonOfFuncReturningBool5);\n        TEST_CASE(checkComparisonOfFuncReturningBool6);\n        TEST_CASE(checkComparisonOfFuncReturningBool7); // #7197\n        TEST_CASE(checkComparisonOfFuncReturningBool8); // #4103\n        // Integration tests..\n        TEST_CASE(checkComparisonOfFuncReturningBoolIntegrationTest1); // #7798 overloaded functions\n\n        TEST_CASE(checkComparisonOfBoolWithBool);\n\n        // Converting pointer addition result to bool\n        TEST_CASE(pointerArithBool1);\n\n        TEST_CASE(returnNonBool);\n        TEST_CASE(returnNonBoolLambda);\n        TEST_CASE(returnNonBoolLogicalOp);\n        TEST_CASE(returnNonBoolClass);\n    }\n\n    struct CheckOptions\n    {\n        CheckOptions() = default;\n        bool cpp = true;\n    };\n\n#define check(...) check_(__FILE__, __LINE__, __VA_ARGS__)\n    template<size_t size>\n    void check_(const char* file, int line, const char (&code)[size], const CheckOptions& options = make_default_obj()) {\n        // Tokenize..\n        SimpleTokenizer tokenizer(settings, *this, options.cpp);\n        ASSERT_LOC(tokenizer.tokenize(code), file, line);\n\n        // Check...\n        runChecks<CheckBool>(tokenizer, this);\n    }\n\n\n    void assignBoolToPointer() {\n        check(\"void foo(bool *p) {\\n\"\n              \"    p = false;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:7]: (error) Boolean value assigned to pointer. [assignBoolToPointer]\\n\", errout_str());\n\n        check(\"void foo(bool *p) {\\n\"\n              \"    p = (x<y);\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:7]: (error) Boolean value assigned to pointer. [assignBoolToPointer]\\n\", errout_str());\n\n        check(\"void foo(bool *p) {\\n\"\n              \"    p = (x||y);\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:7]: (error) Boolean value assigned to pointer. [assignBoolToPointer]\\n\", errout_str());\n\n        check(\"void foo(bool *p) {\\n\"\n              \"    p = (x&&y);\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:7]: (error) Boolean value assigned to pointer. [assignBoolToPointer]\\n\", errout_str());\n\n        // check against potential false positives\n        check(\"void foo(bool *p) {\\n\"\n              \"    *p = false;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // ticket #5046 - false positive: Boolean value assigned to pointer\n        check(\"struct S {\\n\"\n              \"    bool *p;\\n\"\n              \"};\\n\"\n              \"void f() {\\n\"\n              \"    S s = {0};\\n\"\n              \"    *s.p = true;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"struct S {\\n\"\n              \"    bool *p;\\n\"\n              \"};\\n\"\n              \"void f() {\\n\"\n              \"    S s = {0};\\n\"\n              \"    s.p = true;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:9]: (error) Boolean value assigned to pointer. [assignBoolToPointer]\\n\", errout_str());\n\n        // ticket #5627 - false positive: template\n        check(\"void f() {\\n\"\n              \"    X *p = new ::std::pair<int,int>[rSize];\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // ticket #6588 (c mode)\n        check(\"struct MpegEncContext { int *q_intra_matrix, *q_chroma_intra_matrix; };\\n\"\n              \"void dnxhd_10bit_dct_quantize(MpegEncContext *ctx, int n, int qscale) {\\n\"\n              \"  const int *qmat = n < 4;\\n\" /* KO */\n              \"  const int *rmat = n < 4 ? \" /* OK */\n              \"                       ctx->q_intra_matrix :\"\n              \"                       ctx->q_chroma_intra_matrix;\\n\"\n              \"}\", dinit(CheckOptions, $.cpp = false));\n        ASSERT_EQUALS(\"[test.c:3:19]: (error) Boolean value assigned to pointer. [assignBoolToPointer]\\n\", errout_str());\n\n        // ticket #6588 (c++ mode)\n        check(\"struct MpegEncContext { int *q_intra_matrix, *q_chroma_intra_matrix; };\\n\"\n              \"void dnxhd_10bit_dct_quantize(MpegEncContext *ctx, int n, int qscale) {\\n\"\n              \"  const int *qmat = n < 4;\\n\" /* KO */\n              \"  const int *rmat = n < 4 ? \" /* OK */\n              \"                       ctx->q_intra_matrix :\"\n              \"                       ctx->q_chroma_intra_matrix;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:19]: (error) Boolean value assigned to pointer. [assignBoolToPointer]\\n\", errout_str());\n\n        // ticket #6665\n        check(\"void pivot_big(char *first, int compare(const void *, const void *)) {\\n\"\n              \"  char *a = first, *b = first + 1, *c = first + 2;\\n\"\n              \"  char* m1 = compare(a, b) < 0\\n\"\n              \"      ? (compare(b, c) < 0 ? b : (compare(a, c) < 0 ? c : a))\\n\"\n              \"      : (compare(a, c) < 0 ? a : (compare(b, c) < 0 ? c : b));\\n\"\n              \"}\", dinit(CheckOptions, $.cpp = false));\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // #7381\n        check(\"void foo(bool *p, bool b) {\\n\"\n              \"    p = b;\\n\"\n              \"    p = &b;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:7]: (error) Boolean value assigned to pointer. [assignBoolToPointer]\\n\", errout_str());\n    }\n\n    void assignBoolToFloat() {\n        check(\"void foo1() {\\n\"\n              \"    double d = false;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:14]: (style) Boolean value assigned to floating point variable. [assignBoolToFloat]\\n\", errout_str());\n\n        check(\"void foo2() {\\n\"\n              \"    float d = true;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:13]: (style) Boolean value assigned to floating point variable. [assignBoolToFloat]\\n\", errout_str());\n\n        check(\"void foo3() {\\n\"\n              \"    long double d = (2>1);\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:19]: (style) Boolean value assigned to floating point variable. [assignBoolToFloat]\\n\", errout_str());\n\n        // stability - don't crash:\n        check(\"void foo4() {\\n\"\n              \"    unknown = false;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"struct S {\\n\"\n              \"    float p;\\n\"\n              \"};\\n\"\n              \"void f() {\\n\"\n              \"    S s = {0};\\n\"\n              \"    s.p = true;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:9]: (style) Boolean value assigned to floating point variable. [assignBoolToFloat]\\n\", errout_str());\n\n        check(\"struct S {\\n\"\n              \"    float* p[1];\\n\"\n              \"};\\n\"\n              \"void f() {\\n\"\n              \"    S s = {0};\\n\"\n              \"    *s.p[0] = true;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:13]: (style) Boolean value assigned to floating point variable. [assignBoolToFloat]\\n\", errout_str());\n    }\n\n    void comparisonOfBoolExpressionWithInt1() {\n        check(\"void f(int x) {\\n\"\n              \"    if ((x && 0x0f)==6)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:20]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((x && 0x0f)==0)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((x || 0x0f)==6)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:20]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((x || 0x0f)==0)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((x & 0x0f)==6)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((x | 0x0f)==6)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((5 && x)==3)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:17]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((5 && x)==3 || (8 && x)==9)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\n            \"[test.cpp:2:17]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\"\n            \"[test.cpp:2:32]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\",   // duplicate\n            errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((5 && x)!=3)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:17]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((5 && x) > 3)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:18]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((5 && x) > 0)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((5 && x) < 0)\\n\"\n              \"        a++;\\n\"\n              \"}\"\n              );\n        ASSERT_EQUALS(\"[test.cpp:2:18]: (warning) Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((5 && x) < 1)\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if ((5 && x) > 1)\\n\"\n              \"        a++;\\n\"\n              \"}\"\n              );\n        ASSERT_EQUALS(\"[test.cpp:2:18]: (warning) Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n\n        check(\"void f(int x) {\\n\"\n              \"    if (0 < (5 && x))\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if (0 > (5 && x))\\n\"\n              \"        a++;\\n\"\n              \"}\"\n              );\n        ASSERT_EQUALS(\"[test.cpp:2:11]: (warning) Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if (1 > (5 && x))\\n\"\n              \"        a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if (1 < (5 && x))\\n\"\n              \"        a++;\\n\"\n              \"}\"\n              );\n        ASSERT_EQUALS(\"[test.cpp:2:11]: (warning) Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(bool x ) {\\n\"\n              \"  if ( x > false )\\n\"\n              \"      a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:12]: (warning) Comparison of a boolean value using relational operator (<, >, <= or >=). [comparisonOfBoolWithInvalidComparator]\\n\", errout_str());\n\n        check(\"void f(bool x ) {\\n\"\n              \"  if ( false < x )\\n\"\n              \"      a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:16]: (warning) Comparison of a boolean value using relational operator (<, >, <= or >=). [comparisonOfBoolWithInvalidComparator]\\n\", errout_str());\n\n        check(\"void f(bool x ) {\\n\"\n              \"  if ( x < false )\\n\"\n              \"      a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:12]: (warning) Comparison of a boolean value using relational operator (<, >, <= or >=). [comparisonOfBoolWithInvalidComparator]\\n\", errout_str());\n\n        check(\"void f(bool x ) {\\n\"\n              \"  if ( false > x )\\n\"\n              \"      a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:16]: (warning) Comparison of a boolean value using relational operator (<, >, <= or >=). [comparisonOfBoolWithInvalidComparator]\\n\", errout_str());\n\n        check(\"void f(bool x ) {\\n\"\n              \"  if ( x >= false )\\n\"\n              \"      a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:13]: (warning) Comparison of a boolean value using relational operator (<, >, <= or >=). [comparisonOfBoolWithInvalidComparator]\\n\", errout_str());\n\n        check(\"void f(bool x ) {\\n\"\n              \"  if ( false >= x )\\n\"\n              \"      a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:17]: (warning) Comparison of a boolean value using relational operator (<, >, <= or >=). [comparisonOfBoolWithInvalidComparator]\\n\", errout_str());\n\n        check(\"void f(bool x ) {\\n\"\n              \"  if ( x <= false )\\n\"\n              \"      a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:13]: (warning) Comparison of a boolean value using relational operator (<, >, <= or >=). [comparisonOfBoolWithInvalidComparator]\\n\", errout_str());\n\n        check(\"void f(bool x ) {\\n\"\n              \"  if ( false <= x )\\n\"\n              \"      a++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:17]: (warning) Comparison of a boolean value using relational operator (<, >, <= or >=). [comparisonOfBoolWithInvalidComparator]\\n\", errout_str());\n\n        check(\"typedef int (*func)(bool invert);\\n\"\n              \"void x(int, func f);\\n\"\n              \"void foo(int error) {\\n\"\n              \"  if (error == ABC) { }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"int f() { return !a+b<c; }\"); // #5072\n        ASSERT_EQUALS(\"\",errout_str());\n\n        check(\"int f() { return (!a+b<c); }\");\n        ASSERT_EQUALS(\"\",errout_str());\n\n        check(\"int f() { return (a+(b<5)<=c); }\");\n        ASSERT_EQUALS(\"\",errout_str());\n    }\n\n    void comparisonOfBoolExpressionWithInt2() {\n        check(\"void f(int x) {\\n\"\n              \"    if (!x == 10) {\\n\"\n              \"        printf(\\\"x not equal to 10\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:12]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if (!x != 10) {\\n\"\n              \"        printf(\\\"x not equal to 10\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:12]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if (x != 10) {\\n\"\n              \"        printf(\\\"x not equal to 10\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if (10 == !x) {\\n\"\n              \"        printf(\\\"x not equal to 10\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:12]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if (10 != !x) {\\n\"\n              \"        printf(\\\"x not equal to 10\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:12]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int x, int y) {\\n\"\n              \"    if (y != !x) {\\n\"\n              \"        printf(\\\"x not equal to 10\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x, bool y) {\\n\"\n              \"    if (y != !x) {\\n\"\n              \"        printf(\\\"x not equal to 10\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x) {\\n\"\n              \"    if (10 != x) {\\n\"\n              \"        printf(\\\"x not equal to 10\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x, int y) {\\n\"\n              \"    return (!y == !x);\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"int f(int a) {\\n\"\n              \"  return (x()+1 == !a);\\n\"\n              \"}\");\n        TODO_ASSERT_EQUALS(\"error\", \"\", errout_str());\n\n        check(\"void f() { if (!!a+!!b+!!c>1){} }\");\n        ASSERT_EQUALS(\"\",errout_str());\n\n        check(\"void f(int a, int b, int c) { if (a != !b || c) {} }\");\n        ASSERT_EQUALS(\"\",errout_str());\n\n        check(\"void f(int a, int b, int c) { if (1 < !!a + !!b + !!c) {} }\");\n        ASSERT_EQUALS(\"\",errout_str());\n\n        check(\"void f(int a, int b, int c) { if (1 < !(a+b)) {} }\");\n        ASSERT_EQUALS(\"[test.cpp:1:37]: (warning) Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]\\n\",errout_str());\n    }\n\n    void comparisonOfBoolExpressionWithInt3() {\n        check(\"int f(int x) {\\n\"\n              \"    return t<0>() && x;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void comparisonOfBoolExpressionWithInt4() {\n        // #5016\n        check(\"void f() {\\n\"\n              \"  for(int i = 4; i > -1 < 5 ; --i) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:25]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(int a, int b, int c) {\\n\"\n              \"  return (a > b) < c;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int a, int b, int c) {\\n\"\n              \"  return x(a > b) < c;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int a, int b, int c) {\\n\"\n              \"  return a > b == c;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // templates\n        check(\"struct Tokenizer { TokenList list; };\\n\"\n              \"void Tokenizer::f() {\\n\"\n              \"  std::list<Token*> locationList;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        // #5063 - or\n        check(\"void f() {\\n\"\n              \"  return a > b or c < d;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"int f() {\\n\"\n              \"  return (a < b) != 0U;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n        check(\"int f() {\\n\"\n              \"  return (a < b) != 0x0;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n        check(\"int f() {\\n\"\n              \"  return (a < b) != 42U;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:18]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n    }\n\n    void checkComparisonOfFuncReturningBool1() {\n        check(\"void f(){\\n\"\n              \"     int temp = 4;\\n\"\n              \"     if(compare1(temp) > compare2(temp)){\\n\"\n              \"         printf(\\\"foo\\\");\\n\"\n              \"     }\\n\"\n              \"}\\n\"\n              \"bool compare1(int temp){\\n\"\n              \"     if(temp==4){\\n\"\n              \"         return true;\\n\"\n              \"     }\\n\"\n              \"     else\\n\"\n              \"         return false;\\n\"\n              \"}\\n\"\n              \"bool compare2(int temp){\\n\"\n              \"     if(temp==4){\\n\"\n              \"         return false;\\n\"\n              \"     }\\n\"\n              \"     else\\n\"\n              \"         return true;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:17]: (style) Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfTwoFuncsReturningBoolError]\\n\", errout_str());\n    }\n\n    void checkComparisonOfFuncReturningBool2() {\n        check(\"void leftOfComparison(){\\n\"\n              \" int temp = 4;\\n\"\n              \" bool a = true;\\n\"\n              \" if(compare(temp) > a){\\n\"\n              \"     printf(\\\"foo\\\");\\n\"\n              \" }\\n\"\n              \"}\\n\"\n              \"void rightOfComparison(){\\n\"\n              \" int temp = 4;\\n\"\n              \" bool a = true;\\n\"\n              \" if(a < compare(temp)){\\n\"\n              \"     printf(\\\"foo\\\");\\n\"\n              \" }\\n\"\n              \"}\\n\"\n              \"bool compare(int temp){\\n\"\n              \"  if(temp==4){\\n\"\n              \"     return true;\\n\"\n              \"  }\\n\"\n              \"    else\\n\"\n              \"     return false;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:12]: (style) Comparison of a function returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfFuncReturningBoolError]\\n\"\n                      \"[test.cpp:11:7]: (style) Comparison of a function returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfFuncReturningBoolError]\\n\", errout_str());\n    }\n\n    void checkComparisonOfFuncReturningBool3() {\n        check(\"void f(){\\n\"\n              \" int temp = 4;\\n\"\n              \" if(compare(temp) > temp){\\n\"\n              \"         printf(\\\"foo\\\");\\n\"\n              \"   }\\n\"\n              \"}\\n\"\n              \"bool compare(int temp);\");\n        ASSERT_EQUALS(\"[test.cpp:3:19]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\"\n                      \"[test.cpp:3:12]: (style) Comparison of a function returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfFuncReturningBoolError]\\n\", errout_str());\n    }\n\n    void checkComparisonOfFuncReturningBool4() {\n        check(\"void f(){\\n\"\n              \"   int temp = 4;\\n\"\n              \" bool b = compare2(6);\\n\"\n              \" if(compare1(temp)> b){\\n\"\n              \"         printf(\\\"foo\\\");\\n\"\n              \" }\\n\"\n              \"}\\n\"\n              \"bool compare1(int temp){\\n\"\n              \" if(temp==4){\\n\"\n              \"     return true;\\n\"\n              \"     }\\n\"\n              \" else\\n\"\n              \"     return false;\\n\"\n              \"}\\n\"\n              \"bool compare2(int temp){\\n\"\n              \" if(temp == 5){\\n\"\n              \"     return true;\\n\"\n              \" }\\n\"\n              \" else\\n\"\n              \"     return false;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:13]: (style) Comparison of a function returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfFuncReturningBoolError]\\n\", errout_str());\n    }\n\n    void checkComparisonOfFuncReturningBool5() {\n        check(\"void f(){\\n\"\n              \"     int temp = 4;\\n\"\n              \"     if(compare1(temp) > !compare2(temp)){\\n\"\n              \"         printf(\\\"foo\\\");\\n\"\n              \"     }\\n\"\n              \"}\\n\"\n              \"bool compare1(int temp){\\n\"\n              \"     if(temp==4){\\n\"\n              \"         return true;\\n\"\n              \"     }\\n\"\n              \"     else\\n\"\n              \"         return false;\\n\"\n              \"}\\n\"\n              \"bool compare2(int temp){\\n\"\n              \"     if(temp==4){\\n\"\n              \"         return false;\\n\"\n              \"     }\\n\"\n              \"     else\\n\"\n              \"         return true;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:17]: (style) Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfTwoFuncsReturningBoolError]\\n\", errout_str());\n    }\n\n    void checkComparisonOfFuncReturningBool6() {\n        check(\"int compare1(int temp);\\n\"\n              \"namespace Foo {\\n\"\n              \"    bool compare1(int temp);\\n\"\n              \"}\\n\"\n              \"void f(){\\n\"\n              \"    int temp = 4;\\n\"\n              \"    if(compare1(temp) > compare2(temp)){\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"namespace Foo {\\n\"\n              \"    bool compare1(int temp);\\n\"\n              \"}\\n\"\n              \"int compare1(int temp);\\n\"\n              \"void f(){\\n\"\n              \"    int temp = 4;\\n\"\n              \"    if(compare1(temp) > compare2(temp)){\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"int compare1(int temp);\\n\"\n              \"namespace Foo {\\n\"\n              \"    bool compare1(int temp);\\n\"\n              \"    void f(){\\n\"\n              \"        int temp = 4;\\n\"\n              \"        if(compare1(temp) > compare2(temp)){\\n\"\n              \"            printf(\\\"foo\\\");\\n\"\n              \"        }\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:20]: (style) Comparison of a function returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfFuncReturningBoolError]\\n\", errout_str());\n\n        check(\"int compare1(int temp);\\n\"\n              \"namespace Foo {\\n\"\n              \"    bool compare1(int temp);\\n\"\n              \"    void f(){\\n\"\n              \"        int temp = 4;\\n\"\n              \"        if(::compare1(temp) > compare2(temp)){\\n\"\n              \"            printf(\\\"foo\\\");\\n\"\n              \"        }\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool compare1(int temp);\\n\"\n              \"void f(){\\n\"\n              \"    int temp = 4;\\n\"\n              \"    if(foo.compare1(temp) > compare2(temp)){\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void checkComparisonOfFuncReturningBool7() { // #7197\n        check(\"struct C {\\n\"\n              \"    bool isEmpty();\\n\"\n              \"};\\n\"\n              \"void f() {\\n\"\n              \"    C c1, c2;\\n\"\n              \"    if ((c1.isEmpty()) < (c2.isEmpty())) {}\\n\"\n              \"    if (!c1.isEmpty() < !!c2.isEmpty()) {}\\n\"\n              \"    if ((int)c1.isEmpty() < (int)c2.isEmpty()) {}\\n\"\n              \"    if (static_cast<int>(c1.isEmpty()) < static_cast<int>(c2.isEmpty())) {}\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:6:20]: (style) Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfTwoFuncsReturningBoolError]\\n\"\n                      \"[test.cpp:7:20]: (style) Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfTwoFuncsReturningBoolError]\\n\"\n                      \"[test.cpp:8:24]: (style) Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfTwoFuncsReturningBoolError]\\n\"\n                      \"[test.cpp:9:36]: (style) Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator. [comparisonOfTwoFuncsReturningBoolError]\\n\",\n                      errout_str());\n    }\n\n    void checkComparisonOfFuncReturningBool8() { // #4103\n        // op: >\n        check(\"int main(void){\\n\"\n              \"    bool a = true;\\n\"\n              \"    bool b = false;\\n\"\n              \"    if(b > a){ \\n\"                             // here warning should be displayed\n              \"        ;\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:10]: (style) Comparison of a variable having boolean value using relational (<, >, <= or >=) operator. [comparisonOfBoolWithBoolError]\\n\", errout_str());\n        // op: <\n        check(\"int main(void){\\n\"\n              \"    bool a = true;\\n\"\n              \"    bool b = false;\\n\"\n              \"    if(b < a){ \\n\"                             // here warning should be displayed\n              \"        ;\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:10]: (style) Comparison of a variable having boolean value using relational (<, >, <= or >=) operator. [comparisonOfBoolWithBoolError]\\n\", errout_str());\n        // op: >=\n        check(\"int main(void){\\n\"\n              \"    bool a = true;\\n\"\n              \"    bool b = false;\\n\"\n              \"    if(b >= a){ \\n\"                             // here warning should be displayed\n              \"        ;\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:10]: (style) Comparison of a variable having boolean value using relational (<, >, <= or >=) operator. [comparisonOfBoolWithBoolError]\\n\", errout_str());\n        // op: <=\n        check(\"int main(void){\\n\"\n              \"    bool a = true;\\n\"\n              \"    bool b = false;\\n\"\n              \"    if(b <= a){ \\n\"                             // here warning should be displayed\n              \"        ;\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:4:10]: (style) Comparison of a variable having boolean value using relational (<, >, <= or >=) operator. [comparisonOfBoolWithBoolError]\\n\", errout_str());\n    }\n\n    void checkComparisonOfFuncReturningBoolIntegrationTest1() { // #7798\n        check(\"bool eval(double *) { return false; }\\n\"\n              \"double eval(char *) { return 1.0; }\\n\"\n              \"int main(int argc, char *argv[])\\n\"\n              \"{\\n\"\n              \"  if ( eval(argv[1]) > eval(argv[2]) )\\n\"\n              \"    return 1;\\n\"\n              \"  return 0;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void checkComparisonOfBoolWithBool() {\n        const char code[] = \"void f(){\\n\"\n                            \"    int temp = 4;\\n\"\n                            \"    bool b = compare2(6);\\n\"\n                            \"    bool a = compare1(4);\\n\"\n                            \"    if(b > a){\\n\"\n                            \"        printf(\\\"foo\\\");\\n\"\n                            \"    }\\n\"\n                            \"}\\n\"\n                            \"bool compare1(int temp){\\n\"\n                            \"    if(temp==4){\\n\"\n                            \"        return true;\\n\"\n                            \"    }\\n\"\n                            \"    else\\n\"\n                            \"        return false;\\n\"\n                            \"}\\n\"\n                            \"bool compare2(int temp){\\n\"\n                            \"    if(temp == 5){\\n\"\n                            \"        return true;\\n\"\n                            \"    }\\n\"\n                            \"    else\\n\"\n                            \"        return false;\\n\"\n                            \"}\\n\";\n        check(code);\n        ASSERT_EQUALS(\"[test.cpp:5:10]: (style) Comparison of a variable having boolean value using relational (<, >, <= or >=) operator. [comparisonOfBoolWithBoolError]\\n\", errout_str());\n    }\n\n    void bitwiseOnBoolean() { // 3062\n        check(\"void f(_Bool a, _Bool b) {\\n\"\n              \"    if(a & b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"void f(_Bool a, _Bool b) {\\n\"\n              \"    if(a | b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"void f(bool a, bool b) {\\n\"\n              \"    if(a & !b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"void f(bool a, bool b) {\\n\"\n              \"    if(a | !b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"bool a, b;\\n\"\n              \"void f() {\\n\"\n              \"    if(a & b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"bool a, b;\\n\"\n              \"void f() {\\n\"\n              \"    if(a & !b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"bool a, b;\\n\"\n              \"void f() {\\n\"\n              \"    if(a | b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"bool a, b;\\n\"\n              \"void f() {\\n\"\n              \"    if(a | !b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:10]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"void f(bool a, int b) {\\n\"\n              \"    if(a & b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"void f(int a, bool b) {\\n\"\n              \"    if(a & b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (style, inconclusive) Boolean expression 'b' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"void f(int a, int b) {\\n\"\n              \"    if((a > 0) & (b < 0)) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:16]: (style, inconclusive) Boolean expression 'a>0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"void f(bool a, int b) {\\n\"\n              \"    if(a | b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"void f(int a, bool b) {\\n\"\n              \"    if(a | b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (style, inconclusive) Boolean expression 'b' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"int f(bool a, int b) {\\n\"\n              \"    return a | b;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(bool a, int b) {\\n\"\n              \"    return a | b;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:14]: (style, inconclusive) Boolean expression 'a' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"void f(int a, int b) {\\n\"\n              \"    if(a & b) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(bool b) {\\n\"\n              \"    foo(bar, &b);\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(bool b) {\\n\" // #9405\n              \"    class C { void foo(bool &b) {} };\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f();\\n\"\n              \"bool g() {\\n\"\n              \"  return f() | f();\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"uint8 outcode(float p) {\\n\"\n              \"    float d = 0.;\\n\"\n              \"    return ((p - xm >= d) << 1) | (x - p > d);\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"int g();\\n\" // #10655\n              \"void f(bool b) {\\n\"\n              \"    if (g() | b) {}\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:13]: (style, inconclusive) Boolean expression 'b' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"int g();\\n\"\n              \"void f(bool b) {\\n\"\n              \"    if (b | g()) {}\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"int g();\\n\"\n              \"bool f(bool b, bool c) {\\n\"\n              \"    return b | g() | c;\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:20]: (style, inconclusive) Boolean expression 'c' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]\\n\", errout_str());\n\n        check(\"void f(int i) {\\n\" // #4233\n              \"    bool b = true, c = false;\\n\"\n              \"    b &= i;\\n\"\n              \"    c |= i;\\n\"\n              \"    if (b || c) {}\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"[test.cpp:3:7]: (style, inconclusive) Boolean expression 'b' is used in bitwise operation. [bitwiseOnBoolean]\\n\"\n                      \"[test.cpp:4:7]: (style, inconclusive) Boolean expression 'c' is used in bitwise operation. [bitwiseOnBoolean]\\n\",\n                      errout_str());\n\n        check(\"void f(int i, int j, bool b) {\\n\"\n              \"    i &= b;\\n\"\n              \"    j |= b;\\n\"\n              \"    if (b || c) {}\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(bool b, int i) {\\n\"\n              \"    b &= (i == 5);\\n\"\n              \"    return b;\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"struct S { bool b{}; };\\n\" // #12455\n              \"void f(const std::unordered_map<int, S> m) {\\n\"\n              \"    for (const auto& e : m) {\\n\"\n              \"        S s;\\n\"\n              \"        s.b |= e.second.b;\\n\"\n              \"        (void)s.b;\\n\"\n              \"    }\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void incrementBoolean() {\n        check(\"bool bValue = true;\\n\"\n              \"void f() { bValue++; }\");\n        ASSERT_EQUALS(\"[test.cpp:2:12]: (style) Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead. [incrementboolean]\\n\", errout_str());\n\n        check(\"void f(bool test){\\n\"\n              \"    test++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:5]: (style) Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead. [incrementboolean]\\n\", errout_str());\n\n        check(\"void f(bool* test){\\n\"\n              \"    (*test)++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:6]: (style) Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead. [incrementboolean]\\n\", errout_str());\n\n        check(\"void f(bool* test){\\n\"\n              \"    test[0]++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:9]: (style) Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead. [incrementboolean]\\n\", errout_str());\n\n        check(\"void f(int test){\\n\"\n              \"    test++;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void comparisonOfBoolWithInt1() {\n        check(\"void f(bool x) {\\n\"\n              \"    if (x < 10) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:11]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(bool x) {\\n\"\n              \"    if (10 >= x) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:12]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(bool x) {\\n\"\n              \"    if (x != 0) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(bool x) {\\n\"  // #3356\n              \"    if (x == 1) {\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(bool x) {\\n\"\n              \"    if (x != 10) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:11]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(bool x) {\\n\"\n              \"    if (x == 10) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:11]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n\n        check(\"void f(bool x) {\\n\"\n              \"    if (x == 0) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"DensePropertyMap<int, true> visited;\"); // #4075\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void comparisonOfBoolWithInt2() {\n        check(\"void f(bool x, int y) {\\n\"\n              \"    if (x == y) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(int x, bool y) {\\n\"\n              \"    if (x == y) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(bool x, bool y) {\\n\"\n              \"    if (x == y) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(bool x, fooClass y) {\\n\"\n              \"    if (x == y) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void comparisonOfBoolWithInt3() {\n        check(\"void f(int y) {\\n\"\n              \"    if (y > false) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:13]: (warning) Comparison of a boolean value using relational operator (<, >, <= or >=). [comparisonOfBoolWithInvalidComparator]\\n\", errout_str());\n\n        check(\"void f(int y) {\\n\"\n              \"    if (true == y) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(bool y) {\\n\"\n              \"    if (y == true) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"void f(bool y) {\\n\"\n              \"    if (false < 5) {\\n\"\n              \"        printf(\\\"foo\\\");\\n\"\n              \"    }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:15]: (warning) Comparison of a boolean expression with an integer other than 0 or 1. [compareBoolExpressionWithInt]\\n\", errout_str());\n    }\n\n    void comparisonOfBoolWithInt4() {\n        check(\"void f(int x) {\\n\"\n              \"    if (!x == 1) { }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void comparisonOfBoolWithInt5() {\n        check(\"void SetVisible(int index, bool visible) {\\n\"\n              \"    bool (SciTEBase::*ischarforsel)(char ch);\\n\"\n              \"    if (visible != GetVisible(index)) { }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void comparisonOfBoolWithInt6() { // #4224 - integer is casted to bool\n        check(\"void SetVisible(bool b, int i) {\\n\"\n              \"    if (b == (bool)i) { }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void comparisonOfBoolWithInt7() { // #4846 - (!x==true)\n        check(\"void f(int x) {\\n\"\n              \"    if (!x == true) { }\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void comparisonOfBoolWithInt8() { // #9165\n        check(\"bool Fun();\\n\"\n              \"void Test(bool expectedResult) {\\n\"\n              \"    auto res = Fun();\\n\"\n              \"    if (expectedResult == res)\\n\"\n              \"        throw 2;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"int Fun();\\n\"\n              \"void Test(bool expectedResult) {\\n\"\n              \"    auto res = Fun();\\n\"\n              \"    if (expectedResult == res)\\n\"\n              \"        throw 2;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool Fun();\\n\"\n              \"void Test(bool expectedResult) {\\n\"\n              \"    auto res = Fun();\\n\"\n              \"    if (5 + expectedResult == res)\\n\"\n              \"        throw 2;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"int Fun();\\n\"\n              \"void Test(bool expectedResult) {\\n\"\n              \"    auto res = Fun();\\n\"\n              \"    if (5 + expectedResult == res)\\n\"\n              \"        throw 2;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"int Fun();\\n\"\n              \"void Test(bool expectedResult) {\\n\"\n              \"    auto res = Fun();\\n\"\n              \"    if (expectedResult == res + 5)\\n\"\n              \"        throw 2;\\n\"\n              \"}\");\n        TODO_ASSERT_EQUALS(\"error\", \"\", errout_str());\n    }\n\n    void comparisonOfBoolWithInt9() { // #9304\n        check(\"bool f(int a, bool b)\\n\"\n              \"{\\n\"\n              \"    if ((a == 0 ? false : true) != b) {\\n\"\n              \"        b = !b;\\n\"\n              \"    }\\n\"\n              \"    return b;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void comparisonOfBoolWithInt10() { // #10935\n        check(\"enum class E { H = 2 };\\n\"\n              \"template <bool H>\\n\"\n              \"void f(bool v) {\\n\"\n              \"    if (v == H) {}\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"namespace N {\\n\"\n              \"    enum class E { H = 2 };\\n\"\n              \"}\\n\"\n              \"void f(bool v) {\\n\"\n              \"    if (v == N::H) {}\\n\"\n              \"}\\n\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n\n    void pointerArithBool1() { // #5126\n        check(\"void f(char *p) {\\n\"\n              \"    if (p+1){}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (error) Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour. [pointerArithBool]\\n\", errout_str());\n\n        check(\"void f(char *p) {\\n\"\n              \"    do {} while (p+1);\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:19]: (error) Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour. [pointerArithBool]\\n\", errout_str());\n\n        check(\"void f(char *p) {\\n\"\n              \"    while (p-1) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:13]: (error) Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour. [pointerArithBool]\\n\", errout_str());\n\n        check(\"void f(char *p) {\\n\"\n              \"    for (int i = 0; p+1; i++) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:22]: (error) Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour. [pointerArithBool]\\n\", errout_str());\n\n        check(\"void f(char *p) {\\n\"\n              \"    if (p && p+1){}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:15]: (error) Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour. [pointerArithBool]\\n\", errout_str());\n\n        check(\"void f(char *p) {\\n\"\n              \"    if (p+2 || p) {}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:10]: (error) Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour. [pointerArithBool]\\n\", errout_str());\n    }\n\n    void returnNonBool() {\n        check(\"bool f(void) {\\n\"\n              \"    return 0;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    return 1;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    return 2;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:5]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    return -1;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:5]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    return 1 + 1;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:2:5]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    int x = 0;\\n\"\n              \"    return x;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    int x = 10;\\n\"\n              \"    return x;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:5]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    return 2 < 1;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    int ret = 0;\\n\"\n              \"    if (a)\\n\"\n              \"        ret = 1;\\n\"\n              \"    return ret;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    int ret = 0;\\n\"\n              \"    if (a)\\n\"\n              \"        ret = 3;\\n\"\n              \"    return ret;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:5:5]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    if (a)\\n\"\n              \"        return 3;\\n\"\n              \"    return 4;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:9]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\"\n                      \"[test.cpp:4:5]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    return;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void returnNonBoolLambda() {\n        check(\"bool f(void) {\\n\"\n              \"    auto x = [](void) { return -1; };\\n\"\n              \"    return false;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    auto x = [](void) { return -1; };\\n\"\n              \"    return 2;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:5]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    auto x = [](void) -> int { return -1; };\\n\"\n              \"    return false;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(void) {\\n\"\n              \"    auto x = [](void) -> int { return -1; };\\n\"\n              \"    return 2;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:5]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\", errout_str());\n    }\n\n    void returnNonBoolLogicalOp() {\n        check(\"bool f(int x) {\\n\"\n              \"    return x & 0x4;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(int x, int y) {\\n\"\n              \"    return x | y;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f(int x) {\\n\"\n              \"    return (x & 0x2);\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n    }\n\n    void returnNonBoolClass() {\n        check(\"class X {\\n\"\n              \"    public:\\n\"\n              \"        bool f() { return -1;}\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:3:20]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\", errout_str());\n\n        check(\"bool f() {\\n\"\n              \"    struct X {\\n\"\n              \"        public:\\n\"\n              \"            int f() { return -1;}\\n\"\n              \"    };\\n\"\n              \"    return false;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f() {\\n\"\n              \"    class X {\\n\"\n              \"        public:\\n\"\n              \"            int f() { return -1;}\\n\"\n              \"    };\\n\"\n              \"    return false;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"\", errout_str());\n\n        check(\"bool f() {\\n\"\n              \"    class X {\\n\"\n              \"        public:\\n\"\n              \"            bool f() { return -1;}\\n\"\n              \"    };\\n\"\n              \"    return -1;\\n\"\n              \"}\");\n        ASSERT_EQUALS(\"[test.cpp:6:5]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\"\n                      \"[test.cpp:4:24]: (style) Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]\\n\", errout_str());\n    }\n};\n\nREGISTER_TEST(TestBool)\n"
    }
  ]
}