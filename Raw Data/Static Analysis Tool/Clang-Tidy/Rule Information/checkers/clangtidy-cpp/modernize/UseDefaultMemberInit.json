{
  "name": "UseDefaultMemberInit",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-default-member-init",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 332,
  "branches": 89,
  "apis": 207,
  "test": [
    {
      "description": null,
      "expected-problems": 97,
      "expected-linenumbers": [
        11,
        14,
        28,
        36,
        44,
        52,
        72,
        82,
        94,
        102,
        110,
        118,
        126,
        134,
        142,
        150,
        158,
        166,
        174,
        182,
        190,
        198,
        207,
        215,
        223,
        232,
        287,
        288,
        289,
        292,
        293,
        294,
        297,
        298,
        299,
        302,
        312,
        313,
        316,
        317,
        320,
        321,
        322,
        325,
        337,
        338,
        341,
        342,
        345,
        346,
        349,
        360,
        361,
        364,
        365,
        368,
        377,
        380,
        388,
        389,
        390,
        393,
        394,
        395,
        398,
        399,
        400,
        410,
        411,
        414,
        415,
        418,
        419,
        422,
        432,
        467,
        468,
        481,
        491,
        499,
        507,
        515,
        532,
        535,
        541,
        545,
        548,
        555,
        558,
        565,
        567,
        571,
        579,
        584,
        587,
        590,
        593
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++11,c++14,c++17 %s modernize-use-default-member-init %t -- -- -fexceptions\n// FIXME: Fix the checker to work in C++20 mode.\n\nstruct S {\n};\n\nstruct PositiveValueChar {\n  PositiveValueChar() : c0(), c1()/*, c2(), c3()*/ {}\n  // CHECK-FIXES: PositiveValueChar()  {}\n  const char c0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: use default member initializer for 'c0' [modernize-use-default-member-init]\n  // CHECK-FIXES: const char c0{};\n  wchar_t c1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: use default member initializer for 'c1'\n  // CHECK-FIXES: wchar_t c1{};\n  // FIXME: char16_t c2;\n  // C HECK-MESSAGES: :[[@LINE-1]]:12: warning: use default member initializer for 'c2'\n  // C HECK-FIXES: char16_t c2{};\n  // FIXME: char32_t c3;\n  // C HECK-MESSAGES: :[[@LINE-1]]:12: warning: use default member initializer for 'c3'\n  // C HECK-FIXES: char32_t c3{};\n};\n\nstruct PositiveChar {\n  PositiveChar() : d('a') {}\n  // CHECK-FIXES: PositiveChar()  {}\n  char d;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use default member initializer for 'd'\n  // CHECK-FIXES: char d{'a'};\n};\n\nstruct PositiveValueInt {\n  PositiveValueInt() : i() {}\n  // CHECK-FIXES: PositiveValueInt()  {}\n  const int i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use default member initializer for 'i'\n  // CHECK-FIXES: const int i{};\n};\n\nstruct PositiveInt {\n  PositiveInt() : j(1) {}\n  // CHECK-FIXES: PositiveInt()  {}\n  int j;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'j'\n  // CHECK-FIXES: int j{1};\n};\n\nstruct PositiveNotDefaultInt {\n  PositiveNotDefaultInt(int) : i(7) {}\n  // CHECK-FIXES: PositiveNotDefaultInt(int)  {}\n  int i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'i'\n  // CHECK-FIXES: int i{7};\n};\n\n// We cannot reconcile these initializers.\nstruct TwoConstructors {\n    TwoConstructors(int) : i(7) {}\n    TwoConstructors(int, int) : i(8) {}\n    int i;\n};\n\nstruct TwoConstructorsTpl {\n  TwoConstructorsTpl() : i{7} {}\n  template <typename T> TwoConstructorsTpl(T, int) : i(8) {}\n  int i;\n};\n\nstruct PositiveNotDefaultOOLInt {\n  PositiveNotDefaultOOLInt(int);\n  int i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'i'\n  // CHECK-FIXES: int i{7};\n};\n\nPositiveNotDefaultOOLInt::PositiveNotDefaultOOLInt(int) : i(7) {}\n// CHECK-FIXES: PositiveNotDefaultOOLInt::PositiveNotDefaultOOLInt(int)  {}\n\nstruct PositiveNotDefaultOOLInt2 {\n  PositiveNotDefaultOOLInt2(int, int);\n  int i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'i'\n  // CHECK-FIXES: int i{7};\n  int j;\n};\n\nPositiveNotDefaultOOLInt2::PositiveNotDefaultOOLInt2(int, int arg) : i(7), j(arg) {}\n// CHECK-FIXES: PositiveNotDefaultOOLInt2::PositiveNotDefaultOOLInt2(int, int arg) :  j(arg) {}\n\nstruct PositiveUnaryMinusInt {\n  PositiveUnaryMinusInt() : j(-1) {}\n  // CHECK-FIXES: PositiveUnaryMinusInt()  {}\n  int j;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'j'\n  // CHECK-FIXES: int j{-1};\n};\n\nstruct PositiveUnaryPlusInt {\n  PositiveUnaryPlusInt() : j(+1) {}\n  // CHECK-FIXES: PositiveUnaryPlusInt()  {}\n  int j;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'j'\n  // CHECK-FIXES: int j{+1};\n};\n\nstruct PositiveValueComplexInt {\n  PositiveValueComplexInt() : i() {}\n  // CHECK-FIXES: PositiveValueComplexInt()  {}\n  _Complex int i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: use default member initializer for 'i'\n  // CHECK-FIXES: _Complex int i{};\n};\n\nstruct PositiveValueFloat {\n  PositiveValueFloat() : f() {}\n  // CHECK-FIXES: PositiveValueFloat()  {}\n  float f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use default member initializer for 'f'\n  // CHECK-FIXES: float f{};\n};\n\nstruct PositiveValueDouble {\n  PositiveValueDouble() : d() {}\n  // CHECK-FIXES: PositiveValueDouble()  {}\n  double d;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use default member initializer for 'd'\n  // CHECK-FIXES: double d{};\n};\n\nstruct PositiveDouble {\n  PositiveDouble() : f(2.5463e43) {}\n  // CHECK-FIXES: PositiveDouble()  {}\n  double f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use default member initializer for 'f'\n  // CHECK-FIXES: double f{2.5463e43};\n};\n\nstruct PositiveValueComplexFloat {\n  PositiveValueComplexFloat() : f() {}\n  // CHECK-FIXES: PositiveValueComplexFloat()  {}\n  _Complex float f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:18: warning: use default member initializer for 'f'\n  // CHECK-FIXES: _Complex float f{};\n};\n\nstruct PositiveValueComplexDouble {\n  PositiveValueComplexDouble() : f() {}\n  // CHECK-FIXES: PositiveValueComplexDouble()  {}\n  _Complex double f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: use default member initializer for 'f'\n  // CHECK-FIXES: _Complex double f{};\n};\n\nstruct PositiveUnaryMinusDouble {\n  PositiveUnaryMinusDouble() : f(-2.5463e43) {}\n  // CHECK-FIXES: PositiveUnaryMinusDouble()  {}\n  double f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use default member initializer for 'f'\n  // CHECK-FIXES: double f{-2.5463e43};\n};\n\nstruct PositiveUnaryPlusDouble {\n  PositiveUnaryPlusDouble() : f(+2.5463e43) {}\n  // CHECK-FIXES: PositiveUnaryPlusDouble()  {}\n  double f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use default member initializer for 'f'\n  // CHECK-FIXES: double f{+2.5463e43};\n};\n\nstruct PositiveValueBool {\n  PositiveValueBool() : b() {}\n  // CHECK-FIXES: PositiveValueBool()  {}\n  bool b;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use default member initializer for 'b'\n  // CHECK-FIXES: bool b{};\n};\n\nstruct PositiveBool {\n  PositiveBool() : a(true) {}\n  // CHECK-FIXES: PositiveBool()  {}\n  bool a;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use default member initializer for 'a'\n  // CHECK-FIXES: bool a{true};\n};\n\nstruct PositiveValuePointer {\n  PositiveValuePointer() : p() {}\n  // CHECK-FIXES: PositiveValuePointer()  {}\n  int *p;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use default member initializer for 'p'\n  // CHECK-FIXES: int *p{};\n};\n\nstruct PositiveNullPointer {\n  PositiveNullPointer() : q(nullptr) {}\n  // CHECK-FIXES: PositiveNullPointer()  {}\n  int *q;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use default member initializer for 'q'\n  // CHECK-FIXES: int *q{nullptr};\n};\n\nenum Enum { Foo, Bar };\nstruct PositiveEnum {\n  PositiveEnum() : e(Foo) {}\n  // CHECK-FIXES: PositiveEnum()  {}\n  Enum e;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use default member initializer for 'e'\n  // CHECK-FIXES: Enum e{Foo};\n};\n\nstruct PositiveValueEnum {\n  PositiveValueEnum() : e() {}\n  // CHECK-FIXES: PositiveValueEnum()  {}\n  Enum e;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use default member initializer for 'e'\n  // CHECK-FIXES: Enum e{};\n};\n\nstruct PositiveString {\n  PositiveString() : s(\"foo\") {}\n  // CHECK-FIXES: PositiveString()  {}\n  const char *s;\n  // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: use default member initializer for 's'\n  // CHECK-FIXES: const char *s{\"foo\"};\n};\n\nstruct PositiveStruct {\n  PositiveStruct() : s(7) {}\n  // CHECK-FIXES: PositiveStruct()  {}\n  struct {\n    int s;\n    // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use default member initializer for 's'\n    // CHECK-FIXES: int s{7};\n  };\n};\n\ntemplate <typename T>\nstruct NegativeTemplate {\n    NegativeTemplate() : t() {}\n    T t;\n};\n\nNegativeTemplate<int> nti;\nNegativeTemplate<double> ntd;\n\nstruct NegativeDefaultMember {\n  NegativeDefaultMember() {}\n  int i = 2;\n};\n\nstruct NegativeClass : S {\n  NegativeClass() : s() {}\n  S s;\n};\n\nstruct NegativeBase : S {\n  NegativeBase() : S() {}\n};\n\nstruct NegativeDefaultOtherMember{\n  NegativeDefaultOtherMember() : i(3) {}\n  int i = 4;\n};\n\nstruct NegativeUnion {\n  NegativeUnion() : d(5.0) {}\n  union {\n    int i;\n    double d;\n  };\n};\n\nstruct NegativeBitField\n{\n  NegativeBitField() : i(6) {}\n  int i : 5;\n};\n\nstruct NegativeDefaultArg\n{\n  NegativeDefaultArg(int i = 4) : i(i) {}\n  int i;\n};\n\nstruct ExistingChar {\n  ExistingChar(short) : e1(), e2{}, e3(), e4() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: member initializer for 'e1' is redundant [modernize-use-default-member-init]\n  // CHECK-MESSAGES: :[[@LINE-2]]:31: warning: member initializer for 'e2' is redundant\n  // CHECK-MESSAGES: :[[@LINE-3]]:37: warning: member initializer for 'e3' is redundant\n  // CHECK-FIXES: ExistingChar(short) :  e4() {}\n  ExistingChar(int) : e1(0), e2{0}, e3(0), e4(0) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:30: warning: member initializer for 'e2' is redundant\n  // CHECK-MESSAGES: :[[@LINE-3]]:37: warning: member initializer for 'e3' is redundant\n  // CHECK-FIXES: ExistingChar(int) :  e4(0) {}\n  ExistingChar(long) : e1('\\0'), e2{'\\0'}, e3('\\0'), e4('\\0') {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:34: warning: member initializer for 'e2' is redundant\n  // CHECK-MESSAGES: :[[@LINE-3]]:44: warning: member initializer for 'e3' is redundant\n  // CHECK-FIXES: ExistingChar(long) :  e4('\\0') {}\n  ExistingChar(char) : e1('a'), e2{'a'}, e3('a'), e4('a') {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:51: warning: member initializer for 'e4' is redundant\n  // CHECK-FIXES: ExistingChar(char) : e1('a'), e2{'a'}, e3('a') {}\n  char e1{};\n  char e2 = 0;\n  char e3 = '\\0';\n  char e4 = 'a';\n};\n\nstruct ExistingInt {\n  ExistingInt(short) : e1(), e2{}, e3(), e4(), e5(), e6() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: member initializer for 'e1' is redundant [modernize-use-default-member-init]\n  // CHECK-MESSAGES: :[[@LINE-2]]:30: warning: member initializer for 'e2' is redundant\n  // CHECK-FIXES: ExistingInt(short) :  e3(), e4(), e5(), e6() {}\n  ExistingInt(int) : e1(0), e2{0}, e3(0), e4(0), e5(0), e6(0) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:29: warning: member initializer for 'e2' is redundant\n  // CHECK-FIXES: ExistingInt(int) :  e3(0), e4(0), e5(0), e6(0) {}\n  ExistingInt(long) : e1(5), e2{5}, e3(5), e4(5), e5(5), e6(5) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:37: warning: member initializer for 'e3' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:44: warning: member initializer for 'e4' is redundant\n  // CHECK-MESSAGES: :[[@LINE-3]]:58: warning: member initializer for 'e6' is redundant\n  // CHECK-FIXES: ExistingInt(long) : e1(5), e2{5},  e5(5) {}\n  ExistingInt(char) : e1(-5), e2{-5}, e3(-5), e4(-5), e5(-5), e6(-5) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:55: warning: member initializer for 'e5' is redundant\n  // CHECK-FIXES: ExistingInt(char) : e1(-5), e2{-5}, e3(-5), e4(-5),  e6(-5) {}\n  int e1{};\n  int e2 = 0;\n  int e3 = {5};\n  int e4{5};\n  int e5 = -5;\n  int e6 = +5;\n};\n\nstruct ExistingDouble {\n  ExistingDouble(short) : e1(), e2{}, e3(), e4(), e5() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:33: warning: member initializer for 'e2' is redundant\n  // CHECK-FIXES: ExistingDouble(short) :  e3(), e4(), e5() {}\n  ExistingDouble(int) : e1(0.0), e2{0.0}, e3(0.0), e4(0.0), e5(0.0) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:34: warning: member initializer for 'e2' is redundant\n  // CHECK-FIXES: ExistingDouble(int) :  e3(0.0), e4(0.0), e5(0.0) {}\n  ExistingDouble(long) : e1(5.0), e2{5.0}, e3(5.0), e4(5.0), e5(5.0) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:44: warning: member initializer for 'e3' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:62: warning: member initializer for 'e5' is redundant\n  // CHECK-FIXES: ExistingDouble(long) : e1(5.0), e2{5.0},  e4(5.0) {}\n  ExistingDouble(char) : e1(-5.0), e2{-5.0}, e3(-5.0), e4(-5.0), e5(-5.0) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:56: warning: member initializer for 'e4' is redundant\n  // CHECK-FIXES: ExistingDouble(char) : e1(-5.0), e2{-5.0}, e3(-5.0),  e5(-5.0) {}\n  double e1{};\n  double e2 = 0.0;\n  double e3 = 5.0;\n  double e4{-5.0};\n  double e5 = +5.0;\n};\n\nstruct ExistingBool {\n  ExistingBool(short) : e1(), e2{}, e3() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:31: warning: member initializer for 'e2' is redundant\n  // CHECK-FIXES: ExistingBool(short) :  e3() {}\n  ExistingBool(int) : e1(false), e2{false}, e3(false) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:34: warning: member initializer for 'e2' is redundant\n  // CHECK-FIXES: ExistingBool(int) :  e3(false) {}\n  ExistingBool(long) : e1(true), e2{true}, e3(true) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:44: warning: member initializer for 'e3' is redundant\n  // CHECK-FIXES: ExistingBool(long) : e1(true), e2{true} {}\n  bool e1{};\n  bool e2 = false;\n  bool e3{true};\n};\n\nstruct ExistingEnum {\n  ExistingEnum(short) : e1(Foo), e2{Foo} {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: member initializer for 'e1' is redundant\n  // CHECK-FIXES: ExistingEnum(short) :  e2{Foo} {}\n  ExistingEnum(int) : e1(Bar), e2{Bar} {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:32: warning: member initializer for 'e2' is redundant\n  // CHECK-FIXES: ExistingEnum(int) : e1(Bar) {}\n  Enum e1 = Foo;\n  Enum e2{Bar};\n};\n\nstruct ExistingPointer {\n  ExistingPointer(short) : e1(), e2{}, e3(), e4() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:34: warning: member initializer for 'e2' is redundant\n  // CHECK-MESSAGES: :[[@LINE-3]]:40: warning: member initializer for 'e3' is redundant\n  // CHECK-FIXES: ExistingPointer(short) :  e4() {}\n  ExistingPointer(int) : e1(0), e2{0}, e3(0), e4(&e1) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:33: warning: member initializer for 'e2' is redundant\n  // CHECK-MESSAGES: :[[@LINE-3]]:40: warning: member initializer for 'e3' is redundant\n  // CHECK-FIXES: ExistingPointer(int) :  e4(&e1) {}\n  ExistingPointer(long) : e1(nullptr), e2{nullptr}, e3(nullptr), e4(&e2) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:40: warning: member initializer for 'e2' is redundant\n  // CHECK-MESSAGES: :[[@LINE-3]]:53: warning: member initializer for 'e3' is redundant\n  // CHECK-FIXES: ExistingPointer(long) :  e4(&e2) {}\n  int *e1{};\n  int *e2 = 0;\n  int *e3{nullptr};\n  int **e4 = &e1;\n};\n\nstruct ExistingString {\n  ExistingString(short) : e1(), e2{}, e3(), e4() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: member initializer for 'e1' is redundant [modernize-use-default-member-init]\n  // CHECK-MESSAGES: :[[@LINE-2]]:33: warning: member initializer for 'e2' is redundant\n  // CHECK-FIXES: ExistingString(short) :  e3(), e4() {}\n  ExistingString(int) : e1(0), e2{0}, e3(0), e4(0) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:32: warning: member initializer for 'e2' is redundant\n  // CHECK-FIXES: ExistingString(int) :  e3(0), e4(0) {}\n  ExistingString(long) : e1(nullptr), e2{nullptr}, e3(nullptr), e4(nullptr) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: member initializer for 'e1' is redundant\n  // CHECK-MESSAGES: :[[@LINE-2]]:39: warning: member initializer for 'e2' is redundant\n  // CHECK-FIXES: ExistingString(long) :  e3(nullptr), e4(nullptr) {}\n  ExistingString(char) : e1(\"foo\"), e2{\"foo\"}, e3(\"foo\"), e4(\"foo\") {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:48: warning: member initializer for 'e3' is redundant\n  // CHECK-FIXES: ExistingString(char) : e1(\"foo\"), e2{\"foo\"},  e4(\"foo\") {}\n  const char *e1{};\n  const char *e2 = nullptr;\n  const char *e3 = \"foo\";\n  const char *e4 = \"bar\";\n};\n\nstruct UnionExisting {\n  UnionExisting() : e(5.0) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: member initializer for 'e' is redundant\n  // CHECK-FIXES: UnionExisting()  {}\n  union {\n    int i;\n    double e = 5.0;\n  };\n};\n\ntemplate <typename T>\nstruct NegativeTemplateExisting {\n  NegativeTemplateExisting(int) : t(0) {}\n  T t{};\n};\n\nNegativeTemplateExisting<int> ntei(0);\nNegativeTemplateExisting<double> nted(0);\n\n// This resulted in a warning by default.\n#define MACRO() \\\n  struct MacroS { \\\n    void *P; \\\n    MacroS() : P(nullptr) {} \\\n  };\n\nMACRO();\n\n\nclass FunctionTryBlock {\npublic:\n  FunctionTryBlock() try : i(5), k(8) {}\n  // CHECK-FIXES: FunctionTryBlock() try  {}\n  catch (...) {}\n\nprivate:\n  int i, k;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'i' [modernize-use-default-member-init]\n  // CHECK-MESSAGES: :[[@LINE-2]]:10: warning: use default member initializer for 'k' [modernize-use-default-member-init]\n  // CHECK-FIXES: int i{5}, k{8};\n};\n\nstruct PR45363 {\n  // Ensure no warning is emitted here\n  PR45363(int i = 0) : m_i{i} {}\n  int m_i;\n};\n\nstruct EmptyBracedIntDefault {\n  EmptyBracedIntDefault() : m_i{} {}\n  int m_i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'm_i' [modernize-use-default-member-init]\n  // CHECK-FIXES:      {{^  }}EmptyBracedIntDefault()  {}\n  // CHECK-FIXES-NEXT: {{^  }}int m_i{};\n};\n\nnamespace PR63285 {\n\nclass ArrayValueInit {\n  ArrayValueInit() : m_array() {}\n  double m_array[1];\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use default member initializer for 'm_array' [modernize-use-default-member-init]\n  // CHECK-FIXES:      {{^  }}ArrayValueInit()  {}\n  // CHECK-FIXES-NEXT: {{^  }}double m_array[1]{};\n};\n\nclass ArrayBraceInit {\n  ArrayBraceInit() : m_array{} {}\n  double m_array[1];\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use default member initializer for 'm_array' [modernize-use-default-member-init]\n  // CHECK-FIXES:      {{^  }}ArrayBraceInit()  {}\n  // CHECK-FIXES-NEXT: {{^  }}double m_array[1]{};\n};\n\nclass ArrayBraceInitWithValue {\n  ArrayBraceInitWithValue() : m_array{3.14} {}\n  double m_array[1];\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use default member initializer for 'm_array' [modernize-use-default-member-init]\n  // CHECK-FIXES:      {{^  }}ArrayBraceInitWithValue()  {}\n  // CHECK-FIXES-NEXT: {{^  }}double m_array[1]{3.14};\n};\n\nclass ArrayBraceInitMultipleValues {\n  ArrayBraceInitMultipleValues() : m_array{1.0, 2.0, 3.0} {}\n  double m_array[3];\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use default member initializer for 'm_array' [modernize-use-default-member-init]\n  // CHECK-FIXES:      {{^  }}ArrayBraceInitMultipleValues()  {}\n  // CHECK-FIXES-NEXT: {{^  }}double m_array[3]{1.0, 2.0, 3.0};\n};\n\n} // namespace PR63285\n\nnamespace PR122480 {\n\n  static int STATIC_VAL = 23;\n  constexpr const char* CONSTEXPR_REF = \"Const\";\n\n  class StaticConstExprInit {\n\n    StaticConstExprInit() : a{CONSTEXPR_REF}, b{STATIC_VAL}{}\n    // CHECK-FIXES: StaticConstExprInit()  {}\n    const char* a;\n    // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: use default member initializer for 'a' [modernize-use-default-member-init]\n    // CHECK-FIXES: const char* a{CONSTEXPR_REF};\n    int b;\n    // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use default member initializer for 'b' [modernize-use-default-member-init]\n    // CHECK-FIXES: int b{STATIC_VAL};\n  };\n\nclass CStyleCastInit {\n  CStyleCastInit() : a{(int)1.23}, b{(float)42}, c{(double)'C'} {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:50: warning: member initializer for 'c' is redundant [modernize-use-default-member-init]\n  // CHECK-FIXES: CStyleCastInit()  {}\n\n  int a;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'a' [modernize-use-default-member-init]\n  // CHECK-FIXES: int a{(int)1.23};\n  float b;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use default member initializer for 'b' [modernize-use-default-member-init]\n  // CHECK-FIXES: float b{(float)42};\n  double c{(double)'C'};\n};\n\nclass StaticCastInit {\n  StaticCastInit() : m(static_cast<int>(9.99)), n(static_cast<char>(65)) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:49: warning: member initializer for 'n' is redundant [modernize-use-default-member-init]\n  // CHECK-FIXES: StaticCastInit()  {}\n  int m;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'm' [modernize-use-default-member-init]\n  // CHECK-FIXES: int m{static_cast<int>(9.99)};\n  char n{static_cast<char>(65)};\n};\n\nclass FunctionalCastInit {\n  FunctionalCastInit() : a(int(5.67)), b(float(2)), c(double('C')) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:40: warning: member initializer for 'b' is redundant [modernize-use-default-member-init]\n  int a;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'a' [modernize-use-default-member-init]\n  // CHECK-FIXES: int a{int(5.67)};\n  float b{float(2)};\n  double c;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use default member initializer for 'c' [modernize-use-default-member-init]\n  // CHECK-FIXES: double c{double('C')};\n};\n\n#define ARITHMETIC_MACRO (44 - 2)\n\nclass DefaultMemberInitWithArithmetic {\n  DefaultMemberInitWithArithmetic() : a{1 + 1},  b{1 + 11 + 123 + 1234},  c{2 + (4 / 2) + 3 + (7 / 11)},  d{ARITHMETIC_MACRO * 2}, e{1.2 + 3.4} {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:39: warning: member initializer for 'a' is redundant [modernize-use-default-member-init]\n  // CHECK-FIXES: DefaultMemberInitWithArithmetic()  {}\n\n  int a{1 + 1};\n  int b;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'b' [modernize-use-default-member-init]\n  // CHECK-FIXES:  int b{1 + 11 + 123 + 1234};\n  int c;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'c' [modernize-use-default-member-init]\n  // CHECK-FIXES: int c{2 + (4 / 2) + 3 + (7 / 11)};\n  int d;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use default member initializer for 'd' [modernize-use-default-member-init]\n  // CHECK-FIXES: int d{ARITHMETIC_MACRO * 2};\n  double e;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use default member initializer for 'e' [modernize-use-default-member-init]\n  // CHECK-FIXES: double e{1.2 + 3.4};\n\n};\n\n} //namespace PR122480"
    }
  ]
}