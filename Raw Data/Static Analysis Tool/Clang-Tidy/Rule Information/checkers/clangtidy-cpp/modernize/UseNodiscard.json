{
  "name": "UseNodiscard",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-nodiscard",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 147,
  "branches": 10,
  "apis": 89,
  "test": [
    {
      "description": null,
      "expected-problems": 16,
      "expected-linenumbers": [
        32,
        36,
        40,
        44,
        72,
        84,
        88,
        92,
        96,
        100,
        105,
        112,
        118,
        122,
        128,
        203
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++17-or-later %s modernize-use-nodiscard %t -- \\\n// RUN:   -config=\"{CheckOptions: {modernize-use-nodiscard.ReplacementString: 'NO_DISCARD'}}\"\n\nnamespace std {\ntemplate <class>\nclass function;\nclass string {};\n}\n\nnamespace boost {\ntemplate <class>\nclass function;\n}\n\n#define MUST_USE_RESULT __attribute__((warn_unused_result))\n#define NO_DISCARD [[nodiscard]]\n#define NO_RETURN [[noreturn]]\n\n#define BOOLEAN_FUNC bool f23() const\n\ntypedef unsigned my_unsigned;\ntypedef unsigned &my_unsigned_reference;\ntypedef const unsigned &my_unsigned_const_reference;\n\nstruct NO_DISCARD NoDiscardStruct{};\n\nclass Foo {\npublic:\n    using size_type = unsigned;\n\n    bool f1() const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f1' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool f1() const;\n\n    bool f2(int) const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f2' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool f2(int) const;\n\n    bool f3(const int &) const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f3' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool f3(const int &) const;\n\n    bool f4(void) const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f4' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool f4(void) const;\n    \n    // negative tests\n\n    void f5() const;\n    \n    bool f6();\n    \n    bool f7(int &);\n    \n    bool f8(int &) const;\n    \n    bool f9(int *) const;\n    \n    bool f10(const int &, int &) const;\n    \n    NO_DISCARD bool f12() const;\n    \n    MUST_USE_RESULT bool f13() const;\n    \n    [[nodiscard]] bool f11() const;\n    \n    [[clang::warn_unused_result]] bool f11a() const;\n    \n    [[gnu::warn_unused_result]] bool f11b() const;\n\n    bool _f20() const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function '_f20' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool _f20() const;\n    \n    NO_RETURN bool f21() const;\n    \n    ~Foo();\n    \n    bool operator+=(int) const;\n    \n    // extra keywords (virtual,inline,const) on return type\n    \n    virtual bool f14() const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f14' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD virtual bool f14() const;\n    \n    const bool f15() const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f15' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD const bool f15() const;\n    \n    inline const bool f16() const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f16' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD inline const bool f16() const;\n\n    inline const std::string &f45() const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f45' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD inline const std::string &f45() const;\n\n    inline virtual const bool f17() const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f17' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD inline virtual const bool f17() const;\n\n    // inline with body\n    bool f18() const \n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f18' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool f18() const \n    {\n     return true;\n    }\n\n    bool f19() const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f19' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool f19() const;\n\n    BOOLEAN_FUNC;\n    \n    bool f24(size_type) const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f24' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool f24(size_type) const;\n    \n    bool f28(my_unsigned) const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f28' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool f28(my_unsigned) const;\n\n    bool f29(my_unsigned_reference) const;\n\n    bool f30(my_unsigned_const_reference) const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'f30' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool f30(my_unsigned_const_reference) const;\n\n    template <class F>\n    F f37(F a, F b) const;\n\n    template <class F>\n    bool f38(F a) const;\n\n    bool f39(const std::function<bool()> &predicate) const;\n\n    bool f39a(std::function<bool()> predicate) const;\n\n    bool f39b(const std::function<bool()> predicate) const;\n\n    bool f45(const boost::function<bool()> &predicate) const;\n\n    bool f45a(boost::function<bool()> predicate) const;\n\n    bool f45b(const boost::function<bool()> predicate) const;\n\n    // Do not add ``[[nodiscard]]`` to parameter packs.\n    template <class... Args>\n    bool ParameterPack(Args... args) const;\n\n    template <typename... Targs>\n    bool ParameterPack2(Targs... Fargs) const;\n\n    // Do not add ``[[nodiscard]]`` to variadic functions.\n    bool VariadicFunctionTest(const int &, ...) const;\n\n    // Do not add ``[[nodiscard]]`` to non constant static functions.\n    static bool not_empty();\n\n    // Do not add ``[[nodiscard]]`` to conversion functions.\n    // explicit operator bool() const { return true; }\n\n    // Do not add ``[[nodiscard]]`` to functions returning types marked [[nodiscard]].\n    NoDiscardStruct f50() const;\n};\n\n// Do not add ``[[nodiscard]]`` to Lambda.\nconst auto nonConstReferenceType = [] {\n  return true;\n};\n\nauto lambda1 = [](int a, int b) { return a < b; };\nauto lambda1a = [](int a) { return a; };\nauto lambda1b = []()  { return true;};\n\nauto get_functor = [](bool check) {\n    return  [&](const std::string& sr)->std::string {\n        if(check){\n            return std::string();\n        }\n        return std::string();\n    };\n};\n\n// Do not add ``[[nodiscard]]`` to function definition.\nbool Foo::f19() const {\n  return true;\n}\n\ntemplate <class T>\nclass Bar {\npublic:\n    using value_type = T;\n    using reference = value_type &;\n    using const_reference = const value_type &;\n\n    // Do not add ``[[nodiscard]]`` to non explicit conversion functions.\n    operator bool() const { return true; }\n\n    bool empty() const;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: function 'empty' should be marked NO_DISCARD [modernize-use-nodiscard]\n    // CHECK-FIXES: NO_DISCARD bool empty() const;\n\n    // we cannot assume that the template parameter isn't a pointer\n    bool f25(value_type) const;\n\n    bool f27(reference) const;\n\n    typename T::value_type f35() const;\n\n    T f34() const;\n\n    bool f31(T) const;\n\n    bool f33(T &) const;\n\n    bool f26(const_reference) const;\n\n    bool f32(const T &) const;\n};\n\ntemplate <typename _Tp, int cn>\nclass Vec {\npublic:\n    Vec(_Tp v0, _Tp v1); //!< 2-element vector constructor\n\n    Vec cross(const Vec &v) const;\n\n    template <typename T2>\n    operator Vec<T2, cn>() const;\n};\n    \ntemplate <class T>\nclass Bar2 {\npublic:\n  typedef T value_type;\n  typedef value_type &reference;\n  typedef const value_type &const_reference;\n\n  // we cannot assume that the template parameter isn't a pointer\n  bool f40(value_type) const;\n\n  bool f41(reference) const;\n\n  value_type f42() const;\n\n  typename T::value_type f43() const;\n\n  bool f44(const_reference) const;\n};\n\ntemplate <class T>\nbool Bar<T>::empty() const {\n  return true;\n}\n\n// don't mark typical ``[[nodiscard]]`` candidates if the class\n// has mutable member variables\nclass MutableExample {\n  mutable bool m_isempty;\n\npublic:\n  bool empty() const;\n};"
    }
  ]
}