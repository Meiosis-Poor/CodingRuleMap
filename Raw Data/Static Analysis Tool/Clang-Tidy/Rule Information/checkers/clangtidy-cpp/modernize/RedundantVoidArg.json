{
  "name": "RedundantVoidArg",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-redundant-void-arg",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 289,
  "branches": 70,
  "apis": 211,
  "test": [
    {
      "description": null,
      "expected-problems": 93,
      "expected-linenumbers": [
        21,
        33,
        34,
        38,
        39,
        44,
        45,
        49,
        50,
        58,
        59,
        60,
        64,
        65,
        66,
        70,
        71,
        72,
        78,
        105,
        111,
        119,
        120,
        121,
        125,
        126,
        127,
        140,
        144,
        148,
        152,
        156,
        160,
        164,
        168,
        187,
        195,
        222,
        223,
        224,
        247,
        251,
        255,
        263,
        271,
        275,
        283,
        291,
        294,
        298,
        306,
        318,
        327,
        334,
        344,
        347,
        348,
        352,
        353,
        357,
        358,
        366,
        367,
        378,
        379,
        390,
        391,
        405,
        411,
        415,
        423,
        424,
        431,
        446,
        454,
        458,
        465,
        469,
        475,
        481,
        485,
        489,
        496,
        502,
        517,
        533,
        547,
        563,
        567,
        574,
        578,
        585,
        589
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s modernize-redundant-void-arg %t\n\n#define NULL 0\n\nint foo();\n\nvoid bar();\n\nvoid bar2();\n\nextern \"C\" void ecfoo(void);\n\nextern \"C\" void ecfoo(void) {\n}\n\nextern int i;\n\nint j = 1;\n\nint foo(void) {\n// CHECK-MESSAGES: :[[@LINE-1]]:9: warning: redundant void argument list in function definition [modernize-redundant-void-arg]\n// CHECK-FIXES: {{^}}int foo() {{{$}}\n    return 0;\n}\n\ntypedef unsigned int my_uint;\n\ntypedef void my_void;\n\n// A function taking void and returning a pointer to function taking void\n// and returning int.\nint (*returns_fn_void_int(void))(void);\n// CHECK-MESSAGES: :[[@LINE-1]]:27: warning: {{.*}} in function declaration\n// CHECK-MESSAGES: :[[@LINE-2]]:34: warning: {{.*}} in function declaration\n// CHECK-FIXES: {{^}}int (*returns_fn_void_int())();{{$}}\n\ntypedef int (*returns_fn_void_int_t(void))(void);\n// CHECK-MESSAGES: :[[@LINE-1]]:37: warning: {{.*}} in typedef\n// CHECK-MESSAGES: :[[@LINE-2]]:44: warning: {{.*}} in typedef\n// CHECK-FIXES: {{^}}typedef int (*returns_fn_void_int_t())();{{$}}\n\n// Should work for type aliases as well as typedef.\nusing returns_fn_void_int_t2 = int (*(void))(void);\n// CHECK-MESSAGES: :[[@LINE-1]]:39: warning: {{.*}} in type alias\n// CHECK-MESSAGES: :[[@LINE-2]]:46: warning: {{.*}} in type alias\n// CHECK-FIXES: {{^}}using returns_fn_void_int_t2 = int (*())();{{$}}\n\nint (*returns_fn_void_int(void))(void) {\n// CHECK-MESSAGES: :[[@LINE-1]]:27: warning: {{.*}} in function definition\n// CHECK-MESSAGES: :[[@LINE-2]]:34: warning: {{.*}} in function definition\n// CHECK-FIXES: {{^}}int (*returns_fn_void_int())() {{{$}}\n  return nullptr;\n}\n\n// A function taking void and returning a pointer to a function taking void\n// and returning a pointer to a function taking void and returning void.\nvoid (*(*returns_fn_returns_fn_void_void(void))(void))(void);\n// CHECK-MESSAGES: :[[@LINE-1]]:42: warning: {{.*}} in function declaration\n// CHECK-MESSAGES: :[[@LINE-2]]:49: warning: {{.*}} in function declaration\n// CHECK-MESSAGES: :[[@LINE-3]]:56: warning: {{.*}} in function declaration\n// CHECK-FIXES: {{^}}void (*(*returns_fn_returns_fn_void_void())())();{{$}}\n\ntypedef void (*(*returns_fn_returns_fn_void_void_t(void))(void))(void);\n// CHECK-MESSAGES: :[[@LINE-1]]:52: warning: {{.*}} in typedef\n// CHECK-MESSAGES: :[[@LINE-2]]:59: warning: {{.*}} in typedef\n// CHECK-MESSAGES: :[[@LINE-3]]:66: warning: {{.*}} in typedef\n// CHECK-FIXES: {{^}}typedef void (*(*returns_fn_returns_fn_void_void_t())())();{{$}}\n\nvoid (*(*returns_fn_returns_fn_void_void(void))(void))(void) {\n// CHECK-MESSAGES: :[[@LINE-1]]:42: warning: {{.*}} in function definition\n// CHECK-MESSAGES: :[[@LINE-2]]:49: warning: {{.*}} in function definition\n// CHECK-MESSAGES: :[[@LINE-3]]:56: warning: {{.*}} in function definition\n// CHECK-FIXES: {{^}}void (*(*returns_fn_returns_fn_void_void())())() {{{$}}\n    return nullptr;\n}\n\nvoid bar(void) {\n// CHECK-MESSAGES: :[[@LINE-1]]:10: warning: {{.*}} in function definition\n// CHECK-FIXES: {{^}}void bar() {{{$}}\n}\n\nvoid op_fn(int i) {\n}\n\nclass gronk {\npublic:\n  gronk();\n  ~gronk();\n\n    void foo();\n    void bar();\n    void bar2\n        ();\n    void operation(int i) { }\n\nprivate:\n    int m_i;\n    int *m_pi;\n    float m_f;\n    float *m_pf;\n    double m_d;\n    double *m_pd;\n\n    void (*f1)(void);\n    // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: {{.*}} in field declaration\n    // CHECK-FIXES: {{^    }}void (*f1)();{{$}}\n\n  void (*op)(int i);\n\n  void (gronk::*p1)(void);\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: {{.*}} in field declaration\n  // CHECK-FIXES: {{^  }}void (gronk::*p1)();{{$}}\n\n  int (gronk::*p_mi);\n\n  void (gronk::*p2)(int);\n\n  void (*(*returns_fn_returns_fn_void_void(void))(void))(void);\n  // CHECK-MESSAGES: :[[@LINE-1]]:44: warning: {{.*}} in function declaration\n  // CHECK-MESSAGES: :[[@LINE-2]]:51: warning: {{.*}} in function declaration\n  // CHECK-MESSAGES: :[[@LINE-3]]:58: warning: {{.*}} in function declaration\n  // CHECK-FIXES: {{^}}  void (*(*returns_fn_returns_fn_void_void())())();{{$}}\n\n  void (*(*(gronk::*returns_fn_returns_fn_void_void_mem)(void))(void))(void);\n  // CHECK-MESSAGES: :[[@LINE-1]]:58: warning: {{.*}} in field declaration\n  // CHECK-MESSAGES: :[[@LINE-2]]:65: warning: {{.*}} in field declaration\n  // CHECK-MESSAGES: :[[@LINE-3]]:72: warning: {{.*}} in field declaration\n  // CHECK-FIXES: {{^}}  void (*(*(gronk::*returns_fn_returns_fn_void_void_mem)())())();{{$}}\n};\n\nint i;\nint *pi;\nvoid *pv = (void *) pi;\nfloat f;\nfloat *fi;\ndouble d;\ndouble *pd;\n\nvoid (*f1)(void);\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: {{.*}} in variable declaration\n// CHECK-FIXES: {{^}}void (*f1)();{{$}}\n\nvoid (*f2)(void) = nullptr;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: {{.*}} in variable declaration with initializer\n// CHECK-FIXES: {{^}}void (*f2)() = nullptr;{{$}}\n\nvoid (*f2b)(void)(nullptr);\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} in variable declaration with initializer\n// CHECK-FIXES: {{^}}void (*f2b)()(nullptr);{{$}}\n\nvoid (*f2c)(void){nullptr};\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} in variable declaration with initializer\n// CHECK-FIXES: {{^}}void (*f2c)(){nullptr};{{$}}\n\nvoid (*f2d)(void) = NULL;\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} in variable declaration with initializer\n// CHECK-FIXES: {{^}}void (*f2d)() = NULL;{{$}}\n\nvoid (*f2e)(void)(NULL);\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} in variable declaration with initializer\n// CHECK-FIXES: {{^}}void (*f2e)()(NULL);{{$}}\n\nvoid (*f2f)(void){NULL};\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} in variable declaration with initializer\n// CHECK-FIXES: {{^}}void (*f2f)(){NULL};{{$}}\n\nvoid (*f3)(void) = bar;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: {{.*}} in variable declaration with initializer\n// CHECK-FIXES: {{^}}void (*f3)() = bar;{{$}}\n\nvoid (*o1)(int i);\nvoid (*o2)(int i) = nullptr;\nvoid (*o3)(int i)(nullptr);\nvoid (*o4)(int i){nullptr};\nvoid (*o5)(int i) = NULL;\nvoid (*o6)(int i)(NULL);\nvoid (*o7)(int i){NULL};\nvoid (*o8)(int i) = op_fn;\n\nvoid (*fa)();\n\nvoid (*fb)() = nullptr;\n\nvoid (*fc)() = bar;\n\ntypedef void (function_ptr)(void);\n// CHECK-MESSAGES: :[[@LINE-1]]:29: warning: {{.*}} in typedef\n// CHECK-FIXES: {{^}}typedef void (function_ptr)();{{$}}\n\n// intentionally not LLVM style to check preservation of whitespace\ntypedef void (function_ptr2)\n    (\n        void\n    );\n// CHECK-MESSAGES: :[[@LINE-2]]:9: warning: {{.*}} in typedef\n// CHECK-FIXES:      {{^typedef void \\(function_ptr2\\)$}}\n// CHECK-FIXES-NEXT: {{^    \\($}}\n// CHECK-FIXES-NEXT: {{^        $}}\n// CHECK-FIXES-NEXT: {{^    \\);$}}\n\n// intentionally not LLVM style to check preservation of whitespace\n// clang-format off\ntypedef\nvoid\n(\n*\n(\n*\nreturns_fn_returns_fn_void_void_t2\n(\nvoid\n)\n)\n(\nvoid\n)\n)\n(\nvoid\n)\n;\n// CHECK-MESSAGES: :[[@LINE-11]]:1: warning: {{.*}} in typedef\n// CHECK-MESSAGES: :[[@LINE-8]]:1: warning: {{.*}} in typedef\n// CHECK-MESSAGES: :[[@LINE-5]]:1: warning: {{.*}} in typedef\n// CHECK-FIXES:      {{^typedef$}}\n// CHECK-FIXES-NEXT: {{^void$}}\n// CHECK-FIXES-NEXT: {{^\\($}}\n// CHECK-FIXES-NEXT: {{^\\*$}}\n// CHECK-FIXES-NEXT: {{^\\($}}\n// CHECK-FIXES-NEXT: {{^\\*$}}\n// CHECK-FIXES-NEXT: {{^returns_fn_returns_fn_void_void_t2$}}\n// CHECK-FIXES-NEXT: {{^\\($}}\n// CHECK-FIXES-NOT:  {{[^ ]}}\n// CHECK-FIXES:      {{^\\)$}}\n// CHECK-FIXES-NEXT: {{^\\)$}}\n// CHECK-FIXES-NEXT: {{^\\($}}\n// CHECK-FIXES-NOT:  {{[^ ]}}\n// CHECK-FIXES:      {{^\\)$}}\n// CHECK-FIXES-NEXT: {{^\\)$}}\n// CHECK-FIXES-NEXT: {{^\\($}}\n// CHECK-FIXES-NOT:  {{[^ ]}}\n// CHECK-FIXES:      {{^\\)$}}\n// CHECK-FIXES-NEXT: {{^;$}}\n// clang-format on\n\nvoid (gronk::*p1)(void);\n// CHECK-MESSAGES: :[[@LINE-1]]:19: warning: {{.*}} in variable declaration\n// CHECK-FIXES: {{^}}void (gronk::*p1)();{{$}}\n\nvoid (gronk::*p2)(void) = &gronk::foo;\n// CHECK-MESSAGES: :[[@LINE-1]]:19: warning: {{.*}} in variable declaration with initializer\n// CHECK-FIXES: {{^}}void (gronk::*p2)() = &gronk::foo;{{$}}\n\ntypedef void (gronk::*member_function_ptr)(void);\n// CHECK-MESSAGES: :[[@LINE-1]]:44: warning: {{.*}} in typedef\n// CHECK-FIXES: {{^}}typedef void (gronk::*member_function_ptr)();{{$}}\n\n// intentionally not LLVM style to check preservation of whitespace\ntypedef void (gronk::*member_function_ptr2)\n    (\n        void\n    );\n// CHECK-MESSAGES: :[[@LINE-2]]:9: warning: {{.*}} in typedef\n// CHECK-FIXES:      {{^typedef void \\(gronk::\\*member_function_ptr2\\)$}}\n// CHECK-FIXES-NEXT: {{^    \\($}}\n// CHECK-FIXES-NEXT: {{^        $}}\n// CHECK-FIXES-NEXT: {{^    \\);$}}\n\nvoid gronk::foo() {\n  void (*f1)(void) = &::bar;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: {{.*}} in variable declaration with initializer\n  // CHECK-FIXES: {{^  }}void (*f1)() = &::bar;{{$}}\n\n  void (*f2)(void);\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: {{.*}} in variable declaration\n  // CHECK-FIXES: {{^  }}void (*f2)();{{$}}\n\n  // intentionally not LLVM style to check preservation of whitespace\n  void (*f3)\n      (\n          void\n      );\n  // CHECK-MESSAGES: :[[@LINE-2]]:11: warning: {{.*}} in variable declaration\n  // CHECK-FIXES:      {{^  }}void (*f3){{$}}\n  // CHECK-FIXES-NEXT: {{^      \\($}}\n  // CHECK-FIXES-NEXT: {{^          $}}\n  // CHECK-FIXES-NEXT: {{^      \\);$}}\n}\n\nvoid gronk::bar(void) {\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} in function definition\n// CHECK-FIXES: {{^}}void gronk::bar() {{{$}}\n  void (gronk::*p3)(void) = &gronk::foo;\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: {{.*}} in variable declaration with initializer\n  // CHECK-FIXES: {{^  }}void (gronk::*p3)() = &gronk::foo;{{$}}\n\n  void (gronk::*p4)(void);\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: {{.*}} in variable declaration\n  // CHECK-FIXES: {{^  }}void (gronk::*p4)();{{$}}\n\n  // intentionally not LLVM style to check preservation of whitespace\n  void (gronk::*p5)\n      (\n          void\n      );\n  // CHECK-MESSAGES: :[[@LINE-2]]:11: warning: {{.*}} in variable declaration\n  // CHECK-FIXES:      {{^  }}void (gronk::*p5){{$}}\n  // CHECK-FIXES-NEXT: {{^      \\($}}\n  // CHECK-FIXES-NExT: {{^          $}}\n  // CHECK-FIXES-NExT: {{^      \\);$}}\n}\n\n// intentionally not LLVM style to check preservation of whitespace\nvoid gronk::bar2\n  (\n  void\n  )\n// CHECK-MESSAGES: :[[@LINE-2]]:3: warning: {{.*}} in function definition\n// CHECK-FIXES:      {{^void gronk::bar2$}}\n// CHECK-FIXES-NEXT: {{^  \\($}}\n// CHECK-FIXES-NEXT: {{^  $}}\n// CHECK-FIXES-NEXT: {{^  \\)$}}\n{\n}\n\ngronk::gronk(void)\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning: {{.*}} in function definition\n// CHECK-FIXES: {{^}}gronk::gronk(){{$}}\n  : f1(nullptr),\n  p1(nullptr) {\n}\n\ngronk::~gronk(void) {\n// CHECK-MESSAGES: :[[@LINE-1]]:15: warning: {{.*}} in function definition\n// CHECK-FIXES: {{^}}gronk::~gronk() {{{$}}\n}\n\nclass nutter {\npublic:\n  nutter();\n};\n\nnutter::nutter(void) {\n// CHECK-MESSAGES: :[[@LINE-1]]:16: warning: {{.*}} in function definition\n// CHECK-FIXES: {{^}}nutter::nutter() {{{$}}\n  void (*f3)(void) = static_cast<void (*)(void)>(0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: {{.*}} in variable declaration with initializer\n  // CHECK-MESSAGES: :[[@LINE-2]]:43: warning: {{.*}} in named cast\n  // CHECK-FIXES: void (*f3)() = static_cast<void (*)()>(0);{{$}}\n\n  void (*f4)(void) = (void (*)(void)) 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: {{.*}} in variable declaration with initializer\n  // CHECK-MESSAGES: :[[@LINE-2]]:32: warning: {{.*}} in cast expression\n  // CHECK-FIXES: void (*f4)() = (void (*)()) 0;{{$}}\n\n  void (*f5)(void) = reinterpret_cast<void (*)(void)>(0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: {{.*}} in variable declaration with initializer\n  // CHECK-MESSAGES: :[[@LINE-2]]:48: warning: {{.*}} in named cast\n  // CHECK-FIXES: void (*f5)() = reinterpret_cast<void (*)()>(0);{{$}}\n\n  // intentionally not LLVM style to check preservation of whitespace\n  void (*f6)(void) = static_cast<void (*)\n      (\n          void\n      )>(0);\n  // CHECK-MESSAGES: :[[@LINE-4]]:14: warning: {{.*}} in variable declaration with initializer\n  // CHECK-MESSAGES: :[[@LINE-3]]:11: warning: {{.*}} in named cast\n  // CHECK-FIXES:      {{^  }}void (*f6)() = static_cast<void (*){{$}}\n  // CHECK-FIXES-NEXT: {{^      \\($}}\n  // CHECK-FIXES-NEXT: {{^          $}}\n  // CHECK-FIXES-NEXT: {{^      }})>(0);{{$}}\n\n  // intentionally not LLVM style to check preservation of whitespace\n  void (*f7)(void) = (void (*)\n      (\n          void\n      )) 0;\n  // CHECK-MESSAGES: :[[@LINE-4]]:14: warning: {{.*}} in variable declaration with initializer\n  // CHECK-MESSAGES: :[[@LINE-3]]:11: warning: {{.*}} in cast expression\n  // CHECK-FIXES:      {{^  }}void (*f7)() = (void (*){{$}}\n  // CHECK-FIXES-NEXT: {{^      \\($}}\n  // CHECK-FIXES-NEXT: {{^          $}}\n  // CHECK-FIXES-NEXT: {{^      \\)\\) 0;$}}\n\n  // intentionally not LLVM style to check preservation of whitespace\n  void (*f8)(void) = reinterpret_cast<void (*)\n      (\n          void\n      )>(0);\n  // CHECK-MESSAGES: :[[@LINE-4]]:14: warning: {{.*}} in variable declaration with initializer\n  // CHECK-MESSAGES: :[[@LINE-3]]:11: warning: {{.*}} in named cast\n  // CHECK-FIXES:      {{^  }}void (*f8)() = reinterpret_cast<void (*){{$}}\n  // CHECK-FIXES-NEXT: {{^      \\($}}\n  // CHECK-FIXES-NEXT: {{^          $}}\n  // CHECK-FIXES-NEXT: {{^      \\)>\\(0\\);$}}\n\n  void (*o1)(int) = static_cast<void (*)(int)>(0);\n  void (*o2)(int) = (void (*)(int)) 0;\n  void (*o3)(int) = reinterpret_cast<void (*)(int)>(0);\n}\n\nclass generator {\npublic:\n  int operator()(void) { return 1; }\n  // CHECK-MESSAGES: :[[@LINE-1]]:18: warning: {{.*}} in function definition\n  // CHECK-FIXES: {{^  }}int operator()() { return 1; }{{$}}\n};\n\nvoid test_lambda_functions() {\n  auto lamb_duh = [](void (*fn)(void)) { (*fn)(); };\n  // CHECK-MESSAGES: :[[@LINE-1]]:33: warning: {{.*}} in variable declaration\n  // CHECK-FIXES: {{^  }}auto lamb_duh = [](void (*fn)()) { (*fn)(); };{{$}}\n\n  auto lambda_generator = [](void) { return 1; };\n  // CHECK-MESSAGES: :[[@LINE-1]]:30: warning: {{.*}} in lambda expression\n  // CHECK-FIXES: {{^  }}auto lambda_generator = []() { return 1; };{{$}}\n\n  auto gen2 = []() { return 1; };\n\n  auto gen3 = []{ return 1; };\n\n  auto void_returner = [](void) -> void (*)(void) { return f1; };\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: {{.*}} in lambda expression\n  // CHECK-MESSAGES: [[@LINE-2]]:45: warning: {{.*}} in lambda expression\n  // CHECK-FIXES: {{^  }}auto void_returner = []() -> void (*)() { return f1; };{{$}}\n}\n\n#define M(x) x\n\nM(void inmacro(void) {})\n// CHECK-MESSAGES: :[[@LINE-1]]:16: warning: {{.*}} in function definition\n// CHECK-FIXES: M(void inmacro() {})\n\n#define F(A, B)        \\\n  struct F_##A##_##B { \\\n    F_##A##_##B(void); \\\n  };                   \\\n  F_##A##_##B::F_##A##_##B(void)\n\nF(Foo, Bar) {\n\n}\n\nstruct DefinitionWithNoBody {\n  DefinitionWithNoBody(void) = delete;\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: {{.*}} in function definition\n  // CHECK-FIXES: DefinitionWithNoBody() = delete;\n};\n\n\n\n#define BODY {}\n#define LAMBDA1 [](void){}\n// CHECK-MESSAGES: :[[@LINE-1]]:20: warning: redundant void argument list in lambda expression [modernize-redundant-void-arg]\n// CHECK-FIXES: LAMBDA1 [](){}\n\n#define LAMBDA2 [](void)BODY\n// CHECK-MESSAGES: :[[@LINE-1]]:20: warning: redundant void argument list in lambda expression [modernize-redundant-void-arg]\n// CHECK-FIXES: LAMBDA2 []()BODY\n\n#define LAMBDA3(captures, args, body) captures args body\n#define WRAP(...) __VA_ARGS__\n\n#define LAMBDA4 (void)LAMBDA3([],(void),BODY)\n// CHECK-MESSAGES: :[[@LINE-1]]:35: warning: redundant void argument list in lambda expression [modernize-redundant-void-arg]\n// CHECK-FIXES: LAMBDA4 (void)LAMBDA3([],(),BODY)\n\n#define LAMBDA5 []() -> void (*)(void) {return BODY;}\n// CHECK-MESSAGES: :[[@LINE-1]]:34: warning: redundant void argument list in lambda expression [modernize-redundant-void-arg]\n// CHECK-FIXES: LAMBDA5 []() -> void (*)() {return BODY;}\nvoid lambda_expression_with_macro_test(){\n  (void)LAMBDA1;\n  (void)LAMBDA2;\n  (void)LAMBDA3([], (void), BODY);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: redundant void argument list in lambda expression [modernize-redundant-void-arg]\n  // CHECK-FIXES: (void)LAMBDA3([], (), BODY);\n\n  LAMBDA4;\n  LAMBDA5;\n  WRAP((void)WRAP(WRAP(LAMBDA3(WRAP([]), WRAP((void)), WRAP(BODY)))));\n  // CHECK-MESSAGES: :[[@LINE-1]]:48: warning: redundant void argument list in lambda expression [modernize-redundant-void-arg]\n  // CHECK-FIXES: WRAP((void)WRAP(WRAP(LAMBDA3(WRAP([]), WRAP(()), WRAP(BODY)))));\n\n  (void)WRAP([](void) {});\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: redundant void argument list in lambda expression [modernize-redundant-void-arg]\n  // CHECK-FIXES: (void)WRAP([]() {});\n\n  [](void) BODY;\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: redundant void argument list in lambda expression [modernize-redundant-void-arg]\n  // CHECK-FIXES: []() BODY;\n}\n\nnamespace qqq {\nvoid foo() BODY\nvoid bar(void) BODY;\n// CHECK-MESSAGES: :[[@LINE-1]]:10: warning: redundant void argument list in function definition\n// CHECK-FIXES: void bar() BODY;\n}\n\nstruct S_1 {\n  void g_1(void) const {\n    // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: redundant void argument list in function definition [modernize-redundant-void-arg]\n    // CHECK-FIXES: void g_1() const {\n    int a;\n    (void)a;\n  }\n\n  void g_2() const {\n    int a;\n    (void)a;\n  }\n};\n\ntemplate <typename T0>\nstruct S_2 {\n  void g_1(void) const {\n    // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: redundant void argument list in function definition [modernize-redundant-void-arg]\n    // CHECK-FIXES: void g_1() const {\n    int a;\n    (void)a;\n  }\n\n  void g_2() const {\n    int a;\n    (void)a;\n  }\n};\n\ntemplate <typename T0>\nstruct S_3 {\n  template <typename T1>\n  void g_1(void) const {\n    // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: redundant void argument list in function definition [modernize-redundant-void-arg]\n    // CHECK-FIXES: void g_1() const {\n    int a;\n    (void)a;\n  }\n  template <typename T2>\n  void g_2() const {\n    int a;\n    (void)a;\n  }\n};\n\ntemplate <typename T1>\nvoid g_3(void) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: redundant void argument list in function definition [modernize-redundant-void-arg]\n  // CHECK-FIXES: void g_3() {\n  int a;\n  (void)a;\n}\n\n//Template instantiation\nvoid f_testTemplate() {\n  S_1();\n  S_2<int>();\n  S_3<int>();\n  g_3<int>();\n}\n\n#define return_t(T) T\nextern return_t(void) func(void);\n// CHECK-MESSAGES: :[[@LINE-1]]:28: warning: redundant void argument list in function declaration\n// CHECK-FIXES: extern return_t(void) func();\n\nreturn_t(void) func(void) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: redundant void argument list in function definition\n  // CHECK-FIXES: return_t(void) func() {\n  int a;\n  (void)a;\n}\n\nextern return_t(void) func(return_t(void) (*fp)(void));\n// CHECK-MESSAGES: :[[@LINE-1]]:49: warning: redundant void argument list in variable declaration\n// CHECK-FIXES: extern return_t(void) func(return_t(void) (*fp)());\n\nreturn_t(void) func(return_t(void) (*fp)(void)) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:42: warning: redundant void argument list in variable declaration\n  // CHECK-FIXES: return_t(void) func(return_t(void) (*fp)()) {\n  int a;\n  (void)a;\n}\n\nextern return_t(return_t(void)) func2(return_t(return_t(void)) (*fp)(void));\n// CHECK-MESSAGES: :[[@LINE-1]]:70: warning: redundant void argument list in variable declaration\n// CHECK-FIXES: extern return_t(return_t(void)) func2(return_t(return_t(void)) (*fp)());\n\nreturn_t(return_t(void)) func2(return_t(return_t(void)) (*fp)(void)) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:63: warning: redundant void argument list in variable declaration\n  // CHECK-FIXES: return_t(return_t(void)) func2(return_t(return_t(void)) (*fp)()) {\n  int a;\n  (void)a;\n}\n#undef return_t"
    }
  ]
}