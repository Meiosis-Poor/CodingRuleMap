{
  "name": "UseStdFormat",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-std-format",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 107,
  "branches": 6,
  "apis": 67,
  "test": [
    {
      "description": null,
      "expected-problems": 26,
      "expected-linenumbers": [
        31,
        37,
        43,
        51,
        59,
        66,
        72,
        76,
        82,
        87,
        92,
        97,
        107,
        115,
        123,
        127,
        136,
        139,
        142,
        145,
        149,
        153,
        160,
        166,
        172,
        179
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes \\\n// RUN:   -std=c++20 %s modernize-use-std-format %t -- \\\n// RUN:   -config=\"{CheckOptions: {modernize-use-std-format.StrictMode: true}}\" \\\n// RUN:   -- -isystem %clang_tidy_headers \\\n// RUN:      -DPRI_CMDLINE_MACRO=\"\\\"s\\\"\" \\\n// RUN:      -D__PRI_CMDLINE_MACRO=\"\\\"s\\\"\"\n// RUN: %check_clang_tidy --match-partial-fixes \\\n// RUN:   -std=c++20 %s modernize-use-std-format %t -- \\\n// RUN:   -config=\"{CheckOptions: {modernize-use-std-format.StrictMode: false}}\" \\\n// RUN:   -- -isystem %clang_tidy_headers \\\n// RUN:      -DPRI_CMDLINE_MACRO=\"\\\"s\\\"\" \\\n// RUN:      -D__PRI_CMDLINE_MACRO=\"\\\"s\\\"\"\n#include <string>\n// CHECK-FIXES: #include <format>\n#include <inttypes.h>\n\nnamespace absl\n{\ntemplate <typename S, typename... Args>\nstd::string StrFormat(const S &format, const Args&... args);\n} // namespace absl\n\ntemplate <typename T>\nstruct iterator {\n  T *operator->();\n  T &operator*();\n};\n\nstd::string StrFormat_simple() {\n  return absl::StrFormat(\"Hello\");\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: return std::format(\"Hello\");\n}\n\nstd::string StrFormat_complex(const char *name, double value) {\n  return absl::StrFormat(\"'%s'='%f'\", name, value);\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: return std::format(\"'{}'='{:f}'\", name, value);\n}\n\nstd::string StrFormat_integer_conversions() {\n  return absl::StrFormat(\"int:%d int:%d char:%c char:%c\", 65, 'A', 66, 'B');\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: return std::format(\"int:{} int:{:d} char:{:c} char:{}\", 65, 'A', 66, 'B');\n}\n\n// FormatConverter is capable of removing newlines from the end of the format\n// string. Ensure that isn't incorrectly happening for std::format.\nstd::string StrFormat_no_newline_removal() {\n  return absl::StrFormat(\"a line\\n\");\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: return std::format(\"a line\\n\");\n}\n\n// FormatConverter is capable of removing newlines from the end of the format\n// string. Ensure that isn't incorrectly happening for std::format.\nstd::string StrFormat_cstr_removal(const std::string &s1, const std::string *s2) {\n  return absl::StrFormat(\"%s %s %s %s\", s1.c_str(), s1.data(), s2->c_str(), s2->data());\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: return std::format(\"{} {} {} {}\", s1, s1, *s2, *s2);\n}\n\nstd::string StrFormat_strict_conversion() {\n  const unsigned char uc = 'A';\n  return absl::StrFormat(\"Integer %hhd from unsigned char\\n\", uc);\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: return std::format(\"Integer {} from unsigned char\\n\", uc);\n}\n\nstd::string StrFormat_field_width_and_precision() {\n  auto s1 = absl::StrFormat(\"width only:%*d width and precision:%*.*f precision only:%.*f\", 3, 42, 4, 2, 3.14159265358979323846, 5, 2.718);\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: std::format(\"width only:{:{}} width and precision:{:{}.{}f} precision only:{:.{}f}\", 42, 3, 3.14159265358979323846, 4, 2, 2.718, 5);\n\n  auto s2 = absl::StrFormat(\"width and precision positional:%1$*2$.*3$f after\", 3.14159265358979323846, 4, 2);\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: std::format(\"width and precision positional:{0:{1}.{2}f} after\", 3.14159265358979323846, 4, 2);\n\n  const int width = 10, precision = 3;\n  const unsigned int ui1 = 42, ui2 = 43, ui3 = 44;\n  auto s3 = absl::StrFormat(\"casts width only:%*d width and precision:%*.*d precision only:%.*d\\n\", 3, ui1, 4, 2, ui2, 5, ui3);\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES-NOTSTRICT: std::format(\"casts width only:{:{}} width and precision:{:{}.{}} precision only:{:.{}}\", ui1, 3, ui2, 4, 2, ui3, 5);\n  // CHECK-FIXES-STRICT: std::format(\"casts width only:{:{}} width and precision:{:{}.{}} precision only:{:.{}}\", static_cast<int>(ui1), 3, static_cast<int>(ui2), 4, 2, static_cast<int>(ui3), 5);\n\n  auto s4 = absl::StrFormat(\"c_str removal width only:%*s width and precision:%*.*s precision only:%.*s\", 3, s1.c_str(), 4, 2, s2.c_str(), 5, s3.c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: std::format(\"c_str removal width only:{:>{}} width and precision:{:>{}.{}} precision only:{:.{}}\", s1, 3, s2, 4, 2, s3, 5);\n\n  const std::string *ps1 = &s1, *ps2 = &s2, *ps3 = &s3;\n  auto s5 = absl::StrFormat(\"c_str() removal pointer width only:%-*s width and precision:%-*.*s precision only:%-.*s\", 3, ps1->c_str(), 4, 2, ps2->c_str(), 5, ps3->c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: std::format(\"c_str() removal pointer width only:{:{}} width and precision:{:{}.{}} precision only:{:.{}}\", *ps1, 3, *ps2, 4, 2, *ps3, 5);\n\n  iterator<std::string> is1, is2, is3;\n  auto s6 = absl::StrFormat(\"c_str() removal iterator width only:%-*s width and precision:%-*.*s precision only:%-.*s\", 3, is1->c_str(), 4, 2, is2->c_str(), 5, is3->c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: std::format(\"c_str() removal iterator width only:{:{}} width and precision:{:{}.{}} precision only:{:.{}}\", *is1, 3, *is2, 4, 2, *is3, 5);\n\n  return s1 + s2 + s3 + s4 + s5 + s6;\n}\n\nvoid StrFormat_macros() {\n  // The function call is replaced even though it comes from a macro.\n#define FORMAT absl::StrFormat\n  auto s1 = FORMAT(\"Hello %d\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: std::format(\"Hello {}\", 42);\n\n  // Arguments that are macros aren't replaced with their value, even if they are rearranged.\n#define VALUE 3.14159265358979323846\n#define WIDTH 10\n#define PRECISION 4\n  auto s3 = absl::StrFormat(\"Hello %*.*f\", WIDTH, PRECISION, VALUE);\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: std::format(\"Hello {:{}.{}f}\", VALUE, WIDTH, PRECISION);\n\n  const uint64_t u64 = 42;\n  const uint32_t u32 = 32;\n  std::string s;\n\n  auto s4 = absl::StrFormat(\"Replaceable macro at end %\" PRIu64, u64);\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: std::format(\"Replaceable macro at end {}\", u64);\n\n  auto s5 = absl::StrFormat(\"Replaceable macros in middle %\" PRIu64 \" %\" PRIu32 \"\\n\", u64, u32);\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: std::format(\"Replaceable macros in middle {} {}\\n\", u64, u32);\n\n// These need PRI and __PRI prefixes so that the check get as far as looking for\n// where the macro comes from.\n#define PRI_FMT_MACRO \"s\"\n#define __PRI_FMT_MACRO \"s\"\n\n  auto s6 = absl::StrFormat(\"Unreplaceable macro at end %\" PRI_FMT_MACRO, s.c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: unable to use 'std::format' instead of 'StrFormat' because format string contains unreplaceable macro 'PRI_FMT_MACRO' [modernize-use-std-format]\n\n  auto s7 = absl::StrFormat(__PRI_FMT_MACRO \" Unreplaceable macro at beginning %s\", s);\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: unable to use 'std::format' instead of 'StrFormat' because format string contains unreplaceable macro '__PRI_FMT_MACRO' [modernize-use-std-format]\n\n  auto s8 = absl::StrFormat(\"Unreplacemable macro %\" PRI_FMT_MACRO \" in the middle\", s);\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: unable to use 'std::format' instead of 'StrFormat' because format string contains unreplaceable macro 'PRI_FMT_MACRO' [modernize-use-std-format]\n\n  auto s9 = absl::StrFormat(\"First macro is replaceable %\" PRIu64 \" but second one is not %\" __PRI_FMT_MACRO, u64, s);\n  // CHECK-MESSAGES: [[@LINE-1]]:13: warning: unable to use 'std::format' instead of 'StrFormat' because format string contains unreplaceable macro '__PRI_FMT_MACRO' [modernize-use-std-format]\n\n  // Needs a PRI prefix so that we get as far as looking for where the macro comes from\n  auto s10 = absl::StrFormat(\" macro from command line %\" PRI_CMDLINE_MACRO, s);\n  // CHECK-MESSAGES: [[@LINE-1]]:14: warning: unable to use 'std::format' instead of 'StrFormat' because format string contains unreplaceable macro 'PRI_CMDLINE_MACRO' [modernize-use-std-format]\n\n  // Needs a __PRI prefix so that we get as far as looking for where the macro comes from\n  auto s11 = absl::StrFormat(\" macro from command line %\" __PRI_CMDLINE_MACRO, s);\n  // CHECK-MESSAGES: [[@LINE-1]]:14: warning: unable to use 'std::format' instead of 'StrFormat' because format string contains unreplaceable macro '__PRI_CMDLINE_MACRO' [modernize-use-std-format]\n\n  // We ought to be able to fix this since the macro surrounds the whole call\n  // and therefore can't change the format string independently. This is\n  // required to be able to fix calls inside Catch2 macros for example.\n#define SURROUND_ALL(x) x\n  auto s12 = SURROUND_ALL(absl::StrFormat(\"Macro surrounding entire invocation %\" PRIu64, u64));\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: auto s12 = SURROUND_ALL(std::format(\"Macro surrounding entire invocation {}\", u64));\n\n  // But having that surrounding macro shouldn't stop us ignoring an\n  // unreplaceable macro elsewhere.\n  auto s13 = SURROUND_ALL(absl::StrFormat(\"Macro surrounding entire invocation with unreplaceable macro %\" PRI_FMT_MACRO, s));\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: unable to use 'std::format' instead of 'StrFormat' because format string contains unreplaceable macro 'PRI_FMT_MACRO' [modernize-use-std-format]\n\n  // At the moment at least the check will replace occurrences where the\n  // function name is the result of expanding a macro.\n#define SURROUND_FUNCTION_NAME(x) absl:: x\n  auto s14 = SURROUND_FUNCTION_NAME(StrFormat)(\"Hello %d\", 4442);\n  // CHECK-MESSAGES: [[@LINE-1]]:14: warning: use 'std::format' instead of 'StrFormat' [modernize-use-std-format]\n  // CHECK-FIXES: auto s14 = std::format(\"Hello {}\", 4442);\n\n  // We can't safely fix occurrences where the macro may affect the format\n  // string differently in different builds.\n#define SURROUND_FORMAT(x) \"!\" x\n  auto s15 = absl::StrFormat(SURROUND_FORMAT(\"Hello %d\"), 4443);\n  // CHECK-MESSAGES: [[@LINE-1]]:14: warning: unable to use 'std::format' instead of 'StrFormat' because format string contains unreplaceable macro 'SURROUND_FORMAT' [modernize-use-std-format]\n}"
    }
  ]
}