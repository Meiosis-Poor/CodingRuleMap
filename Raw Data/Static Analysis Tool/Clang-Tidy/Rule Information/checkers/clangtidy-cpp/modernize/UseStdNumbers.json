{
  "name": "UseStdNumbers",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-std-numbers",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 450,
  "branches": 27,
  "apis": 324,
  "test": [
    {
      "description": null,
      "expected-problems": 105,
      "expected-linenumbers": [
        16,
        47,
        51,
        55,
        60,
        64,
        67,
        70,
        74,
        78,
        82,
        86,
        90,
        94,
        98,
        102,
        106,
        110,
        115,
        119,
        123,
        127,
        132,
        139,
        143,
        147,
        156,
        160,
        164,
        168,
        172,
        176,
        180,
        181,
        185,
        189,
        193,
        197,
        203,
        207,
        211,
        215,
        219,
        223,
        227,
        233,
        237,
        241,
        245,
        249,
        250,
        254,
        258,
        262,
        266,
        272,
        276,
        280,
        281,
        285,
        289,
        293,
        297,
        298,
        302,
        308,
        312,
        316,
        324,
        328,
        337,
        341,
        345,
        350,
        354,
        357,
        360,
        364,
        368,
        372,
        377,
        384,
        390,
        401,
        407,
        411,
        412,
        418,
        422,
        426,
        427,
        433,
        437,
        441,
        449,
        450,
        455,
        459,
        463,
        467,
        468,
        472,
        476,
        482,
        486
      ],
      "code": "\n// RUN: %check_clang_tidy -check-suffix=ALL -std=c++20 %s modernize-use-std-numbers %t\n// RUN: %check_clang_tidy -check-suffix=ALL,IMPRECISE -std=c++20 %s modernize-use-std-numbers %t -- -config=\"{CheckOptions: { modernize-use-std-numbers.DiffThreshold: 0.01 }}\"\n\n// CHECK-FIXES-ALL: #include <numbers>\n\nnamespace bar {\n    double sqrt(double Arg);\n    float sqrt(float Arg);\n    template <typename T>\n    auto sqrt(T val) { return sqrt(static_cast<double>(val)); }\n\n    float sqrtf(float Arg);\n    long double sqrtl(long double Arg);\n\n    static constexpr double e = 2.718281828459045235360287471352662497757247093;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:33: warning: prefer 'std::numbers::e' to this literal, differs by '0.00e+00' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr double e = std::numbers::e;\n}\n\nfloat expf(float Arg);\ndouble exp(double Arg);\nlong double expl(long double Arg);\ndouble log(double Arg);\n\ndouble log2(double Arg);\nfloat log2(float Arg);\ntemplate <typename T>\nauto log2(T val) { return log2(static_cast<double>(val)); }\n\ndouble log10(double Arg);\n\ntemplate<typename T>\nvoid sink(T&&) { }\n\nvoid floatSink(float) {}\n\n#define MY_PI 3.1415926\n\n#define INV_SQRT3 1 / bar::sqrt(3)\n#define NOT_INV_SQRT3 1 / bar::sqrt(3) + 1\n\nusing my_double = double;\nusing my_float = float;\n\nvoid foo(){\n    static constexpr double Pi = 3.1415926;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:34: warning: prefer 'std::numbers::pi' to this literal, differs by '5.36e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr double Pi = std::numbers::pi;\n\n    static constexpr double Euler = 2.7182818;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:37: warning: prefer 'std::numbers::e' to this literal, differs by '2.85e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr double Euler = std::numbers::e;\n\n    static constexpr double Phi = 1.6180339;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:35: warning: prefer 'std::numbers::phi' to this literal, differs by '8.87e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr double Phi = std::numbers::phi;\n\n    static constexpr double PiCopy = Pi;\n    static constexpr double PiDefineFromMacro = MY_PI;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:49: warning: prefer 'std::numbers::pi' to this macro, differs by '5.36e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr double PiDefineFromMacro = std::numbers::pi;\n\n    static constexpr double Pi2 = 3.14;\n    // CHECK-MESSAGES-IMPRECISE: :[[@LINE-1]]:35: warning: prefer 'std::numbers::pi' to this literal, differs by '1.59e-03' [modernize-use-std-numbers]\n    // CHECK-FIXES-IMPRECISE: static constexpr double Pi2 = std::numbers::pi;\n    static constexpr double Euler2 = 2.71;\n    // CHECK-MESSAGES-IMPRECISE: :[[@LINE-1]]:38: warning: prefer 'std::numbers::e' to this literal, differs by '8.28e-03' [modernize-use-std-numbers]\n    // CHECK-FIXES-IMPRECISE: static constexpr double Euler2 = std::numbers::e;\n    static constexpr double Phi2 = 1.61;\n    // CHECK-MESSAGES-IMPRECISE: :[[@LINE-1]]:36: warning: prefer 'std::numbers::phi' to this literal, differs by '8.03e-03' [modernize-use-std-numbers]\n    // CHECK-FIXES-IMPRECISE: static constexpr double Phi2 = std::numbers::phi;\n\n    static constexpr double Pi3 = 3.1415926L;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:35: warning: prefer 'std::numbers::pi_v<long double>' to this literal, differs by '5.36e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr double Pi3 = std::numbers::pi_v<long double>;\n\n    static constexpr double Euler3 = 2.7182818L;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:38: warning: prefer 'std::numbers::e_v<long double>' to this literal, differs by '2.85e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr double Euler3 = std::numbers::e_v<long double>;\n\n    static constexpr double Phi3 = 1.6180339L;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:36: warning: prefer 'std::numbers::phi_v<long double>' to this literal, differs by '8.87e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr double Phi3 = std::numbers::phi_v<long double>;\n\n    static constexpr long double Pi4 = 3.1415926L;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:40: warning: prefer 'std::numbers::pi_v<long double>' to this literal, differs by '5.36e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr long double Pi4 = std::numbers::pi_v<long double>;\n\n    static constexpr long double Euler4 = 2.7182818L;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:43: warning: prefer 'std::numbers::e_v<long double>' to this literal, differs by '2.85e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr long double Euler4 = std::numbers::e_v<long double>;\n\n    static constexpr long double Phi4 = 1.6180339L;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:41: warning: prefer 'std::numbers::phi_v<long double>' to this literal, differs by '8.87e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr long double Phi4 = std::numbers::phi_v<long double>;\n\n    static constexpr my_double Euler5 = 2.7182818;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:41: warning: prefer 'std::numbers::e' to this literal, differs by '2.85e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr my_double Euler5 = std::numbers::e;\n\n    static constexpr my_float Euler6 = 2.7182818;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:40: warning: prefer 'std::numbers::e' to this literal, differs by '2.85e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr my_float Euler6 = std::numbers::e;\n\n    static constexpr int NotEuler7 = 2.7182818;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:38: warning: prefer 'std::numbers::e' to this literal, differs by '2.85e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr int NotEuler7 = std::numbers::e;\n\n    static constexpr double InvPi = 1.0 / Pi;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:37: warning: prefer 'std::numbers::inv_pi'  to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr double InvPi = std::numbers::inv_pi;\n\n    static constexpr my_float Actually2MyFloat = 2;\n    bar::sqrt(Actually2MyFloat);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2_v<float>'  to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2_v<float>;\n\n    bar::sqrtf(2.0F);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2_v<float>'  to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2_v<float>;\n\n    bar::sqrtl(2.0);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2_v<long double>'  to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2_v<long double>;\n\n    sink(MY_PI);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::pi' to this macro, differs by '5.36e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::pi);\n\n    auto X = 42.0;\n    auto Y = X * 3.14;\n    // CHECK-MESSAGES-IMPRECISE: :[[@LINE-1]]:18: warning: prefer 'std::numbers::pi' to this literal, differs by '1.59e-03' [modernize-use-std-numbers]\n    // CHECK-FIXES-IMPRECISE: auto Y = X * std::numbers::pi;\n\n    constexpr static auto One = 1;\n    constexpr static auto Two = 2;\n\n    bar::sqrt(2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2;\n\n    bar::sqrt(Two);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2;\n\n    bar::sqrt(2.0);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2;\n\n    auto Not2 = 2;\n    Not2 = 42;\n    bar::sqrt(Not2);\n\n    const auto Actually2 = 2;\n    bar::sqrt(Actually2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2;\n\n    exp(1);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::e;\n\n    exp(One);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::e;\n\n    exp(1.00000000000001);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::e;\n\n    expf(1);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::e_v<float>' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::e_v<float>;\n\n    expl(1);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::e_v<long double>' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::e_v<long double>;\n\n    log2(exp(1));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log2e' to this formula [modernize-use-std-numbers]\n    // CHECK-MESSAGES-ALL: :[[@LINE-2]]:10: warning: prefer 'std::numbers::e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log2e;\n\n    log2(Euler);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log2e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log2e;\n\n    log2(bar::e);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log2e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log2e;\n\n    log2(Euler5);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log2e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log2e;\n\n    log2(Euler6);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log2e_v<float>' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log2e_v<float>;\n\n    log2(NotEuler7);\n\n    auto log2e = 1.4426950;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:18: warning: prefer 'std::numbers::log2e' to this literal, differs by '4.09e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: auto log2e = std::numbers::log2e;\n\n    floatSink(log2(Euler));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:15: warning: prefer 'std::numbers::log2e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: floatSink(std::numbers::log2e);\n\n    floatSink(static_cast<float>(log2(Euler)));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:15: warning: prefer 'std::numbers::log2e_v<float>' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: floatSink(std::numbers::log2e_v<float>);\n\n    floatSink(1.4426950);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:15: warning: prefer 'std::numbers::log2e' to this literal, differs by '4.09e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: floatSink(std::numbers::log2e);\n\n    floatSink(static_cast<float>(1.4426950));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:15: warning: prefer 'std::numbers::log2e_v<float>' to this literal, differs by '4.09e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: floatSink(std::numbers::log2e_v<float>);\n\n    floatSink(log2(static_cast<float>(Euler)));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:15: warning: prefer 'std::numbers::log2e_v<float>' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: floatSink(std::numbers::log2e_v<float>);\n\n    floatSink(static_cast<float>(log2(static_cast<float>(Euler))));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:15: warning: prefer 'std::numbers::log2e_v<float>' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: floatSink(std::numbers::log2e_v<float>);\n\n    floatSink(static_cast<float>(log2(static_cast<int>(Euler))));\n\n    floatSink(static_cast<int>(log2(static_cast<float>(Euler))));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:32: warning: prefer 'std::numbers::log2e_v<float>' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: floatSink(static_cast<int>(std::numbers::log2e_v<float>));\n\n    floatSink(1.4426950F);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:15: warning: prefer 'std::numbers::log2e_v<float>' to this literal, differs by '1.93e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: floatSink(std::numbers::log2e_v<float>);\n\n    floatSink(static_cast<double>(1.4426950F));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:15: warning: prefer 'std::numbers::log2e' to this literal, differs by '1.93e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: floatSink(std::numbers::log2e);\n\n    floatSink(static_cast<int>(1.4426950F));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:32: warning: prefer 'std::numbers::log2e_v<float>' to this literal, differs by '1.93e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: floatSink(static_cast<int>(std::numbers::log2e_v<float>));\n\n    log10(exp(1));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log10e' to this formula [modernize-use-std-numbers]\n    // CHECK-MESSAGES-ALL: :[[@LINE-2]]:11: warning: prefer 'std::numbers::e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log10e;\n\n    log10(Euler);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log10e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log10e;\n\n    log10(bar::e);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log10e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log10e;\n\n    auto log10e = .434294;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:19: warning: prefer 'std::numbers::log10e' to this literal, differs by '4.82e-07' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: auto log10e = std::numbers::log10e;\n\n    auto egamma = 0.5772156 * 42;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:19: warning: prefer 'std::numbers::egamma' to this literal, differs by '6.49e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: auto egamma = std::numbers::egamma * 42;\n\n    sink(InvPi);\n\n    sink(1 / Pi);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::inv_pi' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::inv_pi);\n\n    sink(1 / bar::sqrt(Pi));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::inv_sqrtpi' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::inv_sqrtpi);\n\n    sink(1 / bar::sqrt(MY_PI));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::inv_sqrtpi' to this formula [modernize-use-std-numbers]\n    // CHECK-MESSAGES-ALL: :[[@LINE-2]]:24: warning: prefer 'std::numbers::pi' to this macro, differs by '5.36e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::inv_sqrtpi);\n\n    log(2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::ln2' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::ln2;\n\n    log(10);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::ln10' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::ln10;\n\n    bar::sqrt(2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2;\n\n    sink(1 / bar::sqrt(3));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::inv_sqrt3' to this formula [modernize-use-std-numbers]\n    // CHECK-MESSAGES-ALL: :[[@LINE-2]]:14: warning: prefer 'std::numbers::sqrt3' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::inv_sqrt3);\n\n    sink(INV_SQRT3);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::inv_sqrt3' to this macro [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::inv_sqrt3);\n\n    sink(NOT_INV_SQRT3);\n\n    const auto inv_sqrt3f = .577350269F;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:29: warning: prefer 'std::numbers::inv_sqrt3_v<float>' to this literal, differs by '1.04e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: const auto inv_sqrt3f = std::numbers::inv_sqrt3_v<float>;\n\n    bar::sqrt(3);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt3' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt3;\n\n    auto somePhi = 1.6180339;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:20: warning: prefer 'std::numbers::phi' to this literal, differs by '8.87e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: auto somePhi = std::numbers::phi;\n\n    sink(Phi);\n\n    sink((42 + bar::sqrt(5)) / 2);\n\n    sink((1 + bar::sqrt(5)) / 2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::phi' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::phi);\n\n    sink((bar::sqrt(5.0F) + 1) / 2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::phi_v<float>' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::phi_v<float>);\n}\n\n\n\ntemplate <typename T>\nvoid baz(){\n    static constexpr T Pi = 3.1415926;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:29: warning: prefer 'std::numbers::pi' to this literal, differs by '5.36e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr T Pi = std::numbers::pi;\n\n    static constexpr T Euler = 2.7182818;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:32: warning: prefer 'std::numbers::e' to this literal, differs by '2.85e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr T Euler = std::numbers::e;\n\n    static constexpr T Phi = 1.6180339;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:30: warning: prefer 'std::numbers::phi' to this literal, differs by '8.87e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr T Phi = std::numbers::phi;\n\n    static constexpr T PiCopy = Pi;\n    static constexpr T PiDefineFromMacro = MY_PI;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:44: warning: prefer 'std::numbers::pi' to this macro, differs by '5.36e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr T PiDefineFromMacro = std::numbers::pi;\n\n    static constexpr T Pi2 = 3.14;\n    // CHECK-MESSAGES-IMPRECISE: :[[@LINE-1]]:30: warning: prefer 'std::numbers::pi' to this literal, differs by '1.59e-03' [modernize-use-std-numbers]\n    // CHECK-FIXES-IMPRECISE: static constexpr T Pi2 = std::numbers::pi;\n    static constexpr T Euler2 = 2.71;\n    // CHECK-MESSAGES-IMPRECISE: :[[@LINE-1]]:33: warning: prefer 'std::numbers::e' to this literal, differs by '8.28e-03' [modernize-use-std-numbers]\n    // CHECK-FIXES-IMPRECISE: static constexpr T Euler2 = std::numbers::e;\n    static constexpr T Phi2 = 1.61;\n    // CHECK-MESSAGES-IMPRECISE: :[[@LINE-1]]:31: warning: prefer 'std::numbers::phi' to this literal, differs by '8.03e-03' [modernize-use-std-numbers]\n    // CHECK-FIXES-IMPRECISE: static constexpr T Phi2 = std::numbers::phi;\n\n    static constexpr T Pi3 = 3.1415926L;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:30: warning: prefer 'std::numbers::pi_v<long double>' to this literal, differs by '5.36e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr T Pi3 = std::numbers::pi_v<long double>;\n\n    static constexpr T Euler3 = 2.7182818L;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:33: warning: prefer 'std::numbers::e_v<long double>' to this literal, differs by '2.85e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr T Euler3 = std::numbers::e_v<long double>;\n\n    static constexpr T Phi3 = 1.6180339L;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:31: warning: prefer 'std::numbers::phi_v<long double>' to this literal, differs by '8.87e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: static constexpr T Phi3 = std::numbers::phi_v<long double>;\n\n    static constexpr my_float Actually2MyFloat = 2;\n    bar::sqrt(Actually2MyFloat);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2_v<float>' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2_v<float>;\n\n    constexpr static T One = 1;\n    constexpr static T Two = 2;\n\n    bar::sqrt(2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2;\n\n    bar::sqrt(Two);\n\n    bar::sqrt(2.0);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2;\n\n    T Not2 = 2;\n    Not2 = 42;\n    bar::sqrt(Not2);\n\n    const T Actually2 = 2;\n    bar::sqrt(Actually2);\n\n    exp(1);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::e;\n\n    exp(One);\n\n    exp(1.00000000000001);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::e;\n\n    log2(exp(1));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log2e' to this formula [modernize-use-std-numbers]\n    // CHECK-MESSAGES-ALL: :[[@LINE-2]]:10: warning: prefer 'std::numbers::e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log2e;\n\n    log2(Euler);\n\n    log2(bar::e);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log2e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log2e;\n\n    T log2e = 1.4426950;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:15: warning: prefer 'std::numbers::log2e' to this literal, differs by '4.09e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: T log2e = std::numbers::log2e;\n\n    log10(exp(1));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log10e' to this formula [modernize-use-std-numbers]\n    // CHECK-MESSAGES-ALL: :[[@LINE-2]]:11: warning: prefer 'std::numbers::e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log10e;\n\n    log10(Euler);\n\n    log10(bar::e);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::log10e' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::log10e;\n\n    T log10e = .434294;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:16: warning: prefer 'std::numbers::log10e' to this literal, differs by '4.82e-07' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: T log10e = std::numbers::log10e;\n\n    T egamma = 0.5772156 * 42;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:16: warning: prefer 'std::numbers::egamma' to this literal, differs by '6.49e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: T egamma = std::numbers::egamma * 42;\n\n    sink(1 / Pi);\n\n    sink(1 / bar::sqrt(Pi));\n\n    sink(1 / bar::sqrt(MY_PI));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::inv_sqrtpi' to this formula [modernize-use-std-numbers]\n    // CHECK-MESSAGES-ALL: :[[@LINE-2]]:24: warning: prefer 'std::numbers::pi' to this macro, differs by '5.36e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::inv_sqrtpi);\n\n\n    log(2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::ln2' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::ln2;\n\n    log(10);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::ln10' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::ln10;\n\n    bar::sqrt(2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt2' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt2;\n\n    sink(1 / bar::sqrt(3));\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::inv_sqrt3' to this formula [modernize-use-std-numbers]\n    // CHECK-MESSAGES-ALL: :[[@LINE-2]]:14: warning: prefer 'std::numbers::sqrt3' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::inv_sqrt3);\n\n    bar::sqrt(3);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:5: warning: prefer 'std::numbers::sqrt3' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: std::numbers::sqrt3;\n\n    T phi = 1.6180339;\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:13: warning: prefer 'std::numbers::phi' to this literal, differs by '8.87e-08' [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: T phi = std::numbers::phi;\n\n    sink((42 + bar::sqrt(5)) / 2);\n\n    sink((1 + bar::sqrt(5)) / 2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::phi' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::phi);\n\n    sink((bar::sqrt(5.0F) + 1) / 2);\n    // CHECK-MESSAGES-ALL: :[[@LINE-1]]:10: warning: prefer 'std::numbers::phi_v<float>' to this formula [modernize-use-std-numbers]\n    // CHECK-FIXES-ALL: sink(std::numbers::phi_v<float>);\n}\n\ntemplate <typename T>\nvoid foobar(){\n    const T Two = 2;\n    bar::sqrt(Two);\n}\nvoid use_templates() {\n    foobar<float>();\n    foobar<double>();\n\n    baz<float>();\n    baz<double>();\n}\n\n#define BIG_MARCO                                                              \\\n  struct InvSqrt3 {                                                            \\\n    template <typename T> static T get() { return 1 / bar::sqrt(3); }          \\\n  }\n\nBIG_MARCO;\n\nvoid use_BIG_MACRO() {\nInvSqrt3 f{};\nf.get<float>();\nf.get<double>();\n}"
    }
  ]
}