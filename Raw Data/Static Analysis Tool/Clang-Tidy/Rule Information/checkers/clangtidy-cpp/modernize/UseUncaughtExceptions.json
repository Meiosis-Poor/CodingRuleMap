{
  "name": "UseUncaughtExceptions",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-uncaught-exceptions",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 97,
  "branches": 11,
  "apis": 63,
  "test": [
    {
      "description": null,
      "expected-problems": 10,
      "expected-linenumbers": [
        29,
        45,
        49,
        53,
        57,
        61,
        65,
        69,
        74,
        78
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++17-or-later %s modernize-use-uncaught-exceptions %t\n\n#define MACRO std::uncaught_exception\n// CHECK-FIXES: #define MACRO std::uncaught_exception\n\nbool uncaught_exception() {\n  return 0;\n}\n\nnamespace std {\n  bool uncaught_exception() {\n    return false;\n  }\n\n  int uncaught_exceptions() {\n    return 0;\n  }\n}\n\ntemplate <typename T>\nbool doSomething(T t) { \n  return t();\n  // CHECK-FIXES: return t();\n}\n\ntemplate <bool (*T)()>\nbool doSomething2() { \n  return T();\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: 'std::uncaught_exception' is deprecated, use 'std::uncaught_exceptions' instead\n  // CHECK-FIXES: return T();\n}\n\nvoid no_warn() {\n\n  uncaught_exception();\n  // CHECK-FIXES: uncaught_exception();\n\n  doSomething(uncaught_exception);\n  // CHECK-FIXES: doSomething(uncaught_exception);\n}\n\nvoid warn() {\n\n  std::uncaught_exception();\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: 'std::uncaught_exception' is deprecated, use 'std::uncaught_exceptions' instead\n  // CHECK-FIXES: std::uncaught_exceptions();\n\n  using std::uncaught_exception;\n  // CHECK-MESSAGES: [[@LINE-1]]:14: warning: 'std::uncaught_exception' is deprecated, use 'std::uncaught_exceptions' instead\n  // CHECK-FIXES: using std::uncaught_exceptions;\n\n  uncaught_exception();\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: 'std::uncaught_exception' is deprecated, use 'std::uncaught_exceptions' instead\n  // CHECK-FIXES: uncaught_exceptions();\n\n  bool b{uncaught_exception()};\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: 'std::uncaught_exception' is deprecated, use 'std::uncaught_exceptions' instead\n  // CHECK-FIXES: bool b{std::uncaught_exceptions() > 0};\n\n  MACRO();\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: 'std::uncaught_exception' is deprecated, use 'std::uncaught_exceptions' instead\n  // CHECK-FIXES: MACRO();\n\n  doSomething(std::uncaught_exception);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: 'std::uncaught_exception' is deprecated, use 'std::uncaught_exceptions' instead\n  // CHECK-FIXES: doSomething(std::uncaught_exception);\n\n  doSomething(uncaught_exception);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: 'std::uncaught_exception' is deprecated, use 'std::uncaught_exceptions' instead\n  // CHECK-FIXES: doSomething(uncaught_exception);\n\n  bool (*foo)();\n  foo = &uncaught_exception;\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: 'std::uncaught_exception' is deprecated, use 'std::uncaught_exceptions' instead\n  // CHECK-FIXES: foo = &uncaught_exception;\n\n  doSomething2<uncaught_exception>();\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: 'std::uncaught_exception' is deprecated, use 'std::uncaught_exceptions' instead\n  // CHECK-FIXES: doSomething2<uncaught_exception>();\n}"
    }
  ]
}