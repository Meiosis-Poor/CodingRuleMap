{
  "name": "UseScopedLock",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-scoped-lock",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 310,
  "branches": 34,
  "apis": 204,
  "test": [
    {
      "description": null,
      "expected-problems": 91,
      "expected-linenumbers": [
        9,
        15,
        22,
        23,
        28,
        29,
        35,
        36,
        37,
        38,
        45,
        46,
        49,
        53,
        62,
        71,
        75,
        80,
        81,
        85,
        91,
        99,
        100,
        103,
        112,
        116,
        122,
        128,
        136,
        140,
        146,
        147,
        151,
        152,
        159,
        160,
        163,
        167,
        173,
        177,
        187,
        194,
        195,
        202,
        203,
        206,
        217,
        223,
        224,
        231,
        232,
        235,
        262,
        269,
        270,
        277,
        278,
        281,
        297,
        305,
        306,
        309,
        318,
        326,
        327,
        330,
        343,
        347,
        351,
        357,
        361,
        365,
        372,
        377,
        381,
        385,
        389,
        398,
        404,
        410,
        419,
        420,
        421,
        422,
        425,
        436,
        444,
        445,
        446,
        447,
        450
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++17-or-later %s modernize-use-scoped-lock %t -- -- -isystem %clang_tidy_headers -fno-delayed-template-parsing\n\n#include <mutex>\n\nvoid Positive() {\n  std::mutex m;\n  {\n    std::lock_guard<std::mutex> l(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l(m);\n  }\n\n  {\n    std::lock_guard<std::mutex> l(m, std::adopt_lock);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l(std::adopt_lock, m);\n  }\n\n  {\n    std::lock_guard<std::mutex> l1(m);\n    std::lock_guard<std::mutex> l2(m);\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-2]]:33: note: additional 'std::lock_guard' declared here\n  }\n\n  {\n    std::lock_guard<std::mutex> l1(m), l2(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-2]]:40: note: additional 'std::lock_guard' declared here\n  }\n\n  {\n    std::lock_guard<std::mutex> l1(m), l2(m), l3(m);\n    std::lock_guard<std::mutex> l4(m);\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-3]]:40: note: additional 'std::lock_guard' declared here\n    // CHECK-MESSAGES: :[[@LINE-4]]:47: note: additional 'std::lock_guard' declared here\n    // CHECK-MESSAGES: :[[@LINE-4]]:33: note: additional 'std::lock_guard' declared here\n  }\n  \n  { \n    std::lock(m, m);\n    std::lock_guard<std::mutex> l1(m, std::adopt_lock);\n    std::lock_guard<std::mutex> l2(m, std::adopt_lock);\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-2]]:33: note: additional 'std::lock_guard' declared here\n    int a = 0;\n    std::lock_guard<std::mutex> l3(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l3(m);\n    int b = 0;\n    std::lock_guard<std::mutex> l4(m, std::adopt_lock);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l4(std::adopt_lock, m);\n  } \n}\n\n\nstd::mutex p_m1;\nvoid PositiveShortFunction() {\n  std::lock_guard<std::mutex> l(p_m1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: std::scoped_lock l(p_m1);\n}\n\n\nvoid PositiveNested() {\n  std::mutex m1;\n  if (true) {\n    std::lock_guard<std::mutex> l(m1);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l(m1);\n    {\n      std::lock_guard<std::mutex> l2(m1);\n      // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n      // CHECK-FIXES: std::scoped_lock l2(m1);\n      {\n        std::lock_guard<std::mutex> l3(m1);\n        std::lock_guard<std::mutex> l4(m1);\n        // CHECK-MESSAGES: :[[@LINE-2]]:9: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n        // CHECK-MESSAGES: :[[@LINE-2]]:37: note: additional 'std::lock_guard' declared here\n      }\n      {\n        std::lock_guard<std::mutex> l2(m1);\n        // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n        // CHECK-FIXES: std::scoped_lock l2(m1);\n      }\n    }\n  }\n  std::lock_guard<std::mutex> l(m1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: std::scoped_lock l(m1);\n}\n\n\nvoid PositiveInsideArg(std::mutex &m1, std::mutex &m2, std::mutex &m3) {\n  std::lock_guard<std::mutex> l1(m1);\n  std::lock_guard<std::mutex> l2(m2);\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n  // CHECK-MESSAGES: :[[@LINE-2]]:31: note: additional 'std::lock_guard' declared here\n  int a = 0;\n  std::lock_guard<std::mutex> l3(m3);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: std::scoped_lock l3(m3);\n}\n\n\nvoid PositiveInsideConditional() {\n  std::mutex m1;\n  if (true) {\n    std::lock_guard<std::mutex> l1(m1);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l1(m1);\n  } else {\n    std::lock_guard<std::mutex> l1(m1);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l1(m1);\n  }\n\n  while (true) {\n    std::lock_guard<std::mutex> l1(m1);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l1(m1);\n  }\n\n  for (int i = 0; i < 10; ++i) {\n    std::lock_guard<std::mutex> l1(m1);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l1(m1);\n  }\n}\n\nvoid PositiveLambda() {\n  std::mutex m;\n  std::lock_guard<std::mutex> l1(m);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: std::scoped_lock l1(m);\n  auto lambda1 = [&]() {\n    std::lock_guard<std::mutex> l1(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l1(m);\n  };\n\n  std::lock_guard<std::mutex> l3(m);\n  std::lock_guard<std::mutex> l4(m);\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n  // CHECK-MESSAGES: :[[@LINE-2]]:31: note: additional 'std::lock_guard' declared here\n  auto lamda2 = [&]() {\n    std::lock_guard<std::mutex> l3(m);\n    std::lock_guard<std::mutex> l4(m);\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-2]]:33: note: additional 'std::lock_guard' declared here\n  };\n\n  auto lamda3 = [&]() {\n    std::lock(m, m);\n    std::lock_guard<std::mutex> l1(m, std::adopt_lock);\n    std::lock_guard<std::mutex> l2(m, std::adopt_lock);\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-2]]:33: note: additional 'std::lock_guard' declared here\n    int a = 0;\n    std::lock_guard<std::mutex> l3(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l3(m);\n    int b = 0;\n    std::lock_guard<std::mutex> l4(m, std::adopt_lock);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l4(std::adopt_lock, m);\n  };\n\n  auto lamda4 = [&]() {\n    std::lock_guard<std::mutex> l1(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l1(m);\n    int a = 0;\n    std::lock_guard<std::mutex> l2(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l2(m);\n  };\n}\n\ntemplate <typename T>\nvoid PositiveTemplated() {\n  std::mutex m1, m2, m3;\n  {\n    std::lock_guard<std::mutex> l(m1);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l(m1);\n  }\n\n  {\n    std::lock_guard<std::mutex> l1(m1);\n    std::lock_guard<std::mutex> l2(m2);\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-2]]:33: note: additional 'std::lock_guard' declared here\n  }\n\n  {\n    std::lock(m1, m2);\n    std::lock_guard<std::mutex> l1(m1, std::adopt_lock);\n    std::lock_guard<std::mutex> l2(m2, std::adopt_lock);\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-2]]:33: note: additional 'std::lock_guard' declared here\n    int a = 0;\n    std::lock_guard<std::mutex> l3(m3);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l3(m3);\n  }\n}\n\n\ntemplate <typename Mutex>\nvoid PositiveTemplatedMutex() {\n  Mutex m1, m2, m3;\n  {\n    std::lock_guard<Mutex> l(m1);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  }\n\n  {\n    std::lock_guard<Mutex> l1(m1);\n    std::lock_guard<Mutex> l2(m2);\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-2]]:28: note: additional 'std::lock_guard' declared here\n  }\n\n  {\n    std::lock(m1, m2);\n    std::lock_guard<Mutex> l1(m1, std::adopt_lock);\n    std::lock_guard<Mutex> l2(m2, std::adopt_lock);\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-2]]:28: note: additional 'std::lock_guard' declared here\n    int a = 0;\n    std::lock_guard<Mutex> l3(m3);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  }\n}\n\n\ntemplate <template <typename> typename Lock>\nvoid NegativeTemplate() {\n  std::mutex m1, m2;\n  {\n    Lock<std::mutex> l(m1);\n  }\n\n  {\n    Lock<std::mutex> l1(m1);\n    Lock<std::mutex> l2(m2);\n  }\n}\n\nvoid instantiate() {\n  NegativeTemplate<std::lock_guard>();\n}\n\n\nstruct PositiveClass {\n  void Positive() {\n    {\n      std::lock_guard<std::mutex> l(m1);\n      // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n      // CHECK-FIXES: std::scoped_lock l(m1);\n    }\n\n    {\n      std::lock_guard<std::mutex> l1(m1);\n      std::lock_guard<std::mutex> l2(m2);\n      // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n      // CHECK-MESSAGES: :[[@LINE-2]]:35: note: additional 'std::lock_guard' declared here\n    }\n\n    {\n      std::lock(m1, m2);  \n      std::lock_guard<std::mutex> l1(m1, std::adopt_lock);\n      std::lock_guard<std::mutex> l2(m2, std::adopt_lock);\n      // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n      // CHECK-MESSAGES: :[[@LINE-2]]:35: note: additional 'std::lock_guard' declared here\n      int a = 0;\n      std::lock_guard<std::mutex> l3(m3);\n      // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n      // CHECK-FIXES: std::scoped_lock l3(m3);\n    }\n  }\n  \n  std::mutex m1;\n  std::mutex m2;\n  std::mutex m3;\n};\n\n\ntemplate <typename T>\nstruct PositiveTemplatedClass {\n  void Positive() {\n    {\n      std::lock_guard<std::mutex> l(m1);\n      // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n      // CHECK-FIXES: std::scoped_lock l(m1);\n    }\n\n    {\n      std::lock(m1, m2);  \n      std::lock_guard<std::mutex> l1(m1, std::adopt_lock);\n      std::lock_guard<std::mutex> l2(m2, std::adopt_lock);\n      // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n      // CHECK-MESSAGES: :[[@LINE-2]]:35: note: additional 'std::lock_guard' declared here\n      int a = 0;\n      std::lock_guard<std::mutex> l3(m3);\n      // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n      // CHECK-FIXES: std::scoped_lock l3(m3);\n    }\n  }\n\n  template <typename... Ts>\n  void TemplatedPositive() {\n    {\n      std::lock_guard<std::mutex> l(m1);\n      // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n      // CHECK-FIXES: std::scoped_lock l(m1);\n    }\n\n    {\n      std::lock(m1, m2);  \n      std::lock_guard<std::mutex> l1(m1, std::adopt_lock);\n      std::lock_guard<std::mutex> l2(m2, std::adopt_lock);\n      // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n      // CHECK-MESSAGES: :[[@LINE-2]]:35: note: additional 'std::lock_guard' declared here\n      int a = 0;\n      std::lock_guard<std::mutex> l3(m3);\n      // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n      // CHECK-FIXES: std::scoped_lock l3(m3);\n    }\n  }\n  \n  std::mutex m1;\n  std::mutex m2;\n  std::mutex m3;\n};\n\n\ntemplate <typename T>\nusing Lock = std::lock_guard<T>;\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n// CHECK-FIXES: using Lock = std::scoped_lock<T>;\n\nusing LockM = std::lock_guard<std::mutex>;\n// CHECK-MESSAGES: :[[@LINE-1]]:15: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n// CHECK-FIXES: using LockM = std::scoped_lock<std::mutex>;\n\ntypedef std::lock_guard<std::mutex> LockDef;\n// CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n// CHECK-FIXES: typedef std::scoped_lock<std::mutex> LockDef;\n\n\nvoid PositiveUsingDecl() {\n  using std::lock_guard;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: using std::scoped_lock;\n\n  using LockMFun = std::lock_guard<std::mutex>;\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: using LockMFun = std::scoped_lock<std::mutex>;\n\n  typedef std::lock_guard<std::mutex> LockDefFun;\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: typedef std::scoped_lock<std::mutex> LockDefFun;\n}\n\ntemplate <typename T>\nvoid PositiveUsingDeclTemplate() {\n  using std::lock_guard;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: using std::scoped_lock;\n\n  std::mutex m;\n  lock_guard<std::mutex> l(m);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: std::scoped_lock l(m);\n\n  using LockFunT = std::lock_guard<T>;\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: using LockFunT = std::scoped_lock<T>;\n\n  using LockMFunT = std::lock_guard<std::mutex>;\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: using LockMFunT = std::scoped_lock<std::mutex>;\n\n  typedef std::lock_guard<std::mutex> LockDefFunT;\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  // CHECK-FIXES: typedef std::scoped_lock<std::mutex> LockDefFunT;\n}\n\nvoid PositiveInUsingTypedefs() {\n  std::mutex m;\n\n  {\n    Lock<std::mutex> l(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l(m);\n  }\n\n  {\n    LockM l(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l(m);\n  }\n\n  {\n    LockDef l(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l(m);\n  }\n\n  {\n    std::lock(m, m);\n    Lock<std::mutex> l1(m, std::adopt_lock);\n    LockM l2(m, std::adopt_lock);\n    LockDef l3(m), l4(m);\n    // CHECK-MESSAGES: :[[@LINE-3]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-3]]:11: note: additional 'std::lock_guard' declared here\n    // CHECK-MESSAGES: :[[@LINE-3]]:13: note: additional 'std::lock_guard' declared here\n    // CHECK-MESSAGES: :[[@LINE-4]]:20: note: additional 'std::lock_guard' declared here\n    int a = 0;\n    LockDef l5(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n    // CHECK-FIXES: std::scoped_lock l5(m);\n  }\n}\n\ntemplate <typename Mutex>\nvoid PositiveInUsingTypedefsTemplated() {\n  Mutex m;\n\n  {\n    Lock<Mutex> l(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  }\n\n  {\n    std::lock(m, m);\n    Lock<Mutex> l1(m, std::adopt_lock);\n    LockM l2(m, std::adopt_lock);\n    LockDef l3(m), l4(m);\n    // CHECK-MESSAGES: :[[@LINE-3]]:5: warning: use single 'std::scoped_lock' instead of multiple 'std::lock_guard'\n    // CHECK-MESSAGES: :[[@LINE-3]]:11: note: additional 'std::lock_guard' declared here\n    // CHECK-MESSAGES: :[[@LINE-3]]:13: note: additional 'std::lock_guard' declared here\n    // CHECK-MESSAGES: :[[@LINE-4]]:20: note: additional 'std::lock_guard' declared here\n    int a = 0;\n    LockDef l5(m);\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'std::scoped_lock' instead of 'std::lock_guard'\n  }\n}\n\n// Non-STD lock_guard.\ntemplate <typename Mutex>\nstruct lock_guard {\n  lock_guard(Mutex &m) { }\n  lock_guard(const lock_guard& ) = delete;\n};\n\nvoid NegativeNonStdLockGuard() {\n  std::mutex m;\n  {\n    lock_guard<std::mutex> l(m);\n  }\n\n  {\n    lock_guard<std::mutex> l1(m);\n    lock_guard<std::mutex> l2(m);\n  }\n}"
    }
  ]
}