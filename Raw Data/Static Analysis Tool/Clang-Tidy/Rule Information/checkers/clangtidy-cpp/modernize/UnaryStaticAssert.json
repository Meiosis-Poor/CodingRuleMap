{
  "name": "UnaryStaticAssert",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-unary-static-assert",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 37,
  "branches": 2,
  "apis": 15,
  "test": [
    {
      "description": null,
      "expected-problems": 1,
      "expected-linenumbers": [
        8
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++17-or-later %s modernize-unary-static-assert %t\n\n#define FOO static_assert(sizeof(a) <= 15, \"\");\n#define MSG \"\"\n\nvoid f_textless(int a) {\n  static_assert(sizeof(a) <= 10, \"\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use unary 'static_assert' when the string literal is an empty string [modernize-unary-static-assert]\n  // CHECK-FIXES: static_assert(sizeof(a) <= 10 );\n  FOO\n  // CHECK-FIXES: FOO\n  static_assert(sizeof(a) <= 17, MSG);\n  // CHECK-FIXES: static_assert(sizeof(a) <= 17, MSG);\n}\n\nvoid f_with_tex(int a) {\n  static_assert(sizeof(a) <= 10, \"Size of variable a is out of range!\");\n}\n\nvoid f_unary(int a) { static_assert(sizeof(a) <= 10); }\n\nvoid f_incorrect_assert() { static_assert(\"\"); }"
    }
  ]
}