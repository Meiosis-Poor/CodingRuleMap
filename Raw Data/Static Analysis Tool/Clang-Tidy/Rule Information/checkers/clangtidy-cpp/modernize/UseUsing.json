{
  "name": "UseUsing",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-using",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 229,
  "branches": 26,
  "apis": 152,
  "test": [
    {
      "description": null,
      "expected-problems": 81,
      "expected-linenumbers": [
        4,
        8,
        12,
        16,
        20,
        24,
        29,
        34,
        45,
        54,
        58,
        62,
        66,
        72,
        78,
        82,
        86,
        87,
        88,
        102,
        113,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        145,
        148,
        151,
        157,
        163,
        167,
        175,
        194,
        202,
        203,
        208,
        209,
        214,
        223,
        224,
        229,
        239,
        240,
        245,
        249,
        255,
        259,
        267,
        271,
        272,
        277,
        278,
        283,
        289,
        295,
        302,
        307,
        311,
        315,
        320,
        321,
        326,
        333,
        341,
        351,
        359,
        367,
        377,
        383,
        389,
        390,
        403,
        410,
        414,
        419,
        430,
        435,
        437
      ],
      "code": "\n// RUN: %check_clang_tidy %s modernize-use-using %t -- -- -fno-delayed-template-parsing -I %S/Inputs/use-using/\n\ntypedef int Type;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-FIXES: using Type = int;\n\ntypedef long LL;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using LL = long;\n\ntypedef int Bla;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Bla = int;\n\ntypedef Bla Bla2;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Bla2 = Bla;\n\ntypedef void (*type)(int, int);\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using type = void (*)(int, int);\n\ntypedef void (*type2)();\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using type2 = void (*)();\n\nclass Class {\n  typedef long long Type;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef'\n  // CHECK-FIXES: using Type = long long;\n};\n\ntypedef void (Class::*MyPtrType)(Bla) const;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using MyPtrType = void (Class::*)(Bla)[[ATTR:( __attribute__\\(\\(thiscall\\)\\))?]] const;\n\nclass Iterable {\npublic:\n  class Iterator {};\n};\n\ntemplate <typename T>\nclass Test {\n  typedef typename T::iterator Iter;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef'\n  // CHECK-FIXES: using Iter = typename T::iterator;\n};\n\nusing balba = long long;\n\nunion A {};\n\ntypedef void (A::*PtrType)(int, int) const;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using PtrType = void (A::*)(int, int)[[ATTR]] const;\n\ntypedef Class some_class;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using some_class = Class;\n\ntypedef Class Cclass;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Cclass = Class;\n\ntypedef Cclass cclass2;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using cclass2 = Cclass;\n\nclass cclass {};\n\ntypedef void (cclass::*MyPtrType3)(Bla);\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using MyPtrType3 = void (cclass::*)(Bla)[[ATTR]];\n\nusing my_class = int;\n\ntypedef Test<my_class *> another;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using another = Test<my_class *>;\n\ntypedef int* PInt;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using PInt = int*;\n\ntypedef int bla1, bla2, bla3;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-MESSAGES: :[[@LINE-2]]:17: warning: use 'using' instead of 'typedef'\n// CHECK-MESSAGES: :[[@LINE-3]]:23: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using bla1 = int;\n// CHECK-FIXES-NEXT: using bla2 = int;\n// CHECK-FIXES-NEXT: using bla3 = int;\n\n#define CODE typedef int INT\n\nCODE;\n// CHECK-FIXES: #define CODE typedef int INT\n// CHECK-FIXES: CODE;\n\nstruct Foo;\n#define Bar Baz\ntypedef Foo Bar;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: #define Bar Baz\n// CHECK-FIXES: using Baz = Foo;\n\n#define TYPEDEF typedef\nTYPEDEF Foo Bak;\n// CHECK-FIXES: #define TYPEDEF typedef\n// CHECK-FIXES: TYPEDEF Foo Bak;\n\n#define FOO Foo\ntypedef FOO Bam;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: #define FOO Foo\n// CHECK-FIXES: using Bam = FOO;\n\ntypedef struct Foo Bap;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Bap = struct Foo;\n\nstruct Foo typedef Bap2;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Bap2 = struct Foo;\n\nFoo typedef Bap3;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Bap3 = Foo;\n\ntypedef struct Unknown Baq;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Baq = struct Unknown;\n\nstruct Unknown2 typedef Baw;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Baw = struct Unknown2;\n\nint typedef Bax;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Bax = int;\n\ntypedef struct Q1 { int a; } S1;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using S1 = struct Q1 { int a; };\ntypedef struct { int b; } S2;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using S2 = struct { int b; };\nstruct Q2 { int c; } typedef S3;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using S3 = struct Q2 { int c; };\nstruct { int d; } typedef S4;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using S4 = struct { int d; };\n\nnamespace my_space {\n  class my_cclass {};\n  typedef my_cclass FuncType;\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using FuncType = my_cclass;\n}\n\n#define lol 4\ntypedef unsigned Map[lol];\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: typedef unsigned Map[lol];\n\ntypedef void (*fun_type)();\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using fun_type = void (*)();\n\nnamespace template_instantiations {\ntemplate <typename T>\nclass C {\n protected:\n  typedef C<T> super;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef'\n  // CHECK-FIXES: using super = C<T>;\n  virtual void f();\n\npublic:\n  virtual ~C();\n};\n\nclass D : public C<D> {\n  void f() override { super::f(); }\n};\nclass E : public C<E> {\n  void f() override { super::f(); }\n};\n}\n\ntemplate <typename T1, typename T2>\nclass TwoArgTemplate {\n  typedef TwoArgTemplate<T1, T2> self;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef'\n  // CHECK-FIXES: using self = TwoArgTemplate<T1, T2>;\n};\n\ntemplate <bool B, typename T>\nstruct S {};\n\ntypedef S<(0 > 0), int> S_t, *S_p;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-MESSAGES: :[[@LINE-2]]:28: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using S_t = S<(0 > 0), int>;\n// CHECK-FIXES-NEXT: using S_p = S_t*;\n\ntypedef S<(0 < 0), int> S2_t, *S2_p;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-MESSAGES: :[[@LINE-2]]:29: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using S2_t = S<(0 < 0), int>;\n// CHECK-FIXES-NEXT: using S2_p = S2_t*;\n\ntypedef S<(0 > 0 && (3 > 1) && (1 < 1)), int> S3_t;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using S3_t = S<(0 > 0 && (3 > 1) && (1 < 1)), int>;\n\ntemplate <bool B>\nstruct Q {};\n\nconstexpr bool b[1] = {true};\n\ntypedef Q<b[0 < 0]> Q_t, *Q_p;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-MESSAGES: :[[@LINE-2]]:24: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Q_t = Q<b[0 < 0]>;\n// CHECK-FIXES-NEXT: using Q_p = Q_t*;\n\ntypedef Q<b[0 < 0]> Q2_t;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Q2_t = Q<b[0 < 0]>;\n\nstruct T {\n  constexpr T(bool) {}\n\n  static constexpr bool b = true;\n};\n\ntypedef Q<T{0 < 0}.b> Q3_t, *Q3_p;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-MESSAGES: :[[@LINE-2]]:27: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Q3_t = Q<T{0 < 0}.b>;\n// CHECK-FIXES-NEXT: using Q3_p = Q3_t*;\n\ntypedef Q<T{0 < 0}.b> Q3_t;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Q3_t = Q<T{0 < 0}.b>;\n\ntypedef TwoArgTemplate<TwoArgTemplate<int, Q<T{0 < 0}.b> >, S<(0 < 0), Q<b[0 < 0]> > > Nested_t;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Nested_t = TwoArgTemplate<TwoArgTemplate<int, Q<T{0 < 0}.b> >, S<(0 < 0), Q<b[0 < 0]> > >;\n\ntemplate <typename a>\nclass TemplateKeyword {\n  typedef typename a::template b<> d;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef'\n  // CHECK-FIXES: using d = typename a::template b<>;\n\n  typedef typename a::template b<>::c d2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef'\n  // CHECK-FIXES: using d2 = typename a::template b<>::c;\n};\n\ntemplate <typename... Args>\nclass Variadic {};\n\ntypedef Variadic<Variadic<int, bool, Q<T{0 < 0}.b> >, S<(0 < 0), Variadic<Q<b[0 < 0]> > > > Variadic_t;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Variadic_t = Variadic<Variadic<int, bool, Q<T{0 < 0}.b> >, S<(0 < 0), Variadic<Q<b[0 < 0]> > > >;\n\ntypedef Variadic<Variadic<int, bool, Q<T{0 < 0}.b> >, S<(0 < 0), Variadic<Q<b[0 < 0]> > > > Variadic_t, *Variadic_p;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-MESSAGES: :[[@LINE-2]]:103: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using Variadic_t = Variadic<Variadic<int, bool, Q<T{0 < 0}.b> >, S<(0 < 0), Variadic<Q<b[0 < 0]> > > >;\n// CHECK-FIXES-NEXT: using Variadic_p = Variadic_t*;\n\ntypedef struct { int a; } R_t, *R_p;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-MESSAGES: :[[@LINE-2]]:30: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using R_t = struct { int a; };\n// CHECK-FIXES-NEXT: using R_p = R_t*;\n\ntypedef enum { ea1, eb1 } EnumT1;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using EnumT1 = enum { ea1, eb1 };\n\n#include \"modernize-use-using.h\"\n\ntypedef enum { ea2, eb2 } EnumT2_CheckTypedefImpactFromAnotherFile;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using EnumT2_CheckTypedefImpactFromAnotherFile = enum { ea2, eb2 };\n\ntemplate <int A>\nstruct InjectedClassName {\n  typedef InjectedClassName b;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef'\n  // CHECK-FIXES: using b = InjectedClassName;\n};\n\ntemplate <int>\nstruct InjectedClassNameWithUnnamedArgument {\n  typedef InjectedClassNameWithUnnamedArgument b;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef'\n  // CHECK-FIXES: using b = InjectedClassNameWithUnnamedArgument;\n};\n\ntypedef struct { int a; union { int b; }; } PR50990;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using PR50990 = struct { int a; union { int b; }; };\n\ntypedef struct { struct { int a; struct { struct { int b; } c; int d; } e; } f; int g; } PR50990_nested;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using PR50990_nested = struct { struct { int a; struct { struct { int b; } c; int d; } e; } f; int g; };\n\ntypedef struct { struct { int a; } b; union { int c; float d; struct { int e; }; }; struct { double f; } g; } PR50990_siblings;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using PR50990_siblings = struct { struct { int a; } b; union { int c; float d; struct { int e; }; }; struct { double f; } g; };\n\ntypedef void (*ISSUE_65055_1)(int);\ntypedef bool (*ISSUE_65055_2)(int);\n// CHECK-MESSAGES: :[[@LINE-2]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-MESSAGES: :[[@LINE-2]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using ISSUE_65055_1 = void (*)(int);\n// CHECK-FIXES: using ISSUE_65055_2 = bool (*)(int);\n\ntypedef class ISSUE_67529_1 *ISSUE_67529;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef'\n// CHECK-FIXES: using ISSUE_67529 = class ISSUE_67529_1 *;\n\n// Some Header\nextern \"C\" {\n\ntypedef int InExternC;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-FIXES: using InExternC = int;\n\n}\n\nextern \"C++\" {\n\ntypedef int InExternCPP;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-FIXES: using InExternCPP = int;\n\n}\n\nnamespace ISSUE_72179\n{  \n  void foo()\n  {\n    typedef int a;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'using' instead of 'typedef' [modernize-use-using]\n    // CHECK-FIXES: using a = int;\n\n  }\n\n  void foo2()\n  {\n    typedef struct { int a; union { int b; }; } c;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'using' instead of 'typedef' [modernize-use-using]\n    // CHECK-FIXES: using c = struct { int a; union { int b; }; };\n  }\n\n  template <typename T>\n  void foo3()\n  {\n    typedef T b;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use 'using' instead of 'typedef' [modernize-use-using]\n    // CHECK-FIXES: using b = T;\n  }\n\n  template <typename T>\n  class MyClass\n  {\n    void foo()\n    {\n      typedef MyClass c;\n      // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use 'using' instead of 'typedef' [modernize-use-using]\n      // CHECK-FIXES: using c = MyClass;\n    }\n  };\n\n  const auto foo4 = [](int a){typedef int d;};\n  // CHECK-MESSAGES: :[[@LINE-1]]:31: warning: use 'using' instead of 'typedef' [modernize-use-using]\n  // CHECK-FIXES: const auto foo4 = [](int a){using d = int;};\n}\n\n\ntypedef int* int_ptr, *int_ptr_ptr;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-MESSAGES: :[[@LINE-2]]:21: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-FIXES: using int_ptr = int*;\n// CHECK-FIXES-NEXT: using int_ptr_ptr = int_ptr*;\n\n#ifndef SpecialMode\n#define SomeMacro(x) x\n#else\n#define SomeMacro(x) SpecialType\n#endif\n\nclass SomeMacro(GH33760) { };\n\ntypedef void(SomeMacro(GH33760)::* FunctionType)(float, int);\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-FIXES: using FunctionType = void(SomeMacro(GH33760)::* )(float, int);\n\n#define CDECL __attribute((cdecl))\n\n// GH37846 & GH41685\ntypedef void (CDECL *GH37846)(int);\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-FIXES: using GH37846 = void (CDECL *)(int);\n\ntypedef void (__attribute((cdecl)) *GH41685)(int);\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-FIXES: using GH41685 = void (__attribute((cdecl)) *)(int);\n\nnamespace GH83568 {\n  typedef int(*name)(int arg1, int arg2);\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-FIXES: using name = int(*)(int arg1, int arg2);\n}\n\n#ifdef FOO\n#define GH95716 float\n#else\n#define GH95716 double\n#endif\n\ntypedef GH95716 foo;\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-FIXES: using foo = GH95716;\n\nnamespace GH97009 {\n  typedef double PointType[3];\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef' [modernize-use-using]\n  typedef bool (*Function)(PointType, PointType);\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use 'using' instead of 'typedef' [modernize-use-using]\n// CHECK-FIXES: using Function = bool (*)(PointType, PointType);\n}"
    }
  ]
}