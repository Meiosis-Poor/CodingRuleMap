{
  "name": "UseStdPrint",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-std-print",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 166,
  "branches": 9,
  "apis": 125,
  "test": [
    {
      "description": null,
      "expected-problems": 290,
      "expected-linenumbers": [
        29,
        35,
        39,
        43,
        49,
        53,
        59,
        63,
        77,
        81,
        85,
        100,
        105,
        111,
        115,
        126,
        132,
        138,
        143,
        150,
        154,
        159,
        165,
        169,
        178,
        192,
        196,
        200,
        215,
        220,
        226,
        230,
        241,
        247,
        253,
        258,
        265,
        269,
        275,
        281,
        285,
        294,
        302,
        308,
        314,
        318,
        322,
        326,
        330,
        336,
        340,
        344,
        348,
        352,
        358,
        362,
        369,
        372,
        387,
        394,
        400,
        409,
        415,
        425,
        430,
        436,
        440,
        445,
        450,
        456,
        461,
        466,
        472,
        478,
        484,
        490,
        494,
        499,
        504,
        510,
        514,
        519,
        524,
        530,
        534,
        539,
        544,
        550,
        554,
        559,
        564,
        571,
        575,
        581,
        586,
        594,
        598,
        604,
        615,
        620,
        626,
        631,
        637,
        641,
        646,
        652,
        658,
        664,
        669,
        674,
        679,
        685,
        690,
        696,
        701,
        707,
        712,
        718,
        724,
        731,
        738,
        745,
        752,
        756,
        760,
        765,
        773,
        778,
        783,
        788,
        793,
        798,
        804,
        808,
        812,
        818,
        822,
        826,
        830,
        834,
        838,
        842,
        847,
        852,
        858,
        864,
        870,
        885,
        889,
        893,
        904,
        908,
        912,
        923,
        927,
        931,
        939,
        943,
        948,
        953,
        957,
        962,
        967,
        973,
        977,
        988,
        995,
        1002,
        1009,
        1013,
        1017,
        1021,
        1025,
        1034,
        1038,
        1042,
        1046,
        1050,
        1054,
        1058,
        1067,
        1071,
        1075,
        1079,
        1083,
        1087,
        1091,
        1095,
        1101,
        1105,
        1109,
        1113,
        1117,
        1121,
        1126,
        1130,
        1137,
        1142,
        1147,
        1152,
        1157,
        1161,
        1166,
        1170,
        1176,
        1180,
        1184,
        1189,
        1194,
        1199,
        1203,
        1209,
        1213,
        1217,
        1221,
        1227,
        1231,
        1235,
        1241,
        1247,
        1251,
        1255,
        1259,
        1265,
        1269,
        1273,
        1277,
        1281,
        1288,
        1292,
        1296,
        1302,
        1306,
        1310,
        1316,
        1320,
        1324,
        1347,
        1352,
        1357,
        1362,
        1367,
        1372,
        1377,
        1382,
        1387,
        1392,
        1397,
        1402,
        1407,
        1412,
        1419,
        1424,
        1429,
        1434,
        1439,
        1444,
        1449,
        1454,
        1459,
        1464,
        1469,
        1474,
        1479,
        1484,
        1490,
        1502,
        1506,
        1512,
        1516,
        1527,
        1533,
        1539,
        1543,
        1549,
        1556,
        1571,
        1575,
        1590,
        1594,
        1598,
        1601,
        1604,
        1607,
        1611,
        1615,
        1622,
        1628,
        1634,
        1641
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes -check-suffixes=,STRICT \\\n// RUN:   -std=c++23 %s modernize-use-std-print %t -- \\\n// RUN:   -config=\"{CheckOptions: {modernize-use-std-print.StrictMode: true}}\" \\\n// RUN:   -- -isystem %clang_tidy_headers -fexceptions \\\n// RUN:      -DPRI_CMDLINE_MACRO=\"\\\"s\\\"\" \\\n// RUN:      -D__PRI_CMDLINE_MACRO=\"\\\"s\\\"\"\n// RUN: %check_clang_tidy --match-partial-fixes -check-suffixes=,NOTSTRICT \\\n// RUN:   -std=c++23 %s modernize-use-std-print %t -- \\\n// RUN:   -config=\"{CheckOptions: {modernize-use-std-print.StrictMode: false}}\" \\\n// RUN:   -- -isystem %clang_tidy_headers -fexceptions \\\n// RUN:      -DPRI_CMDLINE_MACRO=\"\\\"s\\\"\" \\\n// RUN:      -D__PRI_CMDLINE_MACRO=\"\\\"s\\\"\"\n#include <cstddef>\n#include <cstdint>\n#include <cstdio>\n// CHECK-FIXES: #include <print>\n#include <inttypes.h>\n#include <string.h>\n#include <string>\n\ntemplate <typename T>\nstruct iterator {\n  T *operator->();\n  T &operator*();\n};\n\nvoid printf_simple() {\n  printf(\"Hello\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Hello\");\n}\n\nvoid printf_newline() {\n  printf(\"Hello\\n\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello\");\n\n  printf(\"Split\" \"\\n\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Split\");\n\n  printf(\"Double\\n\\n\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Double\\n\");\n}\n\nvoid printf_deceptive_newline() {\n  printf(\"Hello\\\\n\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Hello\\\\n\");\n\n  printf(\"Hello\\x0a\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello\");\n}\n\nvoid printf_crlf_newline() {\n  printf(\"Hello\\r\\n\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Hello\\r\\n\");\n\n  printf(\"Hello\\r\\\\n\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Hello\\r\\\\n\");\n}\n\n// std::print returns nothing, so any callers that use the return\n// value cannot be automatically translated.\nint printf_uses_return_value(int choice) {\n  const int i = printf(\"Return value assigned to variable %d\\n\", 42);\n\n  extern void accepts_int(int);\n  accepts_int(printf(\"Return value passed to function %d\\n\", 42));\n\n  if (choice == 0)\n    printf(\"if body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"if body {}\", i);\n  else if (choice == 1)\n    printf(\"else if body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"else if body {}\", i);\n  else\n    printf(\"else body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"else body {}\", i);\n\n  if (printf(\"Return value used as boolean in if statement\"))\n    if (printf(\"Return value used in expression if statement\") == 44)\n      if (const int j = printf(\"Return value used in assignment in if statement\"))\n        if (const int k = printf(\"Return value used with initializer in if statement\"); k == 44)\n          ;\n\n  int d = 0;\n  while (printf(\"%d\", d) < 2)\n    ++d;\n\n  while (true)\n    printf(\"while body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"while body {}\", i);\n\n  do\n    printf(\"do body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"do body {}\", i);\n  while (true);\n\n  for (;;)\n    printf(\"for body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"for body {}\", i);\n\n  for (printf(\"for init statement %d\\n\", i);;)\n    // CHECK-MESSAGES: [[@LINE-1]]:8: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"for init statement {}\", i);\n    ;;\n\n  for (int j = printf(\"for init statement %d\\n\", i);;)\n    ;;\n\n  for (; printf(\"for condition %d\\n\", i);)\n    ;;\n\n  for (;; printf(\"for expression %d\\n\", i))\n    // CHECK-MESSAGES: [[@LINE-1]]:11: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"for expression {}\", i)\n    ;;\n\n  for (auto C : \"foo\")\n    printf(\"ranged-for body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"ranged-for body {}\", i);\n\n  switch (1) {\n  case 1:\n    printf(\"switch case body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"switch case body {}\", i);\n    break;\n  default:\n    printf(\"switch default body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"switch default body {}\", i);\n    break;\n  }\n\n  try {\n    printf(\"try body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"try body {}\", i);\n  } catch (int) {\n    printf(\"catch body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"catch body {}\", i);\n  }\n\n  (printf(\"Parenthesised expression %d\\n\", i));\n  // CHECK-MESSAGES: [[@LINE-1]]:4: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: (std::println(\"Parenthesised expression {}\", i));\n\n  // Ideally we would convert these two, but the current check doesn't cope with\n  // that.\n  (void)printf(\"cast to void %d\\n\", i);\n  // CHECK-MESSAGES-NOT: [[@LINE-1]]:9: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOT: std::println(\"cast to void {}\", i);\n\n  static_cast<void>(printf(\"static_cast to void %d\\n\", i));\n  // CHECK-MESSAGES-NOT: [[@LINE-1]]:9: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOT: std::println(\"static cast to void {}\", i);\n\n  const int x = ({ printf(\"GCC statement expression using return value immediately %d\\n\", i); });\n  const int y = ({ const int y = printf(\"GCC statement expression using return value immediately %d\\n\", i); y; });\n\n  // Ideally we would convert this one, but the current check doesn't cope with\n  // that.\n  ({ printf(\"GCC statement expression with unused result %d\\n\", i); });\n  // CHECK-MESSAGES-NOT: [[@LINE-1]]:6: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOT: std::println(\"GCC statement expression with unused result {}\", i);\n\n  return printf(\"Return value used in return\\n\");\n}\n\nint fprintf_uses_return_value(int choice) {\n  const int i = fprintf(stderr, \"Return value assigned to variable %d\\n\", 42);\n\n  extern void accepts_int(int);\n  accepts_int(fprintf(stderr, \"Return value passed to function %d\\n\", 42));\n\n  if (choice == 0)\n    fprintf(stderr, \"if body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"if body {}\", i);\n  else if (choice == 1)\n    fprintf(stderr, \"else if body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"else if body {}\", i);\n  else\n    fprintf(stderr, \"else body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"else body {}\", i);\n\n  if (fprintf(stderr, \"Return value used as boolean in if statement\"))\n    if (fprintf(stderr, \"Return value used in expression if statement\") == 44)\n      if (const int j = fprintf(stderr, \"Return value used in assignment in if statement\"))\n        if (const int k = fprintf(stderr, \"Return value used with initializer in if statement\"); k == 44)\n          ;\n\n  int d = 0;\n  while (fprintf(stderr, \"%d\", d) < 2)\n    ++d;\n\n  while (true)\n    fprintf(stderr, \"while body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"while body {}\", i);\n\n  do\n    fprintf(stderr, \"do body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"do body {}\", i);\n  while (true);\n\n  for (;;)\n    fprintf(stderr, \"for body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"for body {}\", i);\n\n  for (fprintf(stderr, \"for init statement %d\\n\", i);;)\n    // CHECK-MESSAGES: [[@LINE-1]]:8: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"for init statement {}\", i);\n    ;;\n\n  for (int j = fprintf(stderr, \"for init statement %d\\n\", i);;)\n    ;;\n\n  for (; fprintf(stderr, \"for condition %d\\n\", i);)\n    ;;\n\n  for (;; fprintf(stderr, \"for expression %d\\n\", i))\n    // CHECK-MESSAGES: [[@LINE-1]]:11: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"for expression {}\", i)\n    ;;\n\n  for (auto C : \"foo\")\n    fprintf(stderr, \"ranged-for body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"ranged-for body {}\", i);\n\n  switch (1) {\n  case 1:\n    fprintf(stderr, \"switch case body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"switch case body {}\", i);\n    break;\n  default:\n    fprintf(stderr, \"switch default body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"switch default body {}\", i);\n    break;\n  }\n\n  try {\n    fprintf(stderr, \"try body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"try body {}\", i);\n  } catch (int) {\n    fprintf(stderr, \"catch body %d\\n\", i);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(stderr, \"catch body {}\", i);\n  }\n\n\n  (printf(\"Parenthesised expression %d\\n\", i));\n  // CHECK-MESSAGES: [[@LINE-1]]:4: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: (std::println(\"Parenthesised expression {}\", i));\n\n  // Ideally we would convert these two, but the current check doesn't cope with\n  // that.\n  (void)fprintf(stderr, \"cast to void %d\\n\", i);\n  // CHECK-MESSAGES-NOT: [[@LINE-1]]:9: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES-NOT: std::println(stderr, \"cast to void {}\", i);\n\n  static_cast<void>(fprintf(stderr, \"static_cast to void %d\\n\", i));\n  // CHECK-MESSAGES-NOT: [[@LINE-1]]:9: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES-NOT: std::println(stderr, \"static cast to void {}\", i);\n\n  const int x = ({ fprintf(stderr, \"GCC statement expression using return value immediately %d\\n\", i); });\n  const int y = ({ const int y = fprintf(stderr, \"GCC statement expression using return value immediately %d\\n\", i); y; });\n\n  // Ideally we would convert this one, but the current check doesn't cope with\n  // that.\n  ({ fprintf(stderr, \"GCC statement expression with unused result %d\\n\", i); });\n  // CHECK-MESSAGES-NOT: [[@LINE-1]]:6: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES-NOT: std::println(\"GCC statement expression with unused result {}\", i);\n\n  return fprintf(stderr, \"Return value used in return\\n\");\n}\n\nvoid fprintf_simple() {\n  fprintf(stderr, \"Hello\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(stderr, \"Hello\");\n}\n\nvoid std_printf_simple() {\n  std::printf(\"std::Hello\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"std::Hello\");\n}\n\nvoid printf_escape() {\n  printf(\"before \\t\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"before \\t\");\n\n  printf(\"\\n after\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"\\n after\");\n\n  printf(\"before \\a after\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"before \\a after\");\n\n  printf(\"Bell\\a%dBackspace\\bFF%s\\fNewline\\nCR\\rTab\\tVT\\vEscape\\x1b\\x07%d\", 42, \"string\", 99);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Bell\\a{}Backspace\\bFF{}\\fNewline\\nCR\\rTab\\tVT\\vEscape\\x1b\\a{}\", 42, \"string\", 99);\n\n  printf(\"not special \\x1b\\x01\\x7f\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"not special \\x1b\\x01\\x7f\");\n}\n\nvoid printf_percent() {\n  printf(\"before %%\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"before %\");\n\n  printf(\"%% after\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"% after\");\n\n  printf(\"before %% after\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"before % after\");\n\n  printf(\"Hello %% and another %%\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Hello % and another %\");\n\n  printf(\"Not a string %%s\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Not a string %s\");\n}\n\nvoid printf_curlies() {\n  printf(\"%d {}\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{} {{[{][{]}}}}\", 42);\n\n  printf(\"{}\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{{[{][{]}}}}\");\n}\n\nvoid printf_unsupported_format_specifiers() {\n  int pos;\n  printf(\"%d %n %d\\n\", 42, &pos, 72);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: unable to use 'std::println' instead of 'printf' because '%n' is not supported in format string [modernize-use-std-print]\n\n  printf(\"Error %m\\n\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: unable to use 'std::println' instead of 'printf' because '%m' is not supported in format string [modernize-use-std-print]\n}\n\nvoid printf_not_string_literal(const char *fmt) {\n  // We can't convert the format string if it's not a literal\n  printf(fmt, 42);\n}\n\nvoid printf_inttypes_ugliness() {\n  // The one advantage of the checker seeing the token pasted version of the\n  // format string is that we automatically cope with the horrendously-ugly\n  // inttypes.h macros!\n  int64_t u64 = 42;\n  uintmax_t umax = 4242;\n  printf(\"uint64:%\" PRId64 \" uintmax:%\" PRIuMAX \"\\n\", u64, umax);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"uint64:{} uintmax:{}\", u64, umax);\n}\n\nvoid printf_raw_string() {\n  // This one doesn't require the format string to be changed, so it stays intact\n  printf(R\"(First\\Second)\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(R\"(First\\Second)\");\n\n  // This one does require the format string to be changed, so unfortunately it\n  // gets reformatted as a normal string.\n  printf(R\"(First %d\\Second)\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"First {}\\\\Second\", 42);\n}\n\nvoid printf_integer_d() {\n  const bool b = true;\n  // The \"d\" type is necessary here for compatibility with printf since\n  // std::print will print booleans as \"true\" or \"false\".\n  printf(\"Integer %d from bool\\n\", b);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {:d} from bool\", b);\n\n  // The \"d\" type is necessary here for compatibility with printf since\n  // std::print will print booleans as \"true\" or \"false\".\n  printf(\"Integer %i from bool\\n\", b);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {:d} from bool\", b);\n\n  // The 'd' is always necessary if we pass a char since otherwise the\n  // parameter will be formatted as a character. In StrictMode, the\n  // cast is always necessary to maintain the printf behaviour since\n  // char may be unsigned, but this also means that the 'd' is not\n  // necessary.\n  const char c = 'A';\n  printf(\"Integers %d %hhd from char\\n\", c, c);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integers {:d} {:d} from char\", c, c);\n  // CHECK-FIXES-STRICT: std::println(\"Integers {} {} from char\", static_cast<signed char>(c), static_cast<signed char>(c));\n\n  printf(\"Integers %i %hhi from char\\n\", c, c);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integers {:d} {:d} from char\", c, c);\n  // CHECK-FIXES-STRICT: std::println(\"Integers {} {} from char\", static_cast<signed char>(c), static_cast<signed char>(c));\n\n  const signed char sc = 'A';\n  printf(\"Integers %d %hhd from signed char\\n\", sc, sc);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integers {} {} from signed char\", sc, sc);\n\n  printf(\"Integers %i %hhi from signed char\\n\", sc, sc);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integers {} {} from signed char\", sc, sc);\n\n  const unsigned char uc = 'A';\n  printf(\"Integers %d %hhd from unsigned char\\n\", uc, uc);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integers {} {} from unsigned char\", uc, uc);\n  // CHECK-FIXES-STRICT: std::println(\"Integers {} {} from unsigned char\", static_cast<signed char>(uc), static_cast<signed char>(uc));\n\n  printf(\"Integers %i %hhi from unsigned char\\n\", uc, uc);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integers {} {} from unsigned char\", uc, uc);\n  // CHECK-FIXES-STRICT: std::println(\"Integers {} {} from unsigned char\", static_cast<signed char>(uc), static_cast<signed char>(uc));\n\n  const int8_t i8 = 42;\n  printf(\"Integer %\" PRIi8 \" from int8_t\\n\", i8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from int8_t\", i8);\n\n  const int_fast8_t if8 = 42;\n  printf(\"Integer %\" PRIiFAST8 \" from int_fast8_t\\n\", if8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from int_fast8_t\", if8);\n\n  const int_least8_t il8 = 42;\n  printf(\"Integer %\" PRIiFAST8 \" from int_least8_t\\n\", il8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from int_least8_t\", il8);\n\n  const uint8_t u8 = 42U;\n  const std::uint8_t su8 = u8;\n  printf(\"Integers %\" PRIi8 \" and %\" PRId8 \" from uint8_t\\n\", u8, su8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integers {} and {} from uint8_t\", u8, su8);\n  // CHECK-FIXES-STRICT: std::println(\"Integers {} and {} from uint8_t\", static_cast<int8_t>(u8), static_cast<std::int8_t>(su8));\n\n  const uint_fast8_t uf8 = 42U;\n  printf(\"Integer %\" PRIiFAST8 \" from uint_fast8_t\\n\", uf8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from uint_fast8_t\", uf8);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from uint_fast8_t\", static_cast<int_fast8_t>(uf8));\n\n  const uint_least8_t ul8 = 42U;\n  printf(\"Integer %\" PRIiLEAST8 \" from uint_least8_t\\n\", ul8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from uint_least8_t\", ul8);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from uint_least8_t\", static_cast<int_least8_t>(ul8));\n\n  const short s = 42;\n  printf(\"Integer %hd from short\\n\", s);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from short\", s);\n\n  printf(\"Integer %hi from short\\n\", s);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from short\", s);\n\n  const unsigned short us = 42U;\n  printf(\"Integer %hd from unsigned short\\n\", us);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from unsigned short\", us);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from unsigned short\", static_cast<short>(us));\n\n  printf(\"Integer %hi from unsigned short\\n\", us);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from unsigned short\", us);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from unsigned short\", static_cast<short>(us));\n\n  const int i = 42;\n  printf(\"Integer %d from integer\\n\", i);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from integer\", i);\n\n  printf(\"Integer %i from integer\\n\", i);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from integer\", i);\n\n  const unsigned int ui = 42U;\n  printf(\"Integer %d from unsigned integer\\n\", ui);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from unsigned integer\", ui);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from unsigned integer\", static_cast<int>(ui));\n\n  printf(\"Integer %i from unsigned integer\\n\", ui);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from unsigned integer\", ui);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from unsigned integer\", static_cast<int>(ui));\n\n  const long l = 42L;\n  printf(\"Integer %ld from long\\n\", l);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from long\", l);\n\n  printf(\"Integer %li from long\\n\", l);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from long\", l);\n\n  const unsigned long ul = 42UL;\n  printf(\"Integer %ld from unsigned long\\n\", ul);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from unsigned long\", ul);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from unsigned long\", static_cast<long>(ul));\n\n  printf(\"Integer %li from unsigned long\\n\", ul);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from unsigned long\", ul);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from unsigned long\", static_cast<long>(ul));\n\n  const long long ll = 42LL;\n  printf(\"Integer %lld from long long\\n\", ll);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from long long\", ll);\n\n  printf(\"Integer %lli from long long\\n\", ll);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integer {} from long long\", ll);\n\n  const unsigned long long ull = 42ULL;\n  printf(\"Integer %lld from unsigned long long\\n\", ull);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from unsigned long long\", ull);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from unsigned long long\", static_cast<long long>(ull));\n\n  printf(\"Integer %lli from unsigned long long\\n\", ull);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from unsigned long long\", ull);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from unsigned long long\", static_cast<long long>(ull));\n\n  const intmax_t im = 42;\n  const std::intmax_t sim = im;\n  printf(\"Integers %jd and %jd from intmax_t\\n\", im, sim);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integers {} and {} from intmax_t\", im, sim);\n\n  printf(\"Integers %ji and %ji from intmax_t\\n\", im, sim);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integers {} and {} from intmax_t\", im, sim);\n\n  const uintmax_t uim = 42;\n  const std::uintmax_t suim = uim;\n  printf(\"Integers %jd and %jd from uintmax_t\\n\", uim, suim);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integers {} and {} from uintmax_t\", uim, suim);\n  // CHECK-FIXES-STRICT: std::println(\"Integers {} and {} from uintmax_t\", static_cast<intmax_t>(uim), static_cast<std::intmax_t>(suim));\n\n  printf(\"Integer %ji from intmax_t\\n\", uim);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integer {} from intmax_t\", uim);\n  // CHECK-FIXES-STRICT: std::println(\"Integer {} from intmax_t\", static_cast<intmax_t>(uim));\n\n  const int ai[] = { 0, 1, 2, 3};\n  const ptrdiff_t pd = &ai[3] - &ai[0];\n  const std::ptrdiff_t spd = pd;\n  printf(\"Integers %td and %td from ptrdiff_t\\n\", pd, spd);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integers {} and {} from ptrdiff_t\", pd, spd);\n\n  printf(\"Integers %ti and %ti from ptrdiff_t\\n\", pd, spd);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Integers {} and {} from ptrdiff_t\", pd, spd);\n\n  const size_t z = 42UL;\n  const std::size_t sz = z;\n  printf(\"Integers %zd and %zd from size_t\\n\", z, sz);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Integers {} and {} from size_t\", z, sz);\n  // CHECK-FIXES-STRICT: std::println(\"Integers {} and {} from size_t\", static_cast<ssize_t>(z), static_cast<std::ssize_t>(sz));\n}\n\nvoid printf_integer_u()\n{\n  const bool b = true;\n  // The \"d\" type is necessary here for compatibility with printf since\n  // std::print will print booleans as \"true\" or \"false\".\n  printf(\"Unsigned integer %u from bool\\n\", b);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integer {:d} from bool\", b);\n\n  const char c = 'A';\n  printf(\"Unsigned integer %hhu from char\\n\", c);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integer {:d} from char\", c);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integer {} from char\", static_cast<unsigned char>(c));\n\n  const signed char sc = 'A';\n  printf(\"Unsigned integer %hhu from signed char\\n\", sc);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integer {} from signed char\", sc);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integer {} from signed char\", static_cast<unsigned char>(sc));\n\n  printf(\"Unsigned integer %u from signed char\\n\", sc);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integer {} from signed char\", sc);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integer {} from signed char\", static_cast<unsigned char>(sc));\n\n  const unsigned char uc = 'A';\n  printf(\"Unsigned integer %hhu from unsigned char\\n\", uc);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integer {} from unsigned char\", uc);\n\n  printf(\"Unsigned integer %u from unsigned char\\n\", uc);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integer {} from unsigned char\", uc);\n\n  const int8_t i8 = 42;\n  printf(\"Unsigned integer %\" PRIu8 \" from int8_t\\n\", i8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integer {} from int8_t\", i8);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integer {} from int8_t\", static_cast<uint8_t>(i8));\n\n  const int_fast8_t if8 = 42;\n  printf(\"Unsigned integer %\" PRIuFAST8 \" from int_fast8_t\\n\", if8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integer {} from int_fast8_t\", if8);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integer {} from int_fast8_t\", static_cast<uint_fast8_t>(if8));\n\n  const int_least8_t il8 = 42;\n  printf(\"Unsigned integer %\" PRIuFAST8 \" from int_least8_t\\n\", il8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integer {} from int_least8_t\", il8);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integer {} from int_least8_t\", static_cast<uint_least8_t>(il8));\n\n  const uint8_t u8 = 42U;\n  printf(\"Unsigned integer %\" PRIu8 \" from uint8_t\\n\", u8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integer {} from uint8_t\", u8);\n\n  const uint_fast8_t uf8 = 42U;\n  printf(\"Unsigned integer %\" PRIuFAST8 \" from uint_fast8_t\\n\", uf8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integer {} from uint_fast8_t\", uf8);\n\n  const uint_least8_t ul8 = 42U;\n  printf(\"Unsigned integer %\" PRIuLEAST8 \" from uint_least8_t\\n\", ul8);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integer {} from uint_least8_t\", ul8);\n\n  const short s = 42;\n  printf(\"Unsigned integer %hu from short\\n\", s);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integer {} from short\", s);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integer {} from short\", static_cast<unsigned short>(s));\n\n  const unsigned short us = 42U;\n  printf(\"Unsigned integer %hu from unsigned short\\n\", us);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integer {} from unsigned short\", us);\n\n  const int i = 42;\n  printf(\"Unsigned integer %u from signed integer\\n\", i);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integer {} from signed integer\", i);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integer {} from signed integer\", static_cast<unsigned int>(i));\n\n  const unsigned int ui = 42U;\n  printf(\"Unsigned integer %u from unsigned integer\\n\", ui);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integer {} from unsigned integer\", ui);\n\n  const long l = 42L;\n  printf(\"Unsigned integer %u from signed long\\n\", l);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integer {} from signed long\", l);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integer {} from signed long\", static_cast<unsigned long>(l));\n\n  const unsigned long ul = 42UL;\n  printf(\"Unsigned integer %lu from unsigned long\\n\", ul);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integer {} from unsigned long\", ul);\n\n  const long long ll = 42LL;\n  printf(\"Unsigned integer %llu from long long\\n\", ll);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integer {} from long long\", ll);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integer {} from long long\", static_cast<unsigned long long>(ll));\n\n  const unsigned long long ull = 42ULL;\n  printf(\"Unsigned integer %llu from unsigned long long\\n\", ull);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integer {} from unsigned long long\", ull);\n\n  const intmax_t im = 42;\n  const std::intmax_t sim = im;\n  printf(\"Unsigned integers %ju and %ju from intmax_t\\n\", im, sim);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integers {} and {} from intmax_t\", im, sim);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integers {} and {} from intmax_t\", static_cast<uintmax_t>(im), static_cast<std::uintmax_t>(sim));\n\n  const uintmax_t uim = 42U;\n  const std::uintmax_t suim = uim;\n  printf(\"Unsigned integers %ju and %ju from uintmax_t\\n\", uim, suim);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integers {} and {} from uintmax_t\", uim, suim);\n\n  const int ai[] = { 0, 1, 2, 3};\n  const ptrdiff_t pd = &ai[3] - &ai[0];\n  const std::ptrdiff_t spd = pd;\n  printf(\"Unsigned integers %tu and %tu from ptrdiff_t\\n\", pd, spd);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"Unsigned integers {} and {} from ptrdiff_t\", pd, spd);\n  // CHECK-FIXES-STRICT: std::println(\"Unsigned integers {} and {} from ptrdiff_t\", static_cast<size_t>(pd), static_cast<std::size_t>(spd));\n\n  const size_t z = 42U;\n  const std::size_t sz = z;\n  printf(\"Unsigned integers %zu and %zu from size_t\\n\", z, sz);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Unsigned integers {} and {} from size_t\", z, sz);\n}\n\n// This checks that we get the argument offset right with the extra FILE * argument\nvoid fprintf_integer() {\n  fprintf(stderr, \"Integer %d from integer\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(stderr, \"Integer {} from integer\", 42);\n\n  fprintf(stderr, \"Integer %i from integer\\n\", 65);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(stderr, \"Integer {} from integer\", 65);\n\n  fprintf(stderr, \"Integer %i from char\\n\", 'A');\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(stderr, \"Integer {:d} from char\", 'A');\n  // CHECK-FIXES-STRICT: std::println(stderr, \"Integer {} from char\", static_cast<signed char>('A'));\n\n  fprintf(stderr, \"Integer %d from char\\n\", 'A');\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(stderr, \"Integer {:d} from char\", 'A');\n  // CHECK-FIXES-STRICT: std::println(stderr, \"Integer {} from char\", static_cast<signed char>('A'));\n}\n\nvoid printf_char() {\n  const char c = 'A';\n  printf(\"Char %c from char\\n\", c);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Char {} from char\", c);\n\n  const signed char sc = 'A';\n  printf(\"Char %c from signed char\\n\", sc);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Char {:c} from signed char\", sc);\n\n  const unsigned char uc = 'A';\n  printf(\"Char %c from unsigned char\\n\", uc);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Char {:c} from unsigned char\", uc);\n\n  const int i = 65;\n  printf(\"Char %c from integer\\n\", i);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Char {:c} from integer\", i);\n\n  const unsigned int ui = 65;\n  printf(\"Char %c from unsigned integer\\n\", ui);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Char {:c} from unsigned integer\", ui);\n\n  const unsigned long long ull = 65;\n  printf(\"Char %c from unsigned long long\\n\", ull);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Char {:c} from unsigned long long\", ull);\n}\n\nvoid printf_bases() {\n  printf(\"Hex %lx\\n\", 42L);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hex {:x}\", 42L);\n\n  printf(\"HEX %X\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"HEX {:X}\", 42);\n\n  printf(\"Oct %lo\\n\", 42L);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Oct {:o}\", 42L);\n}\n\nvoid printf_alternative_forms() {\n  printf(\"Hex %#lx\\n\", 42L);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hex {:#x}\", 42L);\n\n  printf(\"HEX %#X\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"HEX {:#X}\", 42);\n\n  printf(\"Oct %#lo\\n\", 42L);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Oct {:#o}\", 42L);\n\n  printf(\"Double %#f %#F\\n\", -42.0, -42.0);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Double {:#f} {:#F}\", -42.0, -42.0);\n\n  printf(\"Double %#g %#G\\n\", -42.0, -42.0);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Double {:#g} {:#G}\", -42.0, -42.0);\n\n  printf(\"Double %#e %#E\\n\", -42.0, -42.0);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Double {:#e} {:#E}\", -42.0, -42.0);\n\n  printf(\"Double %#a %#A\\n\", -42.0, -42.0);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Double {:#a} {:#A}\", -42.0, -42.0);\n\n  // Characters don't have an alternate form\n  printf(\"Char %#c\\n\", 'A');\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Char {}\", 'A');\n\n  // Strings don't have an alternate form\n  printf(\"Char %#c\\n\", 'A');\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Char {}\", 'A');\n}\n\nvoid printf_string() {\n  printf(\"Hello %s after\\n\", \"Goodbye\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {} after\", \"Goodbye\");\n\n  // std::print can't print signed char strings.\n  const signed char *sstring = reinterpret_cast<const signed char *>(\"ustring\");\n  printf(\"signed char string %s\\n\", sstring);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"signed char string {}\", reinterpret_cast<const char *>(sstring));\n\n  // std::print can't print unsigned char strings.\n  const unsigned char *ustring = reinterpret_cast<const unsigned char *>(\"ustring\");\n  printf(\"unsigned char string %s\\n\", ustring);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"unsigned char string {}\", reinterpret_cast<const char *>(ustring));\n}\n\nvoid printf_float() {\n  // If the type is not specified then either f or e will be used depending on\n  // whichever is shorter. This means that it is necessary to be specific to\n  // maintain compatibility with printf.\n\n  // TODO: Should we force a cast here, since printf will promote to double\n  // automatically, but std::format will not, which could result in different\n  // output?\n\n  const float f = 42.0F;\n  printf(\"Hello %f after\\n\", f);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:f} after\", f);\n\n  printf(\"Hello %g after\\n\", f);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:g} after\", f);\n\n  printf(\"Hello %e after\\n\", f);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:e} after\", f);\n}\n\nvoid printf_double() {\n  // If the type is not specified then either f or e will be used depending on\n  // whichever is shorter. This means that it is necessary to be specific to\n  // maintain compatibility with printf.\n\n  const double d = 42.0;\n  printf(\"Hello %f after\\n\", d);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:f} after\", d);\n\n  printf(\"Hello %g after\\n\", d);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:g} after\", d);\n\n  printf(\"Hello %e after\\n\", d);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:e} after\", d);\n}\n\nvoid printf_long_double() {\n  // If the type is not specified then either f or e will be used depending on\n  // whichever is shorter. This means that it is necessary to be specific to\n  // maintain compatibility with printf.\n\n  const long double ld = 42.0L;\n  printf(\"Hello %Lf after\\n\", ld);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:f} after\", ld);\n\n  printf(\"Hello %g after\\n\", ld);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:g} after\", ld);\n\n  printf(\"Hello %e after\\n\", ld);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:e} after\", ld);\n}\n\nvoid printf_pointer() {\n  int i;\n  double j;\n  printf(\"Int* %p %s %p\\n\", &i, \"Double*\", &j);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Int* {} {} {}\", static_cast<const void *>(&i), \"Double*\", static_cast<const void *>(&j));\n\n  printf(\"%p\\n\", nullptr);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"{}\", nullptr);\n\n  const auto np = nullptr;\n  printf(\"%p\\n\", np);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"{}\", np);\n\n  // NULL isn't a pointer, so std::print needs some help.\n  printf(\"%p\\n\", NULL);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"{}\", static_cast<const void *>(NULL));\n\n  printf(\"%p\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"{}\", static_cast<const void *>(42));\n\n  // If we already have a void pointer then no cast is required.\n  printf(\"%p\\n\", reinterpret_cast<const void *>(44));\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"{}\", reinterpret_cast<const void *>(44));\n\n  const void *p;\n  printf(\"%p\\n\", p);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"{}\", p);\n\n  // But a pointer to a pointer to void does need a cast\n  const void **pp;\n  printf(\"%p\\n\", pp);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"{}\", static_cast<const void *>(pp));\n\n  printf(\"%p\\n\", printf_pointer);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"{}\", static_cast<const void *>(printf_pointer));\n}\n\nclass AClass\n{\n  int member;\n\n  void printf_this_pointer()\n  {\n    printf(\"%p\\n\", this);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"{}\", static_cast<const void *>(this));\n  }\n\n  void printf_pointer_to_member_function()\n  {\n    printf(\"%p\\n\", &AClass::printf_pointer_to_member_function);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"{}\", static_cast<const void *>(&AClass::printf_pointer_to_member_function));\n  }\n\n  void printf_pointer_to_member_variable()\n  {\n    printf(\"%p\\n\", &AClass::member);\n    // CHECK-MESSAGES: [[@LINE-1]]:5: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n    // CHECK-FIXES: std::println(\"{}\", static_cast<const void *>(&AClass::member));\n  }\n};\n\nvoid printf_positional_arg() {\n  printf(\"%1$d\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{0}\", 42);\n\n  printf(\"before %1$d\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"before {0}\", 42);\n\n  printf(\"%1$d after\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{0} after\", 42);\n\n  printf(\"before %1$d after\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"before {0} after\", 42);\n\n  printf(\"before %2$d between %1$s after\", \"string\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"before {1} between {0} after\", \"string\", 42);\n}\n\n// printf always defaults to right justification,, no matter what the type is of\n// the argument. std::format uses left justification by default for strings, and\n// right justification for numbers.\nvoid printf_right_justified() {\n  printf(\"Right-justified integer %4d after\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Right-justified integer {:4} after\", 42);\n\n  printf(\"Right-justified double %4f\\n\", 227.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Right-justified double {:4f}\", 227.2);\n\n  printf(\"Right-justified double %4g\\n\", 227.4);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Right-justified double {:4g}\", 227.4);\n\n  printf(\"Right-justified integer with field width argument %*d after\\n\", 5, 424242);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Right-justified integer with field width argument {:{}} after\", 424242, 5);\n\n  printf(\"Right-justified integer with field width argument %2$*1$d after\\n\", 5, 424242);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Right-justified integer with field width argument {1:{0}} after\", 5, 424242);\n\n  printf(\"Right-justified string %20s\\n\", \"Hello\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Right-justified string {:>20}\", \"Hello\");\n\n  printf(\"Right-justified string with field width argument %2$*1$s after\\n\", 20, \"wibble\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Right-justified string with field width argument {1:>{0}} after\", 20, \"wibble\");\n}\n\n// printf always requires - for left justification, no matter what the type is\n// of the argument. std::format uses left justification by default for strings,\n// and right justification for numbers.\nvoid printf_left_justified() {\n  printf(\"Left-justified integer %-4d\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Left-justified integer {:<4}\", 42);\n\n  printf(\"Left-justified integer %--4d\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Left-justified integer {:<4}\", 42);\n\n  printf(\"Left-justified double %-4f\\n\", 227.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Left-justified double {:<4f}\", 227.2);\n\n  printf(\"Left-justified double %-4g\\n\", 227.4);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Left-justified double {:<4g}\", 227.4);\n\n  printf(\"Left-justified integer with field width argument %-*d after\\n\", 5, 424242);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Left-justified integer with field width argument {:<{}} after\", 424242, 5);\n\n  printf(\"Left-justified integer with field width argument %2$-*1$d after\\n\", 5, 424242);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Left-justified integer with field width argument {1:<{0}} after\", 5, 424242);\n\n  printf(\"Left-justified string %-20s\\n\", \"Hello\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Left-justified string {:20}\", \"Hello\");\n\n  printf(\"Left-justified string with field width argument %2$-*1$s after\\n\", 5, \"wibble\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Left-justified string with field width argument {1:{0}} after\", 5, \"wibble\");\n}\n\nvoid printf_precision() {\n  printf(\"Hello %.3f\\n\", 3.14159);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:.3f}\", 3.14159);\n\n  printf(\"Hello %10.3f\\n\", 3.14159);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:10.3f}\", 3.14159);\n\n  printf(\"Hello %.*f after\\n\", 10, 3.14159265358979323846);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:.{}f} after\", 3.14159265358979323846, 10);\n\n  printf(\"Hello %10.*f after\\n\", 3, 3.14159265358979323846);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:10.{}f} after\", 3.14159265358979323846, 3);\n\n  printf(\"Hello %*.*f after\\n\", 10, 4, 3.14159265358979323846);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:{}.{}f} after\", 3.14159265358979323846, 10, 4);\n\n  printf(\"Hello %1$.*2$f after\\n\", 3.14159265358979323846, 4);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {0:.{1}f} after\", 3.14159265358979323846, 4);\n\n  // Precision is ignored, but maintained on non-numeric arguments\n  printf(\"Hello %.5s\\n\", \"Goodbye\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:.5}\", \"Goodbye\");\n\n  printf(\"Hello %.5c\\n\", 'G');\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Hello {:.5}\", 'G');\n}\n\nvoid printf_field_width_and_precision(const std::string &s1, const std::string &s2, const std::string &s3)\n{\n  printf(\"width only:%*d width and precision:%*.*f precision only:%.*f\\n\", 3, 42, 4, 2, 3.14159265358979323846, 5, 2.718);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"width only:{:{}} width and precision:{:{}.{}f} precision only:{:.{}f}\", 42, 3, 3.14159265358979323846, 4, 2, 2.718, 5);\n\n  const unsigned int ui1 = 42, ui2 = 43, ui3 = 44;\n  printf(\"casts width only:%*d width and precision:%*.*d precision only:%.*d\\n\", 3, ui1, 4, 2, ui2, 5, ui3);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES-NOTSTRICT: std::println(\"casts width only:{:{}} width and precision:{:{}.{}} precision only:{:.{}}\", ui1, 3, ui2, 4, 2, ui3, 5);\n  // CHECK-FIXES-STRICT: std::println(\"casts width only:{:{}} width and precision:{:{}.{}} precision only:{:.{}}\", static_cast<int>(ui1), 3, static_cast<int>(ui2), 4, 2, static_cast<int>(ui3), 5);\n\n  printf(\"c_str removal width only:%*s width and precision:%*.*s precision only:%.*s\\n\", 3, s1.c_str(), 4, 2, s2.c_str(), 5, s3.c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"c_str removal width only:{:>{}} width and precision:{:>{}.{}} precision only:{:.{}}\", s1, 3, s2, 4, 2, s3, 5);\n\n  const std::string *ps1 = &s1, *ps2 = &s2, *ps3 = &s3;\n  printf(\"c_str() removal pointer width only:%-*s width and precision:%-*.*s precision only:%-.*s\\n\", 3, ps1->c_str(), 4, 2, ps2->c_str(), 5, ps3->c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"c_str() removal pointer width only:{:{}} width and precision:{:{}.{}} precision only:{:.{}}\", *ps1, 3, *ps2, 4, 2, *ps3, 5);\n\n  iterator<std::string> is1, is2, is3;\n  printf(\"c_str() removal iterator width only:%-*s width and precision:%-*.*s precision only:%-.*s\\n\", 3, is1->c_str(), 4, 2, is2->c_str(), 5, is3->c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"c_str() removal iterator width only:{:{}} width and precision:{:{}.{}} precision only:{:.{}}\", *is1, 3, *is2, 4, 2, *is3, 5);\n\n  printf(\"width and precision positional:%1$*2$.*3$f after\\n\", 3.14159265358979323846, 4, 2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"width and precision positional:{0:{1}.{2}f} after\", 3.14159265358979323846, 4, 2);\n\n  const int width = 10, precision = 3;\n  printf(\"width only:%3$*1$d width and precision:%4$*1$.*2$f precision only:%5$.*2$f\\n\", width, precision, 42, 3.1415926, 2.718);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"width only:{2:{0}} width and precision:{3:{0}.{1}f} precision only:{4:.{1}f}\", width, precision, 42, 3.1415926, 2.718);\n\n  printf(\"c_str removal width only:%3$*1$s width and precision:%4$*1$.*2$s precision only:%5$.*2$s\\n\", width, precision, s1.c_str(), s2.c_str(), s3.c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"c_str removal width only:{2:>{0}} width and precision:{3:>{0}.{1}} precision only:{4:.{1}}\", width, precision, s1, s2, s3);\n}\n\nvoid fprintf_field_width_and_precision(const std::string &s1, const std::string &s2, const std::string &s3) {\n  fprintf(stderr, \"width only:%*d width and precision:%*.*f precision only:%.*f\\n\", 3, 42, 4, 2, 3.14159265358979323846, 5, 2.718);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(stderr, \"width only:{:{}} width and precision:{:{}.{}f} precision only:{:.{}f}\", 42, 3, 3.14159265358979323846, 4, 2, 2.718, 5);\n\n  fprintf(stderr, \"width and precision positional:%1$*2$.*3$f after\\n\", 3.14159265358979323846, 4, 2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(stderr, \"width and precision positional:{0:{1}.{2}f} after\", 3.14159265358979323846, 4, 2);\n\n  fprintf(stderr, \"c_str removal width only:%*s width and precision:%*.*s precision only:%.*s\\n\", 3, s1.c_str(), 4, 2, s2.c_str(), 5, s3.c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(stderr, \"c_str removal width only:{:>{}} width and precision:{:>{}.{}} precision only:{:.{}}\", s1, 3, s2, 4, 2, s3, 5);\n\n  const std::string *ps1 = &s1, *ps2 = &s2, *ps3 = &s3;\n  fprintf(stderr, \"c_str() removal pointer width only:%-*s width and precision:%-*.*s precision only:%-.*s\\n\", 3, ps1->c_str(), 4, 2, ps2->c_str(), 5, ps3->c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(stderr, \"c_str() removal pointer width only:{:{}} width and precision:{:{}.{}} precision only:{:.{}}\", *ps1, 3, *ps2, 4, 2, *ps3, 5);\n\n  iterator<std::string> is1, is2, is3;\n  fprintf(stderr, \"c_str() removal iterator width only:%-*s width and precision:%-*.*s precision only:%-.*s\\n\", 3, is1->c_str(), 4, 2, is2->c_str(), 5, is3->c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(stderr, \"c_str() removal iterator width only:{:{}} width and precision:{:{}.{}} precision only:{:.{}}\", *is1, 3, *is2, 4, 2, *is3, 5);\n\n  const int width = 10, precision = 3;\n  fprintf(stderr, \"width only:%3$*1$d width and precision:%4$*1$.*2$f precision only:%5$.*2$f\\n\", width, precision, 42, 3.1415926, 2.718);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(stderr, \"width only:{2:{0}} width and precision:{3:{0}.{1}f} precision only:{4:.{1}f}\", width, precision, 42, 3.1415926, 2.718);\n\n  fprintf(stderr, \"c_str removal width only:%3$*1$s width and precision:%4$*1$.*2$s precision only:%5$.*2$s\\n\", width, precision, s1.c_str(), s2.c_str(), s3.c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(stderr, \"c_str removal width only:{2:>{0}} width and precision:{3:>{0}.{1}} precision only:{4:.{1}}\", width, precision, s1, s2, s3);\n}\n\nvoid printf_alternative_form() {\n  printf(\"Wibble %#x\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Wibble {:#x}\", 42);\n\n  printf(\"Wibble %#20x\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Wibble {:#20x}\", 42);\n\n  printf(\"Wibble %#020x\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Wibble {:#020x}\", 42);\n\n  printf(\"Wibble %#-20x\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Wibble {:<#20x}\", 42);\n}\n\nvoid printf_leading_plus() {\n  printf(\"Positive integer %+d\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Positive integer {:+}\", 42);\n\n  printf(\"Positive double %+f\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Positive double {:+f}\", 42.2);\n\n  printf(\"Positive double %+g\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Positive double {:+g}\", 42.2);\n\n  // Ignore leading plus on strings to avoid potential runtime exception where\n  // printf would have just ignored it.\n  printf(\"Positive string %+s\\n\", \"string\");\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Positive string {}\", \"string\");\n}\n\nvoid printf_leading_space() {\n  printf(\"Spaced integer % d\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Spaced integer {: }\", 42);\n\n  printf(\"Spaced integer %- d\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Spaced integer {: }\", 42);\n\n  printf(\"Spaced double % f\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Spaced double {: f}\", 42.2);\n\n  printf(\"Spaced double % g\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Spaced double {: g}\", 42.2);\n}\n\nvoid printf_leading_zero() {\n  printf(\"Leading zero integer %03d\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading zero integer {:03}\", 42);\n\n  printf(\"Leading minus and zero integer %-03d minus ignored\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading minus and zero integer {:<03} minus ignored\", 42);\n\n  printf(\"Leading zero unsigned integer %03u\\n\", 42U);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading zero unsigned integer {:03}\", 42U);\n\n  printf(\"Leading zero double %03f\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading zero double {:03f}\", 42.2);\n\n  printf(\"Leading zero double %03g\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading zero double {:03g}\", 42.2);\n}\n\nvoid printf_leading_plus_and_space() {\n  // printf prefers plus to space. {fmt} will throw if both are present.\n  printf(\"Spaced integer % +d\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Spaced integer {:+}\", 42);\n\n  printf(\"Spaced double %+ f\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Spaced double {:+f}\", 42.2);\n\n  printf(\"Spaced double % +g\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Spaced double {:+g}\", 42.2);\n}\n\nvoid printf_leading_zero_and_plus() {\n  printf(\"Leading zero integer %+03d\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading zero integer {:+03}\", 42);\n\n  printf(\"Leading zero double %0+3f\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading zero double {:+03f}\", 42.2);\n\n  printf(\"Leading zero double %0+3g\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading zero double {:+03g}\", 42.2);\n}\n\nvoid printf_leading_zero_and_space() {\n  printf(\"Leading zero and space integer %0 3d\\n\", 42);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading zero and space integer {: 03}\", 42);\n\n  printf(\"Leading zero and space double %0 3f\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading zero and space double {: 03f}\", 42.2);\n\n  printf(\"Leading zero and space double %0 3g\\n\", 42.2);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Leading zero and space double {: 03g}\", 42.2);\n}\n\n// add signed plained enum too\nenum PlainEnum { red };\nenum SignedPlainEnum { black = -42 };\nenum BoolEnum : unsigned int { yellow };\nenum CharEnum : char { purple };\nenum SCharEnum : signed char  { aquamarine };\nenum UCharEnum : unsigned char  { pink };\nenum ShortEnum : short { beige };\nenum UShortEnum : unsigned short { grey };\nenum IntEnum : int { green };\nenum UIntEnum : unsigned int { blue };\nenum LongEnum : long { magenta };\nenum ULongEnum : unsigned long { cyan };\nenum LongLongEnum : long long { taupe };\nenum ULongLongEnum : unsigned long long { brown };\n\nvoid printf_enum_d() {\n  PlainEnum plain_enum;\n  printf(\"%d\", plain_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<int>(plain_enum));\n\n  SignedPlainEnum splain_enum;\n  printf(\"%d\", splain_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<int>(splain_enum));\n\n  BoolEnum bool_enum;\n  printf(\"%d\", bool_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<int>(bool_enum));\n\n  CharEnum char_enum;\n  printf(\"%d\", char_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<signed char>(char_enum));\n\n  SCharEnum schar_enum;\n  printf(\"%d\", schar_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<signed char>(schar_enum));\n\n  UCharEnum uchar_enum;\n  printf(\"%d\", uchar_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<signed char>(uchar_enum));\n\n  ShortEnum short_enum;\n  printf(\"%d\", short_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<short>(short_enum));\n\n  UShortEnum ushort_enum;\n  printf(\"%d\", ushort_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<short>(ushort_enum));\n\n  IntEnum int_enum;\n  printf(\"%d\", int_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<int>(int_enum));\n\n  UIntEnum uint_enum;\n  printf(\"%d\", uint_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<int>(uint_enum));\n\n  LongEnum long_enum;\n  printf(\"%d\", long_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<long>(long_enum));\n\n  ULongEnum ulong_enum;\n  printf(\"%d\", ulong_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<long>(ulong_enum));\n\n  LongLongEnum longlong_enum;\n  printf(\"%d\", longlong_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<long long>(longlong_enum));\n\n  ULongLongEnum ulonglong_enum;\n  printf(\"%d\", ulonglong_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<long long>(ulonglong_enum));\n}\n\nvoid printf_enum_u() {\n  PlainEnum plain_enum;\n  printf(\"%u\", plain_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned int>(plain_enum));\n\n  SignedPlainEnum splain_enum;\n  printf(\"%u\", splain_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned int>(splain_enum));\n\n  BoolEnum bool_enum;\n  printf(\"%u\", bool_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned int>(bool_enum));\n\n  CharEnum char_enum;\n  printf(\"%u\", char_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned char>(char_enum));\n\n  SCharEnum schar_enum;\n  printf(\"%u\", schar_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned char>(schar_enum));\n\n  UCharEnum uchar_enum;\n  printf(\"%u\", uchar_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned char>(uchar_enum));\n\n  ShortEnum short_enum;\n  printf(\"%u\", short_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned short>(short_enum));\n\n  UShortEnum ushort_enum;\n  printf(\"%u\", ushort_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned short>(ushort_enum));\n\n  IntEnum int_enum;\n  printf(\"%u\", int_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned int>(int_enum));\n\n  UIntEnum uint_enum;\n  printf(\"%u\", uint_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned int>(uint_enum));\n\n  LongEnum long_enum;\n  printf(\"%u\", long_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned long>(long_enum));\n\n  ULongEnum ulong_enum;\n  printf(\"%u\", ulong_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned long>(ulong_enum));\n\n  LongLongEnum longlong_enum;\n  printf(\"%u\", longlong_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned long long>(longlong_enum));\n\n  ULongLongEnum ulonglong_enum;\n  printf(\"%u\", ulonglong_enum);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"{}\", static_cast<unsigned long long>(ulonglong_enum));\n}\n\nvoid printf_string_function(const char *(*callback)()) {\n  printf(\"printf string from callback %s\", callback());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"printf string from callback {}\", callback());\n}\n\ntemplate <typename CharType>\nstruct X\n{\n  const CharType *str() const;\n};\n\nvoid printf_string_member_function(const X<char> &x, const X<const char> &cx) {\n  printf(\"printf string from member function %s\", x.str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"printf string from member function {}\", x.str());\n\n  printf(\"printf string from member function on const %s\", cx.str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"printf string from member function on const {}\", cx.str());\n}\n\nvoid printf_string_cstr(const std::string &s1, const std::string &s2) {\n  printf(\"printf string one c_str %s\", s1.c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"printf string one c_str {}\", s1);\n\n  printf(\"printf string two c_str %s %s\\n\", s1.c_str(), s2.data());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"printf string two c_str {} {}\", s1, s2);\n}\n\nvoid printf_not_char_string_cstr(const std::wstring &ws1) {\n  // This test is to check that we only remove\n  // std::basic_string<CharType>::c_str()/data() when CharType is char. I've\n  // been unable to come up with a genuine situation where someone would have\n  // actually successfully called those methods when this isn't the case without\n  // -Wformat warning, but it seems sensible to restrict removal regardless.\n  printf(\"printf bogus wstring c_str %s\", ws1.c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"printf bogus wstring c_str {}\", ws1.c_str());\n}\n\nvoid fprintf_string_cstr(const std::string &s1) {\n  fprintf(stderr, \"fprintf string c_str %s\", s1.c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(stderr, \"fprintf string c_str {}\", s1);\n}\n\nvoid printf_string_pointer_cstr(const std::string *s1, const std::string *s2) {\n  printf(\"printf string pointer one c_str %s\", s1->c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"printf string pointer one c_str {}\", *s1);\n\n  printf(\"printf string pointer two c_str %s %s\\n\", s1->c_str(), s2->data());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"printf string pointer two c_str {} {}\", *s1, *s2);\n}\n\nvoid fprintf_string_pointer_cstr(const std::string *s1) {\n  fprintf(stderr, \"fprintf string pointer c_str %s\", s1->c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'fprintf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(stderr, \"fprintf string pointer c_str {}\", *s1);\n}\n\nvoid printf_iterator_cstr(iterator<std::string> i1, iterator<std::string> i2)\n{\n  printf(\"printf iterator c_str %s %s\\n\", i1->c_str(), i2->data());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"printf iterator c_str {} {}\", *i1, *i2);\n}\n\n// Something that isn't std::string, so the calls to c_str() and data() must not\n// be removed even though the printf call will be replaced.\nstruct S\n{\n  const char *c_str() const;\n  const char *data() const;\n};\n\nvoid p(S s1, S *s2)\n{\n  printf(\"Not std::string %s %s\", s1.c_str(), s2->c_str());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Not std::string {} {}\", s1.c_str(), s2->c_str());\n\n  printf(\"Not std::string %s %s\", s1.data(), s2->data());\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Not std::string {} {}\", s1.data(), s2->data());\n}\n\n// These need PRI and __PRI prefixes so that the check gets as far as looking\n// for where the macro comes from.\n#define PRI_FMT_MACRO \"s\"\n#define __PRI_FMT_MACRO \"s\"\n\nvoid macro_expansion(const char *s)\n{\n  const uint64_t u64 = 42;\n  const uint32_t u32 = 32;\n\n  printf(\"Replaceable macro at end %\" PRIu64, u64);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Replaceable macro at end {}\", u64);\n\n  printf(\"Replaceable macros in middle %\" PRIu64 \" %\" PRIu32 \"\\n\", u64, u32);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use 'std::println' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::println(\"Replaceable macros in middle {} {}\", u64, u32);\n\n  printf(\"Unreplaceable macro at end %\" PRI_FMT_MACRO, s);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: unable to use 'std::print' instead of 'printf' because format string contains unreplaceable macro 'PRI_FMT_MACRO' [modernize-use-std-print]\n\n  printf(PRI_FMT_MACRO \" Unreplaceable macro at beginning %s\", s);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: unable to use 'std::print' instead of 'printf' because format string contains unreplaceable macro 'PRI_FMT_MACRO' [modernize-use-std-print]\n\n  printf(\"Unreplacemable macro %\" __PRI_FMT_MACRO \" in the middle\", s);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: unable to use 'std::print' instead of 'printf' because format string contains unreplaceable macro '__PRI_FMT_MACRO' [modernize-use-std-print]\n\n  printf(\"First macro is replaceable %\" PRIu64 \" but second one is not %\" PRI_FMT_MACRO, u64, s);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: unable to use 'std::print' instead of 'printf' because format string contains unreplaceable macro 'PRI_FMT_MACRO' [modernize-use-std-print]\n\n  // Needs a PRI prefix so that we get as far as looking for where the macro comes from\n  printf(\" macro from command line %\" PRI_CMDLINE_MACRO, s);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: unable to use 'std::print' instead of 'printf' because format string contains unreplaceable macro 'PRI_CMDLINE_MACRO' [modernize-use-std-print]\n\n  // Needs a __PRI prefix so that we get as far as looking for where the macro comes from\n  printf(\" macro from command line %\" __PRI_CMDLINE_MACRO, s);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: unable to use 'std::print' instead of 'printf' because format string contains unreplaceable macro '__PRI_CMDLINE_MACRO' [modernize-use-std-print]\n\n  // We ought to be able to fix this since the macro surrounds the whole call\n  // and therefore can't change the format string independently. This is\n  // required to be able to fix calls inside Catch2 macros for example.\n#define SURROUND_ALL(x) x\n  SURROUND_ALL(printf(\"Macro surrounding entire invocation %\" PRIu64, u64));\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: SURROUND_ALL(std::print(\"Macro surrounding entire invocation {}\", u64));\n\n  // But having that surrounding macro shouldn't stop us ignoring an\n  // unreplaceable macro elsewhere.\n  SURROUND_ALL(printf(\"Macro surrounding entire invocation with unreplaceable macro %\" PRI_FMT_MACRO, s));\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: unable to use 'std::print' instead of 'printf' because format string contains unreplaceable macro 'PRI_FMT_MACRO' [modernize-use-std-print]\n\n  // At the moment at least the check will replace occurrences where the\n  // function name is the result of expanding a macro.\n#define SURROUND_FUNCTION_NAME(x) x\n  SURROUND_FUNCTION_NAME(printf)(\"Hello %d\", 4442);\n  // CHECK-MESSAGES: [[@LINE-1]]:26: warning: use 'std::print' instead of 'printf' [modernize-use-std-print]\n  // CHECK-FIXES: std::print(\"Hello {}\", 4442);\n\n  // We can't safely fix occurrences where the macro may affect the format\n  // string differently in different builds.\n#define SURROUND_FORMAT(x) \"!\" x\n  printf(SURROUND_FORMAT(\"Hello %d\"), 4443);\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: unable to use 'std::print' instead of 'printf' because format string contains unreplaceable macro 'SURROUND_FORMAT' [modernize-use-std-print]\n}"
    }
  ]
}