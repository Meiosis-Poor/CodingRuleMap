{
  "name": "UseStartsEndsWith",
  "language": "cpp",
  "description": "modernize-use-starts-ends-with",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 272,
  "branches": 17,
  "apis": 260,
  "test": [
    {
      "description": null,
      "expected-problems": 68,
      "expected-linenumbers": [
        39,
        43,
        47,
        51,
        55,
        59,
        63,
        67,
        71,
        75,
        79,
        83,
        87,
        91,
        96,
        101,
        106,
        110,
        114,
        118,
        122,
        126,
        130,
        134,
        138,
        142,
        146,
        150,
        154,
        158,
        162,
        166,
        170,
        174,
        179,
        183,
        187,
        191,
        195,
        200,
        204,
        208,
        212,
        216,
        220,
        224,
        228,
        232,
        236,
        240,
        244,
        248,
        252,
        256,
        260,
        264,
        268,
        272,
        279,
        314,
        319,
        324,
        336,
        340,
        344,
        350,
        368,
        372
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++20 %s modernize-use-starts-ends-with %t -- \\\n// RUN:   -- -isystem %clang_tidy_headers\n\n#include <string.h>\n#include <string>\n\nstd::string foo(std::string);\nstd::string bar();\n\nclass sub_string : public std::string {};\nclass sub_sub_string : public sub_string {};\n\nstruct string_like {\n  bool starts_with(const char *s) const;\n  size_t find(const char *s, size_t pos = 0) const;\n};\n\nstruct string_like_camel {\n  bool startsWith(const char *s) const;\n  size_t find(const char *s, size_t pos = 0) const;\n};\n\nstruct prefer_underscore_version {\n  bool starts_with(const char *s) const;\n  bool startsWith(const char *s) const;\n  size_t find(const char *s, size_t pos = 0) const;\n};\n\nstruct prefer_underscore_version_flip {\n  bool startsWith(const char *s) const;\n  bool starts_with(const char *s) const;\n  size_t find(const char *s, size_t pos = 0) const;\n};\n\nvoid test(std::string s, std::string_view sv, sub_string ss, sub_sub_string sss,\n          string_like sl, string_like_camel slc, prefer_underscore_version puv,\n          prefer_underscore_version_flip puvf) {\n  s.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of find [modernize-use-starts-ends-with]\n  // CHECK-FIXES: s.starts_with(\"a\");\n\n  (((((s)).find(\"a\")))) == ((0));\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: ((s)).starts_with(\"a\");\n\n  (s + \"a\").find(\"a\") == ((0));\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: (s + \"a\").starts_with(\"a\");\n\n  s.find(s) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(s);\n\n  s.find(\"aaa\") != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !s.starts_with(\"aaa\");\n\n  s.find(foo(foo(bar()))) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !s.starts_with(foo(foo(bar())));\n\n  if (s.find(\"....\") == 0) { /* do something */ }\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: if (s.starts_with(\"....\")) { /* do something */ }\n\n  0 != s.find(\"a\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !s.starts_with(\"a\");\n\n  s.rfind(\"a\", 0) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of rfind [modernize-use-starts-ends-with]\n  // CHECK-FIXES: s.starts_with(\"a\");\n\n  s.rfind(s, 0) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(s);\n\n  s.rfind(\"aaa\", 0) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !s.starts_with(\"aaa\");\n\n  s.rfind(foo(foo(bar())), 0) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !s.starts_with(foo(foo(bar())));\n\n  if (s.rfind(\"....\", 0) == 0) { /* do something */ }\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: if (s.starts_with(\"....\")) { /* do something */ }\n\n  0 != s.rfind(\"a\", 0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !s.starts_with(\"a\");\n\n  #define FIND find\n  s.FIND(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"a\");\n\n  #define PREFIX \"a\"\n  s.find(PREFIX) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(PREFIX);\n\n  #define ZERO 0\n  s.find(\"a\") == ZERO;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"a\");\n\n  sv.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: sv.starts_with(\"a\");\n\n  sv.rfind(\"a\", 0) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !sv.starts_with(\"a\");\n\n  ss.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: ss.starts_with(\"a\");\n\n  sss.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: sss.starts_with(\"a\");\n\n  sl.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: sl.starts_with(\"a\");\n\n  slc.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use startsWith\n  // CHECK-FIXES: slc.startsWith(\"a\");\n\n  puv.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: puv.starts_with(\"a\");\n\n  puvf.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: puvf.starts_with(\"a\");\n\n  s.compare(0, 1, \"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of compare [modernize-use-starts-ends-with]\n  // CHECK-FIXES: s.starts_with(\"a\");\n\n  s.compare(0, 1, \"a\") != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of compare [modernize-use-starts-ends-with]\n  // CHECK-FIXES: !s.starts_with(\"a\");\n\n  s.compare(0, strlen(\"a\"), \"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"a\");\n\n  s.compare(0, std::strlen(\"a\"), \"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"a\");\n\n  s.compare(0, std::strlen((\"a\")), \"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"a\");\n\n  s.compare(0, std::strlen((\"a\")), ((\"a\"))) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"a\");\n\n  s.compare(0, s.size(), s) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(s);\n\n  s.compare(0, s.length(), s) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(s);\n\n  0 != s.compare(0, sv.length(), sv);\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !s.starts_with(sv);\n\n  #define LENGTH(x) (x).length()\n  s.compare(0, LENGTH(s), s) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(s);\n\n  s.compare(ZERO, LENGTH(s), s) == ZERO;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(s);\n\n  s.compare(ZERO, LENGTH(sv), sv) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !s.starts_with(sv);\n\n  s.compare(s.size() - 6, 6, \"suffix\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(\"suffix\");\n\n  s.compare(s.size() - 6, strlen(\"abcdef\"), \"suffix\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(\"suffix\");\n\n  std::string suffix = \"suffix\";\n  s.compare(s.size() - suffix.size(), suffix.size(), suffix) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(suffix);\n\n  s.rfind(\"suffix\") == s.size() - 6;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(\"suffix\");\n\n  s.rfind(\"suffix\") == s.size() - strlen(\"suffix\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(\"suffix\");\n\n  s.rfind(suffix) == s.size() - suffix.size();\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(suffix);\n\n  s.rfind(suffix, std::string::npos) == s.size() - suffix.size();\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(suffix);\n\n  s.rfind(suffix) == (s.size() - suffix.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(suffix);\n\n  s.rfind(suffix, s.npos) == (s.size() - suffix.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(suffix);\n\n  s.rfind(suffix, s.npos) == (((s.size()) - (suffix.size())));\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(suffix);\n\n  s.rfind(suffix) != s.size() - suffix.size();\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: !s.ends_with(suffix);\n\n  (s.size() - suffix.size()) == s.rfind(suffix);\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: s.ends_with(suffix);\n\n  s.find(\"a\", 0) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"a\");\n\n  s.find(s, ZERO) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(s);\n\n  s.find(s, 0) == ZERO;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(s);\n\n  s.find(\"aaa\", 0, 3) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"aaa\");\n\n  s.find(\"aaa\", ZERO, 3) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"aaa\");\n\n  s.find(\"aaa\", ZERO, strlen((\"aaa\"))) == ZERO;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"aaa\");\n\n  s.rfind(\"aaa\", 0, 3) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !s.starts_with(\"aaa\");\n\n  s.rfind(\"aaa\", ZERO, 3) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: !s.starts_with(\"aaa\");\n\n  s.rfind(\"aaa\", ZERO, strlen((\"aaa\"))) == ZERO;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with\n  // CHECK-FIXES: s.starts_with(\"aaa\");\n\n  struct S {\n    std::string s;\n  } t;\n  t.s.rfind(suffix) == (t.s.size() - suffix.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use ends_with\n  // CHECK-FIXES: t.s.ends_with(suffix);\n\n  // Expressions that don't trigger the check are here.\n  #define EQ(x, y) ((x) == (y))\n  EQ(s.find(\"a\"), 0);\n\n  #define DOTFIND(x, y) (x).find(y)\n  DOTFIND(s, \"a\") == 0;\n\n  #define STARTS_WITH_COMPARE(x, y) (x).compare(0, (x).size(), (y))\n  STARTS_WITH_COMPARE(s, s) == 0;\n\n  s.compare(0, 1, \"ab\") == 0;\n  s.rfind(suffix, 1) == s.size() - suffix.size();\n\n  #define STR(x) std::string(x)\n  0 == STR(s).find(\"a\");\n\n  #define STRING s\n  if (0 == STRING.find(\"ala\")) { /* do something */}\n\n  // Cases when literal-size and size parameters are different are not being matched.\n  s.find(\"aaa\", 0, 2) == 0;\n  s.find(\"aaa\", 0, strlen(\"aa\")) == 0;\n  s.rfind(\"aaa\", 0, 2) == 0;\n  s.rfind(\"aaa\", 0, strlen(\"aa\")) == 0;\n}\n\nvoid test_substr() {\n    std::string str(\"hello world\");\n    std::string prefix = \"hello\";\n    \n    // Basic pattern\n    str.substr(0, 5) == \"hello\";\n    // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of substr [modernize-use-starts-ends-with]\n    // CHECK-FIXES: str.starts_with(\"hello\");\n    \n    // With string literal on left side\n    \"hello\" == str.substr(0, 5);\n    // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of substr [modernize-use-starts-ends-with]\n    // CHECK-FIXES: str.starts_with(\"hello\");\n    \n    // Inequality comparison\n    str.substr(0, 5) != \"world\";\n    // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of substr [modernize-use-starts-ends-with]\n    // CHECK-FIXES: !str.starts_with(\"world\");\n    \n    // Ensure non-zero start position is not transformed\n    str.substr(1, 5) == \"hello\";\n    str.substr(0, 4) == \"hello\"; // Length mismatch\n    \n    size_t len = 5;\n    str.substr(0, len) == \"hello\"; // Non-constant length\n\n    // String literal with size calculation\n    str.substr(0, strlen(\"hello\")) == \"hello\";\n    // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of substr [modernize-use-starts-ends-with]\n    // CHECK-FIXES: str.starts_with(\"hello\");\n\n    str.substr(0, prefix.size()) == prefix;\n    // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of substr [modernize-use-starts-ends-with]\n    // CHECK-FIXES: str.starts_with(prefix);\n\n    str.substr(0, prefix.length()) == prefix;\n    // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of substr [modernize-use-starts-ends-with]\n    // CHECK-FIXES: str.starts_with(prefix);\n\n    // Tests to verify macro behavior\n    #define MSG \"hello\"\n    str.substr(0, strlen(MSG)) == MSG;\n    // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of substr [modernize-use-starts-ends-with]\n    // CHECK-FIXES: str.starts_with(MSG);\n\n    #define STARTS_WITH(X, Y) (X).substr(0, (Y).size()) == (Y)\n    STARTS_WITH(str, prefix);\n\n    #define SUBSTR(X, A, B) (X).substr((A), (B))\n    SUBSTR(str, 0, 6) == \"prefix\";\n\n    #define STR() str\n    SUBSTR(STR(), 0, 6) == \"prefix\";\n    \"prefix\" == SUBSTR(STR(), 0, 6);\n\n    str.substr(0, strlen(\"hello123\")) == \"hello\";\n}\n\nvoid test_operator_rewriting(std::string str, std::string prefix) {\n  str.substr(0, prefix.size()) == prefix;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of substr\n  // CHECK-FIXES: str.starts_with(prefix);\n\n  str.substr(0, prefix.size()) != prefix;\n  // CHECK-MESSAGES: :[[@LINE-1]]:{{[0-9]+}}: warning: use starts_with instead of substr\n  // CHECK-FIXES: !str.starts_with(prefix);\n}"
    }
  ]
}