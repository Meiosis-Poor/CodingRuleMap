{
  "name": "UseEqualsDelete",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-equals-delete",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 98,
  "branches": 10,
  "apis": 68,
  "test": [
    {
      "description": null,
      "expected-problems": 19,
      "expected-linenumbers": [
        6,
        9,
        12,
        15,
        18,
        21,
        29,
        32,
        35,
        38,
        41,
        44,
        65,
        74,
        85,
        127,
        136,
        148,
        154
      ],
      "code": "\n// RUN: %check_clang_tidy %s modernize-use-equals-delete %t\n\nstruct PositivePrivate {\nprivate:\n  PositivePrivate();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositivePrivate() = delete;\n  PositivePrivate(const PositivePrivate &);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositivePrivate(const PositivePrivate &) = delete;\n  PositivePrivate &operator=(const PositivePrivate &);\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositivePrivate &operator=(const PositivePrivate &) = delete;\n  PositivePrivate(PositivePrivate &&);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositivePrivate(PositivePrivate &&) = delete;\n  PositivePrivate &operator=(PositivePrivate &&);\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositivePrivate &operator=(PositivePrivate &&) = delete;\n  ~PositivePrivate();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: ~PositivePrivate() = delete;\n};\n\ntemplate<typename T>\nstruct PositivePrivateTemplate {\nprivate:\n  PositivePrivateTemplate();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositivePrivateTemplate() = delete;\n  PositivePrivateTemplate(const PositivePrivateTemplate &);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositivePrivateTemplate(const PositivePrivateTemplate &) = delete;\n  PositivePrivateTemplate &operator=(const PositivePrivateTemplate &);\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositivePrivateTemplate &operator=(const PositivePrivateTemplate &) = delete;\n  PositivePrivateTemplate(PositivePrivateTemplate &&);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositivePrivateTemplate(PositivePrivateTemplate &&) = delete;\n  PositivePrivateTemplate &operator=(PositivePrivateTemplate &&);\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositivePrivateTemplate &operator=(PositivePrivateTemplate &&) = delete;\n  ~PositivePrivateTemplate();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: ~PositivePrivateTemplate() = delete;\n};\n\ntemplate struct PositivePrivateTemplate<int>;\ntemplate struct PositivePrivateTemplate<char>;\n\nstruct NegativePublic {\n  NegativePublic(const NegativePublic &);\n};\n\nstruct NegativeProtected {\nprotected:\n  NegativeProtected(const NegativeProtected &);\n};\n\nstruct PositiveInlineMember {\n  int foo() { return 0; }\n\nprivate:\n  PositiveInlineMember(const PositiveInlineMember &);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositiveInlineMember(const PositiveInlineMember &) = delete;\n};\n\nstruct PositiveOutOfLineMember {\n  int foo();\n\nprivate:\n  PositiveOutOfLineMember(const PositiveOutOfLineMember &);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositiveOutOfLineMember(const PositiveOutOfLineMember &) = delete;\n};\n\nint PositiveOutOfLineMember::foo() { return 0; }\n\nstruct PositiveAbstractMember {\n  virtual int foo() = 0;\n\nprivate:\n  PositiveAbstractMember(const PositiveAbstractMember &);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositiveAbstractMember(const PositiveAbstractMember &) = delete;\n};\n\nstruct NegativeMemberNotImpl {\n  int foo();\n\nprivate:\n  NegativeMemberNotImpl(const NegativeMemberNotImpl &);\n};\n\nstruct NegativeStaticMemberNotImpl {\n  static int foo();\n\nprivate:\n  NegativeStaticMemberNotImpl(const NegativeStaticMemberNotImpl &);\n};\n\nstruct NegativeInline {\nprivate:\n  NegativeInline(const NegativeInline &) {}\n};\n\nstruct NegativeOutOfLine {\nprivate:\n  NegativeOutOfLine(const NegativeOutOfLine &);\n};\n\nNegativeOutOfLine::NegativeOutOfLine(const NegativeOutOfLine &) {}\n\nstruct NegativeConstructNotImpl {\n  NegativeConstructNotImpl();\n\nprivate:\n  NegativeConstructNotImpl(const NegativeConstructNotImpl &);\n};\n\nstruct PositiveDefaultedConstruct {\n  PositiveDefaultedConstruct() = default;\n\nprivate:\n  PositiveDefaultedConstruct(const PositiveDefaultedConstruct &);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositiveDefaultedConstruct(const PositiveDefaultedConstruct &) = delete;\n};\n\nstruct PositiveDeletedConstruct {\n  PositiveDeletedConstruct() = delete;\n\nprivate:\n  PositiveDeletedConstruct(const PositiveDeletedConstruct &);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]\n  // CHECK-FIXES: PositiveDeletedConstruct(const PositiveDeletedConstruct &) = delete;\n};\n\nstruct NegativeDefaulted {\nprivate:\n  NegativeDefaulted(const NegativeDefaulted &) = default;\n};\n\nstruct PrivateDeleted {\nprivate:\n  PrivateDeleted(const PrivateDeleted &) = delete;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: deleted member function should be public [modernize-use-equals-delete]\n};\n\nstruct ProtectedDeleted {\nprotected:\n  ProtectedDeleted(const ProtectedDeleted &) = delete;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: deleted member function should be public [modernize-use-equals-delete]\n};\n\nstruct PublicDeleted {\npublic:\n  PublicDeleted(const PublicDeleted &) = delete;\n};\n\n#define M1                                                         \\\n  struct PrivateDeletedMacro {                                     \\\n  private:                                                         \\\n    PrivateDeletedMacro(const PrivateDeletedMacro &) = delete;     \\\n  };                                                               \\\n  struct ProtectedDeletedMacro {                                   \\\n  protected:                                                       \\\n    ProtectedDeletedMacro(const ProtectedDeletedMacro &) = delete; \\\n  }\n\nM1;\n\n#define DISALLOW_COPY_AND_ASSIGN(name) \\\n  name(const name &) = delete;         \\\n  void operator=(const name &) = delete\n\nstruct PrivateDeletedMacro2 {\nprivate:\n  DISALLOW_COPY_AND_ASSIGN(PrivateDeletedMacro2);\n};\n\nstruct ProtectedDeletedMacro2 {\nprotected:\n  DISALLOW_COPY_AND_ASSIGN(ProtectedDeletedMacro2);\n};\n\n// This resulted in a warning by default.\n#define MACRO(type) void operator=(type const &)\nclass C {\nprivate:\n  MACRO(C);\n};\n\nnamespace PR33759 {\n\n  class Number {\n    private:\n      Number();\n      ~Number();\n\n    public:\n      static Number& getNumber() {\n        static Number number;\n        return number;\n      }\n\n      int getIntValue() { return (int)someFloat; }\n      float getFloatValue() { return someFloat; }\n    private:\n      float someFloat;\n  };\n\n  class Number2 {\n    private:\n      Number2();\n      ~Number2();\n    public:\n      static Number& getNumber();\n  };\n}"
    }
  ]
}