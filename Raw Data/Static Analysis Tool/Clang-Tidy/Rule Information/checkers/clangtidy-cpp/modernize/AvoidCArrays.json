{
  "name": "AvoidCArrays",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-avoid-c-arrays",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 101,
  "branches": 8,
  "apis": 77,
  "test": [
    {
      "description": null,
      "expected-problems": 16,
      "expected-linenumbers": [
        4,
        7,
        11,
        23,
        26,
        30,
        33,
        42,
        46,
        49,
        68,
        71,
        75,
        78,
        91,
        94
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++17 %s modernize-avoid-c-arrays %t\n\nint a[] = {1, 2};\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: do not declare C-style arrays, use 'std::array' instead\n\nint b[1];\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: do not declare C-style arrays, use 'std::array' instead\n\nvoid foo() {\n  int c[b[0]];\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not declare C VLA arrays, use 'std::vector' instead\n\n  using d = decltype(c);\n  d e;\n  // Semi-FIXME: we do not diagnose these last two lines separately,\n  // because we point at typeLoc.getBeginLoc(), which is the decl before that\n  // (int c[b[0]];), which is already diagnosed.\n}\n\ntemplate <typename T, int Size>\nclass array {\n  T d[Size];\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not declare C-style arrays, use 'std::array' instead\n\n  int e[1];\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not declare C-style arrays, use 'std::array' instead\n};\n\narray<int[4], 2> d;\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: do not declare C-style arrays, use 'std::array' instead\n\nusing k = int[4];\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: do not declare C-style arrays, use 'std::array' instead\n\narray<k, 2> dk;\n\ntemplate <typename T>\nclass unique_ptr {\n  T *d;\n\n  int e[1];\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not declare C-style arrays, use 'std::array' instead\n};\n\nunique_ptr<int[]> d2;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: do not declare C-style arrays, use 'std::array' instead\n\nusing k2 = int[];\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: do not declare C-style arrays, use 'std::array' instead\n\nunique_ptr<k2> dk2;\n\n// Some header\nextern \"C\" {\n\nint f[] = {1, 2};\n\nint j[1];\n\ninline void bar() {\n  {\n    int j[j[0]];\n  }\n}\n\nextern \"C++\" {\nint f3[] = {1, 2};\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: do not declare C-style arrays, use 'std::array' instead\n\nint j3[1];\n// CHECK-MESSAGES: :[[@LINE-1]]:1: warning: do not declare C-style arrays, use 'std::array' instead\n\nstruct Foo {\n  int f3[3] = {1, 2};\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not declare C-style arrays, use 'std::array' instead\n\n  int j3[1];\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not declare C-style arrays, use 'std::array' instead\n};\n}\n\nstruct Bar {\n\n  int f[3] = {1, 2};\n\n  int j[1];\n};\n}\n\nconst char name[] = \"Some string\";\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: do not declare C-style arrays, use 'std::array' instead [modernize-avoid-c-arrays]\n\nvoid takeCharArray(const char name[]);\n// CHECK-MESSAGES: :[[@LINE-1]]:26: warning: do not declare C-style arrays, use 'std::array' or 'std::vector' instead [modernize-avoid-c-arrays]"
    }
  ]
}