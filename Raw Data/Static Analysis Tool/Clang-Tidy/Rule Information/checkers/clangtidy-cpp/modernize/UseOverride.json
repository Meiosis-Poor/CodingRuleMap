{
  "name": "UseOverride",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-override",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 245,
  "branches": 42,
  "apis": 179,
  "test": [
    {
      "description": null,
      "expected-problems": 51,
      "expected-linenumbers": [
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84,
        88,
        92,
        96,
        100,
        104,
        108,
        112,
        116,
        120,
        124,
        128,
        132,
        136,
        147,
        154,
        158,
        162,
        166,
        170,
        174,
        181,
        185,
        189,
        194,
        198,
        203,
        207,
        211,
        216,
        221,
        226,
        231,
        239,
        247,
        251,
        255,
        259,
        271,
        282,
        290,
        305,
        315,
        320
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s modernize-use-override,cppcoreguidelines-explicit-virtual-functions %t -- -- -fexceptions\n\n#define ABSTRACT = 0\n\n#define OVERRIDE override\n#define VIRTUAL virtual\n#define NOT_VIRTUAL\n#define NOT_OVERRIDE\n\n#define MUST_USE_RESULT __attribute__((warn_unused_result))\n#define UNUSED __attribute__((unused))\n\nstruct MUST_USE_RESULT MustUseResultObject {};\n\nstruct IntPair {\n  int First, Second;\n};\n\nstruct Base {\n  virtual ~Base() {}\n  virtual void a();\n  virtual void b();\n  virtual void c();\n  virtual void d();\n  virtual void d2();\n  virtual void e() = 0;\n  virtual void f() = 0;\n  virtual void f2() const = 0;\n  virtual void g() = 0;\n  virtual void g2() = 0;\n\n  virtual void j() const;\n  virtual MustUseResultObject k();\n  virtual bool l() MUST_USE_RESULT UNUSED;\n  virtual bool n() MUST_USE_RESULT UNUSED;\n\n  virtual void m();\n  virtual void m2();\n  virtual void o() __attribute__((unused));\n\n  virtual void r() &;\n  virtual void rr() &&;\n\n  virtual void cv() const volatile;\n  virtual void cv2() const volatile;\n\n  virtual void ne() noexcept(false);\n  virtual void t() throw();\n\n  virtual void il(IntPair);\n};\n\nstruct SimpleCases : public Base {\npublic:\n  virtual ~SimpleCases();\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: prefer using 'override' or (rarely) 'final' instead of 'virtual'\n  // CHECK-FIXES: {{^}}  ~SimpleCases() override;\n\n  void a();\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: annotate this\n  // CHECK-FIXES: {{^}}  void a() override;\n\n  void b() override;\n  // CHECK-MESSAGES-NOT: warning:\n  // CHECK-FIXES: {{^}}  void b() override;\n\n  virtual void c();\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void c() override;\n\n  virtual void d() override;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: 'virtual' is redundant since the function is already declared 'override'\n  // CHECK-FIXES: {{^}}  void d() override;\n\n  virtual void d2() final;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: 'virtual' is redundant since the function is already declared 'final'\n  // CHECK-FIXES: {{^}}  void d2() final;\n\n  virtual void e() = 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void e() override = 0;\n\n  virtual void f()=0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void f() override =0;\n\n  virtual void f2() const=0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void f2() const override =0;\n\n  virtual void g() ABSTRACT;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void g() override ABSTRACT;\n\n  virtual void j() const;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void j() const override;\n\n  virtual MustUseResultObject k();  // Has an implicit attribute.\n  // CHECK-MESSAGES: :[[@LINE-1]]:31: warning: prefer using\n  // CHECK-FIXES: {{^}}  MustUseResultObject k() override;\n\n  virtual bool l() MUST_USE_RESULT UNUSED;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  bool l() override MUST_USE_RESULT UNUSED;\n\n  virtual bool n() UNUSED MUST_USE_RESULT;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  bool n() override UNUSED MUST_USE_RESULT;\n\n  void m() override final;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: 'override' is redundant since the function is already declared 'final'\n  // CHECK-FIXES: {{^}}  void m() final;\n\n  virtual void m2() override final;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: 'virtual' and 'override' are redundant since the function is already declared 'final'\n  // CHECK-FIXES: {{^}}  void m2() final;\n\n  virtual void o() __attribute__((unused));\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void o() override __attribute__((unused));\n\n  virtual void ne() noexcept(false);\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void ne() noexcept(false) override;\n\n  virtual void t() throw();\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void t() throw() override;\n\n  virtual       /*      */ void g2();\n  // CHECK-MESSAGES: :[[@LINE-1]]:33: warning: prefer using 'override' or (rarely) 'final' instead of 'virtual'\n  // CHECK-FIXES: {{^}}  /*      */ void g2() override;\n};\n\n// CHECK-MESSAGES-NOT: warning:\n\nvoid SimpleCases::c() {}\n// CHECK-FIXES: {{^}}void SimpleCases::c() {}\n\nSimpleCases::~SimpleCases() {}\n// CHECK-FIXES: {{^}}SimpleCases::~SimpleCases() {}\n\nstruct DefaultedDestructor : public Base {\n  DefaultedDestructor() {}\n  virtual ~DefaultedDestructor() = default;\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: prefer using\n  // CHECK-FIXES: {{^}}  ~DefaultedDestructor() override = default;\n};\n\nstruct FinalSpecified : public Base {\npublic:\n  virtual ~FinalSpecified() final;\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: 'virtual' is redundant since the function is already declared 'final'\n  // CHECK-FIXES: {{^}}  ~FinalSpecified() final;\n\n  void b() final;\n  // CHECK-MESSAGES-NOT: warning:\n  // CHECK-FIXES: {{^}}  void b() final;\n\n  virtual void d() final;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: 'virtual' is redundant\n  // CHECK-FIXES: {{^}}  void d() final;\n\n  virtual void e() final = 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: 'virtual' is redundant\n  // CHECK-FIXES: {{^}}  void e() final = 0;\n\n  virtual void j() const final;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: 'virtual' is redundant\n  // CHECK-FIXES: {{^}}  void j() const final;\n\n  virtual bool l() final MUST_USE_RESULT UNUSED;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: 'virtual' is redundant\n  // CHECK-FIXES: {{^}}  bool l() final MUST_USE_RESULT UNUSED;\n};\n\nstruct InlineDefinitions : public Base {\npublic:\n  virtual ~InlineDefinitions() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: prefer using\n  // CHECK-FIXES: {{^}}  ~InlineDefinitions() override {}\n\n  void a() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: annotate this\n  // CHECK-FIXES: {{^}}  void a() override {}\n\n  void b() override {}\n  // CHECK-MESSAGES-NOT: warning:\n  // CHECK-FIXES: {{^}}  void b() override {}\n\n  virtual void c()\n  {}\n  // CHECK-MESSAGES: :[[@LINE-2]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void c() override\n\n  virtual void d() override {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: 'virtual' is redundant\n  // CHECK-FIXES: {{^}}  void d() override {}\n\n  virtual void j() const\n  {}\n  // CHECK-MESSAGES: :[[@LINE-2]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void j() const override\n\n  virtual MustUseResultObject k();  // Has an implicit attribute.\n  // CHECK-MESSAGES: :[[@LINE-1]]:31: warning: prefer using\n  // CHECK-FIXES: {{^}}  MustUseResultObject k() override;\n\n  virtual bool l() MUST_USE_RESULT UNUSED;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  bool l() override MUST_USE_RESULT UNUSED;\n\n  virtual void r() &\n  {}\n  // CHECK-MESSAGES: :[[@LINE-2]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void r() & override\n\n  virtual void rr() &&\n  {}\n  // CHECK-MESSAGES: :[[@LINE-2]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void rr() && override\n\n  virtual void cv() const volatile\n  {}\n  // CHECK-MESSAGES: :[[@LINE-2]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void cv() const volatile override\n\n  virtual void cv2() const volatile // some comment\n  {}\n  // CHECK-MESSAGES: :[[@LINE-2]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void cv2() const volatile override // some comment\n};\n\nstruct DefaultArguments : public Base {\n  // Tests for default arguments (with initializer lists).\n  // Make sure the override fix is placed after the argument list.\n  void il(IntPair p = {1, (2 + (3))}) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: annotate this\n  // CHECK-FIXES: {{^}}  void il(IntPair p = {1, (2 + (3))}) override {}\n};\n\nstruct Macros : public Base {\n  // Tests for 'virtual' and 'override' being defined through macros. Basically\n  // give up for now.\n  NOT_VIRTUAL void a() NOT_OVERRIDE;\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: annotate this\n  // CHECK-FIXES: {{^}}  NOT_VIRTUAL void a() override NOT_OVERRIDE;\n\n  VIRTUAL void b() NOT_OVERRIDE;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  VIRTUAL void b() override NOT_OVERRIDE;\n\n  NOT_VIRTUAL void c() OVERRIDE;\n  // CHECK-MESSAGES-NOT: warning:\n  // CHECK-FIXES: {{^}}  NOT_VIRTUAL void c() OVERRIDE;\n\n  VIRTUAL void d() OVERRIDE;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: 'virtual' is redundant\n  // CHECK-FIXES: {{^}}  VIRTUAL void d() OVERRIDE;\n\n#define FUNC(return_type, name) return_type name()\n  FUNC(void, e);\n  // CHECK-FIXES: {{^}}  FUNC(void, e);\n\n#define F virtual void f();\n  F\n  // CHECK-FIXES: {{^}}  F\n\n  VIRTUAL void g() OVERRIDE final;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: 'virtual' and 'override' are redundant\n  // CHECK-FIXES: {{^}}  VIRTUAL void g() final;\n};\n\n// Tests for templates.\ntemplate <typename T> struct TemplateBase {\n  virtual void f(T t);\n};\n\ntemplate <typename T> struct DerivedFromTemplate : public TemplateBase<T> {\n  virtual void f(T t);\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void f(T t) override;\n};\nvoid f() { DerivedFromTemplate<int>().f(2); }\n\ntemplate <class C>\nstruct UnusedMemberInstantiation : public C {\n  virtual ~UnusedMemberInstantiation() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: prefer using\n  // CHECK-FIXES: {{^}}  ~UnusedMemberInstantiation() override {}\n};\nstruct IntantiateWithoutUse : public UnusedMemberInstantiation<Base> {};\n\nstruct Base2 {\n  virtual ~Base2() {}\n  virtual void a();\n};\n\n// The OverrideAttr isn't propagated to specializations in all cases. Make sure\n// we don't add \"override\" a second time.\ntemplate <int I>\nstruct MembersOfSpecializations : public Base2 {\n  void a() override;\n  // CHECK-MESSAGES-NOT: warning:\n  // CHECK-FIXES: {{^}}  void a() override;\n};\ntemplate <> void MembersOfSpecializations<3>::a() {}\nvoid ff() { MembersOfSpecializations<3>().a(); };\n\n// In case try statement is used as a method body,\n// make sure that override fix is placed before try keyword.\nstruct TryStmtAsBody : public Base {\n  void a() try\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: annotate this\n  // CHECK-FIXES: {{^}}  void a() override try\n  { b(); } catch(...) { c(); }\n\n  virtual void d() try\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: prefer using\n  // CHECK-FIXES: {{^}}  void d() override try\n  { e(); } catch(...) { f(); }\n};"
    }
  ]
}