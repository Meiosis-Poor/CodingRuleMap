{
  "name": "MakeShared",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-make-shared",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 30,
  "branches": 1,
  "apis": 15,
  "test": [
    {
      "description": null,
      "expected-problems": 44,
      "expected-linenumbers": [
        37,
        43,
        49,
        54,
        59,
        67,
        72,
        78,
        83,
        88,
        93,
        101,
        106,
        116,
        127,
        130,
        134,
        137,
        176,
        194,
        207,
        210,
        215,
        218,
        223,
        226,
        234,
        239,
        244,
        249,
        254,
        259,
        266,
        273,
        280,
        285,
        291,
        299,
        304,
        312,
        315,
        318,
        328,
        334
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s modernize-make-shared %t -- -- -I %S/Inputs/smart-ptr\n\n#include \"shared_ptr.h\"\n// CHECK-FIXES: #include <memory>\n\nstruct Base {\n  Base();\n  Base(int, int);\n};\n\nstruct Derived : public Base {\n  Derived();\n  Derived(int, int);\n};\n\nstruct APair {\n  int a, b;\n};\n\nstruct DPair {\n  DPair() : a(0), b(0) {}\n  DPair(int x, int y) : a(y), b(x) {}\n  int a, b;\n};\n\nstruct Empty {};\n\ntemplate <class T>\nusing shared_ptr_ = std::shared_ptr<T>;\n\nvoid *operator new(__SIZE_TYPE__ Count, void *Ptr);\n\nint g(std::shared_ptr<int> P);\n\nstd::shared_ptr<Base> getPointer() {\n  return std::shared_ptr<Base>(new Base);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use std::make_shared instead\n  // CHECK-FIXES: return std::make_shared<Base>();\n}\n\nstd::shared_ptr<Base> getPointerValue() {\n  return std::shared_ptr<Base>(new Base());\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: use std::make_shared instead\n  // CHECK-FIXES: return std::make_shared<Base>();\n}\n\nvoid basic() {\n  std::shared_ptr<int> P1 = std::shared_ptr<int>(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:29: warning: use std::make_shared instead [modernize-make-shared]\n  // CHECK-FIXES: std::shared_ptr<int> P1 = std::make_shared<int>();\n  std::shared_ptr<int> P2 = std::shared_ptr<int>(new int);\n\n  P1.reset(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: use std::make_shared instead [modernize-make-shared]\n  // CHECK-FIXES: P1 = std::make_shared<int>();\n  P1.reset(new int);\n\n  P1 = std::shared_ptr<int>(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use std::make_shared instead [modernize-make-shared]\n  // CHECK-FIXES: P1 = std::make_shared<int>();\n  P1 = std::shared_ptr<int>(new int);\n\n  // Without parenthesis, default initialization.\n  std::shared_ptr<int> P3 = std::shared_ptr<int>(new int);\n\n  P2.reset(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: use std::make_shared instead [modernize-make-shared]\n  // CHECK-FIXES: P2 = std::make_shared<int>();\n  P2.reset(new int);\n\n  P2 = std::shared_ptr<int>(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use std::make_shared instead [modernize-make-shared]\n  // CHECK-FIXES: P2 = std::make_shared<int>();\n  P2 = std::shared_ptr<int>(new int);\n\n  // With auto.\n  auto P4 = std::shared_ptr<int>(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use std::make_shared instead\n  // CHECK-FIXES: auto P4 = std::make_shared<int>();\n  auto P5 = std::shared_ptr<int>(new int);\n\n  std::shared_ptr<int> P6 = std::shared_ptr<int>((new int()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:29: warning: use std::make_shared instead [modernize-make-shared]\n  // CHECK-FIXES: std::shared_ptr<int> P6 = std::make_shared<int>();\n  std::shared_ptr<int> P7 = std::shared_ptr<int>((new int));\n\n  P4.reset((((new int()))));\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: use std::make_shared instead [modernize-make-shared]\n  // CHECK-FIXES: P4 = std::make_shared<int>();\n  P4.reset((((new int))));\n\n  P4 = std::shared_ptr<int>(((new int())));\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use std::make_shared instead [modernize-make-shared]\n  // CHECK-FIXES: P4 = std::make_shared<int>();\n  P4 = std::shared_ptr<int>(((new int)));\n\n  {\n    // No std.\n    using namespace std;\n    shared_ptr<int> Q = shared_ptr<int>(new int());\n    // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: use std::make_shared instead\n    // CHECK-FIXES: shared_ptr<int> Q = std::make_shared<int>();\n    shared_ptr<int> P = shared_ptr<int>(new int);\n\n    Q = shared_ptr<int>(new int());\n    // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use std::make_shared instead\n    // CHECK-FIXES: Q = std::make_shared<int>();\n    Q = shared_ptr<int>(new int);\n  }\n\n  std::shared_ptr<int> R(new int());\n  std::shared_ptr<int> S(new int);\n\n  // Create the shared_ptr as a parameter to a function.\n  int T = g(std::shared_ptr<int>(new int()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use std::make_shared instead\n  // CHECK-FIXES: int T = g(std::make_shared<int>());\n  T = g(std::shared_ptr<int>(new int));\n\n  // Only replace if the type in the template is the same as the type returned\n  // by the new operator.\n  auto Pderived = std::shared_ptr<Base>(new Derived());\n  auto PderivedNoparen = std::shared_ptr<Base>(new Derived);\n\n  // OK to replace for reset and assign\n  Pderived.reset(new Derived());\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: use std::make_shared instead\n  // CHECK-FIXES: Pderived = std::make_shared<Derived>();\n  Pderived.reset(new Derived);\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: use std::make_shared instead\n  // CHECK-FIXES: Pderived = std::make_shared<Derived>();\n\n  Pderived = std::shared_ptr<Derived>(new Derived());\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: use std::make_shared instead\n  // CHECK-FIXES: Pderived = std::make_shared<Derived>();\n  Pderived = std::shared_ptr<Derived>(new Derived);\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: use std::make_shared instead\n  // CHECK-FIXES: Pderived = std::make_shared<Derived>();\n\n  // FIXME: OK to replace if assigned to shared_ptr<Base>\n  Pderived = std::shared_ptr<Base>(new Derived());\n  Pderived = std::shared_ptr<Base>(new Derived);\n\n  // FIXME: OK to replace when auto is not used\n  std::shared_ptr<Base> PBase = std::shared_ptr<Base>(new Derived());\n  std::shared_ptr<Base> PBase2 = std::shared_ptr<Base>(new Derived);\n\n  // The pointer is returned by the function, nothing to do.\n  std::shared_ptr<Base> RetPtr = getPointer();\n  std::shared_ptr<Base> RetPtr2 = getPointerValue();\n\n  // This emulates std::move.\n  std::shared_ptr<int> Move = static_cast<std::shared_ptr<int> &&>(P1);\n\n  // Placement arguments should not be removed.\n  int *PInt = new int;\n  std::shared_ptr<int> Placement = std::shared_ptr<int>(new (PInt) int{3});\n  Placement.reset(new (PInt) int{3});\n  Placement = std::shared_ptr<int>(new (PInt) int{3});\n\n  std::shared_ptr<int> PlacementNoparen = std::shared_ptr<int>(new (PInt) int);\n  PlacementNoparen.reset(new (PInt) int);\n  PlacementNoparen = std::shared_ptr<int>(new (PInt) int);\n}\n\n// Calling make_smart_ptr from within a member function of a type with a\n// private or protected constructor would be ill-formed.\nclass Private {\nprivate:\n  Private(int z) {}\n\npublic:\n  Private() {}\n  void create() {\n    auto callsPublic = std::shared_ptr<Private>(new Private);\n    // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: use std::make_shared instead\n    // CHECK-FIXES: auto callsPublic = std::make_shared<Private>();\n    auto ptr = std::shared_ptr<Private>(new Private(42));\n    ptr.reset(new Private(42));\n    ptr = std::shared_ptr<Private>(new Private(42));\n  }\n\n  virtual ~Private();\n};\n\nclass Protected {\nprotected:\n  Protected() {}\n\npublic:\n  Protected(int, int) {}\n  void create() {\n    auto callsPublic = std::shared_ptr<Protected>(new Protected(1, 2));\n    // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: use std::make_shared instead\n    // CHECK-FIXES: auto callsPublic = std::make_shared<Protected>(1, 2);\n    auto ptr = std::shared_ptr<Protected>(new Protected);\n    ptr.reset(new Protected);\n    ptr = std::shared_ptr<Protected>(new Protected);\n  }\n};\n\nvoid initialization(int T, Base b) {\n  // Test different kinds of initialization of the pointee.\n\n  // Direct initialization with parenthesis.\n  std::shared_ptr<DPair> PDir1 = std::shared_ptr<DPair>(new DPair(1, T));\n  // CHECK-MESSAGES: :[[@LINE-1]]:34: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<DPair> PDir1 = std::make_shared<DPair>(1, T);\n  PDir1.reset(new DPair(1, T));\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use std::make_shared instead\n  // CHECK-FIXES: PDir1 = std::make_shared<DPair>(1, T);\n\n  // Direct initialization with braces.\n  std::shared_ptr<DPair> PDir2 = std::shared_ptr<DPair>(new DPair{2, T});\n  // CHECK-MESSAGES: :[[@LINE-1]]:34: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<DPair> PDir2 = std::make_shared<DPair>(2, T);\n  PDir2.reset(new DPair{2, T});\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use std::make_shared instead\n  // CHECK-FIXES: PDir2 = std::make_shared<DPair>(2, T);\n\n  // Aggregate initialization.\n  std::shared_ptr<APair> PAggr = std::shared_ptr<APair>(new APair{T, 1});\n  // CHECK-MESSAGES: :[[@LINE-1]]:34: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<APair> PAggr = std::make_shared<APair>(APair{T, 1});\n  PAggr.reset(new APair{T, 1});\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use std::make_shared instead\n  // CHECK-FIXES: std::make_shared<APair>(APair{T, 1});\n\n  // Test different kinds of initialization of the pointee, when the shared_ptr\n  // is initialized with braces.\n\n  // Direct initialization with parenthesis.\n  std::shared_ptr<DPair> PDir3 = std::shared_ptr<DPair>{new DPair(3, T)};\n  // CHECK-MESSAGES: :[[@LINE-1]]:34: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<DPair> PDir3 = std::make_shared<DPair>(3, T);\n\n  // Direct initialization with braces.\n  std::shared_ptr<DPair> PDir4 = std::shared_ptr<DPair>{new DPair{4, T}};\n  // CHECK-MESSAGES: :[[@LINE-1]]:34: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<DPair> PDir4 = std::make_shared<DPair>(4, T);\n\n  // Aggregate initialization.\n  std::shared_ptr<APair> PAggr2 = std::shared_ptr<APair>{new APair{T, 2}};\n  // CHECK-MESSAGES: :[[@LINE-1]]:35: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<APair> PAggr2 = std::make_shared<APair>(APair{T, 2});\n\n  // Direct initialization with parenthesis, without arguments.\n  std::shared_ptr<DPair> PDir5 = std::shared_ptr<DPair>(new DPair());\n  // CHECK-MESSAGES: :[[@LINE-1]]:34: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<DPair> PDir5 = std::make_shared<DPair>();\n\n  // Direct initialization with braces, without arguments.\n  std::shared_ptr<DPair> PDir6 = std::shared_ptr<DPair>(new DPair{});\n  // CHECK-MESSAGES: :[[@LINE-1]]:34: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<DPair> PDir6 = std::make_shared<DPair>();\n\n  // Aggregate initialization without arguments.\n  std::shared_ptr<Empty> PEmpty = std::shared_ptr<Empty>(new Empty{});\n  // CHECK-MESSAGES: :[[@LINE-1]]:35: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<Empty> PEmpty = std::make_shared<Empty>(Empty{});\n}\n\nvoid aliases() {\n  typedef std::shared_ptr<int> IntPtr;\n  IntPtr Typedef = IntPtr(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: use std::make_shared instead\n  // CHECK-FIXES: IntPtr Typedef = std::make_shared<int>();\n  IntPtr Typedef2 = IntPtr(new int);\n\n  // We use 'bool' instead of '_Bool'.\n  typedef std::shared_ptr<bool> BoolPtr;\n  BoolPtr BoolType = BoolPtr(new bool());\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: use std::make_shared instead\n  // CHECK-FIXES: BoolPtr BoolType = std::make_shared<bool>();\n  BoolPtr BoolType2 = BoolPtr(new bool);\n\n  // We use 'Base' instead of 'struct Base'.\n  typedef std::shared_ptr<Base> BasePtr;\n  BasePtr StructType = BasePtr(new Base);\n// CHECK-MESSAGES: :[[@LINE-1]]:24: warning: use std::make_shared instead\n// CHECK-FIXES: BasePtr StructType = std::make_shared<Base>();\n\n#define PTR shared_ptr<int>\n  std::shared_ptr<int> Macro = std::PTR(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:32: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<int> Macro = std::make_shared<int>();\n  std::shared_ptr<int> Macro2 = std::PTR(new int);\n#undef PTR\n\n  std::shared_ptr<int> Using = shared_ptr_<int>(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:32: warning: use std::make_shared instead\n  // CHECK-FIXES: std::shared_ptr<int> Using = std::make_shared<int>();\n  std::shared_ptr<int> Using2 = shared_ptr_<int>(new int);\n}\n\nvoid whitespaces() {\n  // clang-format off\n  auto Space = std::shared_ptr <int>(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: use std::make_shared instead\n  // CHECK-FIXES: auto Space = std::make_shared<int>();\n  auto Space2 = std::shared_ptr <int>(new int);\n\n  auto Spaces = std  ::    shared_ptr  <int>(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: use std::make_shared instead\n  // CHECK-FIXES: auto Spaces = std::make_shared<int>();\n  auto Spaces2 = std  ::    shared_ptr  <int>(new int);\n  // clang-format on\n}\n\nvoid nesting() {\n  auto Nest = std::shared_ptr<std::shared_ptr<int>>(new std::shared_ptr<int>(new int));\n  // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: use std::make_shared instead\n  // CHECK-FIXES: auto Nest = std::make_shared<std::shared_ptr<int>>(new int);\n  Nest.reset(new std::shared_ptr<int>(new int));\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use std::make_shared instead\n  // CHECK-FIXES: Nest = std::make_shared<std::shared_ptr<int>>(new int);\n  Nest->reset(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: use std::make_shared instead\n  // CHECK-FIXES: *Nest = std::make_shared<int>();\n  Nest->reset(new int);\n}\n\nvoid reset() {\n  std::shared_ptr<int> P;\n  P.reset();\n  P.reset(nullptr);\n  P.reset(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: use std::make_shared instead\n  // CHECK-FIXES: P = std::make_shared<int>();\n  P.reset(new int);\n\n  auto Q = &P;\n  Q->reset(new int());\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: use std::make_shared instead\n  // CHECK-FIXES: *Q = std::make_shared<int>();\n  Q->reset(new int);\n}"
    }
  ]
}