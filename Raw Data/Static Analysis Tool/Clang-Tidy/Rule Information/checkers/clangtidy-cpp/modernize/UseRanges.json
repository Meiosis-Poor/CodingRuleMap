{
  "name": "UseRanges",
  "language": "cpp",
  "description": ".. title:: clang-tidy - modernize-use-ranges",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 205,
  "branches": 4,
  "apis": 33,
  "test": [
    {
      "description": null,
      "expected-problems": 20,
      "expected-linenumbers": [
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        80,
        84,
        96,
        100,
        104,
        108
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++20 %s modernize-use-ranges %t -- -- -I %S/Inputs/\n// RUN: %check_clang_tidy -std=c++23 %s modernize-use-ranges %t -check-suffixes=,CPP23 -- -I %S/Inputs/\n// Example: ./check_clang_tidy.py -std=c++20 checkers/modernize/use-ranges.cpp modernize-use-ranges temp.txt -- -- -I ~/llvm-project/clang-tools-extra/test/clang-tidy/checkers/modernize/Inputs/\n\n// CHECK-FIXES: #include <algorithm>\n// CHECK-FIXES-CPP23: #include <numeric>\n// CHECK-FIXES: #include <ranges>\n\n#include \"use-ranges/fake_std.h\"\n#include \"smart-ptr/unique_ptr.h\"\n\nvoid Positives() {\n  std::vector<int> I, J;\n  std::vector<std::unique_ptr<int>> K;\n\n  // Expect to have no check messages\n  std::find(K.begin(), K.end(), nullptr);\n\n  std::find(K.begin(), K.end(), std::unique_ptr<int>());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::find(K, std::unique_ptr<int>());\n\n  std::find(I.begin(), I.end(), 0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::find(I, 0);\n\n  std::find(I.cbegin(), I.cend(), 1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::find(I, 1);\n\n  std::find(std::begin(I), std::end(I), 2);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::find(I, 2);\n\n  std::find(std::cbegin(I), std::cend(I), 3);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::find(I, 3);\n\n  std::find(std::cbegin(I), I.cend(), 4);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::find(I, 4);\n\n  std::reverse(I.begin(), I.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::reverse(I);\n\n  std::includes(I.begin(), I.end(), I.begin(), I.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::includes(I, I);\n\n  std::includes(I.begin(), I.end(), J.begin(), J.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::includes(I, J);\n\n  std::is_permutation(I.begin(), I.end(), J.begin(), J.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::is_permutation(I, J);\n\n  std::equal(I.begin(), I.end(), J.begin(), J.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::equal(I, J);\n\n  std::equal(I.begin(), I.end(), J.begin(), J.end(), [](int a, int b){ return a == b; });\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::equal(I, J, [](int a, int b){ return a == b; });\n\n  std::iota(I.begin(), I.end(), 0);\n  // CHECK-MESSAGES-CPP23: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES-CPP23: std::ranges::iota(I, 0);\n\n  std::rotate(I.begin(), I.begin() + 2, I.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::rotate(I, I.begin() + 2);\n\n  using std::find;\n  namespace my_std = std;\n\n  // Potentially these could be updated to better qualify the replaced function name\n  find(I.begin(), I.end(), 5);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::find(I, 5);\n\n  my_std::find(I.begin(), I.end(), 6);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::find(I, 6);\n}\n\nvoid Reverse(){\n  std::vector<int> I, J;\n  std::vector<std::unique_ptr<int>> K;\n  \n  // Expect to have no check messages\n  std::find(K.rbegin(), K.rend(), nullptr);\n\n  std::find(K.rbegin(), K.rend(), std::unique_ptr<int>());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::find(std::ranges::reverse_view(K), std::unique_ptr<int>());\n\n  std::find(I.rbegin(), I.rend(), 0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::find(std::ranges::reverse_view(I), 0);\n\n  std::equal(std::rbegin(I), std::rend(I), J.begin(), J.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::equal(std::ranges::reverse_view(I), J);\n\n  std::equal(I.begin(), I.end(), std::crbegin(J), std::crend(J));\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use a ranges version of this algorithm\n  // CHECK-FIXES: std::ranges::equal(I, std::ranges::reverse_view(J));\n}\n\nvoid Negatives() {\n  std::vector<int> I, J;\n  std::find(I.begin(), J.end(), 0);\n  std::find(I.begin(), I.begin(), 0);\n  std::find(I.end(), I.begin(), 0);\n\n\n  // Need both ranges for this one\n  std::is_permutation(I.begin(), I.end(), J.begin());\n\n  // We only have one valid match here and the ranges::equal function needs 2 complete ranges\n  std::equal(I.begin(), I.end(), J.begin());\n  std::equal(I.begin(), I.end(), J.end(), J.end());\n  std::equal(std::rbegin(I), std::rend(I), std::rend(J), std::rbegin(J));\n  std::equal(I.begin(), J.end(), I.begin(), I.end());\n\n  // std::rotate expects the full range in the 1st and 3rd argument.\n  // Anyone writing this code has probably written a bug, but this isn't the\n  // purpose of this check.\n  std::rotate(I.begin(), I.end(), I.begin() + 2);\n  // Pathological, but probably shouldn't diagnose this\n  std::rotate(I.begin(), I.end(), I.end() + 0);\n}"
    }
  ]
}