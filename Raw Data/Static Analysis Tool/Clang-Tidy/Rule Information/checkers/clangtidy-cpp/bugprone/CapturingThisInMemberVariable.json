{
  "name": "CapturingThisInMemberVariable",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-capturing-this-in-member-variable",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 149,
  "branches": 18,
  "apis": 115,
  "test": [
    {
      "description": null,
      "expected-problems": 38,
      "expected-linenumbers": [
        33,
        35,
        40,
        42,
        47,
        49,
        54,
        55,
        59,
        60,
        70,
        72,
        93,
        99,
        104,
        110,
        133,
        135,
        139,
        141,
        173,
        179,
        184,
        190,
        195,
        201,
        206,
        212,
        217,
        219,
        224,
        227,
        233,
        234,
        240,
        241,
        246,
        249
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++11-or-later %s bugprone-capturing-this-in-member-variable %t -- -config=\"{CheckOptions: {bugprone-capturing-this-in-member-variable.FunctionWrapperTypes: '::std::function;::Fn', bugprone-capturing-this-in-member-variable.BindFunctions: '::std::bind;::Bind'}}\" --\n\nnamespace std {\n\ntemplate<class Fn>\nclass function;\n\ntemplate<class R, class ...Args>\nclass function<R(Args...)> {\npublic:\n  function() noexcept;\n  template<class F> function(F &&);\n};\n\ntemplate <typename F, typename... Args>\nfunction<F(Args...)> bind(F&&, Args&&...) {\n  return {};\n}\n\n} // namespace std\n\nstruct Fn {\n  template<class F> Fn(F &&);\n};\n\ntemplate <typename F, typename... Args>\nstd::function<F(Args...)> Bind(F&&, Args&&...) {\n  return {};\n}\n\nstruct BasicConstructor {\n  BasicConstructor() : Captured([this]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:33: warning: 'this' captured by a lambda and stored in a class member variable;\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct BasicConstructorWithCaptureAllByValue {\n  BasicConstructorWithCaptureAllByValue() : Captured([=]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:54: warning: 'this' captured by a lambda and stored in a class member variable;\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct BasicConstructorWithCaptureAllByRef {\n  BasicConstructorWithCaptureAllByRef() : Captured([&]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:52: warning: 'this' captured by a lambda and stored in a class member variable;\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct BasicField1 {\n  std::function<void()> Captured = [this]() { static_cast<void>(this); };\n  // CHECK-MESSAGES: :[[@LINE-1]]:36: warning: 'this' captured by a lambda and stored in a class member variable;\n  // CHECK-MESSAGES: :[[@LINE-2]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\nstruct BasicField2 {\n  std::function<void()> Captured{[this]() { static_cast<void>(this); }};\n  // CHECK-MESSAGES: :[[@LINE-1]]:34: warning: 'this' captured by a lambda and stored in a class member variable;\n  // CHECK-MESSAGES: :[[@LINE-2]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct NotCaptureThis {\n  NotCaptureThis(int V) : Captured([V]() { static_cast<void>(V); }) {}\n  std::function<void()> Captured;\n};\n\nstruct AssignCapture {\n  AssignCapture() : Captured([Self = this]() { static_cast<void>(Self); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:30: warning: 'this' captured by a lambda and stored in a class member variable;\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct DeleteMoveAndCopy {\n  DeleteMoveAndCopy() : Captured([this]() { static_cast<void>(this); }) {}\n  DeleteMoveAndCopy(DeleteMoveAndCopy const&) = delete;\n  DeleteMoveAndCopy(DeleteMoveAndCopy &&) = delete;\n  DeleteMoveAndCopy& operator=(DeleteMoveAndCopy const&) = delete;\n  DeleteMoveAndCopy& operator=(DeleteMoveAndCopy &&) = delete;\n  std::function<void()> Captured;\n};\n\nstruct DeleteCopyImplicitDisabledMove {\n  DeleteCopyImplicitDisabledMove() : Captured([this]() { static_cast<void>(this); }) {}\n  DeleteCopyImplicitDisabledMove(DeleteCopyImplicitDisabledMove const&) = delete;\n  DeleteCopyImplicitDisabledMove& operator=(DeleteCopyImplicitDisabledMove const&) = delete;\n  std::function<void()> Captured;\n};\n\nstruct DeleteCopyDefaultMove {\n  DeleteCopyDefaultMove() : Captured([this]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:38: warning: 'this' captured by a lambda and stored in a class member variable;\n  DeleteCopyDefaultMove(DeleteCopyDefaultMove const&) = delete;\n  DeleteCopyDefaultMove(DeleteCopyDefaultMove &&) = default;\n  DeleteCopyDefaultMove& operator=(DeleteCopyDefaultMove const&) = delete;\n  DeleteCopyDefaultMove& operator=(DeleteCopyDefaultMove &&) = default;\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct DeleteMoveDefaultCopy {\n  DeleteMoveDefaultCopy() : Captured([this]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:38: warning: 'this' captured by a lambda and stored in a class member variable;\n  DeleteMoveDefaultCopy(DeleteMoveDefaultCopy const&) = default;\n  DeleteMoveDefaultCopy(DeleteMoveDefaultCopy &&) = delete;\n  DeleteMoveDefaultCopy& operator=(DeleteMoveDefaultCopy const&) = default;\n  DeleteMoveDefaultCopy& operator=(DeleteMoveDefaultCopy &&) = delete;\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct DeleteCopyBase {\n  DeleteCopyBase() = default;\n  DeleteCopyBase(DeleteCopyBase const&) = delete;\n  DeleteCopyBase(DeleteCopyBase &&) = default;\n  DeleteCopyBase& operator=(DeleteCopyBase const&) = delete;\n  DeleteCopyBase& operator=(DeleteCopyBase &&) = default;\n};\n\nstruct DeleteMoveBase {\n  DeleteMoveBase() = default;\n  DeleteMoveBase(DeleteMoveBase const&) = default;\n  DeleteMoveBase(DeleteMoveBase &&) = delete;\n  DeleteMoveBase& operator=(DeleteMoveBase const&) = default;\n  DeleteMoveBase& operator=(DeleteMoveBase &&) = delete;\n};\n\nstruct DeleteCopyMoveBase : DeleteCopyBase, DeleteMoveBase {};\n\nstruct InheritDeleteCopy : DeleteCopyBase {\n  InheritDeleteCopy() : DeleteCopyBase{}, Captured([this]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:52: warning: 'this' captured by a lambda and stored in a class member variable;\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\nstruct InheritDeleteMove : DeleteMoveBase {\n  InheritDeleteMove() : DeleteMoveBase{}, Captured([this]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:52: warning: 'this' captured by a lambda and stored in a class member variable;\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\nstruct InheritDeleteCopyMove : DeleteCopyMoveBase {\n  InheritDeleteCopyMove() : DeleteCopyMoveBase{}, Captured([this]() { static_cast<void>(this); }) {}\n  std::function<void()> Captured;\n};\n\nstruct PrivateCopyMoveBase {\n// It is how to disable copy and move in C++03\n  PrivateCopyMoveBase() = default;\nprivate:\n  PrivateCopyMoveBase(PrivateCopyMoveBase const&) = default;\n  PrivateCopyMoveBase(PrivateCopyMoveBase &&) = default;\n  PrivateCopyMoveBase& operator=(PrivateCopyMoveBase const&) = default;\n  PrivateCopyMoveBase& operator=(PrivateCopyMoveBase &&) = default;\n};\nstruct InheritPrivateCopyMove : PrivateCopyMoveBase {\n  InheritPrivateCopyMove() : PrivateCopyMoveBase{}, Captured([this]() { static_cast<void>(this); }) {}\n  std::function<void()> Captured;\n};\n\nstruct UserDefinedCopyMove {\n  UserDefinedCopyMove() : Captured([this]() { static_cast<void>(this); }) {}\n  UserDefinedCopyMove(UserDefinedCopyMove const&);\n  UserDefinedCopyMove(UserDefinedCopyMove &&);\n  UserDefinedCopyMove& operator=(UserDefinedCopyMove const&);\n  UserDefinedCopyMove& operator=(UserDefinedCopyMove &&);\n  std::function<void()> Captured;\n};\n\nstruct UserDefinedCopyMoveWithDefault1 {\n  UserDefinedCopyMoveWithDefault1() : Captured([this]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:48: warning: 'this' captured by a lambda and stored in a class member variable;\n  UserDefinedCopyMoveWithDefault1(UserDefinedCopyMoveWithDefault1 const&) = default;\n  UserDefinedCopyMoveWithDefault1(UserDefinedCopyMoveWithDefault1 &&);\n  UserDefinedCopyMoveWithDefault1& operator=(UserDefinedCopyMoveWithDefault1 const&);\n  UserDefinedCopyMoveWithDefault1& operator=(UserDefinedCopyMoveWithDefault1 &&);\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct UserDefinedCopyMoveWithDefault2 {\n  UserDefinedCopyMoveWithDefault2() : Captured([this]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:48: warning: 'this' captured by a lambda and stored in a class member variable;\n  UserDefinedCopyMoveWithDefault2(UserDefinedCopyMoveWithDefault2 const&);\n  UserDefinedCopyMoveWithDefault2(UserDefinedCopyMoveWithDefault2 &&) = default;\n  UserDefinedCopyMoveWithDefault2& operator=(UserDefinedCopyMoveWithDefault2 const&);\n  UserDefinedCopyMoveWithDefault2& operator=(UserDefinedCopyMoveWithDefault2 &&);\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct UserDefinedCopyMoveWithDefault3 {\n  UserDefinedCopyMoveWithDefault3() : Captured([this]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:48: warning: 'this' captured by a lambda and stored in a class member variable;\n  UserDefinedCopyMoveWithDefault3(UserDefinedCopyMoveWithDefault3 const&);\n  UserDefinedCopyMoveWithDefault3(UserDefinedCopyMoveWithDefault3 &&);\n  UserDefinedCopyMoveWithDefault3& operator=(UserDefinedCopyMoveWithDefault3 const&) = default;\n  UserDefinedCopyMoveWithDefault3& operator=(UserDefinedCopyMoveWithDefault3 &&);\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct UserDefinedCopyMoveWithDefault4 {\n  UserDefinedCopyMoveWithDefault4() : Captured([this]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:48: warning: 'this' captured by a lambda and stored in a class member variable;\n  UserDefinedCopyMoveWithDefault4(UserDefinedCopyMoveWithDefault4 const&);\n  UserDefinedCopyMoveWithDefault4(UserDefinedCopyMoveWithDefault4 &&);\n  UserDefinedCopyMoveWithDefault4& operator=(UserDefinedCopyMoveWithDefault4 const&);\n  UserDefinedCopyMoveWithDefault4& operator=(UserDefinedCopyMoveWithDefault4 &&) = default;\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct CustomFunctionWrapper {\n  CustomFunctionWrapper() : Captured([this]() { static_cast<void>(this); }) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:38: warning: 'this' captured by a lambda and stored in a class member variable;\n  Fn Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: note: class member of type 'Fn' that stores captured 'this'\n};\n\nstruct BindConstructor {\n  BindConstructor() : Captured(std::bind(&BindConstructor::method, this)) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:32: warning: 'this' captured by a 'std::bind' call and stored in a class member variable;\n  void method() {}\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct BindField1 {\n  void method() {}\n  std::function<void()> Captured = std::bind(&BindField1::method, this);\n  // CHECK-MESSAGES: :[[@LINE-1]]:36: warning: 'this' captured by a 'std::bind' call and stored in a class member variable;\n  // CHECK-MESSAGES: :[[@LINE-2]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct BindField2 {\n  void method() {}\n  std::function<void()> Captured{std::bind(&BindField2::method, this)};\n  // CHECK-MESSAGES: :[[@LINE-1]]:34: warning: 'this' captured by a 'std::bind' call and stored in a class member variable;\n  // CHECK-MESSAGES: :[[@LINE-2]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct BindCustom {\n  BindCustom() : Captured(Bind(&BindCustom::method, this)) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: 'this' captured by a 'Bind' call and stored in a class member variable;\n  void method() {}\n  std::function<void()> Captured;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: note: class member of type 'std::function<void (void)>' that stores captured 'this'\n};\n\nstruct BindNotCapturingThis {\n  void method(int) {}\n  BindNotCapturingThis(int V) : Captured(std::bind(&BindNotCapturingThis::method, V)) {}\n  std::function<void()> Captured;\n};\n\nstruct DeletedCopyMoveWithBind {\n  DeletedCopyMoveWithBind() : Captured(std::bind(&DeletedCopyMoveWithBind::method, this)) {}\n  DeletedCopyMoveWithBind(DeletedCopyMoveWithBind const&) = delete;\n  DeletedCopyMoveWithBind(DeletedCopyMoveWithBind &&) = delete;\n  DeletedCopyMoveWithBind& operator=(DeletedCopyMoveWithBind const&) = delete;\n  DeletedCopyMoveWithBind& operator=(DeletedCopyMoveWithBind &&) = delete;\n  void method() {}\n  std::function<void()> Captured;\n};"
    }
  ]
}