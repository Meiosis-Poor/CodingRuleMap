{
  "name": "NarrowingConversions",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-narrowing-conversions",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 618,
  "branches": 79,
  "apis": 405,
  "test": [
    {
      "description": null,
      "expected-problems": 47,
      "expected-linenumbers": [
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        43,
        87,
        89,
        96,
        98,
        103,
        109,
        159,
        161,
        163,
        165,
        168,
        170,
        172,
        174,
        176,
        182,
        184,
        189,
        191,
        193,
        205,
        207,
        225,
        227,
        232,
        234,
        247,
        249,
        252,
        253,
        259,
        262,
        278,
        281,
        284,
        355
      ],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-narrowing-conversions %t \\\n// RUN: -config=\"{CheckOptions: { \\\n// RUN:   bugprone-narrowing-conversions.WarnOnFloatingPointNarrowingConversion: false}}\" \\\n// RUN: -- -target x86_64-unknown-linux -fsigned-char\n\nfloat ceil(float);\nnamespace std {\ndouble ceil(double);\nlong double floor(long double);\n} // namespace std\n\nnamespace floats {\n\nstruct ConvertsToFloat {\n  operator float() const { return 0.5f; }\n};\n\nfloat operator\"\" _float(unsigned long long);\n\nvoid narrow_fp_to_int_not_ok(double d) {\n  int i = 0;\n  i = d;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'double' to 'int' [bugprone-narrowing-conversions]\n  i = 0.5f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from constant 'float' to 'int' [bugprone-narrowing-conversions]\n  i = static_cast<float>(d);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'float' to 'int' [bugprone-narrowing-conversions]\n  i = ConvertsToFloat();\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'float' to 'int' [bugprone-narrowing-conversions]\n  i = 15_float;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'float' to 'int' [bugprone-narrowing-conversions]\n  i += d;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: narrowing conversion from 'double' to 'int' [bugprone-narrowing-conversions]\n  i += 0.5;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: narrowing conversion from constant 'double' to 'int' [bugprone-narrowing-conversions]\n  i += 0.5f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: narrowing conversion from constant 'float' to 'int' [bugprone-narrowing-conversions]\n  i *= 0.5f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: narrowing conversion from constant 'float' to 'int' [bugprone-narrowing-conversions]\n  i /= 0.5f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: narrowing conversion from constant 'float' to 'int' [bugprone-narrowing-conversions]\n  i += (double)0.5f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: narrowing conversion from constant 'double' to 'int' [bugprone-narrowing-conversions]\n  i += 2.0;\n  i += 2.0f;\n}\n\ndouble operator\"\" _double(unsigned long long);\n\nfloat narrow_double_to_float_return() {\n  return 0.5; // [dcl.init.list] 7.2 : in-range fp constant to narrower float is not a narrowing.\n}\n\nvoid narrow_double_to_float_ok(double d) {\n  float f;\n  f = d;\n  f = 15_double;\n}\n\nvoid narrow_fp_constants() {\n  float f;\n  f = 0.5; // [dcl.init.list] 7.2 : in-range fp constant to narrower float is not a narrowing.\n\n  f = __builtin_huge_valf();  // max float is not narrowing.\n  f = -__builtin_huge_valf(); // -max float is not narrowing.\n  f = __builtin_inff();       // float infinity is not narrowing.\n  f = __builtin_nanf(\"0\");    // float NaN is not narrowing.\n\n  f = __builtin_huge_val();  // max double is not within-range of float.\n  f = -__builtin_huge_val(); // -max double is not within-range of float.\n  f = __builtin_inf();       // double infinity is not within-range of float.\n  f = __builtin_nan(\"0\");    // double NaN is not narrowing.\n}\n\nvoid narrow_double_to_float_not_ok_binary_ops(double d) {\n  float f;\n  f += 0.5;          // [dcl.init.list] 7.2 : in-range fp constant to narrower float is not a narrowing.\n  f += 2.0;          // [dcl.init.list] 7.2 : in-range fp constant to narrower float is not a narrowing.\n  f *= 0.5;          // [dcl.init.list] 7.2 : in-range fp constant to narrower float is not a narrowing.\n  f /= 0.5;          // [dcl.init.list] 7.2 : in-range fp constant to narrower float is not a narrowing.\n  f += (double)0.5f; // [dcl.init.list] 7.2 : in-range fp constant to narrower float is not a narrowing.\n  f += d;            // We do not warn about floating point narrowing by default.\n}\n\nvoid narrow_fp_constant_to_bool_not_ok() {\n  bool b1 = 1.0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: narrowing conversion from constant 'double' to 'bool' [bugprone-narrowing-conversions]\n  bool b2 = 1.0f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: narrowing conversion from constant 'float' to 'bool' [bugprone-narrowing-conversions]\n}\n\nvoid narrow_integer_to_floating() {\n  {\n    long long ll; // 64 bits\n    float f = ll; // doesn't fit in 24 bits\n    // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: narrowing conversion from 'long long' to 'float' [bugprone-narrowing-conversions]\n    double d = ll; // doesn't fit in 53 bits.\n    // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: narrowing conversion from 'long long' to 'double' [bugprone-narrowing-conversions]\n  }\n  {\n    int i;       // 32 bits\n    float f = i; // doesn't fit in 24 bits\n    // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions]\n    double d = i; // fits in 53 bits.\n  }\n  {\n    short n1, n2;\n    float f = n1 + n2; // 'n1 + n2' is of type 'int' because of integer rules\n    // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions]\n  }\n  {\n    short s;      // 16 bits\n    float f = s;  // fits in 24 bits\n    double d = s; // fits in 53 bits.\n  }\n}\n\nvoid narrow_integer_to_unsigned_integer_is_ok() {\n  char c;\n  short s;\n  int i;\n  long l;\n  long long ll;\n\n  unsigned char uc;\n  unsigned short us;\n  unsigned int ui;\n  unsigned long ul;\n  unsigned long long ull;\n\n  ui = c;\n  uc = s;\n  uc = i;\n  uc = l;\n  uc = ll;\n\n  uc = uc;\n  uc = us;\n  uc = ui;\n  uc = ul;\n  uc = ull;\n}\n\nvoid narrow_integer_to_signed_integer_is_not_ok() {\n  char c;\n  short s;\n  int i;\n  long l;\n  long long ll;\n\n  unsigned char uc;\n  unsigned short us;\n  unsigned int ui;\n  unsigned long ul;\n  unsigned long long ull;\n\n  c = c;\n  c = s;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'short' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n  c = i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n  c = l;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'long' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n  c = ll;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'long long' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n\n  c = uc;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'unsigned char' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n  c = us;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'unsigned short' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n  c = ui;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'unsigned int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n  c = ul;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'unsigned long' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n  c = ull;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'unsigned long long' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n\n  i = c;\n  i = s;\n  i = i;\n  i = l;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]\n  i = ll;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'long long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]\n\n  i = uc;\n  i = us;\n  i = ui;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]\n  i = ul;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'unsigned long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]\n  i = ull;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'unsigned long long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]\n\n  ll = c;\n  ll = s;\n  ll = i;\n  ll = l;\n  ll = ll;\n\n  ll = uc;\n  ll = us;\n  ll = ui;\n  ll = ul;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: narrowing conversion from 'unsigned long' to signed type 'long long' is implementation-defined [bugprone-narrowing-conversions]\n  ll = ull;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: narrowing conversion from 'unsigned long long' to signed type 'long long' is implementation-defined [bugprone-narrowing-conversions]\n}\n\nvoid narrow_constant_to_unsigned_integer_is_ok() {\n  unsigned char uc1 = 0;\n  unsigned char uc2 = 255;\n  unsigned char uc3 = -1;  // unsigned dst type is well defined.\n  unsigned char uc4 = 256; // unsigned dst type is well defined.\n  unsigned short us1 = 0;\n  unsigned short us2 = 65535;\n  unsigned short us3 = -1;    // unsigned dst type is well defined.\n  unsigned short us4 = 65536; // unsigned dst type is well defined.\n}\n\nvoid narrow_constant_to_signed_integer_is_not_ok() {\n  char c1 = -128;\n  char c2 = 127;\n  char c3 = -129;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: narrowing conversion from constant value -129 (0xFFFFFF7F) of type 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n  char c4 = 128;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: narrowing conversion from constant value 128 (0x00000080) of type 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n\n  short s1 = -32768;\n  short s2 = 32767;\n  short s3 = -32769;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: narrowing conversion from constant value -32769 (0xFFFF7FFF) of type 'int' to signed type 'short' is implementation-defined [bugprone-narrowing-conversions]\n  short s4 = 32768;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: narrowing conversion from constant value 32768 (0x00008000) of type 'int' to signed type 'short' is implementation-defined [bugprone-narrowing-conversions]\n}\n\nvoid narrow_conditional_operator_contant_to_unsigned_is_ok(bool b) {\n  // conversion to unsigned dst type is well defined.\n  unsigned char c1 = b ? 1 : 0;\n  unsigned char c2 = b ? 1 : 256;\n  unsigned char c3 = b ? -1 : 0;\n}\n\nvoid narrow_conditional_operator_contant_to_signed_is_not_ok(bool b) {\n  char uc1 = b ? 1 : 0;\n  char uc2 = b ? 1 : 128;\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: narrowing conversion from constant value 128 (0x00000080) of type 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n  char uc3 = b ? -129 : 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:18: warning: narrowing conversion from constant value -129 (0xFFFFFF7F) of type 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions]\n  unsigned long long ysize;\n  long long mirror = b ? -1 : ysize - 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: narrowing conversion from constant value 18446744073709551615 (0xFFFFFFFFFFFFFFFF) of type 'unsigned long long' to signed type 'long long' is implementation-defined [bugprone-narrowing-conversions]\n  // CHECK-MESSAGES: :[[@LINE-2]]:37: warning: narrowing conversion from 'unsigned long long' to signed type 'long long' is implementation-defined [bugprone-narrowing-conversions]\n}\n\nvoid narrow_constant_to_floating_point() {\n  float f_ok = 1ULL << 24;              // fits in 24 bits mantissa.\n  float f_not_ok = (1ULL << 24) + 1ULL; // doesn't fit in 24 bits mantissa.\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: narrowing conversion from constant value 16777217 of type 'unsigned long long' to 'float' [bugprone-narrowing-conversions]\n  double d_ok = 1ULL << 53;              // fits in 53 bits mantissa.\n  double d_not_ok = (1ULL << 53) + 1ULL; // doesn't fit in 53 bits mantissa.\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: narrowing conversion from constant value 9007199254740993 of type 'unsigned long long' to 'double' [bugprone-narrowing-conversions]\n}\n\nvoid casting_integer_to_bool_is_ok() {\n  int i;\n  while (i) {\n  }\n  for (; i;) {\n  }\n  if (i) {\n  }\n}\n\nvoid casting_float_to_bool_is_not_ok() {\n  float f;\n  while (f) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: narrowing conversion from 'float' to 'bool' [bugprone-narrowing-conversions]\n  }\n  for (; f;) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: narrowing conversion from 'float' to 'bool' [bugprone-narrowing-conversions]\n  }\n  if (f) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'float' to 'bool' [bugprone-narrowing-conversions]\n  }\n}\n\nvoid legitimate_comparison_do_not_warn(unsigned long long size) {\n  for (int i = 0; i < size; ++i) {\n  }\n}\n\nvoid ok(double d) {\n  int i = 0;\n  i = 1;\n  i = static_cast<int>(0.5);\n  i = static_cast<int>(d);\n  i = std::ceil(0.5);\n  i = ::std::floor(0.5);\n  {\n    using std::ceil;\n    i = ceil(0.5f);\n  }\n  i = ceil(0.5f);\n}\n\nvoid ok_binary_ops(double d) {\n  int i = 0;\n  i += 1;\n  i += static_cast<int>(0.5);\n  i += static_cast<int>(d);\n  i += (int)d;\n  i += std::ceil(0.5);\n  i += ::std::floor(0.5);\n  {\n    using std::ceil;\n    i += ceil(0.5f);\n  }\n  i += ceil(0.5f);\n}\n\n// We're bailing out in templates and macros.\ntemplate <typename T1, typename T2>\nvoid f(T1 one, T2 two) {\n  one += two;\n}\n\nvoid template_context() {\n  f(1, 2);\n  f(1, .5f);\n  f(1, .5);\n  f(1, .5l);\n}\n\n#define DERP(i, j) (i += j)\n\nvoid macro_context() {\n  int i = 0;\n  DERP(i, 2);\n  DERP(i, .5f);\n  DERP(i, .5);\n  DERP(i, .5l);\n}\n\n// We understand typedefs.\nvoid typedef_context() {\n  typedef long long myint64_t;\n  int i;\n  myint64_t i64;\n\n  i64 = i64; // Okay, no conversion.\n  i64 = i;   // Okay, no narrowing.\n\n  i = i64;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: narrowing conversion from 'myint64_t' (aka 'long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions]\n}\n\n} // namespace floats"
    }
  ]
}