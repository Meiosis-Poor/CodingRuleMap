{
  "name": "SignedCharMisuse",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-signed-char-misuse",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 169,
  "branches": 19,
  "apis": 115,
  "test": [
    {
      "description": null,
      "expected-problems": 13,
      "expected-linenumbers": [
        19,
        28,
        37,
        46,
        55,
        63,
        70,
        77,
        84,
        91,
        98,
        106,
        110
      ],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-signed-char-misuse %t\n\n///////////////////////////////////////////////////////////////////\n/// Test cases correctly caught by the check.\n\ntypedef __SIZE_TYPE__ size_t;\n\nnamespace std {\ntemplate <typename T, size_t N>\nstruct array {\n  T &operator[](size_t n);\n  T &at(size_t n);\n};\n} // namespace std\n\nint SimpleVarDeclaration() {\n  signed char CCharacter = -5;\n  int NCharacter = CCharacter;\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]\n\n  return NCharacter;\n}\n\nint SimpleAssignment() {\n  signed char CCharacter = -5;\n  int NCharacter;\n  NCharacter = CCharacter;\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]\n\n  return NCharacter;\n}\n\nint CStyleCast() {\n  signed char CCharacter = -5;\n  int NCharacter;\n  NCharacter = (int)CCharacter;\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]\n\n  return NCharacter;\n}\n\nint StaticCast() {\n  signed char CCharacter = -5;\n  int NCharacter;\n  NCharacter = static_cast<int>(CCharacter);\n  // CHECK-MESSAGES: [[@LINE-1]]:33: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]\n\n  return NCharacter;\n}\n\nint FunctionalCast() {\n  signed char CCharacter = -5;\n  int NCharacter;\n  NCharacter = int(CCharacter);\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]\n\n  return NCharacter;\n}\n\nint NegativeConstValue() {\n  const signed char CCharacter = -5;\n  int NCharacter = CCharacter;\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]\n\n  return NCharacter;\n}\n\nint CharPointer(signed char *CCharacter) {\n  int NCharacter = *CCharacter;\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: 'signed char' to 'int' conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]\n\n  return NCharacter;\n}\n\nint SignedUnsignedCharEquality(signed char SCharacter) {\n  unsigned char USCharacter = 'a';\n  if (SCharacter == USCharacter) // CHECK-MESSAGES: [[@LINE]]:7: warning: comparison between 'signed char' and 'unsigned char' [bugprone-signed-char-misuse]\n    return 1;\n  return 0;\n}\n\nint SignedUnsignedCharIneqiality(signed char SCharacter) {\n  unsigned char USCharacter = 'a';\n  if (SCharacter != USCharacter) // CHECK-MESSAGES: [[@LINE]]:7: warning: comparison between 'signed char' and 'unsigned char' [bugprone-signed-char-misuse]\n    return 1;\n  return 0;\n}\n\nint CompareWithNonAsciiConstant(unsigned char USCharacter) {\n  const signed char SCharacter = -5;\n  if (USCharacter == SCharacter) // CHECK-MESSAGES: [[@LINE]]:7: warning: comparison between 'signed char' and 'unsigned char' [bugprone-signed-char-misuse]\n    return 1;\n  return 0;\n}\n\nint CompareWithUnsignedNonAsciiConstant(signed char SCharacter) {\n  const unsigned char USCharacter = 128;\n  if (USCharacter == SCharacter) // CHECK-MESSAGES: [[@LINE]]:7: warning: comparison between 'signed char' and 'unsigned char' [bugprone-signed-char-misuse]\n    return 1;\n  return 0;\n}\n\nint SignedCharCArraySubscript(signed char SCharacter) {\n  int Array[3] = {1, 2, 3};\n\n  return Array[static_cast<unsigned int>(SCharacter)]; // CHECK-MESSAGES: [[@LINE]]:42: warning: 'signed char' to 'unsigned int' conversion in array subscript; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]\n}\n\nint SignedCharSTDArraySubscript(std::array<int, 3> Array, signed char SCharacter) {\n  return Array[static_cast<unsigned int>(SCharacter)]; // CHECK-MESSAGES: [[@LINE]]:42: warning: 'signed char' to 'unsigned int' conversion in array subscript; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]\n}\n\n///////////////////////////////////////////////////////////////////\n/// Test cases correctly ignored by the check.\n\nint UnsignedCharCast() {\n  unsigned char CCharacter = 'a';\n  int NCharacter = CCharacter;\n\n  return NCharacter;\n}\n\nint PositiveConstValue() {\n  const signed char CCharacter = 5;\n  int NCharacter = CCharacter;\n\n  return NCharacter;\n}\n\n// singed char -> integer cast is not the direct child of declaration expression.\nint DescendantCast() {\n  signed char CCharacter = 'a';\n  int NCharacter = 10 + CCharacter;\n\n  return NCharacter;\n}\n\n// singed char -> integer cast is not the direct child of assignment expression.\nint DescendantCastAssignment() {\n  signed char CCharacter = 'a';\n  int NCharacter;\n  NCharacter = 10 + CCharacter;\n\n  return NCharacter;\n}\n\n// bool is an integer type in clang; make sure to ignore it.\nbool BoolVarDeclaration() {\n  signed char CCharacter = 'a';\n  bool BCharacter = CCharacter == 'b';\n\n  return BCharacter;\n}\n\n// bool is an integer type in clang; make sure to ignore it.\nbool BoolAssignment() {\n  signed char CCharacter = 'a';\n  bool BCharacter;\n  BCharacter = CCharacter == 'b';\n\n  return BCharacter;\n}\n\n// char is an integer type in clang; make sure to ignore it.\nunsigned char CharToCharCast() {\n  signed char SCCharacter = 'a';\n  unsigned char USCharacter;\n  USCharacter = SCCharacter;\n\n  return USCharacter;\n}\n\nint FixComparisonWithSignedCharCast(signed char SCharacter) {\n  unsigned char USCharacter = 'a';\n  if (SCharacter == static_cast<signed char>(USCharacter))\n    return 1;\n  return 0;\n}\n\nint FixComparisonWithUnSignedCharCast(signed char SCharacter) {\n  unsigned char USCharacter = 'a';\n  if (static_cast<unsigned char>(SCharacter) == USCharacter)\n    return 1;\n  return 0;\n}\n\n// Make sure we don't catch other type of char comparison.\nint SameCharTypeComparison(signed char SCharacter) {\n  signed char SCharacter2 = 'a';\n  if (SCharacter == SCharacter2)\n    return 1;\n  return 0;\n}\n\n// Make sure we don't catch other type of char comparison.\nint SameCharTypeComparison2(unsigned char USCharacter) {\n  unsigned char USCharacter2 = 'a';\n  if (USCharacter == USCharacter2)\n    return 1;\n  return 0;\n}\n\n// Make sure we don't catch integer - char comparison.\nint CharIntComparison(signed char SCharacter) {\n  int ICharacter = 10;\n  if (SCharacter == ICharacter)\n    return 1;\n  return 0;\n}\n\nint CompareWithAsciiLiteral(unsigned char USCharacter) {\n  if (USCharacter == 'x') // no warning\n    return 1;\n  return 0;\n}\n\nint CompareWithAsciiConstant(unsigned char USCharacter) {\n  const signed char SCharacter = 'a';\n  if (USCharacter == SCharacter)\n    return 1;\n  return 0;\n}\n\nint CompareWithUnsignedAsciiConstant(signed char SCharacter) {\n  const unsigned char USCharacter = 'a';\n  if (USCharacter == SCharacter)\n    return 1;\n  return 0;\n}\n\nint UnsignedCharCArraySubscript(unsigned char USCharacter) {\n  int Array[3] = {1, 2, 3};\n\n  return Array[static_cast<unsigned int>(USCharacter)];\n}\n\nint CastedCArraySubscript(signed char SCharacter) {\n  int Array[3] = {1, 2, 3};\n\n  return Array[static_cast<unsigned char>(SCharacter)];\n}\n\nint UnsignedCharSTDArraySubscript(std::array<int, 3> Array, unsigned char USCharacter) {\n  return Array[static_cast<unsigned int>(USCharacter)];\n}\n\nint CastedSTDArraySubscript(std::array<int, 3> Array, signed char SCharacter) {\n  return Array[static_cast<unsigned char>(SCharacter)];\n}"
    }
  ]
}