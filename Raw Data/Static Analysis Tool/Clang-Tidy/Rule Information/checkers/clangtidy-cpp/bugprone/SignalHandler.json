{
  "name": "SignalHandler",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-signal-handler",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 563,
  "branches": 45,
  "apis": 182,
  "test": [
    {
      "description": null,
      "expected-problems": 74,
      "expected-linenumbers": [
        35,
        36,
        39,
        41,
        43,
        104,
        105,
        106,
        108,
        109,
        110,
        112,
        113,
        114,
        116,
        117,
        118,
        121,
        122,
        123,
        125,
        126,
        127,
        130,
        131,
        132,
        136,
        137,
        138,
        141,
        142,
        143,
        147,
        148,
        149,
        150,
        151,
        152,
        155,
        156,
        157,
        159,
        160,
        161,
        163,
        164,
        165,
        167,
        168,
        169,
        171,
        172,
        173,
        176,
        177,
        178,
        180,
        181,
        182,
        184,
        185,
        186,
        188,
        189,
        190,
        192,
        193,
        194,
        211,
        212,
        213,
        214,
        219,
        220
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++14 %s bugprone-signal-handler %t -- -- -isystem %clang_tidy_headers -isystem %S/Inputs/signal-handler -target x86_64-unknown-unknown\n// FIXME: Fix the checker to work in C++17 or later mode.\n#include \"stdcpp.h\"\n#include \"stdio.h\"\n\n// Functions called \"signal\" that are different from the system version.\ntypedef void (*callback_t)(int);\nvoid signal(int, callback_t, int);\nnamespace ns {\nvoid signal(int, callback_t);\n}\n\nextern \"C\" void handler_unsafe(int) {\n  printf(\"xxx\");\n}\n\nextern \"C\" void handler_unsafe_1(int) {\n  printf(\"xxx\");\n}\n\nnamespace test_invalid_handler {\n\nvoid handler_non_extern_c(int) {\n  printf(\"xxx\");\n}\n\nstruct A {\n  static void handler_member(int) {\n    printf(\"xxx\");\n  }\n};\n\nvoid test() {\n  std::signal(SIGINT, handler_unsafe_1);\n  // CHECK-MESSAGES: :[[@LINE-17]]:3: warning: standard function 'printf' may not be asynchronous-safe; calling it from a signal handler may be dangerous [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:23: note: function 'handler_unsafe_1' registered here as signal handler\n\n  std::signal(SIGINT, handler_non_extern_c);\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: functions without C linkage are not allowed as signal handler (until C++17) [bugprone-signal-handler]\n  std::signal(SIGINT, A::handler_member);\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: functions without C linkage are not allowed as signal handler (until C++17) [bugprone-signal-handler]\n  std::signal(SIGINT, [](int) { printf(\"xxx\"); });\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: lambda function is not allowed as signal handler (until C++17) [bugprone-signal-handler]\n\n  // This case is (deliberately) not found by the checker.\n  std::signal(SIGINT, [](int) -> callback_t { return &handler_unsafe; }(1));\n}\n\n} // namespace test_invalid_handler\n\nnamespace test_non_standard_signal_call {\n\nstruct Signal {\n  static void signal(int, callback_t);\n};\n\nvoid test() {\n  // No diagnostics here. All these signal calls differ from the standard system one.\n  signal(SIGINT, handler_unsafe, 1);\n  ns::signal(SIGINT, handler_unsafe);\n  Signal::signal(SIGINT, handler_unsafe);\n  system_other::signal(SIGINT, handler_unsafe);\n}\n\n} // namespace test_non_standard_signal_call\n\nnamespace test_cpp_construct_in_handler {\n\nstruct Struct {\n  virtual ~Struct() {}\n  void f1();\n  int *begin();\n  int *end();\n  static void f2();\n};\nstruct Derived : public Struct {\n};\n\nstruct X {\n  X(int, float);\n};\n\nStruct *S_Global;\nconst Struct *S_GlobalConst;\n\nvoid f_non_extern_c() {\n}\n\nvoid f_default_arg(int P1 = 0) {\n}\n\nextern \"C\" void handler_cpp(int) {\n  using namespace ::test_cpp_construct_in_handler;\n\n  // These calls are not found as problems.\n  // (Called functions are not analyzed if the current function has already\n  // other problems.)\n  f_non_extern_c();\n  Struct::f2();\n  // 'auto' is not disallowed\n  auto Auto = 28u;\n\n  Struct S;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:10: remark: internally, the statement is parsed as a 'CXXConstructExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  S_Global->f1();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: remark: internally, the statement is parsed as a 'CXXMemberCallExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  const Struct &SRef = Struct();\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:24: remark: internally, the statement is parsed as a 'CXXBindTemporaryExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  X(3, 4.4);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: remark: internally, the statement is parsed as a 'CXXTemporaryObjectExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n\n  auto L = [](int i) { printf(\"%d\", i); };\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:12: remark: internally, the statement is parsed as a 'CXXConstructExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  L(2);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: remark: internally, the statement is parsed as a 'CXXOperatorCallExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n\n  try {\n    // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n    // CHECK-MESSAGES: :[[@LINE-2]]:3: remark: internally, the statement is parsed as a 'CXXTryStmt'\n    // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n    int A;\n  } catch (int) {\n  };\n  // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-3]]:5: remark: internally, the statement is parsed as a 'CXXCatchStmt'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n\n  throw(12);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: remark: internally, the statement is parsed as a 'CXXThrowExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n\n  for (int I : S) {\n  }\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-3]]:3: remark: internally, the statement is parsed as a 'CXXForRangeStmt'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  // CHECK-MESSAGES: :[[@LINE-5]]:14: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-6]]:14: remark: internally, the statement is parsed as a 'CXXMemberCallExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n\n  int Int = *(reinterpret_cast<int *>(&S));\n  // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:15: remark: internally, the statement is parsed as a 'CXXReinterpretCastExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  Int = static_cast<int>(12.34);\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:9: remark: internally, the statement is parsed as a 'CXXStaticCastExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  Derived *Der = dynamic_cast<Derived *>(S_Global);\n  // CHECK-MESSAGES: :[[@LINE-1]]:18: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:18: remark: internally, the statement is parsed as a 'CXXDynamicCastExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  Struct *SPtr = const_cast<Struct *>(S_GlobalConst);\n  // CHECK-MESSAGES: :[[@LINE-1]]:18: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:18: remark: internally, the statement is parsed as a 'CXXConstCastExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  Int = int(12.34);\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:9: remark: internally, the statement is parsed as a 'CXXFunctionalCastExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n\n  int *IPtr = new int[10];\n  // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:15: remark: internally, the statement is parsed as a 'CXXNewExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  delete[] IPtr;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: remark: internally, the statement is parsed as a 'CXXDeleteExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  IPtr = nullptr;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:10: remark: internally, the statement is parsed as a 'CXXNullPtrLiteralExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  bool Bool = true;\n  // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:15: remark: internally, the statement is parsed as a 'CXXBoolLiteralExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n  f_default_arg();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: remark: internally, the statement is parsed as a 'CXXDefaultArgExpr'\n  // CHECK-MESSAGES: :198:23: note: function 'handler_cpp' registered here as signal handler\n}\n\nvoid test() {\n  std::signal(SIGINT, handler_cpp);\n}\n\n} // namespace test_cpp_construct_in_handler\n\nnamespace test_cpp_indirect {\n\nvoid non_extern_c() {\n  int *P = nullptr;\n}\n\nextern \"C\" void call_cpp_indirect() {\n  int *P = nullptr;\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: C++-only construct is not allowed in signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE-2]]:12: remark: internally, the statement is parsed as a 'CXXNullPtrLiteralExpr'\n  // CHECK-MESSAGES: :[[@LINE+8]]:3: note: function 'call_cpp_indirect' called here from 'handler_cpp_indirect'\n  // CHECK-MESSAGES: :[[@LINE+11]]:23: note: function 'handler_cpp_indirect' registered here as signal handler\n}\n\nextern \"C\" void handler_cpp_indirect(int) {\n  non_extern_c();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: functions without C linkage are not allowed as signal handler (until C++17) [bugprone-signal-handler]\n  // CHECK-MESSAGES: :[[@LINE+5]]:23: note: function 'handler_cpp_indirect' registered here as signal handler\n  call_cpp_indirect();\n}\n\nvoid test() {\n  std::signal(SIGINT, handler_cpp_indirect);\n}\n\n} // namespace test_cpp_indirect"
    }
  ]
}