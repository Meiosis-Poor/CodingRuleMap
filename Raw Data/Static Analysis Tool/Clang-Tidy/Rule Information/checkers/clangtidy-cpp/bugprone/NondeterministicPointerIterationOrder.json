{
  "name": "NondeterministicPointerIterationOrder",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-nondeterministic-pointer-iteration-order",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 77,
  "branches": 5,
  "apis": 59,
  "test": [
    {
      "description": null,
      "expected-problems": 10,
      "expected-linenumbers": [
        35,
        39,
        52,
        71,
        73,
        75,
        77,
        79,
        81,
        83
      ],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-nondeterministic-pointer-iteration-order %t -- -- -I%S -std=c++!4\n\n#include \"Inputs/system-header-simulator/sim_set\"\n#include \"Inputs/system-header-simulator/sim_unordered_set\"\n#include \"Inputs/system-header-simulator/sim_map\"\n#include \"Inputs/system-header-simulator/sim_unordered_map\"\n#include \"Inputs/system-header-simulator/sim_vector\"\n#include \"Inputs/system-header-simulator/sim_algorithm\"\n\ntemplate<class T>\nvoid f(T x);\n\nvoid PointerIteration() {\n  int a = 1, b = 2;\n  std::set<int> OrderedIntSet = {a, b};\n  std::set<int *> OrderedPtrSet = {&a, &b};\n  std::unordered_set<int> UnorderedIntSet = {a, b};\n  std::unordered_set<int *> UnorderedPtrSet = {&a, &b};\n  std::map<int, int> IntMap = { std::make_pair(a,a), std::make_pair(b,b) };\n  std::map<int*, int*> PtrMap = { std::make_pair(&a,&a), std::make_pair(&b,&b) };\n  std::unordered_map<int, int> IntUnorderedMap = { std::make_pair(a,a), std::make_pair(b,b) };\n  std::unordered_map<int*, int*> PtrUnorderedMap = { std::make_pair(&a,&a), std::make_pair(&b,&b) };\n\n  for (auto i : OrderedIntSet) // no-warning\n    f(i);\n\n  for (auto i : OrderedPtrSet) // no-warning\n    f(i);\n\n  for (auto i : UnorderedIntSet) // no-warning\n    f(i);\n\n  for (auto i : UnorderedPtrSet)\n    f(i);\n  // CHECK-MESSAGES: :[[@LINE-2]]:17: warning: iteration of pointers is nondeterministic\n\n  for (auto &i : UnorderedPtrSet)\n    f(i);\n  // CHECK-MESSAGES: :[[@LINE-2]]:18: warning: iteration of pointers is nondeterministic\n\n  for (auto &i : IntMap) // no-warning\n    f(i);\n\n  for (auto &i : PtrMap) // no-warning\n    f(i);\n\n  for (auto &i : IntUnorderedMap) // no-warning\n    f(i);\n\n  for (auto &i : PtrUnorderedMap)\n    f(i);\n  // CHECK-MESSAGES: :[[@LINE-2]]:18: warning: iteration of pointers is nondeterministic\n}\n\nbool g (int *x) { return true; }\nbool h (int x) { return true; }\n\nvoid PointerSorting() {\n  int a = 1, b = 2, c = 3;\n  std::vector<int> V1 = {a, b};\n  std::vector<int *> V2 = {&a, &b};\n\n  std::is_sorted(V1.begin(), V1.end());                    // no-warning\n  std::nth_element(V1.begin(), V1.begin() + 1, V1.end());  // no-warning\n  std::partial_sort(V1.begin(), V1.begin() + 1, V1.end()); // no-warning\n  std::sort(V1.begin(), V1.end());                         // no-warning\n  std::stable_sort(V1.begin(), V1.end());                  // no-warning\n  std::partition(V1.begin(), V1.end(), h);                 // no-warning\n  std::stable_partition(V1.begin(), V1.end(), h);          // no-warning\n  std::is_sorted(V2.begin(), V2.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: sorting pointers is nondeterministic\n  std::nth_element(V2.begin(), V2.begin() + 1, V2.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: sorting pointers is nondeterministic\n  std::partial_sort(V2.begin(), V2.begin() + 1, V2.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: sorting pointers is nondeterministic\n  std::sort(V2.begin(), V2.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: sorting pointers is nondeterministic\n  std::stable_sort(V2.begin(), V2.end());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: sorting pointers is nondeterministic\n  std::partition(V2.begin(), V2.end(), g);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: sorting pointers is nondeterministic\n  std::stable_partition(V2.begin(), V2.end(), g);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: sorting pointers is nondeterministic\n}"
    }
  ]
}