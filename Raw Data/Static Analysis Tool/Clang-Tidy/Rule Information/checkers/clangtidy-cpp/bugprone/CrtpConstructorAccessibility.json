{
  "name": "CrtpConstructorAccessibility",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-crtp-constructor-accessibility",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 178,
  "branches": 9,
  "apis": 97,
  "test": [
    {
      "description": null,
      "expected-problems": 20,
      "expected-linenumbers": [
        6,
        16,
        29,
        42,
        55,
        58,
        73,
        76,
        79,
        93,
        104,
        115,
        121,
        131,
        143,
        154,
        165,
        182,
        210,
        225
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++11-or-later %s bugprone-crtp-constructor-accessibility %t -- -- -fno-delayed-template-parsing\n\nnamespace class_implicit_ctor {\ntemplate <typename T>\nclass CRTP {};\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: the implicit default constructor of the CRTP is publicly accessible; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: CRTP() = default;\n// CHECK-FIXES: friend T;\n\nclass A : CRTP<A> {};\n} // namespace class_implicit_ctor\n\nnamespace class_unconstructible {\ntemplate <typename T>\nclass CRTP {\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: the CRTP cannot be constructed from the derived class; consider declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: friend T;\n    CRTP() = default;\n};\n\nclass A : CRTP<A> {};\n} // namespace class_unconstructible\n\nnamespace class_public_default_ctor {\ntemplate <typename T>\nclass CRTP {\npublic:\n    CRTP() = default;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: public constructor allows the CRTP to be constructed as a regular template class; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n    // CHECK-FIXES: private:{{[[:space:]]*}}CRTP() = default;{{[[:space:]]*}}public:\n    // CHECK-FIXES: friend T;\n};\n\nclass A : CRTP<A> {};\n} // namespace class_public_default_ctor\n\nnamespace class_public_user_provided_ctor {\ntemplate <typename T>\nclass CRTP {\npublic:\n    CRTP(int) {}\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: public constructor allows the CRTP to be constructed as a regular template class; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n    // CHECK-FIXES: private:{{[[:space:]]*}}CRTP(int) {}{{[[:space:]]*}}public:\n    // CHECK-FIXES: friend T;\n};\n\nclass A : CRTP<A> {};\n} // namespace class_public_user_provided_ctor\n\nnamespace class_public_multiple_user_provided_ctors {\ntemplate <typename T>\nclass CRTP {\npublic:\n    CRTP(int) {}\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: public constructor allows the CRTP to be constructed as a regular template class; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n    // CHECK-FIXES: private:{{[[:space:]]*}}CRTP(int) {}{{[[:space:]]*}}public:\n    CRTP(float) {}\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: public constructor allows the CRTP to be constructed as a regular template class; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n    // CHECK-FIXES: private:{{[[:space:]]*}}CRTP(float) {}{{[[:space:]]*}}public:\n    \n    // CHECK-FIXES: friend T;\n    // CHECK-FIXES: friend T;\n};\n\nclass A : CRTP<A> {};\n} // namespace class_public_multiple_user_provided_ctors\n\nnamespace class_protected_ctors {\ntemplate <typename T>\nclass CRTP {\nprotected:\n    CRTP(int) {}\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: protected constructor allows the CRTP to be inherited from as a regular template class; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n    // CHECK-FIXES: private:{{[[:space:]]*}}CRTP(int) {}{{[[:space:]]*}}protected:\n    CRTP() = default;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: protected constructor allows the CRTP to be inherited from as a regular template class; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n    // CHECK-FIXES: private:{{[[:space:]]*}}CRTP() = default;{{[[:space:]]*}}protected:\n    CRTP(float) {}\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: protected constructor allows the CRTP to be inherited from as a regular template class; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n    // CHECK-FIXES: private:{{[[:space:]]*}}CRTP(float) {}{{[[:space:]]*}}protected:\n    \n    // CHECK-FIXES: friend T;\n    // CHECK-FIXES: friend T;\n    // CHECK-FIXES: friend T;\n};\n\nclass A : CRTP<A> {};\n} // namespace class_protected_ctors\n\nnamespace struct_implicit_ctor {\ntemplate <typename T>\nstruct CRTP {};\n// CHECK-MESSAGES: :[[@LINE-1]]:8: warning: the implicit default constructor of the CRTP is publicly accessible; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: private:{{[[:space:]]*}}CRTP() = default;{{[[:space:]]*}}public:\n// CHECK-FIXES: friend T;\n\nclass A : CRTP<A> {};\n} // namespace struct_implicit_ctor\n\nnamespace struct_default_ctor {\ntemplate <typename T>\nstruct CRTP {\n    CRTP() = default;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: public constructor allows the CRTP to be constructed as a regular template class; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n    // CHECK-FIXES: private:{{[[:space:]]*}}CRTP() = default;{{[[:space:]]*}}public:\n    // CHECK-FIXES: friend T;\n};\n\nclass A : CRTP<A> {};\n} // namespace struct_default_ctor\n\nnamespace same_class_multiple_crtps {\ntemplate <typename T>\nstruct CRTP {};\n// CHECK-MESSAGES: :[[@LINE-1]]:8: warning: the implicit default constructor of the CRTP is publicly accessible; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: private:{{[[:space:]]*}}CRTP() = default;{{[[:space:]]*}}public:\n// CHECK-FIXES: friend T;\n\ntemplate <typename T>\nstruct CRTP2 {};\n// CHECK-MESSAGES: :[[@LINE-1]]:8: warning: the implicit default constructor of the CRTP is publicly accessible; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: private:{{[[:space:]]*}}CRTP2() = default;{{[[:space:]]*}}public:\n// CHECK-FIXES: friend T;\n\nclass A : CRTP<A>, CRTP2<A> {};\n} // namespace same_class_multiple_crtps\n\nnamespace same_crtp_multiple_classes {\ntemplate <typename T>\nclass CRTP {\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: the CRTP cannot be constructed from the derived class; consider declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: friend T;\n    CRTP() = default;\n};\n\nclass A : CRTP<A> {};\nclass B : CRTP<B> {};\n} // namespace same_crtp_multiple_classes\n\nnamespace crtp_template {\ntemplate <typename T, typename U>\nclass CRTP {\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: the CRTP cannot be constructed from the derived class; consider declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: friend U;\n    CRTP() = default;\n};\n\nclass A : CRTP<int, A> {};\n} // namespace crtp_template\n\nnamespace crtp_template2 {\ntemplate <typename T, typename U>\nclass CRTP {\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: the CRTP cannot be constructed from the derived class; consider declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: friend T;\n    CRTP() = default;\n};\n\nclass A : CRTP<A, A> {};\n} // namespace crtp_template2\n\nnamespace template_derived {\ntemplate <typename T>\nclass CRTP {};\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: the implicit default constructor of the CRTP is publicly accessible; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: CRTP() = default;\n// CHECK-FIXES: friend T;\n\ntemplate<typename T>\nclass A : CRTP<A<T>> {};\n\n// FIXME: Ideally the warning should be triggered without instantiation.\nvoid foo() {\n  A<int> A;\n  (void) A;\n}\n} // namespace template_derived\n\nnamespace template_derived_explicit_specialization {\ntemplate <typename T>\nclass CRTP {};\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: the implicit default constructor of the CRTP is publicly accessible; consider making it private and declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: CRTP() = default;\n// CHECK-FIXES: friend T;\n\ntemplate<typename T>\nclass A : CRTP<A<T>> {};\n\ntemplate<>\nclass A<int> : CRTP<A<int>> {};\n} // namespace template_derived_explicit_specialization\n\nnamespace explicit_derived_friend {\nclass A;\n\ntemplate <typename T>\nclass CRTP {\n    CRTP() = default;\n    friend A;\n};\n\nclass A : CRTP<A> {};\n} // namespace explicit_derived_friend\n\nnamespace explicit_derived_friend_multiple {\nclass A;\n\ntemplate <typename T>\nclass CRTP {\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: the CRTP cannot be constructed from the derived class; consider declaring the derived class as friend [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: friend T;\n    CRTP() = default;\n    friend A;\n};\n\nclass A : CRTP<A> {};\nclass B : CRTP<B> {};\n} // namespace explicit_derived_friend_multiple\n\nnamespace no_need_for_friend {\nclass A;\n\ntemplate <typename T>\nclass CRTP {\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: the implicit default constructor of the CRTP is publicly accessible; consider making it private [bugprone-crtp-constructor-accessibility]\n// CHECK-FIXES: CRTP() = default;\n    friend A;\n};\n\nclass A : CRTP<A> {};\n} // namespace no_need_for_friend\n\nnamespace no_warning {\ntemplate <typename T>\nclass CRTP\n{\n    CRTP() = default;\n    friend T;\n};\n\nclass A : CRTP<A> {};\n} // namespace no_warning\n\nnamespace no_warning_unsupported {\ntemplate<typename... Types>\nclass CRTP\n{};\n\nclass A : CRTP<A> {};\n\nvoid foo() {\n    A A;\n    (void) A;\n}\n} // namespace no_warning_unsupported\n\nnamespace public_copy_move_constructors_deleted {\ntemplate <typename T>\nclass CRTP\n{\n    CRTP() = default;\n    friend T;\n  public:\n    CRTP(const CRTP&) = delete;\n    CRTP(CRTP&&) = delete;\n};\n\nclass A : CRTP<A> {};\n\n} // namespace public_copy_move_constructors_deleted\n\nnamespace public_copy_protected_move_constructor_deleted {\ntemplate <typename T>\nclass CRTP\n{\n    CRTP() = default;\n    friend T;\n  public:\n    CRTP(const CRTP&) = delete;\n  protected:\n    CRTP(CRTP&&) = delete;\n};\n\nclass A : CRTP<A> {};\n\n} // namespace public_copy_protected_move_constructor_deleted"
    }
  ]
}