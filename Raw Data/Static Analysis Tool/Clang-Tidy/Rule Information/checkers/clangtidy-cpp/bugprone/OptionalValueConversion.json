{
  "name": "OptionalValueConversion",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-optional-value-conversion",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 162,
  "branches": 4,
  "apis": 120,
  "test": [
    {
      "description": null,
      "expected-problems": 36,
      "expected-linenumbers": [
        72,
        75,
        78,
        81,
        84,
        87,
        90,
        93,
        96,
        99,
        102,
        105,
        109,
        112,
        115,
        118,
        121,
        124,
        127,
        130,
        133,
        136,
        139,
        142,
        145,
        148,
        151,
        156,
        159,
        164,
        167,
        172,
        175,
        183,
        186,
        189
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++17-or-later %s bugprone-optional-value-conversion %t -- --fix-notes\n// RUN: %check_clang_tidy -check-suffix=CUSTOM -std=c++17-or-later %s bugprone-optional-value-conversion %t -- \\\n// RUN: -config=\"{CheckOptions: {bugprone-optional-value-conversion.OptionalTypes: 'CustomOptional', \\\n// RUN:                          bugprone-optional-value-conversion.ValueMethods: '::Read$;::Ooo$'}}\" --fix-notes\n\nnamespace std {\n  template<typename T>\n  struct optional\n  {\n    constexpr optional() noexcept;\n    constexpr optional(T&&) noexcept;\n    constexpr optional(const T&) noexcept;\n    template<typename U>\n    constexpr optional(U&&) noexcept;\n    const T& operator*() const;\n    T* operator->();\n    const T* operator->() const;\n    T& operator*();\n    const T& value() const;\n    T& value();\n    const T& get() const;\n    T& get();\n    T value_or(T) const;\n  };\n\n  template <class T>\n  T&& move(T &x) {\n    return static_cast<T&&>(x);\n  }\n}\n\nnamespace boost {\n  template<typename T>\n  struct optional {\n    constexpr optional() noexcept;\n    constexpr optional(const T&) noexcept;\n    const T& operator*() const;\n    const T& get() const;\n  };\n}\n\nnamespace absl {\n  template<typename T>\n  struct optional {\n    constexpr optional() noexcept;\n    constexpr optional(const T&) noexcept;\n    const T& operator*() const;\n    const T& value() const;\n  };\n}\n\ntemplate<typename T>\nstruct CustomOptional {\n  CustomOptional();\n  CustomOptional(const T&);\n  const T& Read() const;\n  T& operator*();\n  T& Ooo();\n};\n\nvoid takeOptionalValue(std::optional<int>);\nvoid takeOptionalRef(const std::optional<int>&);\nvoid takeOptionalRRef(std::optional<int>&&);\nvoid takeOtherOptional(std::optional<long>);\nvoid takeBOptionalValue(boost::optional<int>);\nvoid takeAOptionalValue(absl::optional<int>);\n\nvoid incorrect(std::optional<int> param)\n{\n  std::optional<int>* ptr = &param;\n  takeOptionalValue(**ptr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(*ptr);\n  takeOptionalValue(*param);\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(param);\n  takeOptionalValue(param.value());\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(param);\n  takeOptionalValue(ptr->value());\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(*ptr);\n  takeOptionalValue(param.operator*());\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(param);\n  takeOptionalValue(ptr->operator*());\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(*ptr);\n  takeOptionalRef(*param);\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRef(param);\n  takeOptionalRef(param.value());\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRef(param);\n  takeOptionalRef(ptr->value());\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRef(*ptr);\n  takeOptionalRef(param.operator*());\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRef(param);\n  takeOptionalRef(ptr->operator*());\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRef(*ptr);\n  std::optional<int> p = *param;\n  // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: std::optional<int> p = param;\n\n  takeOptionalValue(std::move(**ptr));\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(std::move(*ptr));\n  takeOptionalValue(std::move(*param));\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(std::move(param));\n  takeOptionalValue(std::move(param.value()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(std::move(param));\n  takeOptionalValue(std::move(ptr->value()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(std::move(*ptr));\n  takeOptionalValue(std::move(param.operator*()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(std::move(param));\n  takeOptionalRef(std::move(*param));\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRef(std::move(param));\n  takeOptionalRef(std::move(param.value()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRef(std::move(param));\n  takeOptionalRef(std::move(ptr->value()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRef(std::move(*ptr));\n  takeOptionalRef(std::move(param.operator*()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRef(std::move(param));\n  takeOptionalRRef(std::move(*param));\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRRef(std::move(param));\n  takeOptionalRRef(std::move(param.value()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRRef(std::move(param));\n  takeOptionalRRef(std::move(ptr->value()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRRef(std::move(*ptr));\n  takeOptionalRRef(std::move(param.operator*()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRRef(std::move(param));\n  takeOptionalRRef(std::move(ptr->operator*()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalRRef(std::move(*ptr));\n  std::optional<int> p2 = std::move(*param);\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: std::optional<int> p2 = std::move(param);\n\n  std::optional<std::optional<int>> opt;\n  takeOptionalValue(opt->value());\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(*opt);\n  takeOptionalValue(opt->operator*());\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: conversion from 'std::optional<int>' into 'int' and back into 'std::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeOptionalValue(*opt);\n\n  boost::optional<int> bopt;\n  takeBOptionalValue(*bopt);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: conversion from 'boost::optional<int>' into 'int' and back into 'boost::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeBOptionalValue(bopt);\n  takeBOptionalValue(bopt.get());\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: conversion from 'boost::optional<int>' into 'int' and back into 'boost::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeBOptionalValue(bopt);\n\n  absl::optional<int> aopt;\n  takeAOptionalValue(*aopt);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: conversion from 'absl::optional<int>' into 'int' and back into 'absl::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeAOptionalValue(aopt);\n  takeAOptionalValue(aopt.value());\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: conversion from 'absl::optional<int>' into 'int' and back into 'absl::optional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES: takeAOptionalValue(aopt);\n}\n\nvoid takeCustom(const CustomOptional<int>&);\n\nvoid testCustom(CustomOptional<int> param) {\n  takeCustom(*param);\n  // CHECK-MESSAGES-CUSTOM: :[[@LINE-1]]:14: warning: conversion from 'CustomOptional<int>' into 'int' and back into 'CustomOptional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES-CUSTOM: takeCustom(param);\n  takeCustom(param.Read());\n  // CHECK-MESSAGES-CUSTOM: :[[@LINE-1]]:14: warning: conversion from 'CustomOptional<int>' into 'int' and back into 'CustomOptional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES-CUSTOM: takeCustom(param);\n  takeCustom(param.Ooo());\n  // CHECK-MESSAGES-CUSTOM: :[[@LINE-1]]:14: warning: conversion from 'CustomOptional<int>' into 'int' and back into 'CustomOptional<int>', remove potentially error-prone optional dereference [bugprone-optional-value-conversion]\n  // CHECK-FIXES-CUSTOM: takeCustom(param);\n}\n\nvoid correct(std::optional<int> param)\n{\n  takeOtherOptional(*param);\n  takeOtherOptional(param.value());\n  takeOtherOptional(param.value_or(5U));\n  takeOtherOptional(param.operator*());\n\n  std::optional<long> p = *param;\n  takeOptionalValue(param.value_or(5U));\n  takeOptionalRef(param.value_or(5U));\n\n  std::optional<int>* ptr = &param;\n  takeOtherOptional(**ptr);\n  takeOtherOptional(ptr->value());\n  takeOtherOptional(ptr->value_or(5U));\n  takeOtherOptional(ptr->operator*());\n\n  std::optional<long>* p2 = &p;\n  takeOptionalValue(p2->value_or(5U));\n  takeOptionalRef(p2->value_or(5U));\n\n  using Type = decltype(takeOptionalValue(*param));\n}"
    }
  ]
}