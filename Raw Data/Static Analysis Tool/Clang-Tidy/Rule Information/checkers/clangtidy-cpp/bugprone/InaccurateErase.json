{
  "name": "InaccurateErase",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-inaccurate-erase",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 59,
  "branches": 2,
  "apis": 46,
  "test": [
    {
      "description": null,
      "expected-problems": 6,
      "expected-linenumbers": [
        58,
        69,
        75,
        80,
        86,
        93
      ],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-inaccurate-erase %t\n\nnamespace std {\ntemplate <typename T> struct vec_iterator {\n  T ptr;\n  vec_iterator operator++(int);\n\n  template <typename X>\n  vec_iterator(const vec_iterator<X> &); // Omit enable_if<...>.\n};\n\ntemplate <typename T> struct vector {\n  typedef vec_iterator<T*> iterator;\n\n  iterator begin();\n  iterator end();\n\n  void erase(iterator);\n  void erase(iterator, iterator);\n};\n\ntemplate <typename T> struct vector_with_const_iterator {\n  typedef vec_iterator<T*> iterator;\n  typedef vec_iterator<const T*> const_iterator;\n\n  iterator begin();\n  iterator end();\n\n  void erase(const_iterator);\n  void erase(const_iterator, const_iterator);\n};\n\ntemplate <typename FwIt, typename T>\nFwIt remove(FwIt begin, FwIt end, const T &val);\n\ntemplate <typename FwIt, typename Func>\nFwIt remove_if(FwIt begin, FwIt end, Func f);\n\ntemplate <typename FwIt> FwIt unique(FwIt begin, FwIt end);\n\ntemplate <typename T> struct unique_ptr {};\n} // namespace std\n\nstruct custom_iter {};\nstruct custom_container {\n  void erase(...);\n  custom_iter begin();\n  custom_iter end();\n};\n\ntemplate <typename T> void g() {\n  T t;\n  t.erase(std::remove(t.begin(), t.end(), 10));\n  // CHECK-FIXES: {{^  }}t.erase(std::remove(t.begin(), t.end(), 10));{{$}}\n\n  std::vector<int> v;\n  v.erase(remove(v.begin(), v.end(), 10));\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: this call will remove at most one\n  // CHECK-FIXES: {{^  }}v.erase(remove(v.begin(), v.end(), 10), v.end());{{$}}\n}\n\n#define ERASE(x, y) x.erase(remove(x.begin(), x.end(), y))\n// CHECK-FIXES: #define ERASE(x, y) x.erase(remove(x.begin(), x.end(), y))\n\nint main() {\n  std::vector<int> v;\n\n  v.erase(remove(v.begin(), v.end(), 10));\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: this call will remove at most one item even when multiple items should be removed [bugprone-inaccurate-erase]\n  // CHECK-FIXES: {{^  }}v.erase(remove(v.begin(), v.end(), 10), v.end());{{$}}\n  v.erase(remove(v.begin(), v.end(), 20), v.end());\n\n  auto *p = &v;\n  p->erase(remove(p->begin(), p->end(), 11));\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: this call will remove at most one\n  // CHECK-FIXES: {{^  }}p->erase(remove(p->begin(), p->end(), 11), p->end());{{$}}\n\n  std::vector_with_const_iterator<int> v2;\n  v2.erase(remove(v2.begin(), v2.end(), 12));\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: this call will remove at most one\n  // CHECK-FIXES: {{^  }}v2.erase(remove(v2.begin(), v2.end(), 12), v2.end());{{$}}\n\n  // Fix is not trivial.\n  auto it = v.end();\n  v.erase(remove(v.begin(), it, 10));\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: this call will remove at most one\n  // CHECK-FIXES: {{^  }}v.erase(remove(v.begin(), it, 10));{{$}}\n\n  g<std::vector<int>>();\n  g<custom_container>();\n\n  ERASE(v, 15);\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: this call will remove at most one\n  // CHECK-FIXES: {{^  }}ERASE(v, 15);{{$}}\n\n  std::vector<std::unique_ptr<int>> vupi;\n  auto iter = vupi.begin();\n  vupi.erase(iter++);\n  // CHECK-FIXES: {{^  }}vupi.erase(iter++);{{$}}\n}"
    }
  ]
}