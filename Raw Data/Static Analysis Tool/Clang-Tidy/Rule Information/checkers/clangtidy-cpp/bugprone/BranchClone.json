{
  "name": "BranchClone",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-branch-clone",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 496,
  "branches": 145,
  "apis": 266,
  "test": [
    {
      "description": null,
      "expected-problems": 163,
      "expected-linenumbers": [
        5,
        8,
        16,
        20,
        29,
        33,
        80,
        84,
        95,
        101,
        127,
        137,
        151,
        153,
        201,
        204,
        214,
        218,
        224,
        228,
        235,
        238,
        246,
        249,
        258,
        260,
        261,
        274,
        275,
        276,
        277,
        286,
        287,
        288,
        289,
        296,
        299,
        321,
        322,
        326,
        327,
        340,
        350,
        351,
        355,
        360,
        361,
        362,
        369,
        370,
        371,
        378,
        379,
        391,
        393,
        395,
        403,
        405,
        407,
        412,
        418,
        425,
        428,
        430,
        436,
        445,
        455,
        458,
        460,
        461,
        462,
        466,
        468,
        481,
        488,
        490,
        492,
        497,
        503,
        510,
        513,
        515,
        521,
        530,
        538,
        539,
        541,
        542,
        543,
        544,
        546,
        549,
        553,
        556,
        560,
        563,
        568,
        569,
        570,
        571,
        573,
        576,
        580,
        583,
        587,
        590,
        602,
        605,
        613,
        616,
        651,
        654,
        666,
        669,
        677,
        680,
        689,
        694,
        695,
        700,
        701,
        706,
        714,
        729,
        735,
        736,
        739,
        740,
        743,
        750,
        754,
        761,
        765,
        772,
        777,
        778,
        781,
        788,
        792,
        799,
        803,
        810,
        815,
        816,
        819,
        826,
        830,
        837,
        841,
        848,
        914,
        924,
        951,
        953,
        955,
        958,
        986,
        991,
        1015,
        1022,
        1023,
        1063,
        1064
      ],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-branch-clone %t -- -- -fno-delayed-template-parsing\n\nvoid test_basic1(int in, int &out) {\n  if (in > 77)\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    out++;\n  else\n// CHECK-MESSAGES: :[[@LINE-1]]:3: note: else branch starts here\n    out++;\n\n  out++;\n}\n\nvoid test_basic2(int in, int &out) {\n  if (in > 77) {\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    out++;\n  }\n  else {\n// CHECK-MESSAGES: :[[@LINE-1]]:3: note: else branch starts here\n    out++;\n  }\n\n  out++;\n}\n\nvoid test_basic3(int in, int &out) {\n  if (in > 77) {\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    out++;\n  }\n  else\n// CHECK-MESSAGES: :[[@LINE-1]]:3: note: else branch starts here\n    out++;\n\n  out++;\n}\n\nvoid test_basic4(int in, int &out) {\n  if (in > 77) {\n    out--;\n  }\n  else {\n    out++;\n  }\n}\n\nvoid test_basic5(int in, int &out) {\n  if (in > 77) {\n    out++;\n  }\n  else {\n    out++;\n    out++;\n  }\n}\n\nvoid test_basic6(int in, int &out) {\n  if (in > 77) {\n    out++;\n  }\n  else {\n    out++, out++;\n  }\n}\n\nvoid test_basic7(int in, int &out) {\n  if (in > 77) {\n    out++;\n    out++;\n  }\n  else\n    out++;\n\n  out++;\n}\n\nvoid test_basic8(int in, int &out) {\n  if (in > 77) {\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    out++;\n    out++;\n  } else {\n// CHECK-MESSAGES: :[[@LINE-1]]:5: note: else branch starts here\n    out++;\n    out++;\n  }\n\n  if (in % 2)\n    out++;\n}\n\nvoid test_basic9(int in, int &out) {\n  if (in > 77) {\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    if (in % 2)\n      out++;\n    else\n      out--;\n  } else {\n// CHECK-MESSAGES: :[[@LINE-1]]:5: note: else branch starts here\n    if (in % 2)\n      out++;\n    else\n      out--;\n  }\n}\n\n// If we remove the braces from the previous example, the check recognizes it\n// as an `else if`.\nvoid test_basic10(int in, int &out) {\n  if (in > 77)\n    if (in % 2)\n      out++;\n    else\n      out--;\n  else\n    if (in % 2)\n      out++;\n    else\n      out--;\n\n}\n\nvoid test_basic11(int in, int &out) {\n  if (in > 77) {\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    if (in % 2)\n      out++;\n    else\n      out--;\n    if (in % 3)\n      out++;\n    else\n      out--;\n  } else {\n// CHECK-MESSAGES: :[[@LINE-1]]:5: note: else branch starts here\n    if (in % 2)\n      out++;\n    else\n      out--;\n    if (in % 3)\n      out++;\n    else\n      out--;\n  }\n}\n\nvoid test_basic12(int in, int &out) {\n  if (in > 77) {\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n  } else {\n// CHECK-MESSAGES: :[[@LINE-1]]:5: note: else branch starts here\n  }\n}\n\nvoid test_basic13(int in, int &out) {\n  if (in > 77) {\n    // Empty compound statement is not identical to null statement.\n  } else;\n}\n\n// We use a comparison that ignores redundant parentheses:\nvoid test_basic14(int in, int &out) {\n  if (in > 77)\n    out += 2;\n  else\n    (out) += (2);\n}\n\nvoid test_basic15(int in, int &out) {\n  if (in > 77)\n    ((out += 2));\n  else\n    out += 2;\n}\n\n// ..but does not apply additional simplifications:\nvoid test_basic16(int in, int &out) {\n  if (in > 77)\n    out += 2;\n  else\n    out += 1 + 1;\n}\n\n// ..and does not forget important parentheses:\nint test_basic17(int a, int b, int c, int mode) {\n  if (mode>8)\n    return (a + b) * c;\n  else\n    return a + b * c;\n}\n\n//=========--------------------==========//\n\n#define PASTE_CODE(x) x\n\nvoid test_macro1(int in, int &out) {\n  PASTE_CODE(\n    if (in > 77)\n// CHECK-MESSAGES: :[[@LINE-1]]:5: warning: if with identical then and else branches [bugprone-branch-clone]\n      out++;\n    else\n// CHECK-MESSAGES: :[[@LINE-1]]:5: note: else branch starts here\n      out++;\n  )\n\n  out--;\n}\n\nvoid test_macro2(int in, int &out) {\n  PASTE_CODE(\n    if (in > 77)\n// CHECK-MESSAGES: :[[@LINE-1]]:5: warning: if with identical then and else branches [bugprone-branch-clone]\n      out++;\n  )\n  else\n// CHECK-MESSAGES: :[[@LINE-1]]:3: note: else branch starts here\n    out++;\n}\n\nvoid test_macro3(int in, int &out) {\n  if (in > 77)\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    out++;\n  PASTE_CODE(\n    else\n// CHECK-MESSAGES: :[[@LINE-1]]:5: note: else branch starts here\n      out++;\n  )\n}\n\nvoid test_macro4(int in, int &out) {\n  if (in > 77)\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    out++;\n  else\n// CHECK-MESSAGES: :[[@LINE-1]]:3: note: else branch starts here\n    PASTE_CODE(\n      out++;\n    )\n}\n\nvoid test_macro5(int in, int &out) {\n  PASTE_CODE(if) (in > 77)\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning: if with identical then and else branches [bugprone-branch-clone]\n    out++;\n  PASTE_CODE(else)\n// CHECK-MESSAGES: :[[@LINE-1]]:14: note: else branch starts here\n    out++;\n}\n\n#define OTHERWISE_INCREASE else out++\n\nvoid test_macro6(int in, int &out) {\n  if (in > 77)\n      out++;\n// CHECK-MESSAGES: :[[@LINE-2]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n  OTHERWISE_INCREASE;\n// CHECK-MESSAGES: :[[@LINE-1]]:3: note: else branch starts here\n// CHECK-MESSAGES: :[[@LINE-8]]:28: note: expanded from macro 'OTHERWISE_INCREASE'\n}\n\n#define COND_INCR(a, b, c) \\\n  do {                     \\\n    if ((a))               \\\n      (b)++;               \\\n    else                   \\\n      (c)++;               \\\n  } while (0)\n\nvoid test_macro7(int in, int &out1, int &out2) {\n  COND_INCR(in, out1, out1);\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n// CHECK-MESSAGES: :[[@LINE-9]]:5: note: expanded from macro 'COND_INCR'\n// CHECK-MESSAGES: :[[@LINE-3]]:3: note: else branch starts here\n// CHECK-MESSAGES: :[[@LINE-9]]:5: note: expanded from macro 'COND_INCR'\n}\n\nvoid test_macro8(int in, int &out1, int &out2) {\n  COND_INCR(in, out1, out2);\n}\n\nvoid test_macro9(int in, int &out1, int &out2) {\n  COND_INCR(in, out2, out2);\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n// CHECK-MESSAGES: :[[@LINE-21]]:5: note: expanded from macro 'COND_INCR'\n// CHECK-MESSAGES: :[[@LINE-3]]:3: note: else branch starts here\n// CHECK-MESSAGES: :[[@LINE-21]]:5: note: expanded from macro 'COND_INCR'\n}\n\n#define CONCAT(a, b) a##b\n\nvoid test_macro10(int in, int &out) {\n  CONCAT(i, f) (in > 77)\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    out++;\n  CONCAT(el, se)\n// CHECK-MESSAGES: :[[@LINE-1]]:3: note: else branch starts here\n    out++;\n}\n\n#define PROBLEM (-1)\n\nint test_macro11(int count) {\n  if (!count)\n    return PROBLEM;\n  else if (count == 13)\n    return -1;\n  else\n    return count * 2;\n}\n\n#define IF if (\n#define THEN ) {\n#define ELSE } else {\n#define END }\n\nvoid test_macro12(int in, int &out) {\n  IF in > 77 THEN\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n// CHECK-MESSAGES: :[[@LINE-8]]:12: note: expanded from macro 'IF'\n    out++;\n    out++;\n  ELSE\n// CHECK-MESSAGES: :[[@LINE-1]]:3: note: else branch starts here\n// CHECK-MESSAGES: :[[@LINE-11]]:16: note: expanded from macro 'ELSE'\n    out++;\n    out++;\n  END\n}\n\n// A hack for implementing a switch with no fallthrough:\n#define SWITCH(x) switch (x) {\n#define CASE(x) break; case (x):\n#define DEFAULT break; default:\n\nvoid test_macro13(int in, int &out) {\n  SWITCH(in)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n    CASE(1)\n      out++;\n      out++;\n    CASE(2)\n      out++;\n      out++;\n    CASE(3)\n      out++;\n      out++;\n// CHECK-MESSAGES: :[[@LINE-15]]:24: note: expanded from macro 'CASE'\n// CHECK-MESSAGES: :[[@LINE+1]]:9: note: last of these clones ends here\n    CASE(4)\n      out++;\n    CASE(5)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]\n    CASE(6)\n      out--;\n    CASE(7)\n      out--;\n// CHECK-MESSAGES: :[[@LINE-25]]:24: note: expanded from macro 'CASE'\n// CHECK-MESSAGES: :[[@LINE+2]]:9: note: last of these clones ends here\n// CHECK-MESSAGES: :[[@LINE+1]]:5: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]\n    CASE(8)\n      out++;\n      out++;\n    CASE(9)\n      out++;\n      out++;\n// CHECK-MESSAGES: :[[@LINE-34]]:24: note: expanded from macro 'CASE'\n// CHECK-MESSAGES: :[[@LINE+2]]:12: note: last of these clones ends here\n// CHECK-MESSAGES: :[[@LINE+1]]:5: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]\n    DEFAULT\n      out--;\n      out--;\n    CASE(10)\n      out--;\n      out--;\n// CHECK-MESSAGES: :[[@LINE-42]]:24: note: expanded from macro 'DEFAULT'\n// CHECK-MESSAGES: :[[@LINE+1]]:9: note: last of these clones ends here\n    CASE(12)\n      out++;\n    CASE(13)\n      out++;\n  END\n}\n\n//=========--------------------==========//\n\nvoid test_chain1(int in, int &out) {\n  if (in > 77)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: warning: repeated branch body in conditional chain [bugprone-branch-clone]\n    out++;\n// CHECK-MESSAGES: :[[@LINE-1]]:10: note: end of the original\n  else if (in > 55)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: note: clone 1 starts here\n    out++;\n\n  out++;\n}\n\nvoid test_chain2(int in, int &out) {\n  if (in > 77)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: warning: repeated branch body in conditional chain [bugprone-branch-clone]\n    out++;\n// CHECK-MESSAGES: :[[@LINE-1]]:10: note: end of the original\n  else if (in > 55)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: note: clone 1 starts here\n    out++;\n  else if (in > 42)\n    out--;\n  else if (in > 28)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: note: clone 2 starts here\n    out++;\n  else if (in > 12) {\n    out++;\n    out *= 7;\n  } else if (in > 7) {\n// CHECK-MESSAGES: :[[@LINE-1]]:22: note: clone 3 starts here\n    out++;\n  }\n}\n\nvoid test_chain3(int in, int &out) {\n  if (in > 77) {\n// CHECK-MESSAGES: :[[@LINE-1]]:16: warning: repeated branch body in conditional chain [bugprone-branch-clone]\n    out++;\n    out++;\n// CHECK-MESSAGES: :[[@LINE+1]]:4: note: end of the original\n  } else if (in > 55) {\n// CHECK-MESSAGES: :[[@LINE-1]]:23: note: clone 1 starts here\n    out++;\n    out++;\n  } else if (in > 42)\n    out--;\n  else if (in > 28) {\n// CHECK-MESSAGES: :[[@LINE-1]]:21: note: clone 2 starts here\n    out++;\n    out++;\n  } else if (in > 12) {\n    out++;\n    out++;\n    out++;\n    out *= 7;\n  } else if (in > 7) {\n// CHECK-MESSAGES: :[[@LINE-1]]:22: note: clone 3 starts here\n    out++;\n    out++;\n  }\n}\n\n// In this chain there are two clone families; notice that the checker\n// describes all branches of the first one before mentioning the second one.\nvoid test_chain4(int in, int &out) {\n  if (in > 77) {\n// CHECK-MESSAGES: :[[@LINE-1]]:16: warning: repeated branch body in conditional chain [bugprone-branch-clone]\n    out++;\n    out++;\n// CHECK-MESSAGES: :[[@LINE+1]]:4: note: end of the original\n  } else if (in > 55) {\n// CHECK-MESSAGES: :[[@LINE-1]]:23: note: clone 1 starts here\n// CHECK-MESSAGES: :[[@LINE+8]]:21: note: clone 2 starts here\n// CHECK-MESSAGES: :[[@LINE+15]]:22: note: clone 3 starts here\n    out++;\n    out++;\n  } else if (in > 42)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: warning: repeated branch body in conditional chain [bugprone-branch-clone]\n    out--;\n// CHECK-MESSAGES: :[[@LINE-1]]:10: note: end of the original\n  else if (in > 28) {\n    out++;\n    out++;\n  } else if (in > 12) {\n    out++;\n    out++;\n    out++;\n    out *= 7;\n  } else if (in > 7) {\n    out++;\n    out++;\n  } else if (in > -3) {\n// CHECK-MESSAGES: :[[@LINE-1]]:23: note: clone 1 starts here\n    out--;\n  }\n}\n\nvoid test_chain5(int in, int &out) {\n  if (in > 77)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: warning: repeated branch body in conditional chain [bugprone-branch-clone]\n    out++;\n// CHECK-MESSAGES: :[[@LINE-1]]:10: note: end of the original\n  else if (in > 55)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: note: clone 1 starts here\n    out++;\n  else if (in > 42)\n    out--;\n  else if (in > 28)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: note: clone 2 starts here\n    out++;\n  else if (in > 12) {\n    out++;\n    out *= 7;\n  } else {\n// CHECK-MESSAGES: :[[@LINE-1]]:10: note: clone 3 starts here\n    out++;\n  }\n}\n\nvoid test_chain6(int in, int &out) {\n  if (in > 77) {\n// CHECK-MESSAGES: :[[@LINE-1]]:16: warning: repeated branch body in conditional chain [bugprone-branch-clone]\n    out++;\n    out++;\n// CHECK-MESSAGES: :[[@LINE+1]]:4: note: end of the original\n  } else if (in > 55) {\n// CHECK-MESSAGES: :[[@LINE-1]]:23: note: clone 1 starts here\n    out++;\n    out++;\n  } else if (in > 42)\n    out--;\n  else if (in > 28) {\n// CHECK-MESSAGES: :[[@LINE-1]]:21: note: clone 2 starts here\n    out++;\n    out++;\n  } else if (in > 12) {\n    out++;\n    out++;\n    out++;\n    out *= 7;\n  } else {\n// CHECK-MESSAGES: :[[@LINE-1]]:10: note: clone 3 starts here\n    out++;\n    out++;\n  }\n}\n\nvoid test_nested(int a, int b, int c, int &out) {\n  if (a > 5) {\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n// CHECK-MESSAGES: :[[@LINE+27]]:5: note: else branch starts here\n    if (b > 5) {\n// CHECK-MESSAGES: :[[@LINE-1]]:16: warning: repeated branch body in conditional chain [bugprone-branch-clone]\n// CHECK-MESSAGES: :[[@LINE+9]]:6: note: end of the original\n// CHECK-MESSAGES: :[[@LINE+8]]:24: note: clone 1 starts here\n// CHECK-MESSAGES: :[[@LINE+14]]:12: note: clone 2 starts here\n      if (c > 5)\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: if with identical then and else branches [bugprone-branch-clone]\n        out++;\n      else\n// CHECK-MESSAGES: :[[@LINE-1]]:7: note: else branch starts here\n        out++;\n    } else if (b > 15) {\n      if (c > 5)\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: if with identical then and else branches [bugprone-branch-clone]\n        out++;\n      else\n// CHECK-MESSAGES: :[[@LINE-1]]:7: note: else branch starts here\n        out++;\n    } else {\n      if (c > 5)\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: if with identical then and else branches [bugprone-branch-clone]\n        out++;\n      else\n// CHECK-MESSAGES: :[[@LINE-1]]:7: note: else branch starts here\n        out++;\n    }\n  } else {\n    if (b > 5) {\n// CHECK-MESSAGES: :[[@LINE-1]]:16: warning: repeated branch body in conditional chain [bugprone-branch-clone]\n// CHECK-MESSAGES: :[[@LINE+9]]:6: note: end of the original\n// CHECK-MESSAGES: :[[@LINE+8]]:24: note: clone 1 starts here\n// CHECK-MESSAGES: :[[@LINE+14]]:12: note: clone 2 starts here\n      if (c > 5)\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: if with identical then and else branches [bugprone-branch-clone]\n        out++;\n      else\n// CHECK-MESSAGES: :[[@LINE-1]]:7: note: else branch starts here\n        out++;\n    } else if (b > 15) {\n      if (c > 5)\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: if with identical then and else branches [bugprone-branch-clone]\n        out++;\n      else\n// CHECK-MESSAGES: :[[@LINE-1]]:7: note: else branch starts here\n        out++;\n    } else {\n      if (c > 5)\n// CHECK-MESSAGES: :[[@LINE-1]]:7: warning: if with identical then and else branches [bugprone-branch-clone]\n        out++;\n      else\n// CHECK-MESSAGES: :[[@LINE-1]]:7: note: else branch starts here\n        out++;\n    }\n  }\n}\n\n//=========--------------------==========//\n\ntemplate <class T>\nvoid test_template_not_instantiated(const T &t) {\n  int a;\n  if (t)\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    a++;\n  else\n// CHECK-MESSAGES: :[[@LINE-1]]:3: note: else branch starts here\n    a++;\n}\n\ntemplate <class T>\nvoid test_template_instantiated(const T &t) {\n  int a;\n  if (t)\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    a++;\n  else\n// CHECK-MESSAGES: :[[@LINE-1]]:3: note: else branch starts here\n    a++;\n}\n\ntemplate void test_template_instantiated<int>(const int &t);\n\ntemplate <class T>\nvoid test_template2(T t, int a) {\n  if (a) {\n    T b(0);\n    a += b;\n  } else {\n    int b(0);\n    a += b;\n  }\n}\n\ntemplate void test_template2<int>(int t, int a);\n\ntemplate <class T>\nvoid test_template3(T t, int a) {\n  if (a) {\n    T b(0);\n    a += b;\n  } else {\n    int b(0);\n    a += b;\n  }\n}\n\ntemplate void test_template3<short>(short t, int a);\n\ntemplate <class T>\nvoid test_template_two_instances(T t, int &a) {\n  if (a) {\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    a += int(t);\n  } else {\n// CHECK-MESSAGES: :[[@LINE-1]]:5: note: else branch starts here\n    a += int(t);\n  }\n}\n\ntemplate void test_template_two_instances<short>(short t, int &a);\ntemplate void test_template_two_instances<long>(long t, int &a);\n\nclass C {\n  int member;\n  void inline_method(int arg) {\n    if (arg)\n// CHECK-MESSAGES: :[[@LINE-1]]:5: warning: if with identical then and else branches [bugprone-branch-clone]\n      member = 3;\n    else\n// CHECK-MESSAGES: :[[@LINE-1]]:5: note: else branch starts here\n      member = 3;\n  }\n  int other_method();\n};\n\nint C::other_method() {\n  if (member) {\n// CHECK-MESSAGES: :[[@LINE-1]]:3: warning: if with identical then and else branches [bugprone-branch-clone]\n    return 8;\n  } else {\n// CHECK-MESSAGES: :[[@LINE-1]]:5: note: else branch starts here\n    return 8;\n  }\n}\n\n//=========--------------------==========//\n\nint simple_switch(char ch) {\n  switch (ch) {\n// CHECK-MESSAGES: :[[@LINE+1]]:3: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]\n  case 'a':\n    return 10;\n  case 'A':\n    return 10;\n// CHECK-MESSAGES: :[[@LINE-1]]:14: note: last of these clones ends here\n// CHECK-MESSAGES: :[[@LINE+1]]:3: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]\n  case 'b':\n    return 11;\n  case 'B':\n    return 11;\n// CHECK-MESSAGES: :[[@LINE-1]]:14: note: last of these clones ends here\n// CHECK-MESSAGES: :[[@LINE+1]]:3: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]\n  case 'c':\n    return 10;\n  case 'C':\n    return 10;\n// CHECK-MESSAGES: :[[@LINE-1]]:14: note: last of these clones ends here\n  default:\n    return 0;\n  }\n}\n\nint long_sequence_switch(char ch) {\n  switch (ch) {\n// CHECK-MESSAGES: :[[@LINE+1]]:3: warning: switch has 7 consecutive identical branches [bugprone-branch-clone]\n  case 'a':\n    return 10;\n  case 'A':\n    return 10;\n  case 'b':\n    return 10;\n  case 'B':\n    return 10;\n  case 'c':\n    return 10;\n  case 'C':\n    return 10;\n  default:\n    return 10;\n// CHECK-MESSAGES: :[[@LINE-1]]:14: note: last of these clones ends here\n  }\n}\n\nint nested_switch(int a, int b, int c) {\n  switch (a) {\n// CHECK-MESSAGES: :[[@LINE+2]]:3: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n// CHECK-MESSAGES: :[[@LINE+114]]:6: note: last of these clones ends here\n  case 1:\n    switch (b) {\n// CHECK-MESSAGES: :[[@LINE+2]]:5: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n// CHECK-MESSAGES: :[[@LINE+33]]:8: note: last of these clones ends here\n    case 1:\n      switch (c) {\n// CHECK-MESSAGES: :[[@LINE+1]]:7: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n      case 1:\n        return 42;\n      case 2:\n        return 42;\n      default:\n        return 42;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: note: last of these clones ends here\n      }\n    case 2:\n      switch (c) {\n// CHECK-MESSAGES: :[[@LINE+1]]:7: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n      case 1:\n        return 42;\n      case 2:\n        return 42;\n      default:\n        return 42;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: note: last of these clones ends here\n      }\n    default:\n      switch (c) {\n// CHECK-MESSAGES: :[[@LINE+1]]:7: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n      case 1:\n        return 42;\n      case 2:\n        return 42;\n      default:\n        return 42;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: note: last of these clones ends here\n      }\n    }\n  case 2:\n    switch (b) {\n// CHECK-MESSAGES: :[[@LINE+2]]:5: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n// CHECK-MESSAGES: :[[@LINE+33]]:8: note: last of these clones ends here\n    case 1:\n      switch (c) {\n// CHECK-MESSAGES: :[[@LINE+1]]:7: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n      case 1:\n        return 42;\n      case 2:\n        return 42;\n      default:\n        return 42;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: note: last of these clones ends here\n      }\n    case 2:\n      switch (c) {\n// CHECK-MESSAGES: :[[@LINE+1]]:7: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n      case 1:\n        return 42;\n      case 2:\n        return 42;\n      default:\n        return 42;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: note: last of these clones ends here\n      }\n    default:\n      switch (c) {\n// CHECK-MESSAGES: :[[@LINE+1]]:7: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n      case 1:\n        return 42;\n      case 2:\n        return 42;\n      default:\n        return 42;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: note: last of these clones ends here\n      }\n    }\n  default:\n    switch (b) {\n// CHECK-MESSAGES: :[[@LINE+2]]:5: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n// CHECK-MESSAGES: :[[@LINE+33]]:8: note: last of these clones ends here\n    case 1:\n      switch (c) {\n// CHECK-MESSAGES: :[[@LINE+1]]:7: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n      case 1:\n        return 42;\n      case 2:\n        return 42;\n      default:\n        return 42;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: note: last of these clones ends here\n      }\n    case 2:\n      switch (c) {\n// CHECK-MESSAGES: :[[@LINE+1]]:7: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n      case 1:\n        return 42;\n      case 2:\n        return 42;\n      default:\n        return 42;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: note: last of these clones ends here\n      }\n    default:\n      switch (c) {\n// CHECK-MESSAGES: :[[@LINE+1]]:7: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]\n      case 1:\n        return 42;\n      case 2:\n        return 42;\n      default:\n        return 42;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: note: last of these clones ends here\n      }\n    }\n  }\n}\n\n//=========--------------------==========//\n\n// This should not produce warnings, as in switch statements we only report\n// identical branches when they are consecutive. Also note that a branch\n// terminated by a break is different from a branch terminated by the end of\n// the switch statement.\nint interleaved_cases(int a, int b) {\n  switch (a) {\n  case 3:\n  case 4:\n    b = 2;\n    break;\n  case 5:\n    b = 3;\n    break;\n  case 6:\n    b = 2;\n    break;\n  case 7:\n    if (b % 2) {\n      b++;\n    } else {\n      b++;\n      break;\n    }\n    b = 2;\n    break;\n  case 8:\n    b = 2;\n  case 9:\n    b = 3;\n    break;\n  default:\n    b = 3;\n  }\n  return b;\n}\n\n\n// A case: or default: is only considered to be the start of a branch if it is a direct child of the CompoundStmt forming the body of the switch\nint buried_cases(int foo) {\n  switch (foo) {\n    {\n    case 36:\n      return 8;\n    default:\n      return 8;\n    }\n  }\n}\n\n// Here the `case 7:` is a child statement of the GotoLabelStmt, so the checker\n// thinks that it is part of the `case 9:` branch. While this result is\n// counterintuitve, mixing goto labels and switch statements in this fashion is\n// pretty rare, so it does not deserve a special case in the checker code.\nint decorated_cases(int z) {\n  if (!(z % 777)) {\n    goto lucky;\n  }\n  switch (z) {\n// CHECK-MESSAGES: :[[@LINE+1]]:3: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]\n  case 1:\n  case 2:\n  case 3:\n    z++;\n    break;\n  case 4:\n  case 5:\n    z++;\n    break;\n// CHECK-MESSAGES: :[[@LINE-1]]:10: note: last of these clones ends here\n  case 9:\n    z++;\n    break;\n  lucky:\n  case 7:\n    z += 3;\n    z *= 2;\n    break;\n  case 92:\n    z += 3;\n    z *= 2;\n    break;\n  default:\n    z++;\n  }\n  return z + 92;\n}\n\n// The child of the switch statement is not necessarily a compound statement,\n// do not crash in this unusual case.\nchar no_real_body(int in, int &out) {\n  switch (in)\n  case 42:\n    return 'A';\n\n  if (in > 77)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: warning: repeated branch body in conditional chain [bugprone-branch-clone]\n    out++;\n// CHECK-MESSAGES: :[[@LINE-1]]:10: note: end of the original\n  else if (in > 55)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: note: clone 1 starts here\n    out++;\n  else if (in > 34)\n// CHECK-MESSAGES: :[[@LINE+1]]:5: note: clone 2 starts here\n    out++;\n\n  return '|';\n}\n\n// Duff's device [https://en.wikipedia.org/wiki/Duff's_device]\n// The check does not try to distinguish branches in this sort of convoluted\n// code, but it should avoid crashing.\nvoid send(short *to, short *from, int count)\n{\n    int n = (count + 7) / 8;\n    switch (count % 8) {\n    case 0: do { *to = *from++;\n    case 7:      *to = *from++;\n    case 6:      *to = *from++;\n    case 5:      *to = *from++;\n    case 4:      *to = *from++;\n    case 3:      *to = *from++;\n    case 2:      *to = *from++;\n    case 1:      *to = *from++;\n            } while (--n > 0);\n    }\n}\n\n//=========--------------------==========//\n\nvoid ternary1(bool b, int &x) {\n// CHECK-MESSAGES: :[[@LINE+1]]:6: warning: conditional operator with identical true and false expressions [bugprone-branch-clone]\n  (b ? x : x) = 42;\n}\n\nint ternary2(bool b, int x) {\n// CHECK-MESSAGES: :[[@LINE+1]]:12: warning: conditional operator with identical true and false expressions [bugprone-branch-clone]\n  return b ? 42 : 42;\n}\n\nint ternary3(bool b, int x) {\n  return b ? 42 : 43;\n}\n\nint ternary4(bool b, int x) {\n  return b ? true ? 45 : 44 : false ? 45 : 44;\n}\n\n// We do not detect chains of conditional operators.\nint ternary5(bool b1, bool b2, int x) {\n  return b1 ? 42 : b2 ? 43 : 42;\n}\n\n#define SWITCH_WITH_LBRACE(b) switch (b) {\n#define SEMICOLON_CASE_COLON(b)                                                \\\n  ;                                                                            \\\n  case b:\nint d, e;\nvoid dontCrash() {\n  SWITCH_WITH_LBRACE(d)\n// CHECK-MESSAGES: :[[@LINE+1]]:3: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]\n  SEMICOLON_CASE_COLON(1)\n    e++;\n    e++;\n  SEMICOLON_CASE_COLON(2)\n    e++;\n    e++;\n  // CHECK-MESSAGES: :[[@LINE-11]]:3: note: expanded from macro 'SEMICOLON_CASE_COLON'\n  // CHECK-MESSAGES: :[[@LINE+1]]:23: note: last of these clones ends here\n  SEMICOLON_CASE_COLON(3);\n  }\n}\n\nnamespace PR62693 {\n  class Object {\n    public:\n      template <typename T>\n        bool ConvertableTo() const;\n\n      template <typename T>\n        void Handle();\n  };\n\n  template <typename T>\n  void update(Object &a) {\n    if (a.ConvertableTo<char *>()) {\n      a.Handle<char *>();\n    } else {\n      a.Handle<T>();\n    }\n  }\n\n  template <typename T>\n  void update2(Object &a) {\n    if (a.ConvertableTo<char *>()) {\n      a.Handle<char *>();\n    } else {\n      a.Handle<T>();\n    }\n  }\n\n  void foo(Object &a) {\n    update<int>(a);\n    update2<char *>(a);\n  }\n\n  template <typename T>\n  int branch_clone_in_template(T t) {\n    // CHECK-MESSAGES: :[[@LINE+2]]:5: warning: if with identical then and else branches [bugprone-branch-clone]\n    // CHECK-MESSAGES: :[[@LINE+3]]:7: note: else branch starts here\n    if (t) {\n      return 42;\n    } else {\n      return 42;\n    }\n  }\n}"
    }
  ]
}