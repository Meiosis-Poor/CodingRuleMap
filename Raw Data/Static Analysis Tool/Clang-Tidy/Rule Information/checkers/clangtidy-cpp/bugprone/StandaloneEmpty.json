{
  "name": "StandaloneEmpty",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-standalone-empty",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 215,
  "branches": 27,
  "apis": 136,
  "test": [
    {
      "description": null,
      "expected-problems": 66,
      "expected-linenumbers": [
        166,
        178,
        185,
        192,
        198,
        204,
        216,
        223,
        230,
        236,
        304,
        308,
        321,
        357,
        363,
        370,
        377,
        384,
        390,
        396,
        402,
        409,
        416,
        423,
        429,
        436,
        443,
        451,
        458,
        573,
        577,
        578,
        579,
        583,
        587,
        594,
        599,
        611,
        614,
        615,
        616,
        619,
        622,
        628,
        632,
        639,
        646,
        653,
        659,
        665,
        672,
        679,
        685,
        741,
        747,
        753,
        759,
        765,
        771,
        777,
        784,
        791,
        797,
        804,
        811,
        903
      ],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-standalone-empty %t\n\nnamespace std {\ntemplate <typename T>\nstruct vector {\n  bool empty();\n};\n\ntemplate <typename T>\nstruct vector_with_clear {\n  bool empty();\n  void clear();\n};\n\ntemplate <typename T>\nstruct vector_with_void_empty {\n  void empty();\n  void clear();\n};\n\ntemplate <typename T>\nstruct vector_with_int_empty {\n  int empty();\n  void clear();\n};\n\ntemplate <typename T>\nstruct vector_with_clear_args {\n  bool empty();\n  void clear(int i);\n};\n\ntemplate <typename T>\nstruct vector_with_clear_variable {\n  bool empty();\n  int clear;\n};\n\ntemplate <typename T>\nbool empty(T &&);\n\n} // namespace std\n\nnamespace absl {\nstruct string {\n  bool empty();\n};\n\nstruct string_with_clear {\n  bool empty();\n  void clear();\n};\n\nstruct string_with_void_empty {\n  void empty();\n  void clear();\n};\n\nstruct string_with_int_empty {\n  int empty();\n  void clear();\n};\n\nstruct string_with_clear_args {\n  bool empty();\n  void clear(int i);\n};\n\nstruct string_with_clear_variable {\n  bool empty();\n  int clear;\n};\n\ntemplate <class T>\nbool empty(T &&);\n} // namespace absl\n\nnamespace test {\ntemplate <class T>\nvoid empty(T &&);\n} // namespace test\n\nnamespace test_no_args {\nbool empty();\n} // namespace test_no_args\n\nnamespace base {\ntemplate <typename T>\nstruct base_vector {\n    void clear();\n};\n\ntemplate <typename T>\nstruct base_vector_clear_with_args {\n    void clear(int i);\n};\n\ntemplate <typename T>\nstruct base_vector_clear_variable {\n    int clear;\n};\n\nstruct base_vector_non_dependent {\n    void clear();\n};\n\ntemplate <typename T>\nstruct vector : base_vector<T> {\n    bool empty();\n};\n\ntemplate <typename T>\nstruct vector_clear_with_args : base_vector_clear_with_args<T> {\n    bool empty();\n};\n\ntemplate <typename T>\nstruct vector_clear_variable : base_vector_clear_variable<T> {\n    bool empty();\n};\n\ntemplate <typename T>\nstruct vector_non_dependent : base_vector_non_dependent {\n    bool empty();\n};\n\ntemplate <typename T>\nbool empty(T &&);\n\n} // namespace base\n\nnamespace qualifiers {\ntemplate <typename T>\nstruct vector_with_const_clear {\n  bool empty() const;\n  void clear() const;\n};\n\ntemplate <typename T>\nstruct vector_with_const_empty {\n  bool empty() const;\n  void clear();\n};\n\ntemplate <typename T>\nstruct vector_with_volatile_clear {\n  bool empty() volatile;\n  void clear() volatile;\n};\n\ntemplate <typename T>\nstruct vector_with_volatile_empty {\n  bool empty() volatile;\n  void clear();\n};\n\ntemplate <typename T>\nbool empty(T &&);\n} // namespace qualifiers\n\n\nbool test_member_empty() {\n  {\n    std::vector<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    std::vector_with_void_empty<int> v;\n    v.empty();\n    // no-warning\n  }\n\n  {\n    std::vector_with_clear<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    std::vector_with_int_empty<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    std::vector_with_clear_args<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    std::vector_with_clear_variable<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    absl::string s;\n    s.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    absl::string_with_void_empty s;\n    s.empty();\n    // no-warning\n  }\n\n  {\n    absl::string_with_clear s;\n    s.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: s.clear();\n  }\n\n  {\n    absl::string_with_int_empty s;\n    s.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: s.clear();\n  }\n\n  {\n    absl::string_with_clear_args s;\n    s.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    absl::string_with_clear_variable s;\n    s.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    std::vector<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    std::vector_with_clear<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    std::vector_with_int_empty<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    std::vector_with_clear_args<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    std::vector_with_clear_variable<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    absl::string s;\n    return s.empty();\n    // no-warning\n  }\n\n  {\n    absl::string_with_clear s;\n    return s.empty();\n    // no-warning\n  }\n\n  {\n    absl::string_with_int_empty s;\n    return s.empty();\n    // no-warning\n  }\n\n  {\n    absl::string_with_clear_args s;\n    return s.empty();\n    // no-warning\n  }\n\n  {\n    absl::string_with_clear_variable s;\n    return s.empty();\n    // no-warning\n  }\n}\n\nbool test_qualified_empty() {\n  {\n    absl::string_with_clear v;\n    std::empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n\n    absl::empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'absl::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n\n    test::empty(v);\n    // no-warning\n\n    test_no_args::empty();\n    // no-warning\n  }\n\n  {\n    absl::string s;\n    std::empty(s);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    std::empty(0);\n    // no-warning\n    absl::empty(nullptr);\n    // no-warning\n  }\n\n  {\n    absl::string_with_clear s;\n    return std::empty(s);\n    // no-warning\n    return absl::empty(s);\n    // no-warning\n  }\n\n  {\n    absl::string s;\n    return std::empty(s);\n    // no-warning\n  }\n\n  {\n    return std::empty(0);\n    // no-warning\n    return absl::empty(nullptr);\n    // no-warning\n  }\n}\n\nbool test_unqualified_empty() {\n  {\n    std::vector<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    std::vector_with_void_empty<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    std::vector_with_clear<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    std::vector_with_int_empty<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    std::vector_with_clear_args<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    std::vector_with_clear_variable<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    absl::string s;\n    empty(s);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'absl::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    absl::string_with_void_empty s;\n    empty(s);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'absl::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: s.clear();\n  }\n\n  {\n    absl::string_with_clear s;\n    empty(s);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'absl::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: s.clear();\n  }\n\n  {\n    absl::string_with_int_empty s;\n    empty(s);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'absl::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: s.clear();\n  }\n\n  {\n    absl::string_with_clear_args s;\n    empty(s);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'absl::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    absl::string_with_clear_variable s;\n    empty(s);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'absl::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    std::vector<int> v;\n    using std::empty;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    std::vector_with_clear<int> v;\n    using std::empty;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    absl::string s;\n    using absl::empty;\n    empty(s);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'absl::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    absl::string_with_clear s;\n    using absl::empty;\n    empty(s);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'absl::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: s.clear();\n  }\n\n  {\n    std::vector<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    std::vector_with_void_empty<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    std::vector_with_clear<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    std::vector_with_int_empty<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    std::vector_with_clear_args<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    std::vector_with_clear_variable<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    absl::string s;\n    return empty(s);\n    // no-warning\n  }\n\n  {\n    absl::string_with_void_empty s;\n    return empty(s);\n    // no-warning\n  }\n\n  {\n    absl::string_with_clear s;\n    return empty(s);\n    // no-warning\n  }\n\n  {\n    absl::string_with_int_empty s;\n    return empty(s);\n    // no-warning\n  }\n\n  {\n    absl::string_with_clear_args s;\n    return empty(s);\n    // no-warning\n  }\n\n  {\n    absl::string_with_clear_variable s;\n    return empty(s);\n    // no-warning\n  }\n\n  {\n    std::vector<int> v;\n    using std::empty;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    std::vector_with_clear<int> v;\n    using std::empty;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    absl::string s;\n    using absl::empty;\n    return empty(s);\n    // no-warning\n  }\n\n  {\n    absl::string_with_clear s;\n    using absl::empty;\n    return empty(s);\n    // no-warning\n  }\n}\n\nvoid test_empty_method_expressions() {\n  std::vector<int> v;\n  bool EmptyReturn(v.empty());\n  // no-warning\n\n  (void)v.empty();\n  // no-warning\n\n  // Don't warn in the if condition.\n  if (v.empty()) v.empty();\n  // CHECK-MESSAGES: :[[#@LINE-1]]:18: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n\n  // Don't warn in the for condition.\n  for(v.empty();v.empty();v.empty()) v.empty();\n  // CHECK-MESSAGES: :[[#@LINE-1]]:7: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  // CHECK-MESSAGES: :[[#@LINE-2]]:27: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  // CHECK-MESSAGES: :[[#@LINE-3]]:38: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n\n  // Don't warn in the while condition.\n  while(v.empty()) v.empty();\n  // CHECK-MESSAGES: :[[#@LINE-1]]:20: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n\n  // Don't warn in the do-while condition.\n  do v.empty(); while(v.empty());\n  // CHECK-MESSAGES: :[[#@LINE-1]]:6: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n\n  // Don't warn in the switch expression.\n  switch(v.empty()) {\n    // no-warning\n    case true:\n      v.empty();\n      // CHECK-MESSAGES: :[[#@LINE-1]]:7: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  // Don't warn in the return expression, which is the last statement.\n  bool StmtExprReturn = ({v.empty(); v.empty();});\n  // CHECK-MESSAGES: :[[#@LINE-1]]:27: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n}\n\nvoid test_empty_expressions() {\n  absl::string s;\n  bool test(std::empty(s));\n  // no-warning\n\n  (void)std::empty(s);\n  // no-warning\n\n  if (std::empty(s)) std::empty(s);\n  // CHECK-MESSAGES: :[[#@LINE-1]]:22: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n\n  for(std::empty(s);std::empty(s);std::empty(s)) std::empty(s);\n  // CHECK-MESSAGES: :[[#@LINE-1]]:7: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n  // CHECK-MESSAGES: :[[#@LINE-2]]:35: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n  // CHECK-MESSAGES: :[[#@LINE-3]]:50: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n\n  while(std::empty(s)) std::empty(s);\n  // CHECK-MESSAGES: :[[#@LINE-1]]:24: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n\n  do std::empty(s); while(std::empty(s));\n  // CHECK-MESSAGES: :[[#@LINE-1]]:6: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n\n  switch(std::empty(s)) {\n    // no-warning\n    case true:\n      std::empty(s);\n      // CHECK-MESSAGES: :[[#@LINE-1]]:7: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n  }\n\n  bool StmtExprReturn = ({std::empty(s); std::empty(s);});\n  // CHECK-MESSAGES: :[[#@LINE-1]]:27: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n}\n\nbool test_clear_in_base_class() {\n  {\n    base::vector<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    base::vector_non_dependent<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    base::vector_clear_with_args<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    base::vector_clear_variable<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    base::vector<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'base::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    base::vector_non_dependent<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'base::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    base::vector_clear_with_args<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'base::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    base::vector_clear_variable<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'base::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    base::vector<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    base::vector_non_dependent<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    base::vector_clear_with_args<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    base::vector_clear_variable<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    base::vector<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    base::vector_non_dependent<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    base::vector_clear_with_args<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    base::vector_clear_variable<int> v;\n    return empty(v);\n    // no-warning\n  }\n}\n\nbool test_clear_with_qualifiers() {\n  {\n    qualifiers::vector_with_const_clear<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    const qualifiers::vector_with_const_clear<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    const qualifiers::vector_with_const_empty<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    qualifiers::vector_with_const_clear<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'qualifiers::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    const qualifiers::vector_with_const_clear<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'qualifiers::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    const std::vector_with_clear<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    qualifiers::vector_with_volatile_clear<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    volatile qualifiers::vector_with_volatile_clear<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    volatile qualifiers::vector_with_volatile_empty<int> v;\n    v.empty();\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  }\n\n  {\n    qualifiers::vector_with_volatile_clear<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'qualifiers::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    volatile qualifiers::vector_with_volatile_clear<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'qualifiers::empty'; did you mean 'clear()'? [bugprone-standalone-empty]\n    // CHECK-FIXES: v.clear();\n  }\n\n  {\n    volatile std::vector_with_clear<int> v;\n    empty(v);\n    // CHECK-MESSAGES: :[[#@LINE-1]]:5: warning: ignoring the result of 'std::empty' [bugprone-standalone-empty]\n  }\n\n  {\n    qualifiers::vector_with_const_clear<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    const qualifiers::vector_with_const_clear<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    const qualifiers::vector_with_const_empty<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    qualifiers::vector_with_const_clear<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    const qualifiers::vector_with_const_clear<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    const std::vector_with_clear<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    qualifiers::vector_with_volatile_clear<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    volatile qualifiers::vector_with_volatile_clear<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    volatile qualifiers::vector_with_volatile_empty<int> v;\n    return v.empty();\n    // no-warning\n  }\n\n  {\n    qualifiers::vector_with_volatile_clear<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    volatile qualifiers::vector_with_volatile_clear<int> v;\n    return empty(v);\n    // no-warning\n  }\n\n  {\n    volatile std::vector_with_clear<int> v;\n    return empty(v);\n    // no-warning\n  }\n}\n\nnamespace user_lib {\ntemplate <typename T>\nstruct vector {\n  bool empty();\n  bool test_empty_inside_impl() {\n    empty();\n    // no-warning\n    return empty();\n    // no-warning\n  }\n};\n} // namespace user_lib\n\nbool test_template_empty_outside_impl() {\n  user_lib::vector<int> v;\n  v.empty();\n  // CHECK-MESSAGES: :[[#@LINE-1]]:3: warning: ignoring the result of 'empty()' [bugprone-standalone-empty]\n  return v.empty();\n  // no-warning\n}"
    }
  ]
}