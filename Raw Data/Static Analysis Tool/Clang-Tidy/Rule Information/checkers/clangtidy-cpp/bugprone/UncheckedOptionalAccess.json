{
  "name": "UncheckedOptionalAccess",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-unchecked-optional-access",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 68,
  "branches": 7,
  "apis": 37,
  "test": [
    {
      "description": null,
      "expected-problems": 24,
      "expected-linenumbers": [
        10,
        15,
        24,
        31,
        39,
        57,
        60,
        83,
        89,
        92,
        97,
        102,
        126,
        133,
        140,
        152,
        169,
        190,
        215,
        218,
        223,
        244,
        255,
        266
      ],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-unchecked-optional-access %t -- -- -I %S/Inputs/unchecked-optional-access\n\n#include \"absl/types/optional.h\"\n#include \"folly/types/Optional.h\"\n#include \"bde/types/bsl_optional.h\"\n#include \"bde/types/bdlb_nullablevalue.h\"\n\nvoid unchecked_value_access(const absl::optional<int> &opt) {\n  opt.value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional value [bugprone-unchecked-optional-access]\n}\n\nvoid unchecked_deref_operator_access(const absl::optional<int> &opt) {\n  *opt;\n  // CHECK-MESSAGES: :[[@LINE-1]]:4: warning: unchecked access to optional value\n}\n\nstruct Foo {\n  void foo() const {}\n};\n\nvoid unchecked_arrow_operator_access(const absl::optional<Foo> &opt) {\n  opt->foo();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional value\n}\n\nvoid folly_check_value_then_reset(folly::Optional<int> opt) {\n  if (opt) {\n    opt.reset();\n    opt.value();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: unchecked access to optional value\n  }\n}\n\nvoid folly_value_after_swap(folly::Optional<int> opt1, folly::Optional<int> opt2) {\n  if (opt1) {\n    opt1.swap(opt2);\n    opt1.value();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: unchecked access to optional value\n  }\n}\n\nvoid checked_access(const absl::optional<int> &opt) {\n  if (opt.has_value()) {\n    opt.value();\n  }\n}\n\nvoid folly_checked_access(const folly::Optional<int> &opt) {\n  if (opt.hasValue()) {\n    opt.value();\n  }\n}\n\nvoid bsl_optional_unchecked_value_access(const bsl::optional<int> &opt) {\n  opt.value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional value [bugprone-unchecked-optional-access]\n\n  int x = *opt;\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: unchecked access to optional value [bugprone-unchecked-optional-access]\n\n  if (!opt) {\n    return;\n  }\n\n  opt.value();\n  x = *opt;\n}\n\nvoid bsl_optional_checked_access(const bsl::optional<int> &opt) {\n  if (opt.has_value()) {\n    opt.value();\n  }\n  if (opt) {\n    opt.value();\n  }\n}\n\nvoid bsl_optional_value_after_swap(bsl::optional<int> &opt1, bsl::optional<int> &opt2) {\n  if (opt1) {\n    opt1.swap(opt2);\n    opt1.value();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: unchecked access to optional value\n  }\n}\n\nvoid nullable_value_unchecked_value_access(const BloombergLP::bdlb::NullableValue<int> &opt) {\n  opt.value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional value [bugprone-unchecked-optional-access]\n\n  int x = *opt;\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: unchecked access to optional value [bugprone-unchecked-optional-access]\n\n  if (opt.isNull()) {\n    opt.value();\n  }\n  // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: unchecked access to optional value [bugprone-unchecked-optional-access]\n\n  if (!opt) {\n    opt.value();\n  }\n  // CHECK-MESSAGES: :[[@LINE-2]]:5: warning: unchecked access to optional value [bugprone-unchecked-optional-access]\n\n  if (!opt) {\n    return;\n  }\n\n  opt.value();\n  x = *opt;\n}\n\nvoid nullable_value_optional_checked_access(const BloombergLP::bdlb::NullableValue<int> &opt) {\n  if (opt.has_value()) {\n    opt.value();\n  }\n  if (opt) {\n    opt.value();\n  }\n  if (!opt.isNull()) {\n    opt.value();\n  }\n}\n\nvoid nullable_value_emplaced(BloombergLP::bdlb::NullableValue<int> &opt) {\n  opt.value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional value [bugprone-unchecked-optional-access]\n\n  opt.emplace(1);\n  opt.value();\n\n  opt.reset();\n  opt.value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional value [bugprone-unchecked-optional-access]\n}\n\nvoid nullable_value_after_swap(BloombergLP::bdlb::NullableValue<int> &opt1, BloombergLP::bdlb::NullableValue<int> &opt2) {\n  if (opt1) {\n    opt1.swap(opt2);\n    opt1.value();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: unchecked access to optional value\n  }\n}\n\ntemplate <typename T>\nvoid function_template_without_user(const absl::optional<T> &opt) {\n  opt.value(); // no-warning\n}\n\ntemplate <typename T>\nvoid function_template_with_user(const absl::optional<T> &opt) {\n  opt.value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional value\n}\n\nvoid function_template_user(const absl::optional<int> &opt) {\n  // Instantiate the f3 function template so that it gets matched by the check.\n  function_template_with_user(opt);\n}\n\ntemplate <typename T>\nvoid function_template_with_specialization(const absl::optional<int> &opt) {\n  opt.value(); // no-warning\n}\n\ntemplate <>\nvoid function_template_with_specialization<int>(\n    const absl::optional<int> &opt) {\n  opt.value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional value\n}\n\ntemplate <typename T>\nclass ClassTemplateWithSpecializations {\n  void f(const absl::optional<int> &opt) {\n    opt.value(); // no-warning\n  }\n};\n\ntemplate <typename T>\nclass ClassTemplateWithSpecializations<T *> {\n  void f(const absl::optional<int> &opt) {\n    opt.value(); // no-warning\n  }\n};\n\ntemplate <>\nclass ClassTemplateWithSpecializations<int> {\n  void f(const absl::optional<int> &opt) {\n    opt.value();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: unchecked access to optional\n  }\n};\n\n// The templates below are not instantiated and CFGs can not be properly built\n// for them. They are here to make sure that the checker does not crash, but\n// instead ignores non-instantiated templates.\n\ntemplate <typename T>\nstruct C1 {};\n\ntemplate <typename T>\nstruct C2 : public C1<T> {\n  ~C2() {}\n};\n\ntemplate <typename T, template <class> class B>\nstruct C3 : public B<T> {\n  ~C3() {}\n};\n\nvoid multiple_unchecked_accesses(absl::optional<int> opt1,\n                                 absl::optional<int> opt2) {\n  for (int i = 0; i < 10; i++) {\n    opt1.value();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: unchecked access to optional\n  }\n  opt2.value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional value\n}\n\nclass C4 {\n  explicit C4(absl::optional<int> opt) : foo_(opt.value()) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:47: warning: unchecked access to optional\n  }\n  int foo_;\n};\n\n// llvm#59705\nnamespace std\n{\n  template <typename T>\n  constexpr T&& forward(T& type) noexcept {\n    return static_cast<T&&>(type);\n  }\n\n  template <typename T>\n  constexpr T&& forward(T&& type) noexcept {\n    return static_cast<T&&>(type);\n  }\n}\n\nvoid std_forward_copy(absl::optional<int> opt) {\n  std::forward<absl::optional<int>>(opt).value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional\n}\n\nvoid std_forward_copy_safe(absl::optional<int> opt) {\n  if (!opt) return;\n\n  std::forward<absl::optional<int>>(opt).value();\n}\n\nvoid std_forward_copy(absl::optional<int>& opt) {\n  std::forward<absl::optional<int>>(opt).value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional\n}\n\nvoid std_forward_lvalue_ref_safe(absl::optional<int>& opt) {\n  if (!opt) return;\n\n  std::forward<absl::optional<int>>(opt).value();\n}\n\nvoid std_forward_copy(absl::optional<int>&& opt) {\n  std::forward<absl::optional<int>>(opt).value();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: unchecked access to optional\n}\n\nvoid std_forward_rvalue_ref_safe(absl::optional<int>&& opt) {\n  if (!opt) return;\n\n  std::forward<absl::optional<int>>(opt).value();\n}\n\nnamespace std {\n\ntemplate <typename T> class vector {\npublic:\n  T &operator[](unsigned long index);\n  bool empty();\n};\n\n} // namespace std\n\nstruct S {\n  absl::optional<float> x;\n};\nstd::vector<S> vec;\n\nvoid foo() {\n  if (!vec.empty())\n    vec[0].x = 0;\n}"
    }
  ]
}