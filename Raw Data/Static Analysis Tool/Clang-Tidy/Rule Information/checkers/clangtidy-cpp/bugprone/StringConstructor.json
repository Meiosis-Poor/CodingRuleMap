{
  "name": "StringConstructor",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-string-constructor",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 224,
  "branches": 23,
  "apis": 259,
  "test": [
    {
      "description": null,
      "expected-problems": 35,
      "expected-linenumbers": [
        35,
        38,
        41,
        43,
        45,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        67,
        69,
        71,
        73,
        75,
        77,
        79,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        103,
        105,
        107,
        109,
        114,
        119
      ],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-string-constructor %t\n\nnamespace std {\ntemplate <typename T>\nclass allocator {};\ntemplate <typename T>\nclass char_traits {};\ntemplate <typename C, typename T = std::char_traits<C>, typename A = std::allocator<C> >\nstruct basic_string {\n  basic_string();\n  basic_string(const C*, unsigned int size);\n  basic_string(const C *, const A &allocator = A());\n  basic_string(unsigned int size, C c);\n  basic_string(const C*, unsigned int pos, unsigned int size);\n};\ntypedef basic_string<char> string;\ntypedef basic_string<wchar_t> wstring;\n\ntemplate <typename C, typename T = std::char_traits<C>>\nstruct basic_string_view {\n  basic_string_view();\n  basic_string_view(const C *, unsigned int size);\n  basic_string_view(const C *);\n};\ntypedef basic_string_view<char> string_view;\ntypedef basic_string_view<wchar_t> wstring_view;\n}\n\nconst char* kText = \"\";\nconst char kText2[] = \"\";\nextern const char kText3[];\n\nvoid Test() {\n  std::string str('x', 4);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: string constructor parameters are probably swapped; expecting string(count, character) [bugprone-string-constructor]\n  // CHECK-FIXES: std::string str(4, 'x');\n  std::wstring wstr(L'x', 4);\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: string constructor parameters are probably swapped\n  // CHECK-FIXES: std::wstring wstr(4, L'x');\n  std::string s0(0, 'x');\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: constructor creating an empty string\n  std::string s1(-4, 'x');\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: negative value used as length parameter\n  std::string s2(0x1000000, 'x');\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: suspicious large length parameter\n\n  std::string q0(\"test\", 0);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: constructor creating an empty string\n  std::string q1(kText, -4);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: negative value used as length parameter\n  std::string q2(\"test\", 200);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: length is bigger than string literal size\n  std::string t1(\"test\", 5);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: length is bigger than string literal size\n  std::string q3(kText, 200);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: length is bigger than string literal size\n  std::string q4(kText2, 200);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: length is bigger than string literal size\n  std::string q5(kText3,  0x1000000);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: suspicious large length parameter\n  std::string q6(nullptr);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: constructing string from nullptr is undefined behaviour\n  std::string q7 = 0;\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: constructing string from nullptr is undefined behaviour\n\n  std::string r1(\"test\", 1, 0);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: constructor creating an empty string\n  std::string r2(\"test\", 0, -4);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: negative value used as length parameter\n  std::string r3(\"test\", -4, 1); \n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: negative value used as position of the first character parameter\n  std::string r4(\"test\", 0, 0x1000000);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: suspicious large length parameter\n  std::string r5(\"test\", 0, 5);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: length is bigger than string literal size\n  std::string r6(\"test\", 3, 2);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: length is bigger than remaining string literal size\n  std::string r7(\"test\", 4, 1);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: position of the first character parameter is bigger than string literal character range\n}\n\nvoid TestView() {\n  std::string_view q0(\"test\", 0);\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: constructor creating an empty string\n  std::string_view q1(kText, -4);\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: negative value used as length parameter\n  std::string_view q2(\"test\", 200);\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: length is bigger than string literal size\n  std::string_view q3(kText, 200);\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: length is bigger than string literal size\n  std::string_view q4(kText2, 200);\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: length is bigger than string literal size\n  std::string_view q5(kText3, 0x1000000);\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: suspicious large length parameter\n  std::string_view q6(nullptr);\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: constructing string from nullptr is undefined behaviour\n  std::string_view q7 = 0;\n  // CHECK-MESSAGES: [[@LINE-1]]:25: warning: constructing string from nullptr is undefined behaviour\n}\n\nvoid TestUnsignedArguments() {\n  std::string s0(\"test\", 0u);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: constructor creating an empty string\n  std::string s1(0x1000000ull, 'x');\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: suspicious large length parameter\n  std::string s2(\"test\", 3ull, 2u);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: length is bigger than remaining string literal size\n  std::string s3(\"test\", 0u, 5ll);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: length is bigger than string literal size\n}\n\nstd::string StringFromZero() {\n  return 0;\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: constructing string from nullptr is undefined behaviour\n}\n\nstd::string_view StringViewFromZero() {\n  return 0;\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: constructing string from nullptr is undefined behaviour\n}\n\nvoid Valid() {\n  std::string empty();\n  std::string str(4, 'x');\n  std::wstring wstr(4, L'x');\n  std::string s1(\"test\", 4);\n  std::string s2(\"test\", 3);\n  std::string s3(\"test\");\n  std::string s4(\"test\\000\", 5);\n  std::string s6(\"te\" \"st\", 4);\n  std::string s7(\"test\", 0, 4);\n  std::string s8(\"test\", 3, 1);\n  std::string s9(\"te\" \"st\", 1, 2);\n\n  std::string_view emptyv();\n  std::string_view sv1(\"test\", 4);\n  std::string_view sv2(\"test\", 3);\n  std::string_view sv3(\"test\");\n}\n\nnamespace instantiation_dependent_exprs {\ntemplate<typename T>\nstruct S {\n  bool x;\n  std::string f() { return x ? \"a\" : \"b\"; }\n  std::string_view g() { return x ? \"a\" : \"b\"; }\n};\n}"
    }
  ]
}