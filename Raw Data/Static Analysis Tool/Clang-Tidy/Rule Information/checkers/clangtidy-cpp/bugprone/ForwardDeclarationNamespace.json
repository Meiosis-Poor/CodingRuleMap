{
  "name": "ForwardDeclarationNamespace",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-forward-declaration-namespace",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 168,
  "branches": 23,
  "apis": 104,
  "test": [
    {
      "description": null,
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-forward-declaration-namespace %t\n\nnamespace {\n// This is a declaration in a wrong namespace.\nclass T_A;\n// CHECK-NOTES: :[[@LINE-1]]:7: warning: declaration 'T_A' is never referenced, but a declaration with the same name found in another namespace 'na' [bugprone-forward-declaration-namespace]\n// CHECK-NOTES: note: a declaration of 'T_A' is found here\n// CHECK-NOTES: :[[@LINE-3]]:7: warning: no definition found for 'T_A', but a definition with the same name 'T_A' found in another namespace '(global)' [bugprone-forward-declaration-namespace]\n// CHECK-NOTES: note: a definition of 'T_A' is found here\n}\n\nnamespace na {\n// This is a declaration in a wrong namespace.\nclass T_A;\n// CHECK-NOTES: :[[@LINE-1]]:7: warning: declaration 'T_A' is never referenced, but a declaration with the same name found in another namespace '(anonymous)'\n// CHECK-NOTES: note: a declaration of 'T_A' is found here\n// CHECK-NOTES: :[[@LINE-3]]:7: warning: no definition found for 'T_A', but a definition with the same name 'T_A' found in another namespace '(global)'\n// CHECK-NOTES: note: a definition of 'T_A' is found here\n}\n\nclass T_A;\n\nclass T_A {\n  int x;\n};\n\nclass NESTED;\n// CHECK-NOTES: :[[@LINE-1]]:7: warning: no definition found for 'NESTED', but a definition with the same name 'NESTED' found in another namespace '(anonymous namespace)::nq::(anonymous)'\n// CHECK-NOTES: note: a definition of 'NESTED' is found here\n\nnamespace {\nnamespace nq {\nnamespace {\nclass NESTED {};\n}\n}\n}\n\nnamespace na {\nclass T_B;\n// CHECK-NOTES: :[[@LINE-1]]:7: warning: declaration 'T_B' is never referenced, but a declaration with the same name found in another namespace 'nb'\n// CHECK-NOTES: note: a declaration of 'T_B' is found here\n// CHECK-NOTES: :[[@LINE-3]]:7: warning: no definition found for 'T_B', but a definition with the same name 'T_B' found in another namespace 'nb'\n// CHECK-NOTES: note: a definition of 'T_B' is found here\n}\n\nnamespace nb {\nclass T_B;\n}\n\nnamespace nb {\nclass T_B {\n  int x;\n};\n}\n\nnamespace na {\nclass T_B;\n// CHECK-NOTES: :[[@LINE-1]]:7: warning: declaration 'T_B' is never referenced, but a declaration with the same name found in another namespace 'nb'\n// CHECK-NOTES: note: a declaration of 'T_B' is found here\n// CHECK-NOTES: :[[@LINE-3]]:7: warning: no definition found for 'T_B', but a definition with the same name 'T_B' found in another namespace 'nb'\n// CHECK-NOTES: note: a definition of 'T_B' is found here\n}\n\n// A simple forward declaration. Although it is never used, but no declaration\n// with the same name is found in other namespace.\nclass OUTSIDER;\n\nnamespace na {\n// This class is referenced declaration, we don't generate warning.\nclass OUTSIDER_1;\n}\n\nvoid f(na::OUTSIDER_1);\n\nnamespace nc {\n// This class is referenced as friend in OOP.\nclass OUTSIDER_1;\n\nclass OOP {\n  friend struct OUTSIDER_1;\n};\n}\n\nnamespace nd {\nclass OUTSIDER_1;\nvoid f(OUTSIDER_1 *);\n}\n\nnamespace nb {\nclass OUTSIDER_1;\n// CHECK-NOTES: :[[@LINE-1]]:7: warning: declaration 'OUTSIDER_1' is never referenced, but a declaration with the same name found in another namespace 'na'\n// CHECK-NOTES: note: a declaration of 'OUTSIDER_1' is found here\n}\n\n\nnamespace na {\ntemplate<typename T>\nclass T_C;\n}\n\nnamespace nb {\n// FIXME: this is an error, but we don't consider template class declaration\n// now.\ntemplate<typename T>\nclass T_C;\n}\n\nnamespace na {\ntemplate<typename T>\nclass T_C {\n  int x;\n};\n}\n\nnamespace na {\n\ntemplate <typename T>\nclass T_TEMP {\n  template <typename _Tp1>\n  struct rebind { typedef T_TEMP<_Tp1> other; };\n};\n\n// We ignore class template specialization.\ntemplate class T_TEMP<char>;\n}\n\nnamespace nb {\n\ntemplate <typename T>\nclass T_TEMP_1 {\n  template <typename _Tp1>\n  struct rebind { typedef T_TEMP_1<_Tp1> other; };\n};\n\n// We ignore class template specialization.\nextern template class T_TEMP_1<char>;\n}\n\nnamespace nd {\nclass D;\n// CHECK-NOTES: :[[@LINE-1]]:7: warning: declaration 'D' is never referenced, but a declaration with the same name found in another namespace 'nd::ne'\n// CHECK-NOTES: note: a declaration of 'D' is found here\n}\n\nnamespace nd {\nnamespace ne {\nclass D;\n}\n}\n\nint f(nd::ne::D &d);\n\n\n// This should be ignored by the check.\ntemplate <typename... Args>\nclass Observer {\n  class Impl;\n};\n\ntemplate <typename... Args>\nclass Observer<Args...>::Impl {\n};"
    }
  ]
}