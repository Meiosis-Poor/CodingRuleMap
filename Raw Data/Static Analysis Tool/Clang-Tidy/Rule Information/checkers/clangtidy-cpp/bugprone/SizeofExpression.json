{
  "name": "SizeofExpression",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-sizeof-expression",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 526,
  "branches": 66,
  "apis": 567,
  "test": [
    {
      "description": null,
      "expected-problems": 89,
      "expected-linenumbers": [
        5,
        51,
        57,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        146,
        148,
        150,
        152,
        154,
        159,
        161,
        163,
        179,
        185,
        186,
        202,
        207,
        217,
        223,
        226,
        232,
        235,
        243,
        245,
        277,
        279,
        281,
        283,
        285,
        287,
        290,
        292,
        294,
        297,
        299,
        303,
        305,
        307,
        309,
        312,
        313,
        315,
        332,
        334,
        336,
        338,
        340,
        342,
        344,
        346,
        348,
        350,
        370,
        371,
        378,
        379,
        390,
        416
      ],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-sizeof-expression %t -- -config=\"{CheckOptions: {bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression: true}}\" --\n\nclass C {\n  int size() { return sizeof(this); }\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: suspicious usage of 'sizeof(this)'\n};\n\n#define LEN 8\n\nint X;\nextern int A[10];\nextern short B[10];\n\n#pragma pack(1)\nstruct  S { char a, b, c; };\n\nenum E { E_VALUE = 0 };\nenum class EC { VALUE = 0 };\n\nbool AsBool() { return false; }\nint AsInt() { return 0; }\nE AsEnum() { return E_VALUE; }\nEC AsEnumClass() { return EC::VALUE; }\nS AsStruct() { return {}; }\n\nstruct M {\n  int AsInt() { return 0; }\n  E AsEnum() { return E_VALUE; }\n  S AsStruct() { return {}; }\n};\n\nint ReturnOverload(int) { return {}; }\nS ReturnOverload(S) { return {}; }\n\ntemplate <class T>\nT ReturnTemplate(T) { return {}; }\n\ntemplate <class T>\nbool TestTrait1() {\n  return sizeof(ReturnOverload(T{})) == sizeof(A);\n}\n\ntemplate <class T>\nbool TestTrait2() {\n  return sizeof(ReturnTemplate(T{})) == sizeof(A);\n}\n\ntemplate <class T>\nbool TestTrait3() {\n  return sizeof(ReturnOverload(0)) == sizeof(T{});\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of integer type\n}\n\ntemplate <class T>\nbool TestTrait4() {\n  return sizeof(ReturnTemplate(0)) == sizeof(T{});\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of integer type\n}\n\nbool TestTemplates() {\n  bool b = true;\n  b &= TestTrait1<int>();\n  b &= TestTrait1<S>();\n  b &= TestTrait2<int>();\n  b &= TestTrait2<S>();\n  b &= TestTrait3<int>();\n  b &= TestTrait3<S>();\n  b &= TestTrait4<int>();\n  b &= TestTrait4<S>();\n  return b;\n}\n\nint Test1(const char* ptr) {\n  int sum = 0;\n  sum += sizeof(LEN);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(K)'\n  sum += sizeof(LEN + 1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(K)'\n  sum += sizeof(sum, LEN);\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: suspicious usage of 'sizeof(..., ...)'\n  sum += sizeof(AsBool());\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of integer type\n  sum += sizeof(AsInt());\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of integer type\n  sum += sizeof(AsEnum());\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of integer type\n  sum += sizeof(AsEnumClass());\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of integer type\n  sum += sizeof(M{}.AsInt());\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of integer type\n  sum += sizeof(M{}.AsEnum());\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of integer type\n  sum += sizeof(sizeof(X));\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(sizeof(...))'\n  sum += sizeof(LEN + sizeof(X));\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(sizeof(...))'\n  sum += sizeof(LEN + LEN + sizeof(X));\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(sizeof(...))'\n  sum += sizeof(LEN + (LEN + sizeof(X)));\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(sizeof(...))'\n  sum += sizeof(LEN + -sizeof(X));\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(sizeof(...))'\n  sum += sizeof(LEN + - + -sizeof(X));\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(sizeof(...))'\n  sum += sizeof(char) / sizeof(char);\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; both expressions have the same type\n  sum += sizeof(A) / sizeof(S);\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; numerator is not a multiple of denominator\n  sum += sizeof(char) / sizeof(int);\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; numerator is not a multiple of denominator\n  sum += sizeof(char) / sizeof(A);\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; numerator is not a multiple of denominator\n  sum += sizeof(B[0]) / sizeof(A);\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; numerator is not a multiple of denominator\n  sum += sizeof(ptr) / sizeof(char);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; size of pointer is divided by size of pointed type\n  sum += sizeof(ptr) / sizeof(ptr[0]);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; size of pointer is divided by size of pointed type\n  sum += sizeof(ptr) / sizeof(char*);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; both expressions have pointer types\n  sum += sizeof(ptr) / sizeof(void*);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; both expressions have pointer types\n  sum += sizeof(ptr) / sizeof(const void volatile*);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; both expressions have pointer types\n  sum += sizeof(ptr) / sizeof(char);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; size of pointer is divided by size of pointed type\n  sum += sizeof(int) * sizeof(char);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: suspicious 'sizeof' by 'sizeof' multiplication\n  sum += sizeof(ptr) * sizeof(ptr[0]);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: suspicious 'sizeof' by 'sizeof' multiplication\n  sum += sizeof(int) * (2 * sizeof(char));\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: suspicious 'sizeof' by 'sizeof' multiplication\n  sum += (2 * sizeof(char)) * sizeof(int);\n  // CHECK-MESSAGES: :[[@LINE-1]]:29: warning: suspicious 'sizeof' by 'sizeof' multiplication\n  if (sizeof(A) < 0x100000) sum += 42;\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: suspicious comparison of 'sizeof(expr)' to a constant\n  if (sizeof(A) <= 0xFFFFFFFEU) sum += 42;\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: suspicious comparison of 'sizeof(expr)' to a constant\n  return sum;\n}\n\ntypedef char MyChar;\ntypedef const MyChar MyConstChar;\n\nint CE0 = sizeof sizeof(char);\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: suspicious usage of 'sizeof(sizeof(...))'\nint CE1 = sizeof +sizeof(char);\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: suspicious usage of 'sizeof(sizeof(...))'\nint CE2 = sizeof sizeof(const char*);\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: suspicious usage of 'sizeof(sizeof(...))'\nint CE3 = sizeof sizeof(const volatile char* const*);\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: suspicious usage of 'sizeof(sizeof(...))'\nint CE4 = sizeof sizeof(MyConstChar);\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: suspicious usage of 'sizeof(sizeof(...))'\n\nint Test2(MyConstChar* A) {\n  int sum = 0;\n  sum += sizeof(MyConstChar) / sizeof(char);\n  // CHECK-MESSAGES: :[[@LINE-1]]:30: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; both expressions have the same type\n  sum += sizeof(MyConstChar) / sizeof(MyChar);\n  // CHECK-MESSAGES: :[[@LINE-1]]:30: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; both expressions have the same type\n  sum += sizeof(A[0]) / sizeof(char);\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; both expressions have the same type\n  return sum;\n}\n\nstruct A {\n   int array[10];\n};\n\nstruct B {\n  struct A a;\n};\n\nvoid loop_access_elements(int num, struct B b) {\n  struct A arr[10];\n  char buf[20];\n\n  // CHECK-MESSAGES: :[[@LINE+1]]:22: warning: suspicious usage of 'sizeof' in the loop [bugprone-sizeof-expression]\n  for(int i = 0; i < sizeof(arr); i++) {\n    struct A a = arr[i];\n  }\n\n  // Loop warning should not trigger here, even though this code is incorrect\n  // CHECK-MESSAGES: :[[@LINE+2]]:22: warning: suspicious usage of 'sizeof(K)'; did you mean 'K'? [bugprone-sizeof-expression]\n  // CHECK-MESSAGES: :[[@LINE+1]]:32: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; numerator is not a multiple of denominator [bugprone-sizeof-expression] \n  for(int i = 0; i < sizeof(10)/sizeof(A); i++) {\n    struct A a = arr[i];\n  }\n    \n  // Should not warn here\n  for(int i = 0; i < sizeof(arr)/sizeof(A); i++) {}\n\n  // Should not warn here\n  for (int i = 0; i < 10; i++) {\n    if (sizeof(arr) != 0) {\n\n    }\n  }\n\n  for (int i = 0; i < 10; i++) {\n    // CHECK-MESSAGES: :[[@LINE+1]]:25: warning: suspicious usage of 'sizeof' in the loop [bugprone-sizeof-expression]\n    for (int j = 0; j < sizeof(arr); j++) {\n    }\n  }\n\n  // CHECK-MESSAGES: :[[@LINE+1]]:22: warning: suspicious usage of 'sizeof' in the loop [bugprone-sizeof-expression]\n  for(int j = 0; j < sizeof(b.a.array); j++) {}\n  \n  // Should not warn here\n  for(int i = 0; i < sizeof(buf); i++) {} \n\n  // Should not warn here\n  for(int i = 0; i < (sizeof(arr) << 3); i++) {}\n  \n  int i = 0;\n  // CHECK-MESSAGES: :[[@LINE+1]]:14: warning: suspicious usage of 'sizeof' in the loop [bugprone-sizeof-expression]\n  while(i <= sizeof(arr)) {i++;}\n   \n  i = 0;\n  do {\n    i++;\n  // CHECK-MESSAGES: :[[@LINE+1]]:16: warning: suspicious usage of 'sizeof' in the loop [bugprone-sizeof-expression] \n  } while(i <= sizeof(arr));\n\n  // CHECK-MESSAGES: :[[@LINE+1]]:29: warning: suspicious usage of 'sizeof' in the loop [bugprone-sizeof-expression]\n  for(int i = 0, j = 0; i < sizeof(arr) && j < sizeof(buf); i++, j++) {}\n}\n\ntemplate <int T>\nint Foo() { int A[T]; return sizeof(T); }\n// CHECK-MESSAGES: :[[@LINE-1]]:30: warning: suspicious usage of 'sizeof(K)'\ntemplate <typename T>\nint Bar() { T A[5]; return sizeof(A[0]) / sizeof(T); }\n// CHECK-MESSAGES: :[[@LINE-1]]:41: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; both expressions have the same type\nint Test3() { return Foo<42>() + Bar<char>(); }\n\nstatic const char* kABC = \"abc\";\nstatic const wchar_t* kDEF = L\"def\";\nint Test4(const char A[10]) {\n  int sum = 0;\n  sum += sizeof(kABC);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(char*)'\n  sum += sizeof(kDEF);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(char*)'\n  return sum;\n}\n\nint Test5() {\n  typedef int Array10[10];\n  typedef C ArrayC[10];\n\n  struct MyStruct {\n    Array10 arr;\n    Array10* ptr;\n  };\n  typedef const MyStruct TMyStruct;\n  typedef const MyStruct *PMyStruct;\n  typedef TMyStruct *PMyStruct2;\n\n  static TMyStruct kGlocalMyStruct = {};\n  static TMyStruct volatile * kGlocalMyStructPtr = &kGlocalMyStruct;\n\n  MyStruct S;\n  PMyStruct PS;\n  PMyStruct2 PS2;\n  Array10 A10;\n  C *PtrArray[10];\n  C *PC;\n\n  char *PChar;\n  int *PInt, **PPInt;\n  MyStruct **PPMyStruct;\n\n  int sum = 0;\n  sum += sizeof(&S.arr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(&kGlocalMyStruct.arr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(&kGlocalMyStructPtr->arr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(S.arr + 0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(+ S.arr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof((int*)S.arr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n\n  sum += sizeof(S.ptr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(kGlocalMyStruct.ptr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(kGlocalMyStructPtr->ptr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n\n  sum += sizeof(&kGlocalMyStruct);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(&S);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(MyStruct*);\n  sum += sizeof(PMyStruct);\n  sum += sizeof(PS);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(PS2);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(&A10);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(PtrArray) / sizeof(PtrArray[1]);\n  // CHECK-MESSAGES: :[[@LINE-1]]:29: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  sum += sizeof(A10) / sizeof(PtrArray[0]);\n  sum += sizeof(PC) / sizeof(PtrArray[0]);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n  // CHECK-MESSAGES: :[[@LINE-2]]:21: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; both expressions have the same type\n  sum += sizeof(ArrayC) / sizeof(PtrArray[0]);\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: suspicious usage of 'sizeof(...)/sizeof(...)'; numerator is not a multiple of denominator\n\n  // These pointers do not point to aggregate types, so they are not reported in this mode:\n  sum += sizeof(PChar);\n  sum += sizeof(PInt);\n  sum += sizeof(PPInt);\n  sum += sizeof(PPMyStruct);\n\n  return sum;\n}\n\nint Test6() {\n  int sum = 0;\n\n  struct S A = AsStruct(), B = AsStruct();\n  struct S *P = &A, *Q = &B;\n  sum += sizeof(struct S) == P - Q;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic\n  sum += 5 * sizeof(S) != P - Q;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic\n  sum += sizeof(S) < P - Q;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic\n  sum += 5 * sizeof(S) <= P - Q;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic\n  sum += 5 * sizeof(*P) >= P - Q;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic\n  sum += Q - P > 3 * sizeof(*P);\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic\n  sum += sizeof(S) + (P - Q);\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic\n  sum += 5 * sizeof(S) - (P - Q);\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic\n  sum += (P - Q) / sizeof(S);\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic\n  sum += (P - Q) / sizeof(*Q);\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic\n\n  return sum;\n}\n\nstatic constexpr inline int BufferSize = 1024;\n\ntemplate <typename T>\nT next(const T *&Read) {\n  T value = *Read;\n  Read += sizeof(T);\n  return value;\n}\n\nvoid Test7() {\n  int Buffer[BufferSize];\n  int *P = &Buffer[0];\n\n  const int *P2 = P;\n  int V1 = next(P2);\n  // CHECK-MESSAGES: :[[@LINE-10]]:8: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic; this scaled value will be scaled again by the '+=' operator\n  // CHECK-MESSAGES: :[[@LINE-11]]:8: note: '+=' in pointer arithmetic internally scales with 'sizeof(const int)' == {{[0-9]+}}\n  int V2 = next(P2);\n  (void)V1;\n  (void)V2;\n\n  int *Q = P;\n  while (Q < P + sizeof(Buffer)) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: suspicious usage of 'sizeof(...)' in pointer arithmetic; this scaled value will be scaled again by the '+' operator\n    // CHECK-MESSAGES: :[[@LINE-2]]:16: note: '+' in pointer arithmetic internally scales with 'sizeof(int)' == {{[0-9]+}}\n    *Q++ = 0;\n  }\n}\n\n#ifdef __SIZEOF_INT128__\ntemplate <__int128_t N>\n#else\ntemplate <long N> // Fallback for platforms which do not define `__int128_t`\n#endif\nbool Baz() { return sizeof(A) < N; }\n// CHECK-MESSAGES: :[[@LINE-1]]:31: warning: suspicious comparison of 'sizeof(expr)' to a constant\nbool Test8() { return Baz<-1>(); }\n\nvoid some_generic_function(const void *arg, int argsize);\nint *IntP, **IntPP;\nC *ClassP, **ClassPP;\n\nvoid GenericFunctionTest() {\n  // The `sizeof(pointer)` checks ignore situations where the pointer is\n  // produced by dereferencing a pointer-to-pointer, because this is unlikely\n  // to be an accident and can appear in legitimate code that tries to call\n  // a generic function which emulates dynamic typing within C.\n  some_generic_function(IntPP, sizeof(*IntPP));\n  some_generic_function(ClassPP, sizeof(*ClassPP));\n  // Using `...[0]` instead of the dereference operator is another common\n  // variant, which is also widespread in the idiomatic array-size calculation:\n  // `sizeof(array) / sizeof(array[0])`.\n  some_generic_function(IntPP, sizeof(IntPP[0]));\n  some_generic_function(ClassPP, sizeof(ClassPP[0]));\n  // FIXME: There is a third common pattern where the generic function is\n  // called with `&Variable` and `sizeof(Variable)`. Right now these are\n  // reported by the `sizeof(pointer)` checks, but this causes some false\n  // positives, so it would be good to create an exception for them.\n  // NOTE: `sizeof(IntP)` is only reported with `WarnOnSizeOfPointer=true`.\n  some_generic_function(&IntPP, sizeof(IntP));\n  some_generic_function(&ClassPP, sizeof(ClassP));\n  // CHECK-MESSAGES: :[[@LINE-1]]:35: warning: suspicious usage of 'sizeof()' on an expression of pointer type\n}\n\nint ValidExpressions() {\n  int A[] = {1, 2, 3, 4};\n  static const char str[] = \"hello\";\n  static const char* ptr[] { \"aaa\", \"bbb\", \"ccc\" };\n  typedef C *CA10[10];\n  C *PtrArray[10];\n  CA10 PtrArray1;\n\n  int sum = 0;\n  if (sizeof(A) < 10)\n    sum += sizeof(A);\n  sum += sizeof(int);\n  sum += sizeof(AsStruct());\n  sum += sizeof(M{}.AsStruct());\n  sum += sizeof(A[sizeof(A) / sizeof(int)]);\n  sum += sizeof(&A[sizeof(A) / sizeof(int)]);\n  sum += sizeof(sizeof(0));  // Special case: sizeof size_t.\n  sum += sizeof(void*);\n  sum += sizeof(void const *);\n  sum += sizeof(void const *) / 4;\n  sum += sizeof(str);\n  sum += sizeof(str) / sizeof(char);\n  sum += sizeof(str) / sizeof(str[0]);\n  sum += sizeof(ptr) / sizeof(ptr[0]);\n  sum += sizeof(ptr) / sizeof(*(ptr));\n  sum += sizeof(PtrArray) / sizeof(PtrArray[0]);\n  // Canonical type of PtrArray1 is same as PtrArray.\n  sum = sizeof(PtrArray) / sizeof(PtrArray1[0]);\n  // There is no warning for 'sizeof(T*)/sizeof(Q)' case.\n  sum += sizeof(PtrArray) / sizeof(A[0]);\n  return sum;\n}\n\nnamespace gh115175 {\ntemplate<class T>\nint ValidateTemplateTypeExpressions(T t) {\n  return sizeof(t.val) / sizeof(t.val[0]);\n}\n} // namespace gh115175"
    }
  ]
}