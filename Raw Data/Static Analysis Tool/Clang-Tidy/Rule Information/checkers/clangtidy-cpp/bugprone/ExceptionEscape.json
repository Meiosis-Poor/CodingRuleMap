{
  "name": "ExceptionEscape",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-exception-escape",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 90,
  "branches": 3,
  "apis": 56,
  "test": [
    {
      "description": null,
      "expected-problems": 138,
      "expected-linenumbers": [
        11,
        15,
        19,
        23,
        27,
        31,
        34,
        37,
        40,
        48,
        55,
        58,
        68,
        77,
        84,
        87,
        94,
        97,
        106,
        130,
        137,
        176,
        183,
        186,
        193,
        196,
        203,
        206,
        213,
        216,
        223,
        226,
        233,
        239,
        273,
        281,
        298,
        305,
        308,
        315,
        318,
        325,
        328,
        335,
        338,
        345,
        348,
        355,
        368,
        377,
        390,
        399,
        454,
        460,
        470,
        477,
        488,
        495,
        498,
        505,
        508,
        517,
        520,
        532,
        542,
        545,
        557,
        569,
        580,
        591,
        594,
        595,
        598,
        601,
        602,
        605,
        614,
        620,
        623,
        626,
        629,
        632,
        635,
        646,
        651,
        654,
        657,
        660,
        661,
        664,
        684,
        687,
        688,
        689,
        690,
        704,
        707,
        708,
        709,
        718,
        727,
        733,
        738,
        747,
        751,
        758,
        763,
        764,
        774,
        779,
        780,
        788,
        790,
        791,
        797,
        799,
        800,
        806,
        808,
        809,
        819,
        821,
        822,
        825,
        829,
        835,
        836,
        845,
        849,
        850,
        867,
        868,
        871,
        872,
        874,
        875,
        881,
        890
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++11,c++14 %s bugprone-exception-escape %t -- \\\n// RUN:     -config=\"{CheckOptions: { \\\n// RUN:         bugprone-exception-escape.IgnoredExceptions: 'ignored1,ignored2', \\\n// RUN:         bugprone-exception-escape.FunctionsThatShouldNotThrow: 'enabled1,enabled2,enabled3' \\\n// RUN:     }}\" \\\n// RUN:     -- -fexceptions\n// FIXME: Fix the checker to work in C++17 or later mode.\n\nstruct throwing_destructor {\n  ~throwing_destructor() {\n    // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: an exception may be thrown in function '~throwing_destructor' which should not throw exceptions\n    throw 1;\n  }\n};\n// CHECK-MESSAGES: :[[@LINE-3]]:5: note: frame #0: unhandled exception of type 'int' may be thrown in function '~throwing_destructor' here\n\nstruct throwing_move_constructor {\n  throwing_move_constructor(throwing_move_constructor&&) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: an exception may be thrown in function 'throwing_move_constructor' which should not throw exceptions\n    throw 1;\n  }\n};\n// CHECK-MESSAGES: :[[@LINE-3]]:5: note: frame #0: unhandled exception of type 'int' may be thrown in function 'throwing_move_constructor' here\n\nstruct throwing_move_assignment {\n  throwing_move_assignment& operator=(throwing_move_assignment&&) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:29: warning: an exception may be thrown in function 'operator=' which should not throw exceptions\n    throw 1;\n  }\n};\n// CHECK-MESSAGES: :[[@LINE-3]]:5: note: frame #0: unhandled exception of type 'int' may be thrown in function 'operator=' here\n\nvoid throwing_noexcept() noexcept {\n    // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throwing_noexcept' which should not throw exceptions\n  throw 1;\n}\n// CHECK-MESSAGES: :[[@LINE-2]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'throwing_noexcept' here\n\nvoid throw_and_catch() noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_and_catch' which should not throw exceptions\n  try {\n    throw 1;\n  } catch(int &) {\n  }\n}\n\nvoid throw_and_catch_some(int n) noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_and_catch_some' which should not throw exceptions\n  try {\n    if (n) throw 1;\n    throw 1.1;\n  } catch(int &) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'double' may be thrown in function 'throw_and_catch_some' here\n\nvoid throw_and_catch_each(int n) noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_and_catch_each' which should not throw exceptions\n  try {\n    if (n) throw 1;\n    throw 1.1;\n  } catch(int &) {\n  } catch(double &) {\n  }\n}\n\nvoid throw_and_catch_all(int n) noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_and_catch_all' which should not throw exceptions\n  try {\n    if (n) throw 1;\n    throw 1.1;\n  } catch(...) {\n  }\n}\n\nvoid throw_and_rethrow() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_and_rethrow' which should not throw exceptions\n  try {\n    throw 1;\n  } catch(int &) {\n    throw;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:5: note: frame #0: unhandled exception of type 'int' may be thrown in function 'throw_and_rethrow' here\n\nvoid throw_catch_throw() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_catch_throw' which should not throw exceptions\n  try {\n    throw 1;\n  } catch(int &) {\n    throw 2;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:5: note: frame #0: unhandled exception of type 'int' may be thrown in function 'throw_catch_throw' here\n\nvoid throw_catch_rethrow_the_rest(int n) noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_catch_rethrow_the_rest' which should not throw exceptions\n  try {\n    if (n) throw 1;\n    throw 1.1;\n  } catch(int &) {\n  } catch(...) {\n    throw;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-6]]:5: note: frame #0: unhandled exception of type 'double' may be thrown in function 'throw_catch_rethrow_the_rest' here\n\nvoid throw_catch_pointer_c() noexcept {\n  try {\n    int a = 1;\n    throw &a;\n  } catch(const int *) {}\n}\n\nvoid throw_catch_pointer_v() noexcept {\n  try {\n    int a = 1;\n    throw &a;\n  } catch(volatile int *) {}\n}\n\nvoid throw_catch_pointer_cv() noexcept {\n  try {\n    int a = 1;\n    throw &a;\n  } catch(const volatile int *) {}\n}\n\nvoid throw_catch_multi_ptr_1() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_catch_multi_ptr_1' which should not throw exceptions\n  try {\n    char **p = 0;\n    throw p;\n  } catch (const char **) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'char **' may be thrown in function 'throw_catch_multi_ptr_1' here\n\nvoid throw_catch_multi_ptr_2() noexcept {\n  try {\n    char **p = 0;\n    throw p;\n  } catch (const char *const *) {\n  }\n}\n\nvoid throw_catch_multi_ptr_3() noexcept {\n  try {\n    char **p = 0;\n    throw p;\n  } catch (volatile char *const *) {\n  }\n}\n\nvoid throw_catch_multi_ptr_4() noexcept {\n  try {\n    char **p = 0;\n    throw p;\n  } catch (volatile const char *const *) {\n  }\n}\n\n// FIXME: In this case 'a' is convertible to the handler and should be caught\n// but in reality it's thrown. Note that clang doesn't report a warning for\n// this either.\nvoid throw_catch_multi_ptr_5() noexcept {\n  try {\n    double *a[2][3];\n    throw a;\n  } catch (double *(*)[3]) {\n  }\n}\n\n\nvoid throw_c_catch_pointer() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_c_catch_pointer' which should not throw exceptions\n  try {\n    int a = 1;\n    const int *p = &a;\n    throw p;\n  } catch(int *) {}\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:5: note: frame #0: unhandled exception of type 'const int *' may be thrown in function 'throw_c_catch_pointer' here\n\nvoid throw_c_catch_pointer_v() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_c_catch_pointer_v' which should not throw exceptions\n  try {\n    int a = 1;\n    const int *p = &a;\n    throw p;\n  } catch(volatile int *) {}\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:5: note: frame #0: unhandled exception of type 'const int *' may be thrown in function 'throw_c_catch_pointer_v' here\n\nvoid throw_v_catch_pointer() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_v_catch_pointer' which should not throw exceptions\n  try {\n    int a = 1;\n    volatile int *p = &a;\n    throw p;\n  } catch(int *) {}\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:5: note: frame #0: unhandled exception of type 'volatile int *' may be thrown in function 'throw_v_catch_pointer' here\n\nvoid throw_v_catch_pointer_c() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_v_catch_pointer_c' which should not throw exceptions\n  try {\n    int a = 1;\n    volatile int *p = &a;\n    throw p;\n  } catch(const int *) {}\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:5: note: frame #0: unhandled exception of type 'volatile int *' may be thrown in function 'throw_v_catch_pointer_c' here\n\nvoid throw_cv_catch_pointer_c() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_cv_catch_pointer_c' which should not throw exceptions\n  try {\n    int a = 1;\n    const volatile int *p = &a;\n    throw p;\n  } catch(const int *) {}\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:5: note: frame #0: unhandled exception of type 'const volatile int *' may be thrown in function 'throw_cv_catch_pointer_c' here\n\nvoid throw_cv_catch_pointer_v() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_cv_catch_pointer_v' which should not throw exceptions\n  try {\n    int a = 1;\n    const volatile int *p = &a;\n    throw p;\n  } catch(volatile int *) {}\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:5: note: frame #0: unhandled exception of type 'const volatile int *' may be thrown in function 'throw_cv_catch_pointer_v' here\n\nclass base {};\nclass derived: public base {};\n\nvoid throw_derived_catch_base() noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_derived_catch_base' which should not throw exceptions\n  try {\n    throw derived();\n  } catch(base &) {\n  }\n}\n\nvoid throw_derived_alias_catch_base() noexcept {\n  using alias = derived;\n\n  try {\n    throw alias();\n  } catch(base &) {\n  }\n}\n\nvoid throw_derived_catch_base_alias() noexcept {\n  using alias = base;\n\n  try {\n    throw derived();\n  } catch(alias &) {\n  }\n}\n\nvoid throw_derived_catch_base_ptr_c() noexcept {\n  try {\n    derived d;\n    throw &d;\n  } catch(const base *) {\n  }\n}\n\nvoid throw_derived_catch_base_ptr() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_derived_catch_base_ptr' which should not throw exceptions\n  try {\n    derived d;\n    const derived *p = &d;\n    throw p;\n  } catch(base *) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'const derived *' may be thrown in function 'throw_derived_catch_base_ptr' here\n\nclass A {};\nclass B : A {};\n\n// The following alias hell is deliberately created for testing.\nusing aliasedA = A;\nclass C : protected aliasedA {};\n\ntypedef aliasedA moreAliasedA;\nclass D : public moreAliasedA {};\n\nusing moreMoreAliasedA = moreAliasedA;\nusing aliasedD = D;\nclass E : public moreMoreAliasedA, public aliasedD {};\n\nvoid throw_derived_catch_base_private() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_derived_catch_base_private' which should not throw exceptions\n  try {\n    B b;\n    throw b;\n  } catch(A) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'B' may be thrown in function 'throw_derived_catch_base_private' here\n\nvoid throw_derived_catch_base_private_ptr() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_derived_catch_base_private_ptr' which should not throw exceptions\n  try {\n    B b;\n    throw &b;\n  } catch(A *) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'B *' may be thrown in function 'throw_derived_catch_base_private_ptr' here\n\nvoid throw_derived_catch_base_protected() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_derived_catch_base_protected' which should not throw exceptions\n  try {\n    C c;\n    throw c;\n  } catch(A) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'C' may be thrown in function 'throw_derived_catch_base_protected' here\n\nvoid throw_derived_catch_base_protected_ptr() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_derived_catch_base_protected_ptr' which should not throw exceptions\n  try {\n    C c;\n    throw &c;\n  } catch(A *) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'C *' may be thrown in function 'throw_derived_catch_base_protected_ptr' here\n\nvoid throw_derived_catch_base_ambiguous() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_derived_catch_base_ambiguous' which should not throw exceptions\n  try {\n    E e;\n    throw e;\n  } catch(A) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'E' may be thrown in function 'throw_derived_catch_base_ambiguous' here\n\nvoid throw_derived_catch_base_ambiguous_ptr() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_derived_catch_base_ambiguous_ptr' which should not throw exceptions\n  try {\n    E e;\n    throw e;\n  } catch(A) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'E' may be thrown in function 'throw_derived_catch_base_ambiguous_ptr' here\n\nvoid throw_alias_catch_original() noexcept {\n  using alias = int;\n\n  try {\n    alias a = 3;\n    throw a;\n  } catch (int) {\n  }\n}\n\nvoid throw_alias_catch_original_warn() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_alias_catch_original_warn' which should not throw exceptions\n  using alias = float;\n\n  try {\n    alias a = 3;\n    throw a;\n  } catch (int) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'float' may be thrown in function 'throw_alias_catch_original_warn' here\n\nvoid throw_original_catch_alias() noexcept {\n  using alias = char;\n\n  try {\n    char **p = 0;\n    throw p;\n  } catch (volatile const alias *const *) {\n  }\n}\n\nvoid throw_original_catch_alias_warn() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_original_catch_alias_warn' which should not throw exceptions\n  using alias = int;\n\n  try {\n    char **p = 0;\n    throw p;\n  } catch (volatile const alias *const *) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'char **' may be thrown in function 'throw_original_catch_alias_warn' here\n\nvoid throw_original_catch_alias_2() noexcept {\n  using alias = const char *const;\n\n  try {\n    char **p = 0;\n    throw p;\n  } catch (volatile alias *) {\n  }\n}\n\nnamespace a {\n  int foo() { return 0; };\n\n  void throw_regular_catch_regular() noexcept {\n    try {\n      throw &foo;\n    } catch(int (*)()) {\n    }\n  }\n}\n\nnamespace b {\n  inline int foo() { return 0; };\n\n  void throw_inline_catch_regular() noexcept {\n    try {\n      throw &foo;\n    } catch(int (*)()) {\n    }\n  }\n}\n\nnamespace c {\n  inline int foo() noexcept { return 0; };\n\n  void throw_noexcept_catch_regular() noexcept {\n    try {\n      throw &foo;\n    } catch(int (*)()) {\n    }\n  }\n}\n\nstruct baseMember {\n    int *iptr;\n    virtual void foo(){};\n};\n\nstruct derivedMember : baseMember {\n    void foo() override {};\n};\n\nvoid throw_basefn_catch_derivedfn() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_basefn_catch_derivedfn' which should not throw exceptions\n  try {\n    throw &baseMember::foo;\n  } catch(void(derivedMember::*)()) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'void (baseMember::*)()' may be thrown in function 'throw_basefn_catch_derivedfn' here\n\nvoid throw_basefn_catch_basefn() noexcept {\n  try {\n    throw &baseMember::foo;\n  } catch(void(baseMember::*)()) {\n  }\n}\n\nvoid throw_basem_catch_basem_throw() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_basem_catch_basem_throw' which should not throw exceptions\n  try {\n    auto ptr = &baseMember::iptr;\n    throw &ptr;\n  } catch(const int* baseMember::* const *) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'int *baseMember::**' may be thrown in function 'throw_basem_catch_basem_throw' here\n\nvoid throw_basem_catch_basem() noexcept {\n  try {\n    auto ptr = &baseMember::iptr;\n    throw &ptr;\n  } catch(const int* const baseMember::* const *) {\n  }\n}\n\nvoid throw_basem_catch_derivedm() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_basem_catch_derivedm' which should not throw exceptions\n  try {\n    auto ptr = &baseMember::iptr;\n    throw &ptr;\n  } catch(const int* const derivedMember::* const *) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'int *baseMember::**' may be thrown in function 'throw_basem_catch_derivedm' here\n\nvoid throw_derivedm_catch_basem() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_derivedm_catch_basem' which should not throw exceptions\n  try {\n    int *derivedMember::* ptr = &derivedMember::iptr;\n    throw &ptr;\n  } catch(const int* const baseMember::* const *) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'int *derivedMember::**' may be thrown in function 'throw_derivedm_catch_basem' here\n\nvoid throw_original_catch_alias_2_warn() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'throw_original_catch_alias_2_warn' which should not throw exceptions\n  using alias = const int *const;\n\n  try {\n    char **p = 0;\n    throw p;\n  } catch (volatile alias *) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #0: unhandled exception of type 'char **' may be thrown in function 'throw_original_catch_alias_2_warn' here\n\nvoid try_nested_try(int n) noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'try_nested_try' which should not throw exceptions\n  try {\n    try {\n      if (n) throw 1;\n      throw 1.1;\n    } catch(int &) {\n    }\n  } catch(double &) {\n  }\n}\n\nvoid bad_try_nested_try(int n) noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'bad_try_nested_try' which should not throw exceptions\n  try {\n    if (n) throw 1;\n    try {\n      throw 1.1;\n    } catch(int &) {\n    }\n  } catch(double &) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-8]]:12: note: frame #0: unhandled exception of type 'int' may be thrown in function 'bad_try_nested_try' here\n\nvoid try_nested_catch() noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'try_nested_catch' which should not throw exceptions\n  try {\n    try {\n      throw 1;\n    } catch(int &) {\n      throw 1.1;\n    }\n  } catch(double &) {\n  }\n}\n\nvoid catch_nested_try() noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'catch_nested_try' which should not throw exceptions\n  try {\n    throw 1;\n  } catch(int &) {\n    try {\n      throw 1;\n    } catch(int &) {\n    }\n  }\n}\n\nvoid bad_catch_nested_try() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'bad_catch_nested_try' which should not throw exceptions\n  try {\n    throw 1;\n  } catch(int &) {\n    try {\n      throw 1.1;\n    } catch(int &) {\n    }\n  } catch(double &) {\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-6]]:7: note: frame #0: unhandled exception of type 'double' may be thrown in function 'bad_catch_nested_try' here\n\nvoid implicit_int_thrower() {\n  throw 1;\n}\n\nvoid explicit_int_thrower() noexcept(false) {\n  throw 1;\n}\n\nvoid indirect_implicit() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'indirect_implicit' which should not throw exceptions\n  implicit_int_thrower();\n}\n// CHECK-MESSAGES: :[[@LINE-11]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'implicit_int_thrower' here\n// CHECK-MESSAGES: :[[@LINE-3]]:3: note: frame #1: function 'indirect_implicit' calls function 'implicit_int_thrower' here\n\nvoid indirect_explicit() noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'indirect_explicit' which should not throw exceptions\n  explicit_int_thrower();\n}\n// CHECK-MESSAGES: :[[@LINE-14]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'explicit_int_thrower' here\n// CHECK-MESSAGES: :[[@LINE-3]]:3: note: frame #1: function 'indirect_explicit' calls function 'explicit_int_thrower' here\n\nvoid indirect_catch() noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'indirect_catch' which should not throw exceptions\n  try {\n    implicit_int_thrower();\n  } catch(int&) {\n  }\n}\n\ntemplate<typename T>\nvoid dependent_throw() noexcept(sizeof(T)<4) {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'dependent_throw' which should not throw exceptions\n  if (sizeof(T) > 4)\n    throw 1;\n}\n\nvoid swap(int&, int&) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'swap' which should not throw exceptions\n  throw 1;\n}\n// CHECK-MESSAGES: :[[@LINE-2]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'swap' here\n\nvoid iter_swap(int&, int&) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'iter_swap' which should not throw exceptions\n  throw 1;\n}\n// CHECK-MESSAGES: :[[@LINE-2]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'iter_swap' here\n\nvoid iter_move(int&) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'iter_move' which should not throw exceptions\n  throw 1;\n}\n// CHECK-MESSAGES: :[[@LINE-2]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'iter_move' here\n\nnamespace std {\nclass bad_alloc {};\n}\n\nvoid alloc() {\n  throw std::bad_alloc();\n}\n\nvoid allocator() noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'allocator' which should not throw exceptions\n  alloc();\n}\n\nvoid enabled1() {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'enabled1' which should not throw exceptions\n  throw 1;\n}\n// CHECK-MESSAGES: :[[@LINE-2]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'enabled1' here\n\nvoid enabled2() {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'enabled2' which should not throw exceptions\n  enabled1();\n}\n// CHECK-MESSAGES: :[[@LINE-8]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'enabled1' here\n// CHECK-MESSAGES: :[[@LINE-3]]:3: note: frame #1: function 'enabled2' calls function 'enabled1' here\n\nvoid enabled3() {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'enabled3' which should not throw exceptions\n  try {\n    enabled1();\n  } catch(...) {\n  }\n}\n\nvoid deep_level3_thrower() {\n  throw 42;\n}\n\nvoid deep_level2_caller() {\n  deep_level3_thrower();\n}\n\nvoid deep_level1_caller() {\n  deep_level2_caller();\n}\n\nvoid deep_stack_test() noexcept {\n// CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'deep_stack_test' which should not throw exceptions\n  deep_level1_caller();\n}\n// CHECK-MESSAGES: :[[@LINE-15]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'deep_level3_thrower' here\n// CHECK-MESSAGES: :[[@LINE-12]]:3: note: frame #1: function 'deep_level2_caller' calls function 'deep_level3_thrower' here\n// CHECK-MESSAGES: :[[@LINE-9]]:3: note: frame #2: function 'deep_level1_caller' calls function 'deep_level2_caller' here\n// CHECK-MESSAGES: :[[@LINE-5]]:3: note: frame #3: function 'deep_stack_test' calls function 'deep_level1_caller' here\n\n// Template function call stack\ntemplate<typename T>\nvoid template_thrower(T t) {\n  throw T{};\n}\n\ntemplate<typename T>\nvoid template_caller(T t) {\n  template_thrower<T>(t);\n}\n\nvoid template_stack_test() noexcept {\n// CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'template_stack_test' which should not throw exceptions\n  template_caller<char>('a');\n}\n// CHECK-MESSAGES: :[[@LINE-12]]:3: note: frame #0: unhandled exception of type 'char' may be thrown in function 'template_thrower<char>' here\n// CHECK-MESSAGES: :[[@LINE-8]]:3: note: frame #1: function 'template_caller<char>' calls function 'template_thrower<char>' here\n// CHECK-MESSAGES: :[[@LINE-4]]:3: note: frame #2: function 'template_stack_test' calls function 'template_caller<char>' here\n\n// template function without instantiation is not warned\ntemplate<typename T>\nvoid template_function_stack_test(T t) noexcept {\n  template_thrower(t);\n}\n\nvoid multiple_exception_types(int choice) noexcept {\n// CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'multiple_exception_types' which should not throw exceptions\n  if (choice == 1) {\n    throw 42;\n  } else if (choice == 2) {\n    throw 3.14;\n  } else if (choice == 3) {\n    throw \"string\";\n  }\n}\n// CHECK-MESSAGES: note: frame #0: unhandled exception of type '{{(int|double|const char \\*)}}' may be thrown in function 'multiple_exception_types' here\n\nclass ignored1 {};\nclass ignored2 {};\n\nvoid this_does_not_count() noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'this_does_not_count' which should not throw exceptions\n  throw ignored1();\n}\n\nvoid this_does_not_count_either(int n) noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'this_does_not_count_either' which should not throw exceptions\n  try {\n    throw 1;\n    if (n) throw ignored2();\n  } catch(int &) {\n  }\n}\n\nvoid this_counts(int n) noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'this_counts' which should not throw exceptions\n  if (n) throw 1;\n  throw ignored1();\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:10: note: frame #0: unhandled exception of type 'int' may be thrown in function 'this_counts' here\n\nvoid thrower(int n) {\n  throw n;\n}\n\nint directly_recursive(int n) noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: an exception may be thrown in function 'directly_recursive' which should not throw exceptions\n  if (n == 0)\n    thrower(n);\n  return directly_recursive(n);\n}\n// CHECK-MESSAGES: :[[@LINE-9]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'thrower' here\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #1: function 'directly_recursive' calls function 'thrower' here\n\nint indirectly_recursive(int n) noexcept;\n\nint recursion_helper(int n) {\n  indirectly_recursive(n);\n  return 0;\n}\n\nint indirectly_recursive(int n) noexcept {\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: an exception may be thrown in function 'indirectly_recursive' which should not throw exceptions\n  if (n == 0)\n    thrower(n);\n  return recursion_helper(n);\n}\n// CHECK-MESSAGES: :[[@LINE-25]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'thrower' here\n// CHECK-MESSAGES: :[[@LINE-4]]:5: note: frame #1: function 'indirectly_recursive' calls function 'thrower' here\n\nstruct super_throws {\n  super_throws() noexcept(false) { throw 42; }\n};\n\nstruct sub_throws : super_throws {\n  sub_throws() noexcept : super_throws() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: an exception may be thrown in function 'sub_throws' which should not throw exceptions\n};\n// CHECK-MESSAGES: :[[@LINE-7]]:36: note: frame #0: unhandled exception of type 'int' may be thrown in function 'super_throws' here\n// CHECK-MESSAGES: :[[@LINE-4]]:27: note: frame #1: function 'sub_throws' calls function 'super_throws' here\n\nstruct init_member_throws {\n  super_throws s;\n\n  init_member_throws() noexcept : s() {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: an exception may be thrown in function 'init_member_throws' which should not throw exceptions\n};\n// CHECK-MESSAGES: :[[@LINE-16]]:36: note: frame #0: unhandled exception of type 'int' may be thrown in function 'super_throws' here\n// CHECK-MESSAGES: :[[@LINE-4]]:35: note: frame #1: function 'init_member_throws' calls function 'super_throws' here\n\nstruct implicit_init_member_throws {\n  super_throws s;\n\n  implicit_init_member_throws() noexcept {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: an exception may be thrown in function 'implicit_init_member_throws' which should not throw exceptions\n};\n// CHECK-MESSAGES: :[[@LINE-25]]:36: note: frame #0: unhandled exception of type 'int' may be thrown in function 'super_throws' here\n// CHECK-MESSAGES: :[[@LINE-4]]:3: note: frame #1: function 'implicit_init_member_throws' calls function 'super_throws'\n\nstruct init {\n  explicit init(int, int) noexcept(false) { throw 42; }\n};\n\nstruct in_class_init_throws {\n  init i{1, 2};\n\n  in_class_init_throws() noexcept {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: an exception may be thrown in function 'in_class_init_throws' which should not throw exceptions\n};\n// CHECK-MESSAGES: :[[@LINE-9]]:45: note: frame #0: unhandled exception of type 'int' may be thrown in function 'init' here\n// CHECK-MESSAGES: :[[@LINE-6]]:9: note: frame #1: function 'in_class_init_throws' calls function 'init' here\n\nint main() {\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: an exception may be thrown in function 'main' which should not throw exceptions\n  throw 1;\n  return 0;\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:3: note: frame #0: unhandled exception of type 'int' may be thrown in function 'main' here\n\n// The following function all incorrectly throw exceptions, *but* calling them\n// should not yield a warning because they are marked as noexcept.\n\nvoid test_basic_no_throw() noexcept { throw 42; }\n// CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'test_basic_no_throw' which should not throw exceptions\n// CHECK-MESSAGES: :[[@LINE-2]]:39: note: frame #0: unhandled exception of type 'int' may be thrown in function 'test_basic_no_throw' here\n\nvoid test_basic_throw() noexcept(false) { throw 42; }\n\nvoid only_calls_non_throwing() noexcept {\n  test_basic_no_throw();\n}\n\nvoid calls_non_and_throwing() noexcept {\n// CHECK-MESSAGES: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'calls_non_and_throwing' which should not throw exceptions\n  test_basic_no_throw();\n  test_basic_throw();\n}\n// CHECK-MESSAGES: :[[@LINE-11]]:43: note: frame #0: unhandled exception of type 'int' may be thrown in function 'test_basic_throw' here\n// CHECK-MESSAGES: :[[@LINE-3]]:3: note: frame #1: function 'calls_non_and_throwing' calls function 'test_basic_throw' here\n\nnamespace PR55143 { namespace PR40583 {\n\nstruct test_explicit_throw {\n    test_explicit_throw() throw(int) { throw 42; }\n    test_explicit_throw(const test_explicit_throw&) throw(int) { throw 42; }\n    test_explicit_throw(test_explicit_throw&&) throw(int) { throw 42; }\n    test_explicit_throw& operator=(const test_explicit_throw&) throw(int) { throw 42; }\n    test_explicit_throw& operator=(test_explicit_throw&&) throw(int) { throw 42; }\n    ~test_explicit_throw() throw(int) { throw 42; }\n};\n\nstruct test_implicit_throw {\n    test_implicit_throw() { throw 42; }\n    test_implicit_throw(const test_implicit_throw&) { throw 42; }\n    test_implicit_throw(test_implicit_throw&&) { throw 42; }\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: an exception may be thrown in function 'test_implicit_throw' which should not throw exceptions\n    // CHECK-MESSAGES: :[[@LINE-2]]:50: note: frame #0: unhandled exception of type 'int' may be thrown in function 'test_implicit_throw' here\n    test_implicit_throw& operator=(const test_implicit_throw&) { throw 42; }\n    test_implicit_throw& operator=(test_implicit_throw&&) { throw 42; }\n    // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: an exception may be thrown in function 'operator=' which should not throw exceptions\n    // CHECK-MESSAGES: :[[@LINE-2]]:61: note: frame #0: unhandled exception of type 'int' may be thrown in function 'operator='\n    ~test_implicit_throw() { throw 42; }\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: an exception may be thrown in function '~test_implicit_throw' which should not throw exceptions\n    // CHECK-MESSAGES: :[[@LINE-2]]:30: note: frame #0: unhandled exception of type 'int' may be thrown in function '~test_implicit_throw' here\n};\n\n}}\n\nvoid pointer_exception_can_not_escape_with_const_void_handler() noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'pointer_exception_can_not_escape_with_const_void_handler' which should not throw exceptions\n  const int value = 42;\n  try {\n    throw &value;\n  } catch (const void *) {\n  }\n}\n\nvoid pointer_exception_can_not_escape_with_void_handler() noexcept {\n  // CHECK-MESSAGES-NOT: :[[@LINE-1]]:6: warning: an exception may be thrown in function 'pointer_exception_can_not_escape_with_void_handler' which should not throw exceptions\n  int value = 42;\n  try {\n    throw &value;\n  } catch (void *) {\n  }\n}"
    }
  ]
}