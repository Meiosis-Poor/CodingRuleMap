{
  "name": "MultipleStatementMacro",
  "language": "cpp",
  "description": ".. title:: clang-tidy - bugprone-multiple-statement-macro",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 102,
  "branches": 12,
  "apis": 70,
  "test": [
    {
      "description": null,
      "expected-problems": 7,
      "expected-linenumbers": [
        38,
        42,
        45,
        48,
        51,
        53,
        55
      ],
      "code": "\n// RUN: %check_clang_tidy %s bugprone-multiple-statement-macro %t\n\nvoid F();\n\n#define BAD_MACRO(x) \\\n  F();               \\\n  F()\n\n#define GOOD_MACRO(x) \\\n  do {                \\\n    F();              \\\n    F();              \\\n  } while (0)\n\n#define GOOD_MACRO2(x) F()\n\n#define GOOD_MACRO3(x) F();\n\n#define MACRO_ARG_MACRO(X) \\\n  if (54)                  \\\n  X(2)\n\n#define ALL_IN_MACRO(X) \\\n  if (43)               \\\n    F();                \\\n  F()\n\n#define GOOD_NESTED(x)   \\\n  if (x)            \\\n    GOOD_MACRO3(x); \\\n  F();\n\n#define IF(x) if(x)\n\nvoid positives() {\n  if (1)\n    BAD_MACRO(1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: multiple statement macro used without braces; some statements will be unconditionally executed [bugprone-multiple-statement-macro]\n  if (1) {\n  } else\n    BAD_MACRO(1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: multiple statement macro used\n  while (1)\n    BAD_MACRO(1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: multiple statement macro used\n  for (;;)\n    BAD_MACRO(1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: multiple statement macro used\n\n  MACRO_ARG_MACRO(BAD_MACRO);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: multiple statement macro used\n  MACRO_ARG_MACRO(F(); int);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: multiple statement macro used\n  IF(1) BAD_MACRO(1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: multiple statement macro used\n}\n\nvoid negatives() {\n  if (1) {\n    BAD_MACRO(1);\n  } else {\n    BAD_MACRO(1);\n  }\n  while (1) {\n    BAD_MACRO(1);\n  }\n  for (;;) {\n    BAD_MACRO(1);\n  }\n\n  if (1)\n    GOOD_MACRO(1);\n  if (1) {\n    GOOD_MACRO(1);\n  }\n  if (1)\n    GOOD_MACRO2(1);\n  if (1)\n    GOOD_MACRO3(1);\n\n  MACRO_ARG_MACRO(GOOD_MACRO);\n  ALL_IN_MACRO(1);\n\n  IF(1) GOOD_MACRO(1);\n}"
    }
  ]
}