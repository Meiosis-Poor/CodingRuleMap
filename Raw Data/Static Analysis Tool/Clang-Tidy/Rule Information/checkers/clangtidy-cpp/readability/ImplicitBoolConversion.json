{
  "name": "ImplicitBoolConversion",
  "language": "cpp",
  "description": ".. title:: clang-tidy - readability-implicit-bool-conversion",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 428,
  "branches": 52,
  "apis": 329,
  "test": [
    {
      "description": null,
      "expected-problems": 74,
      "expected-linenumbers": [
        28,
        32,
        36,
        40,
        44,
        51,
        65,
        69,
        73,
        82,
        86,
        90,
        94,
        100,
        104,
        109,
        113,
        118,
        127,
        131,
        180,
        185,
        191,
        197,
        202,
        207,
        212,
        219,
        224,
        230,
        235,
        245,
        250,
        256,
        263,
        268,
        274,
        279,
        286,
        291,
        296,
        302,
        309,
        316,
        320,
        324,
        329,
        333,
        337,
        342,
        346,
        351,
        355,
        359,
        365,
        369,
        374,
        387,
        391,
        463,
        464,
        470,
        475,
        480,
        483,
        492,
        499,
        507,
        514,
        529,
        530,
        536,
        537,
        546
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s readability-implicit-bool-conversion %t\n// RUN: %check_clang_tidy -check-suffix=UPPER-CASE %s readability-implicit-bool-conversion %t -- \\\n// RUN:     -config='{CheckOptions: { \\\n// RUN:         readability-implicit-bool-conversion.UseUpperCaseLiteralSuffix: true \\\n// RUN:     }}'\n\n// We need NULL macro, but some buildbots don't like including <cstddef> header\n// This is a portable way of getting it to work\n#undef NULL\n#define NULL 0L\n\ntemplate<typename T>\nvoid functionTaking(T);\n\nstruct Struct {\n  int member;\n};\n\n\n////////// Implicit conversion from bool.\n\nvoid implicitConversionFromBoolSimpleCases() {\n  bool boolean = true;\n\n  functionTaking<bool>(boolean);\n\n  functionTaking<int>(boolean);\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: implicit conversion 'bool' -> 'int' [readability-implicit-bool-conversion]\n  // CHECK-FIXES: functionTaking<int>(static_cast<int>(boolean));\n\n  functionTaking<unsigned long>(boolean);\n  // CHECK-MESSAGES: :[[@LINE-1]]:33: warning: implicit conversion 'bool' -> 'unsigned long'\n  // CHECK-FIXES: functionTaking<unsigned long>(static_cast<unsigned long>(boolean));\n\n  functionTaking<char>(boolean);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'bool' -> 'char'\n  // CHECK-FIXES: functionTaking<char>(static_cast<char>(boolean));\n\n  functionTaking<float>(boolean);\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: implicit conversion 'bool' -> 'float'\n  // CHECK-FIXES: functionTaking<float>(static_cast<float>(boolean));\n\n  functionTaking<double>(boolean);\n  // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: implicit conversion 'bool' -> 'double'\n  // CHECK-FIXES: functionTaking<double>(static_cast<double>(boolean));\n}\n\nfloat implicitConversionFromBoolInReturnValue() {\n  bool boolean = false;\n  return boolean;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: implicit conversion 'bool' -> 'float'\n  // CHECK-FIXES: return static_cast<float>(boolean);\n}\n\nvoid implicitConversionFromBoolInSingleBoolExpressions(bool b1, bool b2) {\n  bool boolean = true;\n  boolean = b1 ^ b2;\n  boolean = b1 && b2;\n  boolean |= !b1 || !b2;\n  boolean &= b1;\n  boolean = b1 == true;\n  boolean = b2 != false;\n\n  int integer = boolean - 3;\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: implicit conversion 'bool' -> 'int'\n  // CHECK-FIXES: int integer = static_cast<int>(boolean) - 3;\n\n  float floating = boolean / 0.3f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: implicit conversion 'bool' -> 'float'\n  // CHECK-FIXES: float floating = static_cast<float>(boolean) / 0.3f;\n\n  char character = boolean;\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: implicit conversion 'bool' -> 'char'\n  // CHECK-FIXES: char character = static_cast<char>(boolean);\n}\n\nvoid implicitConversionFromBoollInComplexBoolExpressions() {\n  bool boolean = true;\n  bool anotherBoolean = false;\n\n  int integer = boolean && anotherBoolean;\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: implicit conversion 'bool' -> 'int'\n  // CHECK-FIXES: int integer = static_cast<int>(boolean && anotherBoolean);\n\n  unsigned long unsignedLong = (! boolean) + 4ul;\n  // CHECK-MESSAGES: :[[@LINE-1]]:32: warning: implicit conversion 'bool' -> 'unsigned long'\n  // CHECK-FIXES: unsigned long unsignedLong = static_cast<unsigned long>(! boolean) + 4ul;\n\n  float floating = (boolean || anotherBoolean) * 0.3f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: implicit conversion 'bool' -> 'float'\n  // CHECK-FIXES: float floating = static_cast<float>(boolean || anotherBoolean) * 0.3f;\n\n  double doubleFloating = (boolean && (anotherBoolean || boolean)) * 0.3;\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: implicit conversion 'bool' -> 'double'\n  // CHECK-FIXES: double doubleFloating = static_cast<double>(boolean && (anotherBoolean || boolean)) * 0.3;\n}\n\nvoid implicitConversionFromBoolLiterals() {\n  functionTaking<int>(true);\n  // CHECK-MESSAGES: :[[@LINE-1]]:23: warning: implicit conversion 'bool' -> 'int'\n  // CHECK-FIXES: functionTaking<int>(1);\n\n  functionTaking<unsigned long>(false);\n  // CHECK-MESSAGES: :[[@LINE-1]]:33: warning: implicit conversion 'bool' -> 'unsigned long'\n  // CHECK-FIXES: functionTaking<unsigned long>(0u);\n  // CHECK-FIXES-UPPER-CASE: functionTaking<unsigned long>(0U);\n\n  functionTaking<signed char>(true);\n  // CHECK-MESSAGES: :[[@LINE-1]]:31: warning: implicit conversion 'bool' -> 'signed char'\n  // CHECK-FIXES: functionTaking<signed char>(1);\n\n  functionTaking<float>(false);\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: implicit conversion 'bool' -> 'float'\n  // CHECK-FIXES: functionTaking<float>(0.0f);\n  // CHECK-FIXES-UPPER-CASE: functionTaking<float>(0.0F);\n\n  functionTaking<double>(true);\n  // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: implicit conversion 'bool' -> 'double'\n  // CHECK-FIXES: functionTaking<double>(1.0);\n}\n\nvoid implicitConversionFromBoolInComparisons() {\n  bool boolean = true;\n  int integer = 0;\n\n  functionTaking<bool>(boolean == integer);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'bool' -> 'int'\n  // CHECK-FIXES: functionTaking<bool>(static_cast<int>(boolean) == integer);\n\n  functionTaking<bool>(integer != boolean);\n  // CHECK-MESSAGES: :[[@LINE-1]]:35: warning: implicit conversion 'bool' -> 'int'\n  // CHECK-FIXES: functionTaking<bool>(integer != static_cast<int>(boolean));\n}\n\nvoid ignoreBoolComparisons() {\n  bool boolean = true;\n  bool anotherBoolean = false;\n\n  functionTaking<bool>(boolean == anotherBoolean);\n  functionTaking<bool>(boolean != anotherBoolean);\n}\n\nvoid ignoreExplicitCastsFromBool() {\n  bool boolean = true;\n\n  int integer = static_cast<int>(boolean) + 3;\n  float floating = static_cast<float>(boolean) * 0.3f;\n  char character = static_cast<char>(boolean);\n}\n\nvoid ignoreImplicitConversionFromBoolInMacroExpansions() {\n  bool boolean = true;\n\n  #define CAST_FROM_BOOL_IN_MACRO_BODY boolean + 3\n  int integerFromMacroBody = CAST_FROM_BOOL_IN_MACRO_BODY;\n\n  #define CAST_FROM_BOOL_IN_MACRO_ARGUMENT(x) x + 3\n  int integerFromMacroArgument = CAST_FROM_BOOL_IN_MACRO_ARGUMENT(boolean);\n}\n\nnamespace ignoreImplicitConversionFromBoolInTemplateInstantiations {\n\ntemplate<typename T>\nvoid templateFunction() {\n  bool boolean = true;\n  T uknownType = boolean + 3;\n}\n\nvoid useOfTemplateFunction() {\n  templateFunction<int>();\n}\n\n} // namespace ignoreImplicitConversionFromBoolInTemplateInstantiations\n\n////////// Implicit conversions to bool.\n\nvoid implicitConversionToBoolSimpleCases() {\n  int integer = 10;\n  functionTaking<bool>(integer);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(integer != 0);\n\n  unsigned long unsignedLong = 10;\n  functionTaking<bool>(unsignedLong);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'unsigned long' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(unsignedLong != 0u);\n  // CHECK-FIXES-UPPER-CASE: functionTaking<bool>(unsignedLong != 0U);\n\n  float floating = 0.0f;\n  functionTaking<bool>(floating);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'float' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(floating != 0.0f);\n  // CHECK-FIXES-UPPER-CASE: functionTaking<bool>(floating != 0.0F);\n\n  double doubleFloating = 1.0f;\n  functionTaking<bool>(doubleFloating);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'double' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(doubleFloating != 0.0);\n\n  signed char character = 'a';\n  functionTaking<bool>(character);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'signed char' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(character != 0);\n\n  int* pointer = nullptr;\n  functionTaking<bool>(pointer);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'int *' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(pointer != nullptr);\n\n  auto pointerToMember = &Struct::member;\n  functionTaking<bool>(pointerToMember);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'int Struct::*' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(pointerToMember != nullptr);\n}\n\nvoid implicitConversionToBoolInSingleExpressions() {\n  int integer = 10;\n  bool boolComingFromInt = integer;\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromInt = integer != 0;\n\n  float floating = 10.0f;\n  bool boolComingFromFloat = floating;\n  // CHECK-MESSAGES: :[[@LINE-1]]:30: warning: implicit conversion 'float' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromFloat = floating != 0.0f;\n  // CHECK-FIXES-UPPER-CASE: bool boolComingFromFloat = floating != 0.0F;\n\n  signed char character = 'a';\n  bool boolComingFromChar = character;\n  // CHECK-MESSAGES: :[[@LINE-1]]:29: warning: implicit conversion 'signed char' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromChar = character != 0;\n\n  int* pointer = nullptr;\n  bool boolComingFromPointer = pointer;\n  // CHECK-MESSAGES: :[[@LINE-1]]:32: warning: implicit conversion 'int *' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromPointer = pointer != nullptr;\n}\n\nvoid implicitConversionToBoolInComplexExpressions() {\n  bool boolean = true;\n\n  int integer = 10;\n  int anotherInteger = 20;\n  bool boolComingFromInteger = integer + anotherInteger;\n  // CHECK-MESSAGES: :[[@LINE-1]]:32: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromInteger = (integer + anotherInteger) != 0;\n\n  float floating = 0.2f;\n  bool boolComingFromFloating = floating - 0.3f || boolean;\n  // CHECK-MESSAGES: :[[@LINE-1]]:33: warning: implicit conversion 'float' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromFloating = ((floating - 0.3f) != 0.0f) || boolean;\n  // CHECK-FIXES-UPPER-CASE: bool boolComingFromFloating = ((floating - 0.3f) != 0.0F) || boolean;\n\n  double doubleFloating = 0.3;\n  bool boolComingFromDoubleFloating = (doubleFloating - 0.4) && boolean;\n  // CHECK-MESSAGES: :[[@LINE-1]]:39: warning: implicit conversion 'double' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromDoubleFloating = ((doubleFloating - 0.4) != 0.0) && boolean;\n}\n\nvoid implicitConversionInNegationExpressions() {\n  int integer = 10;\n  bool boolComingFromNegatedInt = !integer;\n  // CHECK-MESSAGES: :[[@LINE-1]]:36: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromNegatedInt = integer == 0;\n\n  float floating = 10.0f;\n  bool boolComingFromNegatedFloat = ! floating;\n  // CHECK-MESSAGES: :[[@LINE-1]]:39: warning: implicit conversion 'float' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromNegatedFloat = floating == 0.0f;\n  // CHECK-FIXES-UPPER-CASE: bool boolComingFromNegatedFloat = floating == 0.0F;\n\n  signed char character = 'a';\n  bool boolComingFromNegatedChar = (! character);\n  // CHECK-MESSAGES: :[[@LINE-1]]:39: warning: implicit conversion 'signed char' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromNegatedChar = (character == 0);\n\n  int* pointer = nullptr;\n  bool boolComingFromNegatedPointer = not pointer;\n  // CHECK-MESSAGES: :[[@LINE-1]]:43: warning: implicit conversion 'int *' -> 'bool'\n  // CHECK-FIXES: bool boolComingFromNegatedPointer = pointer == nullptr;\n}\n\nvoid implicitConversionToBoolInControlStatements() {\n  int integer = 10;\n  if (integer) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: if (integer != 0) {}\n\n  long int longInteger = 0.2f;\n  for (;longInteger;) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: implicit conversion 'long' -> 'bool'\n  // CHECK-FIXES: for (;longInteger != 0;) {}\n\n  float floating = 0.3f;\n  while (floating) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: implicit conversion 'float' -> 'bool'\n  // CHECK-FIXES: while (floating != 0.0f) {}\n  // CHECK-FIXES-UPPER-CASE: while (floating != 0.0F) {}\n\n  double doubleFloating = 0.4;\n  do {} while (doubleFloating);\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: implicit conversion 'double' -> 'bool'\n  // CHECK-FIXES: do {} while (doubleFloating != 0.0);\n}\n\nbool implicitConversionToBoolInReturnValue() {\n  float floating = 1.0f;\n  return floating;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: implicit conversion 'float' -> 'bool'\n  // CHECK-FIXES: return floating != 0.0f;\n  // CHECK-FIXES-UPPER-CASE: return floating != 0.0F;\n}\n\nvoid implicitConversionToBoolFromLiterals() {\n  functionTaking<bool>(0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(false);\n\n  functionTaking<bool>(1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(true);\n\n  functionTaking<bool>(2ul);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'unsigned long' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(true);\n\n\n  functionTaking<bool>(0.0f);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'float' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(false);\n\n  functionTaking<bool>(1.0f);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'float' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(true);\n\n  functionTaking<bool>(2.0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'double' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(true);\n\n\n  functionTaking<bool>('\\0');\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'char' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(false);\n\n  functionTaking<bool>('a');\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'char' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(true);\n\n\n  functionTaking<bool>(\"\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'const char *' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(true);\n\n  functionTaking<bool>(\"abc\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'const char *' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(true);\n\n  functionTaking<bool>(NULL);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'long' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(false);\n}\n\nvoid implicitConversionToBoolFromUnaryMinusAndZeroLiterals() {\n  functionTaking<bool>(-0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>((-0) != 0);\n\n  functionTaking<bool>(-0.0f);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'float' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>((-0.0f) != 0.0f);\n  // CHECK-FIXES-UPPER-CASE: functionTaking<bool>((-0.0f) != 0.0F);\n\n  functionTaking<bool>(-0.0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'double' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>((-0.0) != 0.0);\n}\n\nvoid implicitConversionToBoolInWithOverloadedOperators() {\n  struct UserStruct {\n    int operator()(int x) { return x; }\n    int operator+(int y) { return y; }\n  };\n\n  UserStruct s;\n\n  functionTaking<bool>(s(0));\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(s(0) != 0);\n\n  functionTaking<bool>(s + 2);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>((s + 2) != 0);\n}\n\nint functionReturningInt();\nint* functionReturningPointer();\n\nvoid ignoreImplicitConversionToBoolWhenDeclaringVariableInControlStatements() {\n  if (int integer = functionReturningInt()) {}\n\n  while (int* pointer = functionReturningPointer()) {}\n}\n\nvoid ignoreExplicitCastsToBool() {\n  int integer = 10;\n  bool boolComingFromInt = static_cast<bool>(integer);\n\n  float floating = 10.0f;\n  bool boolComingFromFloat = static_cast<bool>(floating);\n\n  char character = 'a';\n  bool boolComingFromChar = static_cast<bool>(character);\n\n  int* pointer = nullptr;\n  bool booleanComingFromPointer = static_cast<bool>(pointer);\n}\n\nvoid ignoreImplicitConversionToBoolInMacroExpansions() {\n  int integer = 3;\n\n  #define CAST_TO_BOOL_IN_MACRO_BODY integer && false\n  bool boolFromMacroBody = CAST_TO_BOOL_IN_MACRO_BODY;\n\n  #define CAST_TO_BOOL_IN_MACRO_ARGUMENT(x) x || true\n  bool boolFromMacroArgument = CAST_TO_BOOL_IN_MACRO_ARGUMENT(integer);\n}\n\nnamespace ignoreImplicitConversionToBoolInTemplateInstantiations {\n\ntemplate<typename T>\nvoid templateFunction() {\n  T unknownType = 0;\n  bool boolean = unknownType;\n}\n\nvoid useOfTemplateFunction() {\n  templateFunction<int>();\n}\n\n} // namespace ignoreImplicitConversionToBoolInTemplateInstantiations\n\nnamespace ignoreUserDefinedConversionOperator {\n\nstruct StructWithUserConversion {\n  operator bool();\n};\n\nvoid useOfUserConversion() {\n  StructWithUserConversion structure;\n  functionTaking<bool>(structure);\n}\n\n} // namespace ignoreUserDefinedConversionOperator\n\nnamespace ignore_1bit_bitfields {\n\nstruct S {\n  int a;\n  int b : 1;\n  int c : 2;\n\n  S(bool a, bool b, bool c) : a(a), b(b), c(c) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:33: warning: implicit conversion 'bool' -> 'int'\n  // CHECK-MESSAGES: :[[@LINE-2]]:45: warning: implicit conversion 'bool' -> 'int'\n  // CHECK-FIXES: S(bool a, bool b, bool c) : a(static_cast<int>(a)), b(b), c(static_cast<int>(c)) {}\n};\n\nvoid f(S& s) {\n  functionTaking<bool>(s.a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(s.a != 0);\n  functionTaking<bool>(s.b);\n  // CHECK-FIXES: functionTaking<bool>(s.b);\n  s.a = true;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: implicit conversion 'bool' -> 'int'\n  // CHECK-FIXES: s.a = 1;\n  s.b = true;\n  // CHECK-FIXES: s.b = true;\n  s.c = true;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: implicit conversion 'bool' -> 'int'\n  // CHECK-FIXES: s.c = 1;\n  functionTaking<bool>(s.c);\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: implicit conversion 'int' -> 'bool'\n  // CHECK-FIXES: functionTaking<bool>(s.c != 0);\n}\n\n} // namespace ignore_1bit_bitfields\n\nint implicitConversionReturnInt()\n{\n    return true;\n    // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: implicit conversion 'bool' -> 'int'\n    // CHECK-FIXES: return 1\n}\n\nint implicitConversionReturnIntWithParens()\n{\n    return (true);\n    // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: implicit conversion 'bool' -> 'int'\n    // CHECK-FIXES: return 1\n}\n\n\nbool implicitConversionReturnBool()\n{\n    return 1;\n    // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: implicit conversion 'int' -> 'bool'\n    // CHECK-FIXES: return true\n}\n\nbool implicitConversionReturnBoolWithParens()\n{\n    return (1);\n    // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: implicit conversion 'int' -> 'bool'\n    // CHECK-FIXES: return true\n}\n\n\nnamespace PR47000 {\n  int to_int(bool x) { return int{x}; }\n\n  using IntType = int;\n  int to_int2(bool x) { return IntType{x}; }\n}\n\nnamespace PR71867 {\n  bool foo(bool x) {\n    return x ? 1 : false;\n    // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: implicit conversion 'int' -> 'bool'\n    // CHECK-MESSAGES: :[[@LINE-2]]:20: warning: implicit conversion 'bool' -> 'int'\n    // CHECK-FIXES: return (x ? 1 : 0) != 0;\n  }\n\n  bool boo(bool x) {\n    return x ? true : 0;\n    // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: implicit conversion 'int' -> 'bool'\n    // CHECK-MESSAGES: :[[@LINE-2]]:16: warning: implicit conversion 'bool' -> 'int'\n    // CHECK-FIXES: return (x ? 1 : 0) != 0;\n  }\n}\n\nnamespace PR71848 {\n  int fun() {\n    bool foo = false;\n    return( foo );\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: implicit conversion 'bool' -> 'int' [readability-implicit-bool-conversion]\n// CHECK-FIXES: return static_cast<int>( foo );\n  }\n}"
    }
  ]
}