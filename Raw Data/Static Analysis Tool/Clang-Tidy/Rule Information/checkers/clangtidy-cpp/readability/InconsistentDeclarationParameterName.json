{
  "name": "InconsistentDeclarationParameterName",
  "language": "cpp",
  "description": ".. title:: clang-tidy - readability-inconsistent-declaration-parameter-name",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 346,
  "branches": 38,
  "apis": 129,
  "test": [
    {
      "description": null,
      "expected-problems": 53,
      "expected-linenumbers": [
        12,
        14,
        15,
        17,
        18,
        23,
        24,
        25,
        28,
        29,
        30,
        35,
        36,
        37,
        44,
        45,
        46,
        56,
        57,
        58,
        62,
        63,
        64,
        75,
        76,
        77,
        91,
        92,
        93,
        97,
        98,
        99,
        108,
        109,
        110,
        119,
        120,
        121,
        125,
        126,
        127,
        136,
        137,
        138,
        152,
        153,
        154,
        170,
        171,
        172,
        176,
        177,
        178
      ],
      "code": "\n// RUN: %check_clang_tidy %s readability-inconsistent-declaration-parameter-name %t -- --fix-notes -- -fno-delayed-template-parsing\n\nvoid consistentFunction(int a, int b, int c);\nvoid consistentFunction(int a, int b, int c);\nvoid consistentFunction(int prefixA, int b, int cSuffix);\nvoid consistentFunction(int a, int b, int c);\nvoid consistentFunction(int a, int b, int /*c*/);\nvoid consistentFunction(int /*c*/, int /*c*/, int /*c*/);\n\n//////////////////////////////////////////////////////\n\n// CHECK-MESSAGES: :[[@LINE+1]]:6: warning: function 'inconsistentFunction' has 2 other declarations with different parameter names [readability-inconsistent-declaration-parameter-name]\nvoid inconsistentFunction(int a, int b, int c);\n// CHECK-MESSAGES: :[[@LINE+2]]:6: note: the 1st inconsistent declaration seen here\n// CHECK-MESSAGES: :[[@LINE+1]]:6: note: differing parameters are named here: ('d', 'e', 'f'), in the other declaration: ('a', 'b', 'c')\nvoid inconsistentFunction(int d, int e, int f);\n// CHECK-MESSAGES: :[[@LINE+2]]:6: note: the 2nd inconsistent declaration seen here\n// CHECK-MESSAGES: :[[@LINE+1]]:6: note: differing parameters are named here: ('x', 'y', 'z'), in the other declaration: ('a', 'b', 'c')\nvoid inconsistentFunction(int x, int y, int z);\n\n//////////////////////////////////////////////////////\n\n// CHECK-MESSAGES: :[[@LINE+4]]:6: warning: function 'inconsistentFunctionWithVisibleDefinition' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]\n// CHECK-MESSAGES: :[[@LINE+9]]:6: note: the definition seen here\n// CHECK-MESSAGES: :[[@LINE+2]]:6: note: differing parameters are named here: ('a'), in definition: ('c')\n// CHECK-FIXES: void inconsistentFunctionWithVisibleDefinition(int c);\nvoid inconsistentFunctionWithVisibleDefinition(int a);\n// CHECK-MESSAGES: :[[@LINE+4]]:6: warning: function 'inconsistentFunctionWithVisibleDefinition' has a definition\n// CHECK-MESSAGES: :[[@LINE+4]]:6: note: the definition seen here\n// CHECK-MESSAGES: :[[@LINE+2]]:6: note: differing parameters are named here: ('b'), in definition: ('c')\n// CHECK-FIXES: void inconsistentFunctionWithVisibleDefinition(int c);\nvoid inconsistentFunctionWithVisibleDefinition(int b);\nvoid inconsistentFunctionWithVisibleDefinition(int c) { c; }\n\n// CHECK-MESSAGES: :[[@LINE+3]]:6: warning: function 'inconsidentFunctionWithUnreferencedParameterInDefinition' has a definition\n// CHECK-MESSAGES: :[[@LINE+3]]:6: note: the definition seen here\n// CHECK-MESSAGES: :[[@LINE+1]]:6: note: differing parameters are named here: ('a'), in definition: ('b')\nvoid inconsidentFunctionWithUnreferencedParameterInDefinition(int a);\nvoid inconsidentFunctionWithUnreferencedParameterInDefinition(int b) {}\n\n//////////////////////////////////////////////////////\n\nstruct Struct {\n// CHECK-MESSAGES: :[[@LINE+4]]:8: warning: function 'Struct::inconsistentFunction' has a definition\n// CHECK-MESSAGES: :[[@LINE+6]]:14: note: the definition seen here\n// CHECK-MESSAGES: :[[@LINE+2]]:8: note: differing parameters are named here: ('a'), in definition: ('b')\n// CHECK-FIXES: void inconsistentFunction(int b);\n  void inconsistentFunction(int a);\n};\n\nvoid Struct::inconsistentFunction(int b) { b = 0; }\n\n//////////////////////////////////////////////////////\n\nstruct SpecialFunctions {\n// CHECK-MESSAGES: :[[@LINE+4]]:3: warning: function 'SpecialFunctions::SpecialFunctions' has a definition\n// CHECK-MESSAGES: :[[@LINE+12]]:19: note: the definition seen here\n// CHECK-MESSAGES: :[[@LINE+2]]:3: note: differing parameters are named here: ('a'), in definition: ('b')\n// CHECK-FIXES: SpecialFunctions(int b);\n  SpecialFunctions(int a);\n\n// CHECK-MESSAGES: :[[@LINE+4]]:21: warning: function 'SpecialFunctions::operator=' has a definition\n// CHECK-MESSAGES: :[[@LINE+8]]:37: note: the definition seen here\n// CHECK-MESSAGES: :[[@LINE+2]]:21: note: differing parameters are named here: ('a'), in definition: ('b')\n// CHECK-FIXES: SpecialFunctions& operator=(const SpecialFunctions& b);\n  SpecialFunctions& operator=(const SpecialFunctions& a);\n};\n\nSpecialFunctions::SpecialFunctions(int b) { b; }\n\nSpecialFunctions& SpecialFunctions::operator=(const SpecialFunctions& b) { b; return *this; }\n\n//////////////////////////////////////////////////////\n\n// CHECK-MESSAGES: :[[@LINE+5]]:6: warning: function 'templateFunctionWithSeparateDeclarationAndDefinition' has a definition\n// CHECK-MESSAGES: :[[@LINE+7]]:6: note: the definition seen here\n// CHECK-MESSAGES: :[[@LINE+3]]:6: note: differing parameters are named here: ('a'), in definition: ('b')\n// CHECK-FIXES: void templateFunctionWithSeparateDeclarationAndDefinition(T b);\ntemplate<typename T>\nvoid templateFunctionWithSeparateDeclarationAndDefinition(T a);\n\ntemplate<typename T>\nvoid templateFunctionWithSeparateDeclarationAndDefinition(T b) { b; }\n\n//////////////////////////////////////////////////////\n\ntemplate<typename T>\nvoid templateFunctionWithSpecializations(T a) { a; }\n\ntemplate<>\n// CHECK-MESSAGES: :[[@LINE+3]]:6: warning: function template specialization 'templateFunctionWithSpecializations<int>' has a primary template declaration with different parameter names [readability-inconsistent-declaration-parameter-name]\n// CHECK-MESSAGES: :[[@LINE-4]]:6: note: the primary template declaration seen here\n// CHECK-MESSAGES: :[[@LINE+1]]:6: note: differing parameters are named here: ('b'), in primary template declaration: ('a')\nvoid templateFunctionWithSpecializations(int b) { b; }\n\ntemplate<>\n// CHECK-MESSAGES: :[[@LINE+3]]:6: warning: function template specialization 'templateFunctionWithSpecializations<float>' has a primary template\n// CHECK-MESSAGES: :[[@LINE-10]]:6: note: the primary template declaration seen here\n// CHECK-MESSAGES: :[[@LINE+1]]:6: note: differing parameters are named here: ('c'), in primary template declaration: ('a')\nvoid templateFunctionWithSpecializations(float c) { c; }\n\n//////////////////////////////////////////////////////\n\ntemplate<typename T>\nvoid templateFunctionWithoutDefinitionButWithSpecialization(T a);\n\ntemplate<>\n// CHECK-MESSAGES: :[[@LINE+3]]:6: warning: function template specialization 'templateFunctionWithoutDefinitionButWithSpecialization<int>' has a primary template\n// CHECK-MESSAGES: :[[@LINE-4]]:6: note: the primary template declaration seen here\n// CHECK-MESSAGES: :[[@LINE+1]]:6: note: differing parameters are named here: ('b'), in primary template declaration: ('a')\nvoid templateFunctionWithoutDefinitionButWithSpecialization(int b) { b; }\n\n//////////////////////////////////////////////////////\n\ntemplate<typename T>\nvoid templateFunctionWithSeparateSpecializationDeclarationAndDefinition(T a);\n\ntemplate<>\n// CHECK-MESSAGES: :[[@LINE+3]]:6: warning: function template specialization 'templateFunctionWithSeparateSpecializationDeclarationAndDefinition<int>' has a primary template\n// CHECK-MESSAGES: :[[@LINE-4]]:6: note: the primary template declaration seen here\n// CHECK-MESSAGES: :[[@LINE+1]]:6: note: differing parameters are named here: ('b'), in primary template declaration: ('a')\nvoid templateFunctionWithSeparateSpecializationDeclarationAndDefinition(int b);\n\ntemplate<>\n// CHECK-MESSAGES: :[[@LINE+3]]:6: warning: function template specialization 'templateFunctionWithSeparateSpecializationDeclarationAndDefinition<int>' has a primary template\n// CHECK-MESSAGES: :[[@LINE-10]]:6: note: the primary template declaration seen here\n// CHECK-MESSAGES: :[[@LINE+1]]:6: note: differing parameters are named here: ('c'), in primary template declaration: ('a')\nvoid templateFunctionWithSeparateSpecializationDeclarationAndDefinition(int c) { c; }\n\n//////////////////////////////////////////////////////\n\ntemplate<typename T>\nclass ClassTemplate\n{\npublic:\n// CHECK-MESSAGES: :[[@LINE+4]]:10: warning: function 'ClassTemplate::functionInClassTemplateWithSeparateDeclarationAndDefinition' has a definition\n// CHECK-MESSAGES: :[[@LINE+7]]:24: note: the definition seen here\n// CHECK-MESSAGES: :[[@LINE+2]]:10: note: differing parameters are named here: ('a'), in definition: ('b')\n// CHECK-FIXES: void functionInClassTemplateWithSeparateDeclarationAndDefinition(int b);\n    void functionInClassTemplateWithSeparateDeclarationAndDefinition(int a);\n};\n\ntemplate<typename T>\nvoid ClassTemplate<T>::functionInClassTemplateWithSeparateDeclarationAndDefinition(int b) { b; }\n\n//////////////////////////////////////////////////////\n\nclass Class\n{\npublic:\n    template<typename T>\n// CHECK-MESSAGES: :[[@LINE+4]]:8: warning: function 'Class::memberFunctionTemplateWithSeparateDeclarationAndDefinition' has a definition\n// CHECK-MESSAGES: :[[@LINE+12]]:13: note: the definition seen here\n// CHECK-MESSAGES: :[[@LINE+2]]:8: note: differing parameters are named here: ('a'), in definition: ('b')\n// CHECK-FIXES: void memberFunctionTemplateWithSeparateDeclarationAndDefinition(T b);\n  void memberFunctionTemplateWithSeparateDeclarationAndDefinition(T a);\n\n  template<typename T>\n  void memberFunctionTemplateWithSpecializations(T a) { a; }\n};\n\n//////////////////////////////////////////////////////\n\ntemplate<typename T>\nvoid Class::memberFunctionTemplateWithSeparateDeclarationAndDefinition(T b) { b; }\n\n//////////////////////////////////////////////////////\n\ntemplate<>\n// CHECK-MESSAGES: :[[@LINE+3]]:13: warning: function template specialization 'Class::memberFunctionTemplateWithSpecializations<int>' has a primary template\n// CHECK-MESSAGES: :[[@LINE-12]]:8: note: the primary template declaration seen here\n// CHECK-MESSAGES: :[[@LINE+1]]:13: note: differing parameters are named here: ('b'), in primary template declaration: ('a')\nvoid Class::memberFunctionTemplateWithSpecializations(int b) { b; }\n\ntemplate<>\n// CHECK-MESSAGES: :[[@LINE+3]]:13: warning: function template specialization 'Class::memberFunctionTemplateWithSpecializations<float>' has a primary template\n// CHECK-MESSAGES: :[[@LINE-18]]:8: note: the primary template declaration seen here\n// CHECK-MESSAGES: :[[@LINE+1]]:13: note: differing parameters are named here: ('c'), in primary template declaration: ('a')\nvoid Class::memberFunctionTemplateWithSpecializations(float c) { c; }\n\n//////////////////////////////////////////////////////\n\n// This resulted in a warning by default.\n#define MACRO() \\\n  void f(int x);\n\nstruct S {\n  MACRO();\n};\n\nvoid S::f(int y)\n{\n}"
    }
  ]
}