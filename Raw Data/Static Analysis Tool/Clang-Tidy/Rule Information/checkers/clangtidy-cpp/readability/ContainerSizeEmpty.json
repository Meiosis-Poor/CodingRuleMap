{
  "name": "ContainerSizeEmpty",
  "language": "cpp",
  "description": ".. title:: clang-tidy - readability-container-size-empty",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 412,
  "branches": 58,
  "apis": 359,
  "test": [
    {
      "description": null,
      "expected-problems": 148,
      "expected-linenumbers": [
        121,
        123,
        126,
        128,
        131,
        135,
        139,
        143,
        147,
        151,
        155,
        159,
        163,
        167,
        172,
        176,
        180,
        184,
        188,
        192,
        196,
        200,
        204,
        208,
        212,
        216,
        220,
        224,
        236,
        240,
        249,
        255,
        259,
        263,
        267,
        275,
        279,
        285,
        289,
        293,
        297,
        301,
        305,
        309,
        313,
        317,
        321,
        325,
        329,
        333,
        337,
        349,
        353,
        413,
        417,
        421,
        425,
        429,
        433,
        437,
        441,
        445,
        449,
        453,
        461,
        462,
        469,
        470,
        476,
        477,
        483,
        484,
        498,
        499,
        503,
        507,
        508,
        514,
        515,
        519,
        520,
        524,
        525,
        530,
        531,
        535,
        536,
        551,
        552,
        557,
        562,
        563,
        567,
        568,
        572,
        573,
        577,
        578,
        591,
        592,
        596,
        597,
        601,
        602,
        608,
        609,
        613,
        614,
        619,
        620,
        626,
        627,
        632,
        633,
        638,
        639,
        644,
        645,
        650,
        651,
        655,
        656,
        660,
        661,
        665,
        666,
        670,
        671,
        675,
        676,
        684,
        685,
        730,
        731,
        737,
        738,
        752,
        785,
        787,
        796,
        798,
        809,
        837,
        841,
        845,
        849,
        881,
        888
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes -std=c++14-or-later %s readability-container-size-empty %t -- \\\n// RUN: -config=\"{CheckOptions: {readability-container-size-empty.ExcludedComparisonTypes: '::std::array;::IgnoredDummyType'}}\" \\\n// RUN: -- -fno-delayed-template-parsing -isystem %clang_tidy_headers\n#include <string>\n\nnamespace std {\ntemplate <typename T> struct vector {\n  vector();\n  bool operator==(const vector<T>& other) const;\n  bool operator!=(const vector<T>& other) const;\n  unsigned long size() const;\n  bool empty() const;\n};\n\ninline namespace __v2 {\ntemplate <typename T> struct set {\n  set();\n  bool operator==(const set<T>& other) const;\n  bool operator!=(const set<T>& other) const;\n  unsigned long size() const;\n  bool empty() const;\n};\n}\n\nnamespace string_literals{\nstring operator\"\"s(const char *, size_t);\n}\n\n}\n\ntemplate <typename T>\nclass TemplatedContainer {\npublic:\n  bool operator==(const TemplatedContainer<T>& other) const;\n  bool operator!=(const TemplatedContainer<T>& other) const;\n  unsigned long size() const;\n  bool empty() const;\n};\n\ntemplate <typename T>\nclass PrivateEmpty {\npublic:\n  bool operator==(const PrivateEmpty<T>& other) const;\n  bool operator!=(const PrivateEmpty<T>& other) const;\n  unsigned long size() const;\nprivate:\n  bool empty() const;\n};\n\nstruct BoolSize {\n  bool size() const;\n  bool empty() const;\n};\n\nstruct EnumSize {\n  enum E { one };\n  enum E size() const;\n  bool empty() const;\n};\n\nclass Container {\npublic:\n  bool operator==(const Container& other) const;\n  unsigned long size() const;\n  bool empty() const;\n};\n\nclass Derived : public Container {\n};\n\nclass Container2 {\npublic:\n  unsigned long size() const;\n  bool empty() const { return size() == 0; }\n};\n\nclass Container3 {\npublic:\n  unsigned long size() const;\n  bool empty() const;\n};\n\nbool Container3::empty() const { return this->size() == 0; }\n\nclass Container4 {\npublic:\n  bool operator==(const Container4& rhs) const;\n  unsigned long size() const;\n  bool empty() const { return *this == Container4(); }\n};\n\nstruct Lazy {\n  constexpr unsigned size() const { return 0; }\n  constexpr bool empty() const { return true; }\n};\n\nstd::string s_func() {\n  return std::string();\n}\n\nvoid takesBool(bool)\n{\n\n}\n\nbool returnsBool() {\n  std::set<int> intSet;\n  std::string str;\n  std::string str2;\n  std::wstring wstr;\n  (void)(str.size() + 0);\n  (void)(str.length() + 0);\n  (void)(str.size() - 0);\n  (void)(str.length() - 0);\n  (void)(0 + str.size());\n  (void)(0 + str.length());\n  (void)(0 - str.size());\n  (void)(0 - str.length());\n  if (intSet.size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-FIXES: {{^  }}if (intSet.empty()){{$}}\n  // CHECK-MESSAGES: :21:8: note: method 'set'::empty() defined here\n  if (intSet == std::set<int>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness\n  // CHECK-FIXES: {{^  }}if (intSet.empty()){{$}}\n  // CHECK-MESSAGES: :21:8: note: method 'set'::empty() defined here\n  if (s_func() == \"\")\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (s_func().empty()){{$}}\n  if (str.size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size'\n  // CHECK-FIXES: {{^  }}if (str.empty()){{$}}\n  if (str.length() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'length'\n  // CHECK-FIXES: {{^  }}if (str.empty()){{$}}\n  if ((str + str2).size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size'\n  // CHECK-FIXES: {{^  }}if ((str + str2).empty()){{$}}\n  if ((str + str2).length() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'length'\n  // CHECK-FIXES: {{^  }}if ((str + str2).empty()){{$}}\n  if (str == \"\")\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (str.empty()){{$}}\n  if (str + str2 == \"\")\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if ((str + str2).empty()){{$}}\n  if (wstr.size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size'\n  // CHECK-FIXES: {{^  }}if (wstr.empty()){{$}}\n  if (wstr.length() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'length'\n  // CHECK-FIXES: {{^  }}if (wstr.empty()){{$}}\n  if (wstr == L\"\")\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (wstr.empty()){{$}}\n  std::vector<int> vect;\n  if (vect.size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size'\n  // CHECK-FIXES: {{^  }}if (vect.empty()){{$}}\n  if (vect == std::vector<int>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect.empty()){{$}}\n  if (vect.size() != 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!vect.empty()){{$}}\n  if (vect != std::vector<int>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!vect.empty()){{$}}\n  if (0 == vect.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:12: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect.empty()){{$}}\n  if (0 != vect.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:12: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!vect.empty()){{$}}\n  if (std::vector<int>() == vect)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect.empty()){{$}}\n  if (std::vector<int>() != vect)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!vect.empty()){{$}}\n  if (vect.size() > 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!vect.empty()){{$}}\n  if (0 < vect.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:11: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!vect.empty()){{$}}\n  if (vect.size() < 1)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect.empty()){{$}}\n  if (1 > vect.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:11: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect.empty()){{$}}\n  if (vect.size() >= 1)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!vect.empty()){{$}}\n  if (1 <= vect.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:12: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!vect.empty()){{$}}\n  if (vect.size() > 1) // no warning\n    ;\n  if (1 < vect.size()) // no warning\n    ;\n  if (vect.size() <= 1) // no warning\n    ;\n  if (1 >= vect.size()) // no warning\n    ;\n  if (!vect.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:8: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect.empty()){{$}}\n  if (vect.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!vect.empty()){{$}}\n\n  if (vect.empty())\n    ;\n\n  const std::vector<int> vect2;\n  if (vect2.size() != 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!vect2.empty()){{$}}\n\n  std::vector<int> *vect3 = new std::vector<int>();\n  if (vect3->size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect3->empty()){{$}}\n  if ((*vect3).size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if ((*vect3).empty()){{$}}\n  if ((*vect3) == std::vector<int>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect3->empty()){{$}}\n  if (*vect3 == std::vector<int>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect3->empty()){{$}}\n\n  delete vect3;\n\n  const std::vector<int> &vect4 = vect2;\n  if (vect4.size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect4.empty()){{$}}\n  if (vect4 == std::vector<int>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (vect4.empty()){{$}}\n\n  TemplatedContainer<void> templated_container;\n  if (templated_container.size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (templated_container.empty()){{$}}\n  if (templated_container == TemplatedContainer<void>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (templated_container.empty()){{$}}\n  if (templated_container.size() != 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  if (templated_container != TemplatedContainer<void>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  if (0 == templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:12: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (templated_container.empty()){{$}}\n  if (TemplatedContainer<void>() == templated_container)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (templated_container.empty()){{$}}\n  if (0 != templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:12: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  if (TemplatedContainer<void>() != templated_container)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  if (templated_container.size() > 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  if (0 < templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:11: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  if (templated_container.size() < 1)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (templated_container.empty()){{$}}\n  if (1 > templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:11: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (templated_container.empty()){{$}}\n  if (templated_container.size() >= 1)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  if (1 <= templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:12: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  if (templated_container.size() > 1) // no warning\n    ;\n  if (1 < templated_container.size()) // no warning\n    ;\n  if (templated_container.size() <= 1) // no warning\n    ;\n  if (1 >= templated_container.size()) // no warning\n    ;\n  if (!templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:8: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (templated_container.empty()){{$}}\n  if (templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n\n  if (templated_container.empty())\n    ;\n\n  // No warnings expected.\n  PrivateEmpty<void> private_empty;\n  if (private_empty.size() == 0)\n    ;\n  if (private_empty == PrivateEmpty<void>())\n    ;\n  if (private_empty.size() != 0)\n    ;\n  if (private_empty != PrivateEmpty<void>())\n    ;\n  if (0 == private_empty.size())\n    ;\n  if (PrivateEmpty<void>() == private_empty)\n    ;\n  if (0 != private_empty.size())\n    ;\n  if (PrivateEmpty<void>() != private_empty)\n    ;\n  if (private_empty.size() > 0)\n    ;\n  if (0 < private_empty.size())\n    ;\n  if (private_empty.size() < 1)\n    ;\n  if (1 > private_empty.size())\n    ;\n  if (private_empty.size() >= 1)\n    ;\n  if (1 <= private_empty.size())\n    ;\n  if (private_empty.size() > 1)\n    ;\n  if (1 < private_empty.size())\n    ;\n  if (private_empty.size() <= 1)\n    ;\n  if (1 >= private_empty.size())\n    ;\n  if (!private_empty.size())\n    ;\n  if (private_empty.size())\n    ;\n\n  // Types with weird size() return type.\n  BoolSize bs;\n  if (bs.size() == 0)\n    ;\n  EnumSize es;\n  if (es.size() == 0)\n    ;\n\n  Derived derived;\n  if (derived.size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (derived.empty()){{$}}\n  if (derived == Derived())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (derived.empty()){{$}}\n\n  takesBool(derived.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}takesBool(!derived.empty());\n\n  takesBool(derived.size() == 0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}takesBool(derived.empty());\n\n  takesBool(derived.size() != 0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}takesBool(!derived.empty());\n\n  bool b1 = derived.size();\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}bool b1 = !derived.empty();\n\n  bool b2(derived.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}bool b2(!derived.empty());\n\n  auto b3 = static_cast<bool>(derived.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:31: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}auto b3 = static_cast<bool>(!derived.empty());\n\n  auto b4 = (bool)derived.size();\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}auto b4 = (bool)!derived.empty();\n\n  auto b5 = bool(derived.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:18: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}auto b5 = bool(!derived.empty());\n\n  return derived.size();\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}return !derived.empty();\n}\n\nclass ConstructWithBoolField {\n  bool B;\npublic:\n  ConstructWithBoolField(const std::vector<int> &C) : B(C.size()) {}\n// CHECK-MESSAGES: :[[@LINE-1]]:57: warning: the 'empty' method should be used\n// CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n// CHECK-FIXES: {{^  }}ConstructWithBoolField(const std::vector<int> &C) : B(!C.empty()) {}\n};\n\nstruct StructWithNSDMI {\n  std::vector<int> C;\n  bool B = C.size();\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: the 'empty' method should be used\n// CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n// CHECK-FIXES: {{^  }}bool B = !C.empty();\n};\n\nint func(const std::vector<int> &C) {\n  return C.size() ? 0 : 1;\n// CHECK-MESSAGES: :[[@LINE-1]]:10: warning: the 'empty' method should be used\n// CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n// CHECK-FIXES: {{^  }}return !C.empty() ? 0 : 1;\n}\n\nconstexpr Lazy L;\nstatic_assert(!L.size(), \"\");\n// CHECK-MESSAGES: :[[@LINE-1]]:16: warning: the 'empty' method should be used\n// CHECK-MESSAGES: :94:18: note: method 'Lazy'::empty() defined here\n// CHECK-FIXES: {{^}}static_assert(L.empty(), \"\");\n\nstruct StructWithLazyNoexcept {\n  void func() noexcept(L.size());\n};\n\n#define CHECKSIZE(x) if (x.size()) {}\n// CHECK-FIXES: #define CHECKSIZE(x) if (x.size()) {}\n\ntemplate <typename T> void f() {\n  std::vector<T> v;\n  if (v.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!v.empty()){{$}}\n  if (v == std::vector<T>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of comparing to an empty object [readability-container-size-empty]\n  // CHECK-FIXES: {{^  }}if (v.empty()){{$}}\n  // CHECK-FIXES-NEXT: ;\n  CHECKSIZE(v);\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: CHECKSIZE(v);\n\n  TemplatedContainer<T> templated_container;\n  if (templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  if (templated_container != TemplatedContainer<T>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  // CHECK-FIXES-NEXT: ;\n  CHECKSIZE(templated_container);\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: CHECKSIZE(templated_container);\n  std::basic_string<T> s;\n  if (s.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-MESSAGES: string:{{[0-9]+}}:8: note: method 'basic_string'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!s.empty()){{$}}\n  if (s.length())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'length' [readability-container-size-empty]\n  // CHECK-MESSAGES: string:{{[0-9]+}}:8: note: method 'basic_string'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!s.empty()){{$}}\n}\n\nvoid g() {\n  f<int>();\n  f<double>();\n  f<char *>();\n}\n\ntemplate <typename T>\nbool neverInstantiatedTemplate() {\n  std::vector<T> v;\n  if (v.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!v.empty()){{$}}\n\n  if (v == std::vector<T>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of comparing to an empty object [readability-container-size-empty]\n  // CHECK-FIXES: {{^  }}if (v.empty()){{$}}\n  // CHECK-FIXES-NEXT: ;\n  if (v.size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (v.empty()){{$}}\n  if (v.size() != 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!v.empty()){{$}}\n  if (v.size() < 1)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (v.empty()){{$}}\n  if (v.size() > 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!v.empty()){{$}}\n  if (v.size() == 1)\n    ;\n  if (v.size() != 1)\n    ;\n  if (v.size() == 2)\n    ;\n  if (v.size() != 2)\n    ;\n\n  if (static_cast<bool>(v.size()))\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:25: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (static_cast<bool>(!v.empty())){{$}}\n  if (v.size() && false)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!v.empty() && false){{$}}\n  if (!v.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:8: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (v.empty()){{$}}\n\n  TemplatedContainer<T> templated_container;\n  if (templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  if (templated_container != TemplatedContainer<T>())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (!templated_container.empty()){{$}}\n  // CHECK-FIXES-NEXT: ;\n  while (templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:10: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}while (!templated_container.empty()){{$}}\n\n  do {\n  }\n  while (templated_container.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}while (!templated_container.empty());\n\n  for (; templated_container.size();)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:10: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}for (; !templated_container.empty();){{$}}\n\n  if (true && templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:15: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (true && !templated_container.empty()){{$}}\n\n  if (true || templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:15: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (true || !templated_container.empty()){{$}}\n\n  if (!templated_container.size())\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:8: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}if (templated_container.empty()){{$}}\n\n  bool b1 = templated_container.size();\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}bool b1 = !templated_container.empty();\n\n  bool b2(templated_container.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}bool b2(!templated_container.empty());\n\n  auto b3 = static_cast<bool>(templated_container.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:31: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}auto b3 = static_cast<bool>(!templated_container.empty());\n\n  auto b4 = (bool)templated_container.size();\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}auto b4 = (bool)!templated_container.empty();\n\n  auto b5 = bool(templated_container.size());\n  // CHECK-MESSAGES: :[[@LINE-1]]:18: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}auto b5 = bool(!templated_container.empty());\n\n  takesBool(templated_container.size());\n  // We don't detect this one because we don't know the parameter of takesBool\n  // until the type of templated_container.size() is known\n\n  return templated_container.size();\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :37:8: note: method 'TemplatedContainer'::empty() defined here\n  // CHECK-FIXES: {{^  }}return !templated_container.empty();\n}\n\ntemplate <typename TypeRequiresSize>\nvoid instantiatedTemplateWithSizeCall() {\n  TypeRequiresSize t;\n  // The instantiation of the template with std::vector<int> should not\n  // result in changing the template, because we don't know that\n  // TypeRequiresSize generally has `.empty()`\n  if (t.size())\n    ;\n\n  if (t == TypeRequiresSize{})\n    ;\n\n  if (t != TypeRequiresSize{})\n    ;\n}\n\nclass TypeWithSize {\npublic:\n  TypeWithSize();\n  bool operator==(const TypeWithSize &other) const;\n  bool operator!=(const TypeWithSize &other) const;\n\n  unsigned size() const { return 0; }\n  // Does not have `.empty()`\n};\n\nvoid instantiator() {\n  instantiatedTemplateWithSizeCall<TypeWithSize>();\n  instantiatedTemplateWithSizeCall<std::vector<int>>();\n}\n\nnamespace std {\ntemplate <typename T>\nstruct unique_ptr {\n  T *operator->() const;\n  T &operator*() const;\n};\n} // namespace std\n\nbool call_through_unique_ptr(const std::unique_ptr<std::vector<int>> &ptr) {\n  return ptr->size() > 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}return !ptr->empty();\n}\n\nbool call_through_unique_ptr_deref(const std::unique_ptr<std::vector<int>> &ptr) {\n  return (*ptr).size() > 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: the 'empty' method should be used\n  // CHECK-MESSAGES: :12:8: note: method 'vector'::empty() defined here\n  // CHECK-FIXES: {{^  }}return !(*ptr).empty();\n}\n\nstruct TypedefSize {\n  typedef int size_type;\n  size_type size() const;\n  bool empty() const;\n};\n\nvoid testTypedefSize() {\n  TypedefSize ts;\n  if (ts.size() == 0)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}if (ts.empty()){{$}}\n}\n\nnamespace std {\n\ntemplate <typename T, unsigned long N> struct array {\n  bool operator==(const array& other) const;\n  bool operator!=(const array& other) const;\n  unsigned long size() const { return N; }\n  bool empty() const { return N != 0U; }\n\n  T data[N];\n};\n\n}\n\nstruct DummyType {\n  bool operator==(const DummyType&) const;\n  unsigned long size() const;\n  bool empty() const;\n};\n\nstruct IgnoredDummyType {\n  bool operator==(const IgnoredDummyType&) const;\n  unsigned long size() const;\n  bool empty() const;\n};\n\ntypedef std::array<int, 10U> Array;\n\nbool testArraySize(const Array& value) {\n  return value.size() == 0U;\n// CHECK-MESSAGES: :[[@LINE-1]]:10: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n// CHECK-FIXES: {{^  }}return value.empty();{{$}}\n// CHECK-MESSAGES: :[[@LINE-25]]:8: note: method 'array'::empty() defined here\n}\n\nbool testArrayCompareToEmpty(const Array& value) {\n  return value == std::array<int, 10U>();\n}\n\nbool testDummyType(const DummyType& value) {\n  return value == DummyType();\n// CHECK-MESSAGES: :[[@LINE-1]]:10: warning: the 'empty' method should be used to check for emptiness instead of comparing to an empty object [readability-container-size-empty]\n// CHECK-FIXES: {{^  }}return value.empty();{{$}}\n// CHECK-MESSAGES: :[[@LINE-26]]:8: note: method 'DummyType'::empty() defined here\n}\n\nbool testIgnoredDummyType(const IgnoredDummyType& value) {\n  return value == IgnoredDummyType();\n}\n\nbool testStringLiterals(const std::string& s)\n{\n  using namespace std::string_literals;\n  return s == \"\"s;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: the 'empty' method should be used\n  // CHECK-FIXES: {{^  }}return s.empty()\n}\n\nbool testNotEmptyStringLiterals(const std::string& s)\n{\n  using namespace std::string_literals;\n  return s == \"foo\"s;\n}\n\nnamespace PR72619 {\n  struct SS {\n    bool empty() const;\n    int size() const;\n  };\n\n  struct SU {\n    bool empty() const;\n    unsigned size() const;\n  };\n\n  void f(const SU& s) {\n    if (s.size() < 0) {}\n    if (0 > s.size()) {}\n    if (s.size() >= 0) {}\n    if (0 <= s.size()) {}\n    if (s.size() < 1)\n      ;\n    // CHECK-MESSAGES: :[[@LINE-2]]:9: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n    // CHECK-FIXES: {{^    }}if (s.empty()){{$}}\n    if (1 > s.size())\n      ;\n    // CHECK-MESSAGES: :[[@LINE-2]]:13: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n    // CHECK-FIXES: {{^    }}if (s.empty()){{$}}\n    if (s.size() <= 0)\n      ;\n    // CHECK-MESSAGES: :[[@LINE-2]]:9: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n    // CHECK-FIXES: {{^    }}if (s.empty()){{$}}\n    if (0 >= s.size())\n      ;\n    // CHECK-MESSAGES: :[[@LINE-2]]:14: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n    // CHECK-FIXES: {{^    }}if (s.empty()){{$}}\n  }\n\n  void f(const SS& s) {\n    if (s.size() < 0) {}\n    if (0 > s.size()) {}\n    if (s.size() >= 0) {}\n    if (0 <= s.size()) {}\n    if (s.size() < 1) {}\n    if (1 > s.size()) {}\n    if (s.size() <= 0) {}\n    if (0 >= s.size()) {}\n  }\n}\n\nnamespace PR88203 {\n  struct SS {\n    bool empty() const;\n    int size() const;\n    int length(int) const;\n  };\n\n  struct SU {\n    bool empty() const;\n    int size(int) const;\n    int length() const;\n  };\n\n  void f(const SS& s) {\n    if (0 == s.length(1)) {}\n    if (0 == s.size()) {}\n    // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n    // CHECK-FIXES: {{^    }}if (s.empty()) {}{{$}}\n  }\n\n  void f(const SU& s) {\n    if (0 == s.size(1)) {}\n    if (0 == s.length()) {}\n    // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: the 'empty' method should be used to check for emptiness instead of 'length' [readability-container-size-empty]\n    // CHECK-FIXES: {{^    }}if (s.empty()) {}{{$}}\n  }\n}\n\nnamespace PR94454 {\n  template <char...>\n  int operator\"\"_ci() { return 0; }\n  auto eq = 0_ci == 0;\n}"
    }
  ]
}