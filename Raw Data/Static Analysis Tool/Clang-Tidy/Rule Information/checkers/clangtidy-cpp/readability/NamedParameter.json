{
  "name": "NamedParameter",
  "language": "cpp",
  "description": ".. title:: clang-tidy - readability-named-parameter",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 143,
  "branches": 24,
  "apis": 86,
  "test": [
    {
      "description": null,
      "expected-problems": 34,
      "expected-linenumbers": [
        6,
        8,
        11,
        13,
        16,
        18,
        21,
        23,
        26,
        28,
        31,
        33,
        36,
        38,
        41,
        43,
        74,
        76,
        90,
        92,
        97,
        99,
        104,
        106,
        109,
        111,
        120,
        122,
        126,
        128,
        132,
        134,
        138,
        140
      ],
      "code": "\n// RUN: %check_clang_tidy %s readability-named-parameter %t\n// RUN: %check_clang_tidy -check-suffix=PLAIN-NAMES %s readability-named-parameter %t -- \\\n// RUN:   -config=\"{CheckOptions: [{key: readability-named-parameter.InsertPlainNamesInForwardDecls, value: true}]}\"\n\nvoid Method(char *) { /* */ }\n// CHECK-MESSAGES: :[[@LINE-1]]:19: warning: all parameters should be named in a function\n// CHECK-FIXES: void Method(char * /*unused*/) { /* */ }\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:19: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void Method(char * /*unused*/) { /* */ }\nvoid Method2(char *) {}\n// CHECK-MESSAGES: :[[@LINE-1]]:20: warning: all parameters should be named in a function\n// CHECK-FIXES: void Method2(char * /*unused*/) {}\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:20: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void Method2(char * /*unused*/) {}\nvoid Method3(char *, void *) {}\n// CHECK-MESSAGES: :[[@LINE-1]]:20: warning: all parameters should be named in a function\n// CHECK-FIXES: void Method3(char * /*unused*/, void * /*unused*/) {}\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:20: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void Method3(char * /*unused*/, void * /*unused*/) {}\nvoid Method4(char *, int /*unused*/) {}\n// CHECK-MESSAGES: :[[@LINE-1]]:20: warning: all parameters should be named in a function\n// CHECK-FIXES: void Method4(char * /*unused*/, int /*unused*/) {}\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:20: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void Method4(char * /*unused*/, int /*unused*/) {}\nvoid operator delete[](void *) throw() {}\n// CHECK-MESSAGES: :[[@LINE-1]]:30: warning: all parameters should be named in a function\n// CHECK-FIXES: void operator delete[](void * /*unused*/) throw() {}\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:30: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void operator delete[](void * /*unused*/) throw() {}\nint Method5(int) { return 0; }\n// CHECK-MESSAGES: :[[@LINE-1]]:16: warning: all parameters should be named in a function\n// CHECK-FIXES: int Method5(int /*unused*/) { return 0; }\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:16: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: int Method5(int /*unused*/) { return 0; }\nvoid Method6(void (*)(void *)) {}\n// CHECK-MESSAGES: :[[@LINE-1]]:21: warning: all parameters should be named in a function\n// CHECK-FIXES: void Method6(void (* /*unused*/)(void *)) {}\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:21: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void Method6(void (* /*unused*/)(void *)) {}\ntemplate <typename T> void Method7(T) {}\n// CHECK-MESSAGES: :[[@LINE-1]]:37: warning: all parameters should be named in a function\n// CHECK-FIXES: template <typename T> void Method7(T /*unused*/) {}\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:37: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: template <typename T> void Method7(T /*unused*/) {}\n\n// Don't warn in macros.\n#define M void MethodM(int) {}\nM\n\nvoid operator delete(void *x) throw() {}\nvoid Method7(char * /*x*/) {}\nvoid Method8(char *x) {}\ntypedef void (*TypeM)(int x);\nvoid operator delete[](void *x) throw();\nvoid operator delete[](void * /*x*/) throw();\n\nstruct X {\n  void operator++(int) {}\n  void operator--(int) {}\n\n  X(X&) = delete;\n  X &operator=(X&) = default;\n\n  const int &i;\n};\n\nvoid (*Func1)(void *);\nvoid Func2(void (*func)(void *)) {}\ntemplate <void Func(void *)> void Func3() {}\n\ntemplate <typename T>\nstruct Y {\n  void foo(T) {}\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: all parameters should be named in a function\n// CHECK-FIXES: void foo(T /*unused*/) {}\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:13: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void foo(T /*unused*/) {}\n};\n\nY<int> y;\nY<float> z;\n\nstruct Base {\n  virtual void foo(bool notThisOne);\n  virtual void foo(int argname);\n};\n\nstruct Derived : public Base {\n  void foo(int);\n// CHECK-MESSAGES: :[[@LINE-1]]:15: warning: all parameters should be named in a function\n// CHECK-FIXES: void foo(int /*argname*/);\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:15: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void foo(int argname);\n};\n\nvoid FDef(int);\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning: all parameters should be named in a function\n// CHECK-FIXES: void FDef(int /*n*/);\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:14: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void FDef(int n);\nvoid FDef(int n) {}\n\nvoid FDef2(int, int);\n// CHECK-MESSAGES: :[[@LINE-1]]:15: warning: all parameters should be named in a function\n// CHECK-FIXES: void FDef2(int /*n*/, int /*unused*/);\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:15: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void FDef2(int n, int /*unused*/);\nvoid FDef2(int n, int) {}\n// CHECK-MESSAGES: :[[@LINE-1]]:22: warning: all parameters should be named in a function\n// CHECK-FIXES: void FDef2(int n, int /*unused*/) {}\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:22: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: void FDef2(int n, int /*unused*/) {}\n\nvoid FNoDef(int);\n\nclass Z {};\nZ the_z;\n\nZ &operator++(Z&) { return the_z; }\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: all parameters should be named in a function\n// CHECK-FIXES: Z &operator++(Z& /*unused*/) { return the_z; }\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:17: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: Z &operator++(Z& /*unused*/) { return the_z; }\n\nZ &operator++(Z&, int) { return the_z; }\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: all parameters should be named in a function\n// CHECK-FIXES: Z &operator++(Z& /*unused*/, int) { return the_z; }\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:17: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: Z &operator++(Z& /*unused*/, int) { return the_z; }\n\nZ &operator--(Z&) { return the_z; }\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: all parameters should be named in a function\n// CHECK-FIXES: Z &operator--(Z& /*unused*/) { return the_z; }\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:17: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: Z &operator--(Z& /*unused*/) { return the_z; }\n\nZ &operator--(Z&, int) { return the_z; }\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: all parameters should be named in a function\n// CHECK-FIXES: Z &operator--(Z& /*unused*/, int) { return the_z; }\n// CHECK-MESSAGES-PLAIN-NAMES: :[[@LINE-3]]:17: warning: all parameters should be named in a function\n// CHECK-FIXES-PLAIN-NAMES: Z &operator--(Z& /*unused*/, int) { return the_z; }\n\nnamespace testing {\nnamespace internal {\nclass IgnoredValue {\n public:\n  template <typename T>\n  IgnoredValue(const T& /* ignored */) {}\n};\n}\ntypedef internal::IgnoredValue Unused;\n}\n\nusing ::testing::Unused;\n\nvoid MockFunction(Unused, int q, Unused) {\n  ++q;\n  ++q;\n  ++q;\n}\n\nnamespace std {\ntypedef decltype(nullptr) nullptr_t;\n}\n\nvoid f(std::nullptr_t) {}\n\ntypedef void (F)(int);\nF f;\nvoid f(int x) {}\n\nnamespace issue_63056\n{\n  struct S {\n    S(const S&);\n    S(S&&);\n\n    S& operator=(const S&);\n    S& operator=(S&&);\n  };\n\n  S::S(const S&) = default;\n  S::S(S&&) = default;\n\n  S& S::operator=(const S&) = default;\n  S& S::operator=(S&&) = default;\n} // namespace issue_63056"
    }
  ]
}