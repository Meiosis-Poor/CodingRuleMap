{
  "name": "SimplifyBooleanExpr",
  "language": "cpp",
  "description": ".. title:: clang-tidy - readability-simplify-boolean-expr",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 1002,
  "branches": 205,
  "apis": 668,
  "test": [
    {
      "description": null,
      "expected-problems": 90,
      "expected-linenumbers": [
        7,
        10,
        13,
        16,
        21,
        24,
        27,
        30,
        35,
        38,
        41,
        44,
        49,
        52,
        55,
        58,
        69,
        83,
        95,
        109,
        123,
        135,
        145,
        153,
        161,
        169,
        181,
        189,
        197,
        205,
        217,
        225,
        233,
        241,
        252,
        256,
        260,
        268,
        276,
        284,
        292,
        302,
        306,
        310,
        314,
        352,
        358,
        359,
        362,
        367,
        368,
        384,
        391,
        402,
        414,
        455,
        465,
        482,
        492,
        513,
        524,
        565,
        577,
        728,
        738,
        749,
        760,
        772,
        782,
        792,
        802,
        819,
        829,
        839,
        849,
        859,
        878,
        890,
        905,
        912,
        922,
        932,
        942,
        952,
        963,
        975,
        986,
        1001,
        1011,
        1021
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s readability-simplify-boolean-expr %t\n\nbool a1 = false;\n\n//=-=-=-=-=-=-= operator ==\nbool aa = false == a1;\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: redundant boolean literal supplied to boolean operator [readability-simplify-boolean-expr]\n// CHECK-FIXES: {{^bool aa = !a1;$}}\nbool ab = true == a1;\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool ab = a1;$}}\nbool a2 = a1 == false;\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool a2 = !a1;$}}\nbool a3 = a1 == true;\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool a3 = a1;$}}\n\n//=-=-=-=-=-=-= operator !=\nbool n1 = a1 != false;\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool n1 = a1;$}}\nbool n2 = a1 != true;\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool n2 = !a1;$}}\nbool n3 = false != a1;\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool n3 = a1;$}}\nbool n4 = true != a1;\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool n4 = !a1;$}}\n\n//=-=-=-=-=-=-= operator ||\nbool a4 = a1 || false;\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool a4 = a1;$}}\nbool a5 = a1 || true;\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool a5 = true;$}}\nbool a6 = false || a1;\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool a6 = a1;$}}\nbool a7 = true || a1;\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool a7 = true;$}}\n\n//=-=-=-=-=-=-= operator &&\nbool a8 = a1 && false;\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool a8 = false;$}}\nbool a9 = a1 && true;\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool a9 = a1;$}}\nbool ac = false && a1;\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool ac = false;$}}\nbool ad = true && a1;\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: {{.*}} to boolean operator\n// CHECK-FIXES: {{^bool ad = a1;$}}\n\nvoid if_with_bool_literal_condition() {\n  int i = 0;\n  if (false) {\n    i = 1;\n  } else {\n    i = 2;\n  }\n  i = 3;\n  // CHECK-MESSAGES: :[[@LINE-6]]:7: warning: {{.*}} in if statement condition\n  // CHECK-FIXES:      {{^  int i = 0;$}}\n  // CHECK-FIXES-NEXT: {{^  {$}}\n  // CHECK-FIXES-NEXT: {{^    i = 2;$}}\n  // CHECK-FIXES-NEXT: {{^  }$}}\n  // CHECK-FIXES-NEXT: {{^  i = 3;$}}\n\n  i = 4;\n  if (true) {\n    i = 5;\n  } else {\n    i = 6;\n  }\n  i = 7;\n  // CHECK-MESSAGES: :[[@LINE-6]]:7: warning: {{.*}} in if statement condition\n  // CHECK-FIXES:      {{^  i = 4;$}}\n  // CHECK-FIXES-NEXT: {{^  {$}}\n  // CHECK-FIXES-NEXT: {{^    i = 5;$}}\n  // CHECK-FIXES-NEXT: {{^  }$}}\n  // CHECK-FIXES-NEXT: {{^  i = 7;$}}\n\n  i = 8;\n  if (false) {\n    i = 9;\n  }\n  i = 11;\n  // CHECK-MESSAGES: :[[@LINE-4]]:7: warning: {{.*}} in if statement condition\n  // CHECK-FIXES:      {{^  i = 8;$}}\n  // CHECK-FIXES-NEXT: {{^  $}}\n  // CHECK-FIXES-NEXT: {{^  i = 11;$}}\n}\n\nvoid if_with_negated_bool_condition() {\n  int i = 10;\n  if (!true) {\n    i = 11;\n  } else {\n    i = 12;\n  }\n  i = 13;\n  // CHECK-MESSAGES: :[[@LINE-6]]:7: warning: {{.*}} in if statement condition\n  // CHECK-FIXES:      {{^  int i = 10;$}}\n  // CHECK-FIXES-NEXT: {{^  {$}}\n  // CHECK-FIXES-NEXT: {{^    i = 12;$}}\n  // CHECK-FIXES-NEXT: {{^  }$}}\n  // CHECK-FIXES-NEXT: {{^  i = 13;$}}\n\n  i = 14;\n  if (!false) {\n    i = 15;\n  } else {\n    i = 16;\n  }\n  i = 17;\n  // CHECK-MESSAGES: :[[@LINE-6]]:7: warning: {{.*}} in if statement condition\n  // CHECK-FIXES:      {{^  i = 14;$}}\n  // CHECK-FIXES-NEXT: {{^  {$}}\n  // CHECK-FIXES-NEXT: {{^    i = 15;$}}\n  // CHECK-FIXES-NEXT: {{^  }$}}\n  // CHECK-FIXES-NEXT: {{^  i = 17;$}}\n\n  i = 18;\n  if (!true) {\n    i = 19;\n  }\n  i = 20;\n  // CHECK-MESSAGES: :[[@LINE-4]]:7: warning: {{.*}} in if statement condition\n  // CHECK-FIXES:      {{^  i = 18;$}}\n  // CHECK-FIXES-NEXT: {{^  $}}\n  // CHECK-FIXES-NEXT: {{^  i = 20;$}}\n}\n\nvoid operator_equals() {\n  int i = 0;\n  bool b1 = (i > 2);\n  if (b1 == true) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(b1\\) {$}}\n    i = 5;\n  } else {\n    i = 6;\n  }\n  bool b2 = (i > 4);\n  if (b2 == false) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(!b2\\) {$}}\n    i = 7;\n  } else {\n    i = 9;\n  }\n  bool b3 = (i > 6);\n  if (true == b3) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(b3\\) {$}}\n    i = 10;\n  } else {\n    i = 11;\n  }\n  bool b4 = (i > 8);\n  if (false == b4) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(!b4\\) {$}}\n    i = 12;\n  } else {\n    i = 13;\n  }\n}\n\nvoid operator_or() {\n  int i = 0;\n  bool b5 = (i > 10);\n  if (b5 || false) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(b5\\) {$}}\n    i = 14;\n  } else {\n    i = 15;\n  }\n  bool b6 = (i > 10);\n  if (b6 || true) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(true\\) {$}}\n    i = 16;\n  } else {\n    i = 17;\n  }\n  bool b7 = (i > 10);\n  if (false || b7) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(b7\\) {$}}\n    i = 18;\n  } else {\n    i = 19;\n  }\n  bool b8 = (i > 10);\n  if (true || b8) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(true\\) {$}}\n    i = 20;\n  } else {\n    i = 21;\n  }\n}\n\nvoid operator_and() {\n  int i = 0;\n  bool b9 = (i > 20);\n  if (b9 && false) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(false\\) {$}}\n    i = 22;\n  } else {\n    i = 23;\n  }\n  bool ba = (i > 20);\n  if (ba && true) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(ba\\) {$}}\n    i = 24;\n  } else {\n    i = 25;\n  }\n  bool bb = (i > 20);\n  if (false && bb) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(false\\) {$}}\n    i = 26;\n  } else {\n    i = 27;\n  }\n  bool bc = (i > 20);\n  if (true && bc) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(bc\\) {$}}\n    i = 28;\n  } else {\n    i = 29;\n  }\n}\n\nvoid ternary_operator() {\n  int i = 0;\n  bool bd = (i > 20) ? true : false;\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: {{.*}} in ternary expression result\n  // CHECK-FIXES: {{^  bool bd = i > 20;$}}\n\n  bool be = (i > 20) ? false : true;\n  // CHECK-MESSAGES: :[[@LINE-1]]:24: warning: {{.*}} in ternary expression result\n  // CHECK-FIXES: {{^  bool be = i <= 20;$}}\n\n  bool bf = ((i > 20)) ? false : true;\n  // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: {{.*}} in ternary expression result\n  // CHECK-FIXES: {{^  bool bf = i <= 20;$}}\n}\n\nvoid operator_not_equal() {\n  int i = 0;\n  bool bf = (i > 20);\n  if (false != bf) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(bf\\) {$}}\n    i = 30;\n  } else {\n    i = 31;\n  }\n  bool bg = (i > 20);\n  if (true != bg) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(!bg\\) {$}}\n    i = 32;\n  } else {\n    i = 33;\n  }\n  bool bh = (i > 20);\n  if (bh != false) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(bh\\) {$}}\n    i = 34;\n  } else {\n    i = 35;\n  }\n  bool bi = (i > 20);\n  if (bi != true) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(!bi\\) {$}}\n    i = 36;\n  } else {\n    i = 37;\n  }\n}\n\nvoid nested_booleans() {\n  if (false || (true || false)) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(false \\|\\| \\(true\\)\\) {$}}\n  }\n  if (true && (true || false)) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(true && \\(true\\)\\) {$}}\n  }\n  if (false || (true && false)) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(false \\|\\| \\(false\\)\\) {$}}\n  }\n  if (true && (true && false)) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: {{.*}} to boolean operator\n    // CHECK-FIXES: {{^  if \\(true && \\(false\\)\\) {$}}\n  }\n}\n\nstatic constexpr bool truthy() {\n  return true;\n}\n\n#define HAS_XYZ_FEATURE true\n#define M1(what) M2(true, what)\n#define M2(condition, what) if (condition) what\n\nvoid macros_and_constexprs(int i = 0) {\n  bool b = (i == 1);\n  if (b && truthy()) {\n    // leave this alone; if you want it simplified, then you should\n    // inline the constexpr function first.\n    i = 1;\n  }\n  i = 2;\n  if (b && HAS_XYZ_FEATURE) {\n    // leave this alone; if you want it simplified, then you should\n    // inline the macro first.\n    i = 3;\n  }\n  if (HAS_XYZ_FEATURE) {\n    i = 5;\n  }\n  i = 4;\n  M1(i = 7);\n}\n\n#undef HAS_XYZ_FEATURE\n\nbool conditional_return_statements(int i) {\n  if (i == 0) return true; else return false;\n}\n// CHECK-MESSAGES: :[[@LINE-2]]:22: warning: {{.*}} in conditional return statement\n// CHECK-FIXES:      {{^}}  return i == 0;{{$}}\n// CHECK-FIXES-NEXT: {{^}$}}\n\nbool conditional_return_statements_no_fix_1(int i) {\n  if (i == 0) return true;\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: {{.*}} in conditional return statement\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: note: conditions that can be simplified\n  // comment\n  return false;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: note: return statement that can be simplified\n}\n\nbool conditional_return_statements_no_fix_2(int i) {\n  if (i == 0) return true;\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: {{.*}} in conditional return statement\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: note: conditions that can be simplified\n  // comment\n  else return false;\n}\n\nbool conditional_return_statements_then_expr(int i, int j) {\n  if (i == j) return (i == 0); else return false;\n}\n\nbool conditional_return_statements_else_expr(int i, int j) {\n  if (i == j) return true; else return (i == 0);\n}\n\nbool negated_conditional_return_statements(int i) {\n  if (i == 0) return false; else return true;\n}\n// CHECK-MESSAGES: :[[@LINE-2]]:22: warning: {{.*}} in conditional return statement\n// CHECK-FIXES:      {{^}}  return i != 0;{{$}}\n// CHECK-FIXES-NEXT: {{^}$}}\n\nbool negative_condition_conditional_return_statement(int i) {\n  if (!(i == 0)) return false; else return true;\n}\n// CHECK-MESSAGES: :[[@LINE-2]]:25: warning: {{.*}} in conditional return statement\n// CHECK-FIXES:      {{^}}  return i == 0;{{$}}\n// CHECK-FIXES-NEXT: {{^}$}}\n\nbool conditional_compound_return_statements(int i) {\n  if (i == 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return statement\n// CHECK-FIXES:      {{^}}bool conditional_compound_return_statements(int i) {{{$}}\n// CHECK-FIXES-NEXT: {{^}}  return i == 1;{{$}}\n// CHECK-FIXES-NEXT: {{^}$}}\n\nbool negated_conditional_compound_return_statements(int i) {\n  if (i == 1) {\n    return false;\n  } else {\n    return true;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return statement\n// CHECK-FIXES:      {{^}}bool negated_conditional_compound_return_statements(int i) {{{$}}\n// CHECK-FIXES-NEXT: {{^}}  return i != 1;{{$}}\n// CHECK-FIXES-NEXT: {{^}$}}\n\nbool conditional_return_statements_side_effects_then(int i) {\n  if (i == 2) {\n    macros_and_constexprs();\n    return true;\n  } else\n    return false;\n}\n\nbool negated_conditional_return_statements_side_effects_then(int i) {\n  if (i == 2) {\n    macros_and_constexprs();\n    return false;\n  } else\n    return true;\n}\n\nbool conditional_return_statements_side_effects_else(int i) {\n  if (i == 2)\n    return true;\n  else {\n    macros_and_constexprs();\n    return false;\n  }\n}\n\nbool negated_conditional_return_statements_side_effects_else(int i) {\n  if (i == 2)\n    return false;\n  else {\n    macros_and_constexprs();\n    return true;\n  }\n}\n\nvoid lambda_conditional_return_statements() {\n  auto lambda = [](int n) -> bool { if (n > 0) return true; else return false; };\n  // CHECK-MESSAGES: :[[@LINE-1]]:55: warning: {{.*}} in conditional return statement\n  // CHECK-FIXES: {{^}}  auto lambda = [](int n) -> bool { return n > 0; };{{$}}\n\n  auto lambda2 = [](int n) -> bool {\n    if (n > 0) {\n        return true;\n    } else {\n        return false;\n    }\n  };\n  // CHECK-MESSAGES: :[[@LINE-5]]:16: warning: {{.*}} in conditional return statement\n  // CHECK-FIXES:      {{^}}  auto lambda2 = [](int n) -> bool {{{$}}\n  // CHECK-FIXES-NEXT: {{^}}    return n > 0;{{$}}\n  // CHECK-FIXES-NEXT: {{^}}  };{{$}}\n\n  auto lambda3 = [](int n) -> bool { if (n > 0) {macros_and_constexprs(); return true; } else return false; };\n\n  auto lambda4 = [](int n) -> bool {\n    if (n > 0)\n        return true;\n    else {\n        macros_and_constexprs();\n        return false;\n    }\n  };\n\n  auto lambda5 = [](int n) -> bool { if (n > 0) return false; else return true; };\n  // CHECK-MESSAGES: :[[@LINE-1]]:56: warning: {{.*}} in conditional return statement\n  // CHECK-FIXES: {{^}}  auto lambda5 = [](int n) -> bool { return n <= 0; };{{$}}\n\n  auto lambda6 = [](int n) -> bool {\n    if (n > 0) {\n        return false;\n    } else {\n        return true;\n    }\n  };\n  // CHECK-MESSAGES: :[[@LINE-5]]:16: warning: {{.*}} in conditional return statement\n  // CHECK-FIXES:      {{^}}  auto lambda6 = [](int n) -> bool {{{$}}\n  // CHECK-FIXES-NEXT: {{^}}    return n <= 0;{{$}}\n  // CHECK-FIXES-NEXT: {{^}}  };{{$}}\n}\n\nbool condition_variable_return_stmt(int i) {\n  // Unchanged: condition variable.\n  if (bool Res = i == 0)\n    return true;\n  else\n    return false;\n}\n\nvoid simple_conditional_assignment_statements(int i) {\n  bool b;\n  if (i > 10)\n    b = true;\n  else\n    b = false;\n  bool bb = false;\n  // CHECK-MESSAGES: :[[@LINE-4]]:9: warning: {{.*}} in conditional assignment\n  // CHECK-FIXES: bool b;\n  // CHECK-FIXES: {{^  }}b = i > 10;{{$}}\n  // CHECK-FIXES: bool bb = false;\n\n  bool c;\n  if (i > 20)\n    c = false;\n  else\n    c = true;\n  bool c2 = false;\n  // CHECK-MESSAGES: :[[@LINE-4]]:9: warning: {{.*}} in conditional assignment\n  // CHECK-FIXES: bool c;\n  // CHECK-FIXES: {{^  }}c = i <= 20;{{$}}\n  // CHECK-FIXES: bool c2 = false;\n\n  // Unchanged: different variables.\n  bool b2;\n  if (i > 12)\n    b = true;\n  else\n    b2 = false;\n\n  // Unchanged: no else statement.\n  bool b3;\n  if (i > 15)\n    b3 = true;\n\n  // Unchanged: not boolean assignment.\n  int j;\n  if (i > 17)\n    j = 10;\n  else\n    j = 20;\n\n  // Unchanged: different variables assigned.\n  int k = 0;\n  bool b4 = false;\n  if (i > 10)\n    b4 = true;\n  else\n    k = 10;\n}\n\nvoid complex_conditional_assignment_statements(int i) {\n  bool d;\n  if (i > 30) {\n    d = true;\n  } else {\n    d = false;\n  }\n  d = false;\n  // CHECK-MESSAGES: :[[@LINE-5]]:9: warning: {{.*}} in conditional assignment\n  // CHECK-FIXES: bool d;\n  // CHECK-FIXES: {{^  }}d = i > 30;{{$}}\n  // CHECK-FIXES: d = false;\n\n  bool e;\n  if (i > 40) {\n    e = false;\n  } else {\n    e = true;\n  }\n  e = false;\n  // CHECK-MESSAGES: :[[@LINE-5]]:9: warning: {{.*}} in conditional assignment\n  // CHECK-FIXES: bool e;\n  // CHECK-FIXES: {{^  }}e = i <= 40;{{$}}\n  // CHECK-FIXES: e = false;\n\n  // Unchanged: no else statement.\n  bool b3;\n  if (i > 15) {\n    b3 = true;\n  }\n\n  // Unchanged: not a boolean assignment.\n  int j;\n  if (i > 17) {\n    j = 10;\n  } else {\n    j = 20;\n  }\n\n  // Unchanged: multiple statements.\n  bool f;\n  if (j > 10) {\n    j = 10;\n    f = true;\n  } else {\n    j = 20;\n    f = false;\n  }\n\n  // Unchanged: multiple statements.\n  bool g;\n  if (j > 10)\n    g = true;\n  else {\n    j = 20;\n    g = false;\n  }\n\n  // Unchanged: multiple statements.\n  bool h;\n  if (j > 10) {\n    j = 10;\n    h = true;\n  } else\n    h = false;\n\n  // Unchanged: condition variable.\n  bool k;\n  if (bool Res = j > 10)\n    k = true;\n  else\n    k = false;\n}\n\n// Unchanged: chained return statements, but ChainedConditionalReturn not set.\nbool chained_conditional_compound_return(int i) {\n  if (i < 0) {\n    return true;\n  } else if (i < 10) {\n    return false;\n  } else if (i > 20) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Unchanged: chained return statements, but ChainedConditionalReturn not set.\nbool chained_conditional_return(int i) {\n  if (i < 0)\n    return true;\n  else if (i < 10)\n    return false;\n  else if (i > 20)\n    return true;\n  else\n    return false;\n}\n\n// Unchanged: chained assignments, but ChainedConditionalAssignment not set.\nvoid chained_conditional_compound_assignment(int i) {\n  bool b;\n  if (i < 0) {\n    b = true;\n  } else if (i < 10) {\n    b = false;\n  } else if (i > 20) {\n    b = true;\n  } else {\n    b = false;\n  }\n}\n\n// Unchanged: chained return statements, but ChainedConditionalReturn not set.\nvoid chained_conditional_assignment(int i) {\n  bool b;\n  if (i < 0)\n    b = true;\n  else if (i < 10)\n    b = false;\n  else if (i > 20)\n    b = true;\n  else\n    b = false;\n}\n\n// Unchanged: chained return statements, but ChainedConditionalReturn not set.\nbool chained_simple_if_return_negated(int i) {\n  if (i < 5)\n    return false;\n  if (i > 10)\n    return false;\n  return true;\n}\n\n// Unchanged: chained return statements, but ChainedConditionalReturn not set.\nbool complex_chained_if_return_return(int i) {\n  if (i < 5) {\n    return true;\n  }\n  if (i > 10) {\n    return true;\n  }\n  return false;\n}\n\n// Unchanged: chained return statements, but ChainedConditionalReturn not set.\nbool complex_chained_if_return_return_negated(int i) {\n  if (i < 5) {\n    return false;\n  }\n  if (i > 10) {\n    return false;\n  }\n  return true;\n}\n\n// Unchanged: chained return statements, but ChainedConditionalReturn not set.\nbool chained_simple_if_return(int i) {\n  if (i < 5)\n    return true;\n  if (i > 10)\n    return true;\n  return false;\n}\n\nbool simple_if_return_return(int i) {\n  if (i > 10)\n    return true;\n  return false;\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}bool simple_if_return_return(int i) {{{$}}\n// CHECK-FIXES: {{^  return i > 10;$}}\n// CHECK-FIXES: {{^}$}}\n\nbool simple_if_return_return_negated(int i) {\n  if (i > 10)\n    return false;\n  return true;\n}\n// CHECK-MESSAGES: :[[@LINE-3]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}bool simple_if_return_return_negated(int i) {{{$}}\n// CHECK-FIXES: {{^  return i <= 10;$}}\n// CHECK-FIXES: {{^}$}}\n\nbool complex_if_return_return(int i) {\n  if (i > 10) {\n    return true;\n  }\n  return false;\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}bool complex_if_return_return(int i) {{{$}}\n// CHECK-FIXES: {{^  return i > 10;$}}\n// CHECK-FIXES: {{^}$}}\n\nbool complex_if_return_return_negated(int i) {\n  if (i > 10) {\n    return false;\n  }\n  return true;\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}bool complex_if_return_return_negated(int i) {{{$}}\n// CHECK-FIXES: {{^  return i <= 10;$}}\n// CHECK-FIXES: {{^}$}}\n\nbool if_implicit_bool_expr(int i) {\n  if (i & 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return (i & 1) != 0;{{$}}\n\nbool negated_if_implicit_bool_expr(int i) {\n  if (i - 1) {\n    return false;\n  } else {\n    return true;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return (i - 1) == 0;{{$}}\n\nbool implicit_int(int i) {\n  if (i) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return i != 0;{{$}}\n\nbool explicit_bool(bool b) {\n  if (b) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return b;{{$}}\n\nclass Implicit {\npublic:\n  operator bool() {\n    return true;\n  }\n};\n\nbool object_bool_implicit_conversion(Implicit O) {\n  if (O) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return O;{{$}}\n\nbool negated_explicit_bool(bool b) {\n  if (!b) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return !b;{{$}}\n\nbool bitwise_complement_conversion(int i) {\n  if (~i) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return ~i != 0;{{$}}\n\nbool logical_or(bool a, bool b) {\n  if (a || b) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return a || b;{{$}}\n\nbool logical_and(bool a, bool b) {\n  if (a && b) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return a && b;{{$}}\n\nclass Comparable\n{\npublic:\n  bool operator==(Comparable const &rhs) { return true; }\n  bool operator!=(Comparable const &rhs) { return false; }\n};\n\nbool comparable_objects() {\n  Comparable c;\n  Comparable d;\n  if (c == d) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return c == d;{{$}}\n\nbool negated_comparable_objects() {\n  Comparable c;\n  Comparable d;\n  if (c == d) {\n    return false;\n  } else {\n    return true;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return c != d;{{$}}\n\nstruct X {\n  explicit operator bool();\n};\n\nvoid explicit_conversion_assignment(X x) {\n  bool y;\n  if (x) {\n    y = true;\n  } else {\n    y = false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:9: warning: {{.*}} in conditional assignment\n// CHECK-FIXES: {{^  bool y;$}}\n// CHECK-FIXES: {{^}}  y = static_cast<bool>(x);{{$}}\n\nvoid ternary_integer_condition(int i) {\n  bool b = i ? true : false;\n}\n// CHECK-MESSAGES: :[[@LINE-2]]:16: warning: {{.*}} in ternary expression result\n// CHECK-FIXES: bool b = i != 0;{{$}}\n\nbool non_null_pointer_condition(int *p1) {\n  if (p1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: return p1 != nullptr;{{$}}\n\nbool null_pointer_condition(int *p2) {\n  if (!p2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: return p2 == nullptr;{{$}}\n\nbool negated_non_null_pointer_condition(int *p3) {\n  if (p3) {\n    return false;\n  } else {\n    return true;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: return p3 == nullptr;{{$}}\n\nbool negated_null_pointer_condition(int *p4) {\n  if (!p4) {\n    return false;\n  } else {\n    return true;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: return p4 != nullptr;{{$}}\n\nbool comments_in_the_middle(bool b) {\n  if (b) {\n    return true;\n  } else {\n    // something wicked this way comes\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-6]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  if (b) {\n// CHECK-FIXES: // something wicked this way comes{{$}}\n\nbool preprocessor_in_the_middle(bool b) {\n  if (b) {\n    return true;\n  } else {\n#define SOMETHING_WICKED false\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-6]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  if (b) {\n// CHECK-FIXES: {{^}}#define SOMETHING_WICKED false\n\nbool integer_not_zero(int i) {\n  if (i) {\n    return false;\n  } else {\n    return true;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: {{^}}  return i == 0;{{$}}\n\nclass A {\npublic:\n    int m;\n};\n\nbool member_pointer_nullptr(int A::*p) {\n  if (p) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: return p != nullptr;{{$}}\n\nbool integer_member_implicit_cast(A *p) {\n  if (p->m) {\n    return true;\n  } else {\n    return false;\n  }\n}\n// CHECK-MESSAGES: :[[@LINE-5]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: return p->m != 0;{{$}}\n\nbool operator!=(const A&, const A&) { return false; }\nbool expr_with_cleanups(A &S) {\n  if (S != (A)S)\n    return false;\n\n  return true;\n}\n// CHECK-MESSAGES: :[[@LINE-4]]:12: warning: {{.*}} in conditional return\n// CHECK-FIXES: S == (A)S;{{$}}\n\ntemplate <bool B>\nvoid ignoreInstantiations() {\n  if (B) {\n    return;\n  } else {\n    return;\n  }\n}\n\nvoid instantiate() {\n  // Just make sure the check isn't fooled by template instantiations.\n  ignoreInstantiations<true>();\n  ignoreInstantiations<false>();\n}"
    }
  ]
}