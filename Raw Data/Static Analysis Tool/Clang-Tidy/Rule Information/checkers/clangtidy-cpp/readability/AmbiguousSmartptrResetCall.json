{
  "name": "AmbiguousSmartptrResetCall",
  "language": "cpp",
  "description": ".. title:: clang-tidy - readability-ambiguous-smartptr-reset-call",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 126,
  "branches": 5,
  "apis": 94,
  "test": [
    {
      "description": null,
      "expected-problems": 96,
      "expected-linenumbers": [
        35,
        36,
        39,
        40,
        45,
        46,
        49,
        50,
        55,
        56,
        59,
        60,
        65,
        66,
        69,
        70,
        75,
        76,
        79,
        80,
        85,
        86,
        89,
        90,
        93,
        94,
        97,
        98,
        101,
        102,
        105,
        106,
        158,
        159,
        162,
        163,
        168,
        169,
        172,
        173,
        208,
        209,
        212,
        213,
        219,
        220,
        223,
        224,
        243,
        244,
        247,
        248,
        253,
        254,
        258,
        259,
        269,
        270,
        273,
        274,
        279,
        280,
        284,
        285,
        297,
        298,
        301,
        302,
        307,
        308,
        312,
        313,
        321,
        322,
        325,
        326,
        331,
        332,
        336,
        337,
        348,
        349,
        352,
        353,
        356,
        357,
        360,
        361,
        364,
        365,
        368,
        369,
        389,
        390,
        393,
        394
      ],
      "code": "\n// RUN: %check_clang_tidy %s readability-ambiguous-smartptr-reset-call %t --fix-notes -- -I %S/../modernize/Inputs/smart-ptr\n\n#include \"unique_ptr.h\"\n#include \"shared_ptr.h\"\n\ntemplate <typename T>\nstruct non_default_reset_ptr {\n  T& operator*() const;\n  T* operator->() const;\n  void reset(T* p);\n};\n\nstruct Resettable {\n  void reset();\n  void doSomething();\n};\n\nstruct ResettableWithParam {\n  void reset(int a);\n  void doSomething();\n};\n\nstruct ResettableWithDefaultParams {\n  void reset(int a = 0, double b = 0.0);\n  void doSomething();\n};\n\nstruct NonResettable {\n  void doSomething();\n};\n\nvoid Positive() {\n  std::unique_ptr<Resettable> u;\n  u.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: u = nullptr;\n  u->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*u).reset();\n\n  std::shared_ptr<Resettable> s;\n  s.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: s = nullptr;\n  s->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*s).reset();\n\n  std::unique_ptr<std::unique_ptr<int>> uu_ptr;\n  uu_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: uu_ptr = nullptr;\n  uu_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*uu_ptr).reset();\n\n  std::unique_ptr<std::shared_ptr<int>> su_ptr;\n  su_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: su_ptr = nullptr;\n  su_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*su_ptr).reset();\n\n  std::unique_ptr<ResettableWithDefaultParams> rd;\n  rd.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: rd = nullptr;\n  rd->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*rd).reset();\n\n  std::unique_ptr<std::shared_ptr<std::unique_ptr<Resettable>>> nested_ptr;\n  nested_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: nested_ptr = nullptr;\n  nested_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*nested_ptr).reset();\n  (*nested_ptr).reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: (*nested_ptr) = nullptr;\n  (*nested_ptr)->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*(*nested_ptr)).reset();\n  (**nested_ptr).reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: (**nested_ptr) = nullptr;\n  (**nested_ptr)->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*(**nested_ptr)).reset();\n}\n\nvoid Negative() {\n  std::unique_ptr<Resettable> u_ptr;\n  u_ptr.reset(nullptr);\n  u_ptr->doSomething();\n\n  std::shared_ptr<Resettable> s_ptr;\n  s_ptr.reset(nullptr);\n  s_ptr->doSomething();\n  \n  Resettable* raw_ptr;\n  raw_ptr->reset();\n  raw_ptr->doSomething();\n\n  Resettable resettable;\n  resettable.reset();\n  resettable.doSomething();\n  \n  std::unique_ptr<ResettableWithParam> u_ptr_param;\n  u_ptr_param.reset();\n  u_ptr_param.reset(nullptr);\n  u_ptr_param->reset(0);\n\n  std::unique_ptr<NonResettable> u_ptr_no_reset;\n  u_ptr_no_reset.reset();\n\n  std::shared_ptr<ResettableWithParam> s_ptr_param;\n  s_ptr_param.reset();\n  s_ptr_param->reset(0);\n  s_ptr_param->doSomething();\n\n  std::shared_ptr<NonResettable> s_ptr_no_reset;\n  s_ptr_no_reset.reset();\n\n  std::unique_ptr<ResettableWithDefaultParams> u_ptr_default_params;\n  u_ptr_default_params.reset(nullptr);\n  u_ptr_default_params->reset(1);\n  u_ptr_default_params->reset(1, 2.0);\n\n  non_default_reset_ptr<Resettable> non_default_reset_ptr;\n  non_default_reset_ptr.reset(new Resettable);\n  non_default_reset_ptr->reset();\n}\n\ntemplate <typename T>\nvoid TemplatePositiveTest() {\n  std::unique_ptr<T> u_ptr;\n\n  u_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: u_ptr = nullptr;\n  u_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*u_ptr).reset();\n\n  std::shared_ptr<T> s_ptr;\n  s_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: s_ptr = nullptr;\n  s_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*s_ptr).reset();\n}\n\ntemplate <typename T>\nvoid TemplatNegativeTestTypeWithReset() {\n  std::unique_ptr<T> u_ptr;\n  u_ptr.reset();\n  u_ptr->reset(0);\n\n  std::shared_ptr<T> s_ptr;\n  s_ptr.reset();\n  s_ptr->reset(0);\n}\n\ntemplate <typename T>\nvoid TemplatNegativeTestTypeWithoutReset() {\n  std::unique_ptr<T> u_ptr;\n  u_ptr.reset();\n\n  std::unique_ptr<T> s_ptr;\n  s_ptr.reset();\n}\n\nvoid instantiate() {\n  TemplatePositiveTest<Resettable>();\n  TemplatePositiveTest<std::unique_ptr<int>>();\n  TemplatePositiveTest<std::shared_ptr<int>>();\n  TemplatNegativeTestTypeWithReset<ResettableWithParam>();\n  TemplatNegativeTestTypeWithoutReset<NonResettable>();\n}\n\nstruct S {\n  void foo() {\n    u_ptr.reset();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: note: consider assigning the pointer to 'nullptr' here\n    // CHECK-FIXES: u_ptr = nullptr;\n    u_ptr->reset();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n    // CHECK-FIXES: (*u_ptr).reset();\n    u_ptr.reset(nullptr);\n    u_ptr->doSomething();\n\n    s_ptr.reset();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: note: consider assigning the pointer to 'nullptr' here\n    // CHECK-FIXES: s_ptr = nullptr;\n    s_ptr->reset();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n    // CHECK-MESSAGES: :[[@LINE-2]]:5: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n    // CHECK-FIXES: (*s_ptr).reset();\n    s_ptr.reset(nullptr);\n\n    ptr.reset();\n  }\n\n  std::unique_ptr<Resettable> u_ptr;\n  std::unique_ptr<std::shared_ptr<int>> s_ptr;\n  std::unique_ptr<NonResettable> ptr;\n};\n\n\ntypedef std::unique_ptr<Resettable> TypedefResettableUniquePtr;\ntypedef std::shared_ptr<Resettable> TypedefResettableSharedPtr;\n\nvoid TypedefPositive() {\n  TypedefResettableUniquePtr u_ptr;\n  u_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: u_ptr = nullptr;\n  u_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*u_ptr).reset();\n\n  TypedefResettableSharedPtr s_ptr;\n  s_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: s_ptr = nullptr;\n\n  s_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*s_ptr).reset();\n}\n\nusing UsingResettableUniquePtr = std::unique_ptr<Resettable>;\nusing UsingResettableSharedPtr = std::shared_ptr<Resettable>;\n\nvoid UsingPositive() {\n  UsingResettableUniquePtr u_ptr;\n  u_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: u_ptr = nullptr;\n  u_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*u_ptr).reset();\n\n  UsingResettableSharedPtr s_ptr;\n  s_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: s_ptr = nullptr;\n\n  s_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*s_ptr).reset();\n}\n\ntemplate<typename T>\nusing UsingUniquePtr = std::unique_ptr<T>;\ntemplate<typename T>\nusing UsingSharedPtr = std::shared_ptr<T>;\n\nvoid UsingTemplatePositive() {\n  UsingUniquePtr<Resettable> u_ptr;\n  u_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: u_ptr = nullptr;\n  u_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*u_ptr).reset();\n\n  UsingSharedPtr<Resettable> s_ptr;\n  s_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: s_ptr = nullptr;\n\n  s_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*s_ptr).reset();\n}\n\ntemplate<typename T>\nvoid UsingByTemplatePositive() {\n  UsingUniquePtr<T> u_ptr;\n  u_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: u_ptr = nullptr;\n  u_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*u_ptr).reset();\n\n  UsingSharedPtr<T> s_ptr;\n  s_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: s_ptr = nullptr;\n\n  s_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*s_ptr).reset();\n}\n\nvoid instantiate2() {\n  UsingByTemplatePositive<Resettable>();\n}\n\nvoid NestedUsingPositive() {\n  UsingUniquePtr<UsingSharedPtr<TypedefResettableUniquePtr>> nested_ptr;\n  nested_ptr.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: nested_ptr = nullptr;\n  nested_ptr->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*nested_ptr).reset();\n  (*nested_ptr).reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: (*nested_ptr) = nullptr;\n  (*nested_ptr)->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*(*nested_ptr)).reset();\n  (**nested_ptr).reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: (**nested_ptr) = nullptr;\n  (**nested_ptr)->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*(**nested_ptr)).reset();\n}\n\n// Check other default pointers and classes.\nnamespace boost {\n\ntemplate <typename T>\nstruct shared_ptr {\n  T& operator*() const;\n  T* operator->() const;\n  void reset();\n  void reset(T*);\n};\n\n} // namespace boost\n\nvoid PositiveOtherClasses() {\n  boost::shared_ptr<Resettable> sh;\n  sh.reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a smart pointer with pointee that also has a 'reset()' method, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider assigning the pointer to 'nullptr' here\n  // CHECK-FIXES: sh = nullptr;\n  sh->reset();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: ambiguous call to 'reset()' on a pointee of a smart pointer, prefer more explicit approach\n  // CHECK-MESSAGES: :[[@LINE-2]]:3: note: consider dereferencing smart pointer to call 'reset' method of the pointee here\n  // CHECK-FIXES: (*sh).reset();\n}\n"
    }
  ]
}