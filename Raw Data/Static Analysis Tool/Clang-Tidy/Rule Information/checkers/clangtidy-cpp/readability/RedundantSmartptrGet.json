{
  "name": "RedundantSmartptrGet",
  "language": "cpp",
  "description": ".. title:: clang-tidy - readability-redundant-smartptr-get",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 189,
  "branches": 13,
  "apis": 188,
  "test": [
    {
      "description": null,
      "expected-problems": 53,
      "expected-linenumbers": [
        93,
        94,
        98,
        99,
        103,
        104,
        108,
        109,
        113,
        114,
        118,
        119,
        124,
        125,
        130,
        131,
        136,
        137,
        143,
        144,
        148,
        149,
        152,
        153,
        156,
        157,
        160,
        161,
        165,
        166,
        170,
        171,
        175,
        176,
        179,
        180,
        185,
        186,
        189,
        190,
        193,
        194,
        197,
        198,
        211,
        227,
        230,
        275,
        296,
        313,
        317,
        321,
        325
      ],
      "code": "\n// RUN: %check_clang_tidy %s readability-redundant-smartptr-get %t\n\n#define NULL __null\n\nnamespace std {\n\ntemplate <typename T>\nstruct unique_ptr {\n  T& operator*() const;\n  T* operator->() const;\n  T* get() const;\n  explicit operator bool() const noexcept;\n};\n\ntemplate <typename T>\nstruct unique_ptr<T[]> {\n  T& operator[](unsigned) const;\n  T* get() const;\n  explicit operator bool() const noexcept;\n};\n\ntemplate <typename T>\nstruct shared_ptr {\n  T& operator*() const;\n  T* operator->() const;\n  T* get() const;\n  explicit operator bool() const noexcept;\n};\n\ntemplate <typename T>\nstruct shared_ptr<T[]> {\n  T& operator[](unsigned) const;\n  T* get() const;\n  explicit operator bool() const noexcept;\n};\n\ntemplate <typename T>\nstruct vector {\n  vector();\n  bool operator==(const vector<T>& other) const;\n  bool operator!=(const vector<T>& other) const;\n  unsigned long size() const;\n  bool empty() const;\n\n  using iterator = T*;\n\n  iterator begin();\n  iterator end();\n\n  T* data;\n  unsigned long sz;\n};\n\n}  // namespace std\n\nstruct Bar {\n  void Do();\n  void ConstDo() const;\n};\nstruct BarPtr {\n  Bar* operator->();\n  Bar& operator*();\n  Bar* get();\n  explicit operator bool() const;\n};\nstruct int_ptr {\n  int* get();\n  int* operator->();\n  int& operator*();\n};\n\nstruct Fail1 {\n  Bar* get();\n};\nstruct Fail2 {\n  Bar* get();\n  int* operator->();\n  int& operator*();\n};\n\nstruct PointerWithOverloadedGet {\n  int* get();\n  template <typename T>\n  T* get();\n  int* operator->();\n  int& operator*();\n};\n\nvoid Positive() {\n  BarPtr u;\n  // CHECK-FIXES: BarPtr u;\n  BarPtr().get()->Do();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: redundant get() call on smart pointer [readability-redundant-smartptr-get]\n  // CHECK-MESSAGES: BarPtr().get()->Do();\n  // CHECK-FIXES: BarPtr()->Do();\n\n  u.get()->ConstDo();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: redundant get() call\n  // CHECK-MESSAGES: u.get()->ConstDo();\n  // CHECK-FIXES: u->ConstDo();\n\n  Bar& b = *BarPtr().get();\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: redundant get() call\n  // CHECK-MESSAGES: Bar& b = *BarPtr().get();\n  // CHECK-FIXES: Bar& b = *BarPtr();\n\n  Bar& b2 = *std::unique_ptr<Bar>().get();\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: redundant get() call\n  // CHECK-MESSAGES: Bar& b2 = *std::unique_ptr<Bar>().get();\n  // CHECK-FIXES: Bar& b2 = *std::unique_ptr<Bar>();\n\n  (*BarPtr().get()).ConstDo();\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: redundant get() call\n  // CHECK-MESSAGES: (*BarPtr().get()).ConstDo();\n  // CHECK-FIXES: (*BarPtr()).ConstDo();\n\n  (*std::unique_ptr<Bar>().get()).ConstDo();\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: redundant get() call\n  // CHECK-MESSAGES: (*std::unique_ptr<Bar>().get()).ConstDo();\n  // CHECK-FIXES: (*std::unique_ptr<Bar>()).ConstDo();\n\n  std::unique_ptr<Bar>* up;\n  (*up->get()).Do();\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: redundant get() call\n  // CHECK-MESSAGES: (*up->get()).Do();\n  // CHECK-FIXES: (**up).Do();\n\n  int_ptr ip;\n  int i = *ip.get();\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: redundant get() call\n  // CHECK-MESSAGES: int i = *ip.get();\n  // CHECK-FIXES: int i = *ip;\n\n  auto ip2 = ip;\n  i = *ip2.get();\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: redundant get() call\n  // CHECK-MESSAGES: i = *ip2.get();\n  // CHECK-FIXES: i = *ip2;\n\n  std::unique_ptr<int> uu;\n  std::shared_ptr<double> *ss;\n  bool bb = uu.get() == nullptr;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: redundant get() call\n  // CHECK-MESSAGES: uu.get() == nullptr;\n  // CHECK-FIXES: bool bb = uu == nullptr;\n\n  if (up->get());\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: redundant get() call\n  // CHECK-MESSAGES: if (up->get());\n  // CHECK-FIXES: if (*up);\n  if ((uu.get()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: redundant get() call\n  // CHECK-MESSAGES: if ((uu.get()));\n  // CHECK-FIXES: if ((uu));\n  bb = !ss->get();\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: redundant get() call\n  // CHECK-MESSAGES: bb = !ss->get();\n  // CHECK-FIXES: bb = !*ss;\n  bb = u.get() ? true : false;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: redundant get() call\n  // CHECK-MESSAGES: bb = u.get() ? true : false;\n  // CHECK-FIXES: bb = u ? true : false;\n\n  bb = nullptr != ss->get();\n  // CHECK-MESSAGES: :[[@LINE-1]]:19: warning: redundant get() call\n  // CHECK-MESSAGES: nullptr != ss->get();\n  // CHECK-FIXES: bb = nullptr != *ss;\n\n  i = *PointerWithOverloadedGet().get();\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: redundant get() call\n  // CHECK-MESSAGES: i = *PointerWithOverloadedGet().get();\n  // CHECK-FIXES: i = *PointerWithOverloadedGet();\n\n  bb = std::unique_ptr<int>().get() == NULL;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: redundant get() call\n  // CHECK-MESSAGES: bb = std::unique_ptr<int>().get() == NULL;\n  // CHECK-FIXES: bb = std::unique_ptr<int>() == NULL;\n  bb = ss->get() == NULL;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: redundant get() call\n  // CHECK-MESSAGES: bb = ss->get() == NULL;\n  // CHECK-FIXES: bb = *ss == NULL;\n\n  std::unique_ptr<int> x, y;\n  if (x.get() == nullptr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: redundant get() call\n  // CHECK-MESSAGES: if (x.get() == nullptr);\n  // CHECK-FIXES: if (x == nullptr);\n  if (nullptr == y.get());\n  // CHECK-MESSAGES: :[[@LINE-1]]:18: warning: redundant get() call\n  // CHECK-MESSAGES: if (nullptr == y.get());\n  // CHECK-FIXES: if (nullptr == y);\n  if (x.get() == NULL);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: redundant get() call\n  // CHECK-MESSAGES: if (x.get() == NULL);\n  // CHECK-FIXES: if (x == NULL);\n  if (NULL == x.get());\n  // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: redundant get() call\n  // CHECK-MESSAGES: if (NULL == x.get());\n  // CHECK-FIXES: if (NULL == x);\n}\n\ntemplate <typename T>\nvoid testTemplate() {\n  T().get()->Do();\n}\n\ntemplate <typename T>\nvoid testTemplate2() {\n  std::unique_ptr<T> up;\n  up.get()->Do();\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: redundant get() call\n  // CHECK-FIXES: up->Do();\n}\n\nvoid instantiate() {\n  testTemplate<BarPtr>();\n  testTemplate<std::unique_ptr<Bar>>();\n  testTemplate<Fail2>();\n\n  testTemplate2<Bar>();\n}\n\nstruct S {\n\n  void foo() {\n    m_up.get()->Do();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: redundant get() call\n    // CHECK-FIXES: m_up->Do();\n    m_bp.get()->Do();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: redundant get() call\n    // CHECK-FIXES: m_bp->Do();\n  }\n\n  std::unique_ptr<Bar> m_up;\n  BarPtr m_bp;\n};\n\n#define MACRO(p) p.get()\n\nvoid Negative() {\n  struct NegPtr {\n    int* get();\n    int* operator->() {\n      return &*this->get();\n    }\n    int& operator*() {\n      return *get();\n    }\n  };\n\n  long l = *PointerWithOverloadedGet().get<long>();\n\n  std::unique_ptr<Bar>* u;\n  u->get()->Do();\n\n  Fail1().get()->Do();\n  Fail2().get()->Do();\n  const Bar& b = *Fail1().get();\n  (*Fail2().get()).Do();\n\n  int_ptr ip;\n  bool bb = ip.get() == nullptr;\n  bb = !ip.get();\n  bb = ip.get() ? true : false;\n  std::unique_ptr<int> x;\n  if (MACRO(x) == nullptr)\n    ;\n}\n\nvoid test_redundant_get() {\n  std::vector<std::shared_ptr<int>> v;\n  auto f = [](int) {};\n  for (auto i = v.begin(); i != v.end(); ++i) {\n    f(*i->get());\n    // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: redundant get() call\n    // CHECK-FIXES: f(**i);\n  }\n}\n\nstruct Inner {\n  int a;\n  int *getValue()  { return &a; }\n};\n\nstruct Example {\n  Inner inner;\n  Inner* get() { return &inner; }\n  int *getValue()  { return inner.getValue(); }\n};\n\nvoid test_redundant_get_with_member() {\n  std::vector<std::shared_ptr<Example>> v;\n  auto f = [](int) {};\n  for (auto i = v.begin(); i != v.end(); ++i) {\n    f(*(*i).get()->get()->getValue());\n    // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: redundant get() call\n    // CHECK-FIXES: f(**i->get()->getValue());\n }\n}\n\nvoid test_smart_ptr_to_array() {\n  std::unique_ptr<int[]> i;\n  // The array specialization does not have operator*(), so make sure\n  // we do not incorrectly suggest sizeof(*i) here.\n  // FIXME: alternatively, we could suggest sizeof(i[0])\n  auto sz = sizeof(*i.get());\n\n  std::shared_ptr<Inner[]> s;\n  // The array specialization does not have operator->() either\n  s.get()->getValue();\n\n  bool b1 = !s.get();\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: redundant get() call\n  // CHECK-FIXES: bool b1 = !s;\n\n  if (s.get()) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: redundant get() call\n  // CHECK-FIXES: if (s) {}\n\n  int x = s.get() ? 1 : 2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: redundant get() call\n  // CHECK-FIXES: int x = s ? 1 : 2;\n\n  bool b2 = s.get() == nullptr;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: redundant get() call\n  // CHECK-FIXES: bool b2 = s == nullptr;\n}"
    }
  ]
}