{
  "name": "FunctionCognitiveComplexity",
  "language": "cpp",
  "description": ".. title:: clang-tidy - readability-function-cognitive-complexity",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 557,
  "branches": 123,
  "apis": 179,
  "test": [
    {
      "description": null,
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n// RUN: %check_clang_tidy %s readability-function-cognitive-complexity %t -- -config='{CheckOptions: {readability-function-cognitive-complexity.Threshold: 0}}' -- -std=c++11 -fblocks -fexceptions -w\n\n// any function should be checked.\n\nextern int ext_func(int x = 0);\n\nint some_func(int x = 0);\n\nstatic int some_other_func(int x = 0) {}\n\ntemplate<typename T> void some_templ_func(T x = 0) {}\n\nclass SomeClass {\npublic:\n  int *begin(int x = 0);\n  int *end(int x = 0);\n  static int func(int x = 0);\n  template<typename T> void some_templ_func(T x = 0) {}\n  SomeClass() = default;\n  SomeClass(SomeClass&) = delete;\n};\n\n// nothing ever decreases cognitive complexity, so we can check all the things\n// in one go. none of the following should increase cognitive complexity:\nvoid unittest_false() {\n  {};\n  ext_func();\n  some_func();\n  some_other_func();\n  some_templ_func<int>();\n  some_templ_func<bool>();\n  SomeClass::func();\n  SomeClass C;\n  C.some_templ_func<int>();\n  C.some_templ_func<bool>();\n  C.func();\n  C.end();\n  int i = some_func();\n  i = i;\n  i++;\n  --i;\n  i < 0;\n  int j = 0 ?: 1;\n  auto k = new int;\n  delete k;\n  throw i;\n  {\n    throw i;\n  }\nend:\n  return;\n}\n\n#if 1\n#define CC100\n#else\n// this macro has cognitive complexity of 100.\n// it is needed to be able to compare the testcases with the\n// reference Sonar implementation. please place it right after the first\n// CHECK-NOTES in each function\n#define CC100 if(1){if(1){if(1){if(1){if(1){if(1){if(1){if(1){if(1){if(1){if(1){if(1){if(1){}}}}}if(1){}}}}}}}}}\n#endif\n\n//----------------------------------------------------------------------------//\n//------------------------------ B1. Increments ------------------------------//\n//----------------------------------------------------------------------------//\n// Check that every thing listed in B1 of the specification does indeed       //\n// recieve the base increment, and that not-body does not increase nesting    //\n//----------------------------------------------------------------------------//\n\n// break does not increase cognitive complexity.\n// only  break LABEL  does, but it is unavailable in C or C++\n\n// continue does not increase cognitive complexity.\n// only  continue LABEL  does, but it is unavailable in C or C++\n\nvoid unittest_b1_00() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_00' has cognitive complexity of 33 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if (1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:9: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n\n    if (1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:11: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    } else if (1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:12: note: +1, nesting level increased to 2{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:18: note: +3, including nesting penalty of 2, nesting level increased to 3{{$}}\n    } else {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, nesting level increased to 2{{$}}\n    }\n  } else if (1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:10: note: +1, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:16: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n\n    if (1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:11: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    } else if (1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:12: note: +1, nesting level increased to 2{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:18: note: +3, including nesting penalty of 2, nesting level increased to 3{{$}}\n    } else {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, nesting level increased to 2{{$}}\n    }\n  } else {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +1, nesting level increased to 1{{$}}\n\n    if (1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:11: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    } else if (1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:12: note: +1, nesting level increased to 2{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:18: note: +3, including nesting penalty of 2, nesting level increased to 3{{$}}\n    } else {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\nvoid unittest_b1_01() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_01' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  int i = (1 ? 1 : 0) ? 1 : 0;\n// CHECK-NOTES: :[[@LINE-1]]:23: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:14: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n}\n\nvoid unittest_b1_02(int x) {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_02' has cognitive complexity of 9 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  switch (1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:13: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n  case -1:\n    return;\n  case 1 ? 1 : 0:\n// CHECK-NOTES: :[[@LINE-1]]:10: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    return;\n  case (1 ? 2 : 0) ... (1 ? 3 : 0):\n// CHECK-NOTES: :[[@LINE-1]]:11: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:27: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    return;\n  default:\n    break;\n  }\n}\n\nvoid unittest_b1_03(int x) {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_03' has cognitive complexity of 7 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  for (x = 1 ? 1 : 0; x < (1 ? 1 : 0); x += 1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:14: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:30: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n// CHECK-NOTES: :[[@LINE-4]]:47: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    break;\n    continue;\n  }\n}\n\nvoid unittest_b1_04() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_04' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  SomeClass C;\n  for (int i : (1 ? C : C)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:19: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    break;\n    continue;\n  }\n}\n\nvoid unittest_b1_05() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_05' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  while (1 ? 1 : 0) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:12: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    break;\n    continue;\n  }\n}\n\nvoid unittest_b1_06() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_06' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  do {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    break;\n    continue;\n  } while (1 ? 1 : 0);\n// CHECK-NOTES: :[[@LINE-1]]:14: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n}\n\nvoid unittest_b1_07() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_07' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  try {\n  } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n  }\n}\n\nvoid unittest_b1_08_00() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_08_00' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  goto end;\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1{{$}}\nend:\n  return;\n}\n\nvoid unittest_b1_08_01() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_08_01' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  void *ptr = &&end;\n  goto *ptr;\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1{{$}}\nend:\n  return;\n}\n\nvoid unittest_b1_09_00() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_09_00' has cognitive complexity of 34 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if(1 && 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n  }\n  if(1 && 1 && 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:13: note: +1{{$}}\n  }\n  if((1 && 1) && 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:15: note: +1{{$}}\n  }\n  if(1 && (1 && 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n  }\n\n  if(1 && 1 || 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:13: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:8: note: +1{{$}}\n  }\n  if((1 && 1) || 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:15: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:9: note: +1{{$}}\n  }\n  if(1 && (1 || 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:14: note: +1{{$}}\n  }\n\n  if(1 || 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n  }\n  if(1 || 1 || 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:13: note: +1{{$}}\n  }\n  if((1 || 1) || 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:15: note: +1{{$}}\n  }\n  if(1 || (1 || 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n  }\n\n  if(1 || 1 && 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:13: note: +1{{$}}\n  }\n  if((1 || 1) && 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:15: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:9: note: +1{{$}}\n  }\n  if(1 || (1 && 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:14: note: +1{{$}}\n  }\n}\n\nvoid unittest_b1_09_01() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_09_01' has cognitive complexity of 40 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if(1 && some_func(1 && 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:23: note: +1{{$}}\n  }\n  if(1 && some_func(1 || 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:23: note: +1{{$}}\n  }\n  if(1 || some_func(1 || 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:23: note: +1{{$}}\n  }\n  if(1 || some_func(1 && 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:23: note: +1{{$}}\n  }\n\n  if(1 && some_func(1 && 1) && 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:29: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:23: note: +1{{$}}\n  }\n  if(1 && some_func(1 || 1) && 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:29: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:23: note: +1{{$}}\n  }\n  if(1 || some_func(1 || 1) && 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:29: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-4]]:23: note: +1{{$}}\n  }\n  if(1 || some_func(1 && 1) && 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:29: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-4]]:23: note: +1{{$}}\n  }\n\n  if(1 && some_func(1 && 1) || 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:29: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-4]]:23: note: +1{{$}}\n  }\n  if(1 && some_func(1 || 1) || 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:29: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-4]]:23: note: +1{{$}}\n  }\n  if(1 || some_func(1 || 1) || 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:29: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:23: note: +1{{$}}\n  }\n  if(1 || some_func(1 && 1) || 1) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:29: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:23: note: +1{{$}}\n  }\n}\n\nvoid unittest_b1_09_02() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b1_09_02' has cognitive complexity of 12 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if(1 && SomeClass::func(1 && 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:29: note: +1{{$}}\n  }\n  if(1 && SomeClass::func(1 || 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:29: note: +1{{$}}\n  }\n  if(1 || SomeClass::func(1 || 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:29: note: +1{{$}}\n  }\n  if(1 || SomeClass::func(1 && 1)) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:8: note: +1{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:29: note: +1{{$}}\n  }\n}\n\n// FIXME: each method in a recursion cycle\n\n//----------------------------------------------------------------------------//\n//---------------------------- B2. Nesting lebel -----------------------------//\n//----------------------------------------------------------------------------//\n// Check that every thing listed in B2 of the specification does indeed       //\n// increase the nesting level                                                 //\n//----------------------------------------------------------------------------//\n\nvoid unittest_b2_00() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_00' has cognitive complexity of 9 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    if(true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  } else if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:10: note: +1, nesting level increased to 1{{$}}\n    if(true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  } else {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +1, nesting level increased to 1{{$}}\n    if(true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\nvoid unittest_b2_01() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_01' has cognitive complexity of 5 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  int i = 1 ? (1 ? 1 : 0) : (1 ? 1 : 0);\n// CHECK-NOTES: :[[@LINE-1]]:13: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n// CHECK-NOTES: :[[@LINE-2]]:18: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n// CHECK-NOTES: :[[@LINE-3]]:32: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n}\n\nvoid unittest_b2_02(int x) {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_02' has cognitive complexity of 5 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  switch (x) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n  case -1:\n    if(true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n    return;\n  default:\n    if(true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n    return;\n  }\n}\n\nvoid unittest_b2_03() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_03' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  for (;;) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    if(true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\nvoid unittest_b2_04() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_04' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  SomeClass C;\n  for (int i : C) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    if(true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\nvoid unittest_b2_05() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_05' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  while (true) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    if(true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\nvoid unittest_b2_06() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_06' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  do {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    if(true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  } while (true);\n}\n\nvoid unittest_b2_07() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_07' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  try {\n  } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    if(true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\nvoid unittest_b2_08_00() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_08_00' has cognitive complexity of 10 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  class X {\n    X() {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: nesting level increased to 1{{$}}\n      CC100;\n\n      if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n      }\n    }\n\n    X &operator=(const X &other) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: nesting level increased to 1{{$}}\n      CC100;\n\n      if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n      }\n    }\n\n    ~X() {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: nesting level increased to 1{{$}}\n      CC100;\n\n      if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n      }\n    }\n\n    void Y() {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: nesting level increased to 1{{$}}\n      CC100;\n\n      if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n      }\n    }\n\n    static void Z() {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: nesting level increased to 1{{$}}\n      CC100;\n\n      if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n      }\n    }\n\n// CHECK-NOTES: :[[@LINE-45]]:5: warning: function 'X' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-42]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n\n// CHECK-NOTES: :[[@LINE-39]]:8: warning: function 'operator=' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-36]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n\n// CHECK-NOTES: :[[@LINE-33]]:5: warning: function '~X' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-30]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n\n// CHECK-NOTES: :[[@LINE-27]]:10: warning: function 'Y' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-24]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n\n// CHECK-NOTES: :[[@LINE-21]]:17: warning: function 'Z' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-18]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n  };\n}\n\nvoid unittest_b2_08_01() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_08_01' has cognitive complexity of 10 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  struct X {\n    X() {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: nesting level increased to 1{{$}}\n      CC100;\n\n      if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n      }\n    }\n\n    X &operator=(const X &other) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: nesting level increased to 1{{$}}\n      CC100;\n\n      if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n      }\n    }\n\n    ~X() {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: nesting level increased to 1{{$}}\n      CC100;\n\n      if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n      }\n    }\n\n    void Y() {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: nesting level increased to 1{{$}}\n      CC100;\n\n      if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n      }\n    }\n\n    static void Z() {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: nesting level increased to 1{{$}}\n      CC100;\n\n      if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n      }\n    }\n\n// CHECK-NOTES: :[[@LINE-45]]:5: warning: function 'X' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-42]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n\n// CHECK-NOTES: :[[@LINE-39]]:8: warning: function 'operator=' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-36]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n\n// CHECK-NOTES: :[[@LINE-33]]:5: warning: function '~X' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-30]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n\n// CHECK-NOTES: :[[@LINE-27]]:10: warning: function 'Y' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-24]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n\n// CHECK-NOTES: :[[@LINE-21]]:17: warning: function 'Z' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-18]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n  };\n}\n\nvoid unittest_b2_08_02() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_08_02' has cognitive complexity of 2 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  auto fun = []() {\n// CHECK-NOTES: :[[@LINE-1]]:14: note: nesting level increased to 1{{$}}\n    if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  };\n// CHECK-NOTES: :[[@LINE-6]]:14: warning: lambda has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-5]]:5: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n}\n\nvoid unittest_b2_09() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_09' has cognitive complexity of 2 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  ({\n// CHECK-NOTES: :[[@LINE-1]]:3: note: nesting level increased to 1{{$}}\n    if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  });\n}\n\nvoid unittest_b2_10() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b2_10' has cognitive complexity of 2 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  void (^foo)(void) = ^(void) {\n// CHECK-NOTES: :[[@LINE-1]]:23: note: nesting level increased to 1{{$}}\n    if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  };\n}\n\n//----------------------------------------------------------------------------//\n//-------------------------- B3. Nesting increments --------------------------//\n//----------------------------------------------------------------------------//\n// Check that every thing listed in B3 of the specification does indeed       //\n// recieve the penalty of the current nesting level                           //\n//----------------------------------------------------------------------------//\n\nvoid unittest_b3_00() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b3_00' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\nvoid unittest_b3_01() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b3_01' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    int i = 1 ? 1 : 0;\n// CHECK-NOTES: :[[@LINE-1]]:15: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n  }\n}\n\nvoid unittest_b3_02(int x) {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b3_02' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    switch (x) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    case -1:\n      return;\n    default:\n      return;\n    }\n  }\n}\n\nvoid unittest_b3_03() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b3_03' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    for (;;) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\nvoid unittest_b3_04() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b3_04' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    SomeClass C;\n    for (int i : C) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\nvoid unittest_b3_05() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b3_05' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    while (true) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\nvoid unittest_b3_06() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b3_06' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    do {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    } while (true);\n  }\n}\n\nvoid unittest_b3_07() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'unittest_b3_07' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  if (true) {\n// CHECK-NOTES: :[[@LINE-1]]:3: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +2, including nesting penalty of 1, nesting level increased to 2{{$}}\n    }\n  }\n}\n\n//----------------------------------------------------------------------------//\n// Check that functions are being checked                                     //\n//----------------------------------------------------------------------------//\n\nclass CheckClass {\n  CheckClass(int x) {\n// CHECK-NOTES: :[[@LINE-1]]:3: warning: function 'CheckClass' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  void PrivateMemberFunction() {\n// CHECK-NOTES: :[[@LINE-1]]:8: warning: function 'PrivateMemberFunction' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  void PrivateConstMemberFunction() const {\n// CHECK-NOTES: :[[@LINE-1]]:8: warning: function 'PrivateConstMemberFunction' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  static void PrivateStaticMemberFunction() {\n// CHECK-NOTES: :[[@LINE-1]]:15: warning: function 'PrivateStaticMemberFunction' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\npublic:\n  CheckClass() {\n// CHECK-NOTES: :[[@LINE-1]]:3: warning: function 'CheckClass' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  operator bool() const {\n// CHECK-NOTES: :[[@LINE-1]]:3: warning: function 'operator bool' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  ~CheckClass() {\n// CHECK-NOTES: :[[@LINE-1]]:3: warning: function '~CheckClass' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  void PublicMemberFunction() {\n// CHECK-NOTES: :[[@LINE-1]]:8: warning: function 'PublicMemberFunction' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  void PublicConstMemberFunction() const {\n// CHECK-NOTES: :[[@LINE-1]]:8: warning: function 'PublicConstMemberFunction' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  static void PublicStaticMemberFunction() {\n// CHECK-NOTES: :[[@LINE-1]]:15: warning: function 'PublicStaticMemberFunction' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  void PublicFunctionDefinition();\n\nprotected:\n  CheckClass(bool b) {\n// CHECK-NOTES: :[[@LINE-1]]:3: warning: function 'CheckClass' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  void ProtectedMemberFunction() {\n// CHECK-NOTES: :[[@LINE-1]]:8: warning: function 'ProtectedMemberFunction' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  void ProtectedConstMemberFunction() const {\n// CHECK-NOTES: :[[@LINE-1]]:8: warning: function 'ProtectedConstMemberFunction' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n\n  static void ProtectedStaticMemberFunction() {\n// CHECK-NOTES: :[[@LINE-1]]:15: warning: function 'ProtectedStaticMemberFunction' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n    CC100;\n\n    try {\n    } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:7: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n    }\n  }\n};\n\nvoid CheckClass::PublicFunctionDefinition() {\n// CHECK-NOTES: :[[@LINE-1]]:18: warning: function 'PublicFunctionDefinition' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  try {\n  } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n  }\n}\n\n#define uglyfunctionmacro(name)                                                \\\n  void name() {                                                                \\\n    CC100;                                                                     \\\n                                                                               \\\n    if (true) {                                                                \\\n      try {                                                                    \\\n      } catch (...) {                                                          \\\n      }                                                                        \\\n    }                                                                          \\\n  }\n\nuglyfunctionmacro(MacroFunction)\n// CHECK-NOTES: :[[@LINE-1]]:19: warning: function 'MacroFunction' has cognitive complexity of 3 (threshold 0) [readability-function-cognitive-complexity]\n// CHECK-NOTES: :[[@LINE-2]]:1: note: +1, including nesting penalty of 0, nesting level increased to 1\n// CHECK-NOTES: :[[@LINE-10]]:5: note: expanded from macro 'uglyfunctionmacro'\n// CHECK-NOTES: :[[@LINE-4]]:1: note: +2, including nesting penalty of 1, nesting level increased to 2\n// CHECK-NOTES: :[[@LINE-10]]:9: note: expanded from macro 'uglyfunctionmacro'\n\ntemplate<typename T>\nvoid templatedFunction() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'templatedFunction' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  try {\n  } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n  }\n}\n\ntemplate<>\nvoid templatedFunction<bool>() {\n// CHECK-NOTES: :[[@LINE-1]]:6: warning: function 'templatedFunction<bool>' has cognitive complexity of 1 (threshold 0) [readability-function-cognitive-complexity]\n  CC100;\n\n  try {\n  } catch (...) {\n// CHECK-NOTES: :[[@LINE-1]]:5: note: +1, including nesting penalty of 0, nesting level increased to 1{{$}}\n  }\n}\n\ntemplate void templatedFunction<int>();\n\nvoid functionThatCallsTemplatedFunctions() {\n  templatedFunction<int>();\n\n  templatedFunction<bool>();\n\n  templatedFunction<char>();\n\n  templatedFunction<void*>();\n}\n\nstatic void pr47779_dont_crash_on_weak() __attribute__((__weakref__(\"__pr47779_dont_crash_on_weak\")));"
    }
  ]
}