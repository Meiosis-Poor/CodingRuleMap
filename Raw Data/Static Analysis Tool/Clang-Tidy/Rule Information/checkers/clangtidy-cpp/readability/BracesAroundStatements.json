{
  "name": "BracesAroundStatements",
  "language": "cpp",
  "description": ".. title:: clang-tidy - readability-braces-around-statements",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 171,
  "branches": 45,
  "apis": 116,
  "test": [
    {
      "description": null,
      "expected-problems": 59,
      "expected-linenumbers": [
        14,
        20,
        27,
        35,
        41,
        46,
        56,
        60,
        63,
        75,
        85,
        93,
        99,
        108,
        115,
        123,
        130,
        140,
        149,
        150,
        162,
        174,
        179,
        180,
        181,
        182,
        183,
        193,
        200,
        207,
        216,
        222,
        233,
        234,
        245,
        246,
        257,
        258,
        274,
        275,
        301,
        302,
        325,
        332,
        340,
        351,
        365,
        373,
        388,
        398,
        411,
        424,
        425,
        426,
        439,
        440,
        451,
        452,
        470
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s readability-braces-around-statements %t\n\nvoid do_something(const char *) {}\n\nbool cond(const char *) {\n  return false;\n}\n\n#define EMPTY_MACRO\n#define EMPTY_MACRO_FUN()\n\nvoid test() {\n  if (cond(\"if0\") /*comment*/) do_something(\"same-line\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:31: warning: statement should be inside braces\n  // CHECK-FIXES:   if (cond(\"if0\") /*comment*/) { do_something(\"same-line\");\n  // CHECK-FIXES: }\n\n  if (cond(\"if0.1\"))\n    do_something(\"single-line\");\n  // CHECK-MESSAGES: :[[@LINE-2]]:21: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"if0.1\")) {\n  // CHECK-FIXES: }\n\n  if (cond(\"if1\") /*comment*/)\n    // some comment\n    do_something(\"if1\");\n  // CHECK-MESSAGES: :[[@LINE-3]]:31: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"if1\") /*comment*/) {\n  // CHECK-FIXES: }\n  if (cond(\"if2\")) {\n    do_something(\"if2\");\n  }\n  if (cond(\"if3\"))\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:19: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"if3\")) {\n  // CHECK-FIXES: }\n\n  if (cond(\"if-else1\"))\n    do_something(\"if-else1\");\n  // CHECK-MESSAGES: :[[@LINE-2]]:24: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"if-else1\")) {\n  // CHECK-FIXES: } else {\n  else\n    do_something(\"if-else1 else\");\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: statement should be inside braces\n  // CHECK-FIXES: }\n  if (cond(\"if-else2\")) {\n    do_something(\"if-else2\");\n  } else {\n    do_something(\"if-else2 else\");\n  }\n\n  if (cond(\"if-else if-else1\"))\n    do_something(\"if\");\n  // CHECK-MESSAGES: :[[@LINE-2]]:32: warning: statement should be inside braces\n  // CHECK-FIXES: } else if (cond(\"else if1\")) {\n  else if (cond(\"else if1\"))\n    do_something(\"else if\");\n  // CHECK-MESSAGES: :[[@LINE-2]]:29: warning: statement should be inside braces\n  else\n    do_something(\"else\");\n  // CHECK-MESSAGES: :[[@LINE-2]]:7: warning: statement should be inside braces\n  // CHECK-FIXES: }\n  if (cond(\"if-else if-else2\")) {\n    do_something(\"if\");\n  } else if (cond(\"else if2\")) {\n    do_something(\"else if\");\n  } else {\n    do_something(\"else\");\n  }\n\n  for (;;)\n    do_something(\"for\");\n  // CHECK-MESSAGES: :[[@LINE-2]]:11: warning: statement should be inside braces\n  // CHECK-FIXES: for (;;) {\n  // CHECK-FIXES-NEXT: do_something(\"for\");\n  // CHECK-FIXES-NEXT: }\n\n  for (;;) {\n    do_something(\"for-ok\");\n  }\n  for (;;)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:11: warning: statement should be inside braces\n  // CHECK-FIXES: for (;;) {\n  // CHECK-FIXES-NEXT: ;\n  // CHECK-FIXES-NEXT: }\n\n  int arr[4] = {1, 2, 3, 4};\n  for (int a : arr)\n    do_something(\"for-range\");\n  // CHECK-MESSAGES: :[[@LINE-2]]:20: warning: statement should be inside braces\n  // CHECK-FIXES: for (int a : arr) {\n  // CHECK-FIXES-NEXT: do_something(\"for-range\");\n  // CHECK-FIXES-NEXT: }\n  for (int &assign : arr)\n    assign = 7;\n  // CHECK-MESSAGES: :[[@LINE-2]]:26: warning: statement should be inside braces\n  // CHECK-FIXES: for (int &assign : arr) {\n  // CHECK-FIXES-NEXT: assign = 7;\n  // CHECK-FIXES-NEXT: }\n  for (int ok : arr) {\n    do_something(\"for-range\");\n  }\n  for (int NullStmt : arr)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:27: warning: statement should be inside braces\n  // CHECK-FIXES: for (int NullStmt : arr) {\n  // CHECK-FIXES-NEXT: ;\n  // CHECK-FIXES-NEXT: }\n\n  while (cond(\"while1\"))\n    do_something(\"while\");\n  // CHECK-MESSAGES: :[[@LINE-2]]:25: warning: statement should be inside braces\n  // CHECK-FIXES: while (cond(\"while1\")) {\n  // CHECK-FIXES: }\n  while (cond(\"while2\")) {\n    do_something(\"while\");\n  }\n  while (false)\n    ;\n  // CHECK-MESSAGES: :[[@LINE-2]]:16: warning: statement should be inside braces\n  // CHECK-FIXES: while (false) {\n  // CHECK-FIXES: }\n\n  do\n    do_something(\"do1\");\n  while (cond(\"do1\"));\n  // CHECK-MESSAGES: :[[@LINE-3]]:5: warning: statement should be inside braces\n  // CHECK-FIXES: do {\n  // CHECK-FIXES: } while (cond(\"do1\"));\n  do {\n    do_something(\"do2\");\n  } while (cond(\"do2\"));\n\n  do\n    ;\n  while (false);\n  // CHECK-MESSAGES: :[[@LINE-3]]:5: warning: statement should be inside braces\n  // CHECK-FIXES: do {\n  // CHECK-FIXES: } while (false);\n\n  if (cond(\"ifif1\"))\n    // comment\n    if (cond(\"ifif2\"))\n      // comment\n      /*comment*/ ; // comment\n  // CHECK-MESSAGES: :[[@LINE-5]]:21: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-4]]:23: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"ifif1\")) {\n  // CHECK-FIXES: if (cond(\"ifif2\")) {\n  // CHECK-FIXES: }\n  // CHECK-FIXES-NEXT: }\n\n  if (cond(\"ifif3\"))\n    // comment1\n    if (cond(\"ifif4\")) {\n      // comment2\n      /*comment3*/; // comment4\n    }\n  // CHECK-MESSAGES: :[[@LINE-6]]:21: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"ifif3\")) {\n  // CHECK-FIXES-NEXT: // comment1\n  // CHECK-FIXES-NEXT: if (cond(\"ifif4\")) {\n  // CHECK-FIXES-NEXT: // comment2\n  // CHECK-FIXES-NEXT: /*comment3*/; // comment4\n  // CHECK-FIXES-NEXT: }\n  // CHECK-FIXES-NEXT: }\n\n  if (cond(\"ifif5\"))\n    ; /* multi-line\n        comment */\n  // CHECK-MESSAGES: :[[@LINE-3]]:21: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"ifif5\")) {\n  // CHECK-FIXES: }/* multi-line\n\n  if (1) while (2) if (3) for (;;) do ; while(false) /**/;/**/\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-2]]:19: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-3]]:26: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-4]]:35: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-5]]:38: warning: statement should be inside braces\n  // CHECK-FIXES: if (1) { while (2) { if (3) { for (;;) { do { ; } while(false) /**/;/**/\n  // CHECK-FIXES-NEXT: }\n  // CHECK-FIXES-NEXT: }\n  // CHECK-FIXES-NEXT: }\n  // CHECK-FIXES-NEXT: }\n\n  int S;\n  if (cond(\"assign with brackets\"))\n    S = {5};\n  // CHECK-MESSAGES: :[[@LINE-2]]:36: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"assign with brackets\")) {\n  // CHECK-FIXES-NEXT: S = {5};\n  // CHECK-FIXES-NEXT: }\n\n  if (cond(\"assign with brackets 2\"))\n    S = {  5  } /* comment1 */ ; /* comment2 */\n  // CHECK-MESSAGES: :[[@LINE-2]]:38: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"assign with brackets 2\")) {\n  // CHECK-FIXES-NEXT: S = {  5  } /* comment1 */ ; /* comment2 */\n  // CHECK-FIXES-NEXT: }\n\n  if (cond(\"return\"))\n    return;\n  // CHECK-MESSAGES: :[[@LINE-2]]:22: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"return\")) {\n  // CHECK-FIXES-NEXT: return;\n  // CHECK-FIXES-NEXT: }\n\n  while (cond(\"break and continue\")) {\n    // CHECK-FIXES: while (cond(\"break and continue\")) {\n    if (true)\n      break;\n    // CHECK-MESSAGES: :[[@LINE-2]]:14: warning: statement should be inside braces\n    // CHECK-FIXES: {{^}}    if (true) {{{$}}\n    // CHECK-FIXES-NEXT: {{^}}      break;{{$}}\n    // CHECK-FIXES-NEXT: {{^ *}}}{{$}}\n    if (false)\n      continue;\n    // CHECK-MESSAGES: :[[@LINE-2]]:15: warning: statement should be inside braces\n    // CHECK-FIXES: {{^}}    if (false) {{{$}}\n    // CHECK-FIXES-NEXT: {{^}}      continue;{{$}}\n    // CHECK-FIXES-NEXT: {{^ *}}}{{$}}\n  } //end\n  // CHECK-FIXES: } //end\n\n  if (cond(\"decl 1\"))\n    int s;\n  else\n    int t;\n  // CHECK-MESSAGES: :[[@LINE-4]]:22: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-3]]:7: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"decl 1\")) {\n  // CHECK-FIXES-NEXT: int s;\n  // CHECK-FIXES-NEXT: } else {\n  // CHECK-FIXES-NEXT: int t;\n  // CHECK-FIXES-NEXT: }\n\n  if (cond(\"decl 2\"))\n    int s = (5);\n  else\n    int t = (5);\n  // CHECK-MESSAGES: :[[@LINE-4]]:22: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-3]]:7: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"decl 2\")) {\n  // CHECK-FIXES-NEXT: int s = (5);\n  // CHECK-FIXES-NEXT: } else {\n  // CHECK-FIXES-NEXT: int t = (5);\n  // CHECK-FIXES-NEXT: }\n\n  if (cond(\"decl 3\"))\n    int s = {6};\n  else\n    int t = {6};\n  // CHECK-MESSAGES: :[[@LINE-4]]:22: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-3]]:7: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"decl 3\")) {\n  // CHECK-FIXES-NEXT: int s = {6};\n  // CHECK-FIXES-NEXT: } else {\n  // CHECK-FIXES-NEXT: int t = {6};\n  // CHECK-FIXES-NEXT: }\n}\n\nvoid test_whitespace() {\n  while(cond(\"preserve empty lines\"))\n    if(cond(\"using continue within if\"))\n      continue;\n\n\n  test();\n\n  // CHECK-MESSAGES: :[[@LINE-7]]:{{[0-9]+}}: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-7]]:{{[0-9]+}}: warning: statement should be inside braces\n  // CHECK-FIXES: {{^}}  while(cond(\"preserve empty lines\")) {{{$}}\n  // CHECK-FIXES-NEXT: {{^}}    if(cond(\"using continue within if\")) {{{$}}\n  // CHECK-FIXES-NEXT: {{^      continue;$}}\n  // The closing brace is added at beginning of line, clang-format can be\n  // applied afterwards.\n  // CHECK-FIXES-NEXT: {{^}$}}\n  // CHECK-FIXES-NEXT: {{^}$}}\n  // Following whitespace is assumed to not to belong to the else branch.\n  // However the check is not possible with CHECK-FIXES-NEXT.\n  // CHECK-FIXES: {{^}}  test();{{$}}\n\n  if (cond(\"preserve empty lines\"))\n \n  \n    int s;\n   \n    \n  else\n \n  \n    int t;\n   \n    \n  test();\n\n  // CHECK-MESSAGES: :[[@LINE-14]]:{{[0-9]+}}: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-9]]:{{[0-9]+}}: warning: statement should be inside braces\n  // CHECK-FIXES: {{^}}  if (cond(\"preserve empty lines\")) {{{$}}\n  // CHECK-FIXES-NEXT: {{^ $}}\n  // CHECK-FIXES-NEXT: {{^  $}}\n  // CHECK-FIXES-NEXT: {{^    int s;$}}\n  // CHECK-FIXES-NEXT: {{^   $}}\n  // CHECK-FIXES-NEXT: {{^    $}}\n  // CHECK-FIXES-NEXT: {{^  } else {$}}\n  // CHECK-FIXES-NEXT: {{^ $}}\n  // CHECK-FIXES-NEXT: {{^  $}}\n  // CHECK-FIXES-NEXT: {{^    int t;$}}\n  // The closing brace is added at beginning of line, clang-format can be\n  // applied afterwards.\n  // CHECK-FIXES-NEXT: {{^}$}}\n  // Following whitespace is assumed to not to belong to the else branch.\n  // CHECK-FIXES-NEXT: {{^   $}}\n  // CHECK-FIXES-NEXT: {{^    $}}\n  // CHECK-FIXES-NEXT: {{^}}  test();{{$}}\n}\n\nint test_return_int() {\n  if (cond(\"return5\"))\n    return 5;\n  // CHECK-MESSAGES: :[[@LINE-2]]:23: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"return5\")) {\n  // CHECK-FIXES-NEXT: return 5;\n  // CHECK-FIXES-NEXT: }\n\n  if (cond(\"return{6}\"))\n    return {6};\n  // CHECK-MESSAGES: :[[@LINE-2]]:25: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"return{6}\")) {\n  // CHECK-FIXES-NEXT: return {6};\n  // CHECK-FIXES-NEXT: }\n\n  // From https://bugs.llvm.org/show_bug.cgi?id=25970\n  if (cond(\"25970\")) return {25970};\n  return {!25970};\n  // CHECK-MESSAGES: :[[@LINE-2]]:21: warning: statement should be inside braces\n  // CHECK-FIXES: if (cond(\"25970\")) { return {25970};\n  // CHECK-FIXES-NEXT: }\n  // CHECK-FIXES-NEXT: return {!25970};\n}\n\nvoid f(const char *p) {\n  if (!p)\n    f(\"\\\n\");\n} // end of f\n// CHECK-MESSAGES: :[[@LINE-4]]:10: warning: statement should be inside braces\n// CHECK-FIXES:      {{^}}  if (!p) {{{$}}\n// CHECK-FIXES-NEXT: {{^}}    f(\"\\{{$}}\n// CHECK-FIXES-NEXT: {{^}}\");{{$}}\n// CHECK-FIXES-NEXT: {{^}}}{{$}}\n// CHECK-FIXES-NEXT: {{^}}} // end of f{{$}}\n\n#define M(x) x\n\nint test_macros(bool b) {\n  if (b) {\n    return 1;\n  } else\n    M(return 2);\n  // CHECK-MESSAGES: :[[@LINE-2]]:9: warning: statement should be inside braces\n  // CHECK-FIXES: } else {\n  // CHECK-FIXES-NEXT:   M(return 2);\n  // CHECK-FIXES-NEXT: }\n  M(\n    for (;;)\n      ;\n  );\n  // CHECK-MESSAGES: :[[@LINE-3]]:13: warning: statement should be inside braces\n  // CHECK-FIXES: {{^}}    for (;;) {{{$}}\n  // CHECK-FIXES-NEXT: {{^      ;$}}\n  // CHECK-FIXES-NEXT: {{^}$}}\n\n\n  #define WRAP(X) { X; }\n  // This is to ensure no other CHECK-FIXES matches the macro definition:\n  // CHECK-FIXES: WRAP\n\n  // Use-case: LLVM_DEBUG({ for(...) do_something(); });\n  WRAP({\n    for (;;)\n      do_something(\"for in wrapping macro 1\");\n    });\n  // CHECK-MESSAGES: :[[@LINE-3]]:13: warning: statement should be inside braces\n  // CHECK-FIXES: for (;;) {\n  // CHECK-FIXES-NEXT: do_something(\"for in wrapping macro 1\");\n  // CHECK-FIXES-NEXT: }\n\n  // Use-case: LLVM_DEBUG( for(...) do_something(); );\n  WRAP(\n    for (;;)\n      do_something(\"for in wrapping macro 2\");\n    );\n  // CHECK-MESSAGES: :[[@LINE-3]]:13: warning: statement should be inside braces\n  // CHECK-FIXES: for (;;) {\n  // CHECK-FIXES-NEXT: do_something(\"for in wrapping macro 2\");\n  // CHECK-FIXES-NEXT: }\n\n  // Use-case: LLVM_DEBUG( for(...) do_something() );\n  // This is not supported and this test ensure it's correctly not changed.\n  // We don't want to add the `}` into the Macro and there is no other way\n  // to add it except for introduction of a NullStmt.\n  WRAP(\n    for (;;)\n        do_something(\"for in wrapping macro 3\")\n    );\n  // CHECK-MESSAGES: :[[@LINE-3]]:13: warning: statement should be inside braces\n  // CHECK-FIXES: WRAP(\n  // CHECK-FIXES-NEXT: for (;;)\n  // CHECK-FIXES-NEXT: do_something(\"for in wrapping macro 3\")\n  // CHECK-FIXES-NEXT: );\n\n  // Taken from https://bugs.llvm.org/show_bug.cgi?id=22785\n  int i;\n  #define MACRO_1 i++\n  #define MACRO_2\n  if( i % 3) i--;\n  else if( i % 2) MACRO_1;\n  else MACRO_2;\n  // CHECK-MESSAGES: :[[@LINE-3]]:13: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-3]]:18: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-3]]:7: warning: statement should be inside braces\n  // CHECK-FIXES: if( i % 3) { i--;\n  // CHECK-FIXES-NEXT: } else if( i % 2) { MACRO_1;\n  // CHECK-FIXES-NEXT: } else { MACRO_2;\n  // CHECK-FIXES-NEXT: }\n\n  // Taken from https://bugs.llvm.org/show_bug.cgi?id=22785\n  #define M(x) x\n\n  if (b)\n    return 1;\n  else\n    return 2;\n  // CHECK-MESSAGES: :[[@LINE-4]]:9: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-3]]:7: warning: statement should be inside braces\n  // CHECK-FIXES: if (b) {\n  // CHECK-FIXES-NEXT: return 1;\n  // CHECK-FIXES-NEXT: } else {\n  // CHECK-FIXES-NEXT: return 2;\n  // CHECK-FIXES-NEXT: }\n\n  if (b)\n    return 1;\n  else\n    M(return 2);\n  // CHECK-MESSAGES: :[[@LINE-4]]:9: warning: statement should be inside braces\n  // CHECK-MESSAGES: :[[@LINE-3]]:7: warning: statement should be inside braces\n  // CHECK-FIXES: if (b) {\n  // CHECK-FIXES-NEXT: return 1;\n  // CHECK-FIXES-NEXT: } else {\n  // CHECK-FIXES-NEXT: M(return 2);\n  // CHECK-FIXES-NEXT: }\n\n}\n\ntemplate <bool A>\nauto constexpr_lambda_1 = [] {\n  if constexpr (A) {\n    1;\n  }\n};\n\ntemplate <bool A>\nauto constexpr_lambda_2 = [] {\n  // CHECK-MESSAGES: :[[@LINE+1]]:19: warning: statement should be inside braces\n  if constexpr (A)\n    1;\n  // CHECK-FIXES:if constexpr (A) {\n  // CHECK-FIXES-NEXT:1;\n  // CHECK-FIXES-NEXT:}\n};\n\nvoid test_constexpr() {\n  constexpr_lambda_1<false>();\n  constexpr_lambda_2<false>();\n}"
    }
  ]
}