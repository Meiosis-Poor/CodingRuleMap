{
  "name": "RedundantStringInit",
  "language": "cpp",
  "description": ".. title:: clang-tidy - readability-redundant-string-init",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 163,
  "branches": 14,
  "apis": 130,
  "test": [
    {
      "description": null,
      "expected-problems": 56,
      "expected-linenumbers": [
        39,
        42,
        45,
        48,
        51,
        54,
        66,
        69,
        72,
        75,
        78,
        81,
        93,
        96,
        99,
        102,
        114,
        117,
        120,
        123,
        126,
        129,
        142,
        155,
        159,
        162,
        172,
        175,
        178,
        181,
        184,
        194,
        197,
        205,
        206,
        207,
        213,
        214,
        235,
        238,
        241,
        244,
        261,
        264,
        306,
        316,
        321,
        326,
        331,
        332,
        336,
        340,
        341,
        347,
        348,
        349
      ],
      "code": "\n// RUN: %check_clang_tidy %s readability-redundant-string-init %t \\\n// RUN:   -config=\"{CheckOptions: \\\n// RUN:             {readability-redundant-string-init.StringNames: \\\n// RUN:                '::std::basic_string;::std::basic_string_view;our::TestString'} \\\n// RUN:             }\"\n\nnamespace std {\ntemplate <typename T>\nclass allocator {};\ntemplate <typename T>\nclass char_traits {};\ntemplate <typename C, typename T = std::char_traits<C>, typename A = std::allocator<C>>\nstruct basic_string {\n  basic_string();\n  basic_string(const basic_string&);\n  basic_string(const C *, const A &a = A());\n  ~basic_string();\n};\ntypedef basic_string<char> string;\ntypedef basic_string<wchar_t> wstring;\n\ntemplate <typename C, typename T = std::char_traits<C>, typename A = std::allocator<C>>\nstruct basic_string_view {\n  using size_type = decltype(sizeof(0));\n\n  basic_string_view();\n  basic_string_view(const basic_string_view &);\n  basic_string_view(const C *, size_type);\n  basic_string_view(const C *);\n  template <class It, class End>\n  basic_string_view(It, End);\n};\ntypedef basic_string_view<char> string_view;\ntypedef basic_string_view<wchar_t> wstring_view;\n}\n\nvoid f() {\n  std::string a = \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization [readability-redundant-string-init]\n  // CHECK-FIXES: std::string a;\n  std::string b(\"\");\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES: std::string b;\n  std::string c = R\"()\";\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES: std::string c;\n  std::string d(R\"()\");\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES: std::string d;\n  std::string e{\"\"};\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES: std::string e;\n  std::string f = {\"\"};\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES: std::string f;\n\n  std::string u = \"u\";\n  std::string w(\"w\");\n  std::string x = R\"(x)\";\n  std::string y(R\"(y)\");\n  std::string z;\n}\n\nvoid fview() {\n  std::string_view a = \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: redundant string initialization [readability-redundant-string-init]\n  // CHECK-FIXES: std::string_view a;\n  std::string_view b(\"\");\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: redundant string initialization\n  // CHECK-FIXES: std::string_view b;\n  std::string_view c = R\"()\";\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: redundant string initialization\n  // CHECK-FIXES: std::string_view c;\n  std::string_view d(R\"()\");\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: redundant string initialization\n  // CHECK-FIXES: std::string_view d;\n  std::string_view e{\"\"};\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: redundant string initialization\n  // CHECK-FIXES: std::string_view e;\n  std::string_view f = {\"\"};\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: redundant string initialization\n  // CHECK-FIXES: std::string_view f;\n\n  std::string_view u = \"u\";\n  std::string_view w(\"w\");\n  std::string_view x = R\"(x)\";\n  std::string_view y(R\"(y)\");\n  std::string_view z;\n}\n\nvoid g() {\n  std::wstring a = L\"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: redundant string initialization\n  // CHECK-FIXES: std::wstring a;\n  std::wstring b(L\"\");\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: redundant string initialization\n  // CHECK-FIXES: std::wstring b;\n  std::wstring c = LR\"()\";\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: redundant string initialization\n  // CHECK-FIXES: std::wstring c;\n  std::wstring d(LR\"()\");\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: redundant string initialization\n  // CHECK-FIXES: std::wstring d;\n\n  std::wstring u = L\"u\";\n  std::wstring w(L\"w\");\n  std::wstring x = LR\"(x)\";\n  std::wstring y(LR\"(y)\");\n  std::wstring z;\n}\n\nvoid gview() {\n  std::wstring_view a = L\"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: redundant string initialization [readability-redundant-string-init]\n  // CHECK-FIXES: std::wstring_view a;\n  std::wstring_view b(L\"\");\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: redundant string initialization\n  // CHECK-FIXES: std::wstring_view b;\n  std::wstring_view c = L\"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: redundant string initialization\n  // CHECK-FIXES: std::wstring_view c;\n  std::wstring_view d(L\"\");\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: redundant string initialization\n  // CHECK-FIXES: std::wstring_view d;\n  std::wstring_view e{L\"\"};\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: redundant string initialization\n  // CHECK-FIXES: std::wstring_view e;\n  std::wstring_view f = {L\"\"};\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: redundant string initialization\n  // CHECK-FIXES: std::wstring_view f;\n\n  std::wstring_view u = L\"u\";\n  std::wstring_view w(L\"w\");\n  std::wstring_view x = LR\"(x)\";\n  std::wstring_view y(LR\"(y)\");\n  std::wstring_view z;\n}\n\ntemplate <typename T>\nvoid templ() {\n  std::string s = \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES: std::string s;\n}\n\n#define M(x) x\n#define N { std::string s = \"\"; }\n// CHECK-FIXES: #define N { std::string s = \"\"; }\n\nvoid h() {\n  templ<int>();\n  templ<double>();\n\n  M({ std::string s = \"\"; })\n  // CHECK-MESSAGES: [[@LINE-1]]:19: warning: redundant string initialization\n  // CHECK-FIXES: M({ std::string s; })\n\n  N\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: redundant string initialization\n  // CHECK-FIXES: N\n  N\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: redundant string initialization\n  // CHECK-FIXES: N\n}\n\ntypedef std::string MyString;\n#define STRING MyString\n#define DECL_STRING(name, val) STRING name = val\n\nvoid i() {\n  MyString a = \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:12: warning: redundant string initialization\n  // CHECK-FIXES: MyString a;\n  STRING b = \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: redundant string initialization\n  // CHECK-FIXES: STRING b;\n  MyString c = \"\" \"\" \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:12: warning: redundant string initialization\n  // CHECK-FIXES: MyString c;\n  STRING d = \"\" \"\" \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:10: warning: redundant string initialization\n  // CHECK-FIXES: STRING d;\n  DECL_STRING(e, \"\");\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n\n  MyString f = \"u\";\n  STRING g = \"u\";\n  DECL_STRING(h, \"u\");\n}\n\n#define EMPTY_STR \"\"\nvoid j() {\n  std::string a(EMPTY_STR);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES: std::string a;\n  std::string b = (EMPTY_STR);\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES: std::string b;\n\n  std::string c(EMPTY_STR \"u\" EMPTY_STR);\n}\n\nvoid k() {\n  std::string a = \"\", b = \"\", c = \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-MESSAGES: [[@LINE-2]]:23: warning: redundant string initialization\n  // CHECK-MESSAGES: [[@LINE-3]]:31: warning: redundant string initialization\n  // CHECK-FIXES: std::string a, b, c;\n\n  std::string d = \"u\", e = \"u\", f = \"u\";\n\n  std::string g = \"u\", h = \"\", i = \"uuu\", j = \"\", k;\n  // CHECK-MESSAGES: [[@LINE-1]]:24: warning: redundant string initialization\n  // CHECK-MESSAGES: [[@LINE-2]]:43: warning: redundant string initialization\n  // CHECK-FIXES: std::string g = \"u\", h, i = \"uuu\", j, k;\n}\n\n// These cases should not generate warnings.\nextern void Param1(std::string param = \"\");\nextern void Param2(const std::string& param = \"\");\nvoid Param3(std::string param = \"\") {}\nvoid Param4(STRING param = \"\") {}\n\nnamespace our {\nstruct TestString {\n  TestString();\n  TestString(const TestString &);\n  TestString(const char *);\n  ~TestString();\n};\n}\n\nvoid ourTestStringTests() {\n  our::TestString a = \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:19: warning: redundant string initialization\n  // CHECK-FIXES: our::TestString a;\n  our::TestString b(\"\");\n  // CHECK-MESSAGES: [[@LINE-1]]:19: warning: redundant string initialization\n  // CHECK-FIXES: our::TestString b;\n  our::TestString c = R\"()\";\n  // CHECK-MESSAGES: [[@LINE-1]]:19: warning: redundant string initialization\n  // CHECK-FIXES: our::TestString c;\n  our::TestString d(R\"()\");\n  // CHECK-MESSAGES: [[@LINE-1]]:19: warning: redundant string initialization\n  // CHECK-FIXES: our::TestString d;\n\n  our::TestString u = \"u\";\n  our::TestString w(\"w\");\n  our::TestString x = R\"(x)\";\n  our::TestString y(R\"(y)\");\n  our::TestString z;\n}\n\nnamespace their {\nusing TestString = our::TestString;\n}\n\n// their::TestString is the same type so should warn / fix\nvoid theirTestStringTests() {\n  their::TestString a = \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: redundant string initialization\n  // CHECK-FIXES: their::TestString a;\n  their::TestString b(\"\");\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: redundant string initialization\n  // CHECK-FIXES: their::TestString b;\n}\n\nnamespace other {\n// Identical declarations to above but different type\nstruct TestString {\n  TestString();\n  TestString(const TestString &);\n  TestString(const char *);\n  ~TestString();\n};\n\n// Identical declarations to above but different type\ntemplate <typename T>\nclass allocator {};\ntemplate <typename T>\nclass char_traits {};\ntemplate <typename C, typename T = std::char_traits<C>, typename A = std::allocator<C>>\nstruct basic_string {\n  basic_string();\n  basic_string(const basic_string &);\n  basic_string(const C *, const A &a = A());\n  ~basic_string();\n};\ntypedef basic_string<char> string;\ntypedef basic_string<wchar_t> wstring;\n}\n\n// other::TestString, other::string, other::wstring are unrelated to the types\n// being checked. No warnings / fixes should be produced for these types.\nvoid otherTestStringTests() {\n  other::TestString a = \"\";\n  other::TestString b(\"\");\n  other::string c = \"\";\n  other::string d(\"\");\n  other::wstring e = L\"\";\n  other::wstring f(L\"\");\n}\n\nclass Foo {\n  std::string A = \"\";\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES:  std::string A;\n  std::string B;\n  std::string C;\n  std::string D;\n  std::string E = \"NotEmpty\";\n\npublic:\n  // Check redundant constructor where Field has a redundant initializer.\n  Foo() : A(\"\") {}\n  // CHECK-MESSAGES: [[@LINE-1]]:11: warning: redundant string initialization\n  // CHECK-FIXES:  Foo()  {}\n\n  // Check redundant constructor where Field has no initializer.\n  Foo(char) : B(\"\") {}\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES:  Foo(char)  {}\n\n  // Check redundant constructor where Field has a valid initializer.\n  Foo(long) : E(\"\") {}\n  // CHECK-MESSAGES: [[@LINE-1]]:15: warning: redundant string initialization\n  // CHECK-FIXES:  Foo(long) : E() {}\n\n  // Check how it handles removing 1 initializer, and defaulting the other.\n  Foo(int) : B(\"\"), E(\"\") {}\n  // CHECK-MESSAGES: [[@LINE-1]]:14: warning: redundant string initialization\n  // CHECK-MESSAGES: [[@LINE-2]]:21: warning: redundant string initialization\n  // CHECK-FIXES:  Foo(int) :  E() {}\n\n  Foo(short) : B{\"\"} {}\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: redundant string initialization\n  // CHECK-FIXES:  Foo(short)  {}\n\n  Foo(float) : A{\"\"}, B{\"\"} {}\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: redundant string initialization\n  // CHECK-MESSAGES: [[@LINE-2]]:23: warning: redundant string initialization\n  // CHECK-FIXES:  Foo(float)  {}\n\n  // Check how it handles removing some redundant initializers while leaving\n  // valid initializers intact.\n  Foo(std::string Arg) : A(Arg), B(\"\"), C(\"NonEmpty\"), D(R\"()\"), E(\"\") {}\n  // CHECK-MESSAGES: [[@LINE-1]]:34: warning: redundant string initialization\n  // CHECK-MESSAGES: [[@LINE-2]]:56: warning: redundant string initialization\n  // CHECK-MESSAGES: [[@LINE-3]]:66: warning: redundant string initialization\n  // CHECK-FIXES:  Foo(std::string Arg) : A(Arg),  C(\"NonEmpty\"),  E() {}\n};"
    }
  ]
}