{
  "name": "UnconventionalAssignOperator",
  "language": "cpp",
  "description": ".. title:: clang-tidy - misc-unconventional-assign-operator",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 102,
  "branches": 6,
  "apis": 124,
  "test": [
    {
      "description": null,
      "expected-problems": 14,
      "expected-linenumbers": [
        30,
        32,
        34,
        39,
        41,
        46,
        48,
        53,
        70,
        80,
        85,
        107,
        127,
        164
      ],
      "code": "\n// RUN: %check_clang_tidy %s misc-unconventional-assign-operator %t -- -- -fno-delayed-template-parsing\n\nnamespace std {\ntemplate <typename T>\nstruct remove_reference { typedef T type; };\ntemplate <typename T>\nstruct remove_reference<T &> { typedef T type; };\ntemplate <typename T>\nstruct remove_reference<T &&> { typedef T type; };\ntemplate <typename T>\ntypename remove_reference<T>::type &&move(T &&t);\n}\n\n\nstruct Good {\n  Good& operator=(const Good&);\n  Good& operator=(Good&&);\n\n  // Assign from other types is fine too.\n  Good& operator=(int);\n};\n\nstruct AlsoGood {\n  // By value is also fine.\n  AlsoGood& operator=(AlsoGood);\n};\n\nstruct BadReturnType {\n  void operator=(const BadReturnType&);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should return 'BadReturnType&' [misc-unconventional-assign-operator]\n  const BadReturnType& operator=(BadReturnType&&);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should return 'Bad\n  void operator=(int);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should return 'Bad\n};\n\nstruct BadReturnType2 {\n  BadReturnType2&& operator=(const BadReturnType2&);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should return 'Bad\n  int operator=(BadReturnType2&&);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should return 'Bad\n};\n\nstruct BadArgument {\n  BadArgument& operator=(BadArgument&);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should take 'BadArgument const&', 'BadArgument&&' or 'BadArgument'\n  BadArgument& operator=(const BadArgument&&);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should take 'BadArgument const&', 'BadArgument&&' or 'BadArgument'\n};\n\nstruct BadModifier {\n  BadModifier& operator=(const BadModifier&) const;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should not be marked 'const'\n};\n\nstruct Deleted {\n  // We don't check the return value of deleted operators.\n  void operator=(const Deleted&) = delete;\n  void operator=(Deleted&&) = delete;\n};\n\nclass Private {\n  // We don't check the return value of private operators.\n  // Pre-C++11 way of disabling assignment.\n  void operator=(const Private &);\n};\n\nstruct Virtual {\n  virtual Virtual& operator=(const Virtual &);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should not be marked 'virtual'\n};\n\nclass BadReturnStatement {\n  int n;\n\npublic:\n  BadReturnStatement& operator=(BadReturnStatement&& rhs) {\n    n = std::move(rhs.n);\n    return *&rhs;\n// CHECK-MESSAGES: :[[@LINE-1]]:5: warning: operator=() should always return '*this'\n  }\n\n  // Do not check if return type is different from '&BadReturnStatement'\n  int operator=(int i) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should return 'Bad\n    n = i;\n    return n;\n  }\n};\n\nnamespace pr31531 {\nenum E { e };\n// This declaration makes the 'return *this' below have an unresolved operator\n// in the class template, but not in an instantiation.\nE operator*(E, E);\n\ntemplate <typename>\nstruct UnresolvedOperator {\n  UnresolvedOperator &operator=(const UnresolvedOperator &) { return *this; }\n};\n\nUnresolvedOperator<int> UnresolvedOperatorInt;\n\ntemplate <typename>\nstruct Template {\n  Template &operator=(const Template &) { return this; }\n  // CHECK-MESSAGES: :[[@LINE-1]]:43: warning: operator=() should always return '*this'\n};\n\nTemplate<int> TemplateInt;\n}\n\nstruct AssignmentCallAtReturn {\n  AssignmentCallAtReturn &returnThis() {\n    return *this;\n  }\n  AssignmentCallAtReturn &operator=(int rhs) {\n    return *this;\n  }\n  AssignmentCallAtReturn &operator=(char rhs) {\n    // Allow call to assignment from other type.\n    return (*this = static_cast<int>(rhs));\n  }\n  AssignmentCallAtReturn &operator=(float rhs) {\n    // Do not allow calls to other functions.\n    return returnThis();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: operator=() should always return '*this'\n  }\n};\n\n// Check that no false positives are issued when using type aliases.\nstruct TypeAlias {\n  using Alias = TypeAlias;\n  // This is correct and should not produce any warnings:\n  Alias &operator=(const Alias &) { return *this; }\n\n  using AliasRef = Alias &;\n  // So is this (assignments from other types are fine):\n  AliasRef operator=(int) { return *this; }\n};\n\n// Same check as above with typedef instead of using\nstruct TypeAliasTypedef {\n  typedef TypeAliasTypedef Alias;\n  Alias &operator=(const Alias &) { return *this; }\n\n  typedef Alias &AliasRef;\n  AliasRef operator=(int) { return *this; }\n};\n\n// Same check as above for a template class\ntemplate <typename T>\nstruct TemplateTypeAlias {\n  using Alias1 = TemplateTypeAlias &;\n  using Alias2 = TemplateTypeAlias const &;\n  Alias1 operator=(Alias2) { return *this; }\n\n  template <typename U>\n  using Alias3 = TemplateTypeAlias<U>;\n  Alias3<T> &operator=(int) { return *this; }\n\n  // Using a different type parameter in the return type should give a warning\n  Alias3<TypeAlias::Alias> &operator=(double) { return *this; }\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: operator=() should return 'TemplateTypeAlias&' [misc-unconventional-assign-operator]\n};\n\nnamespace gh143237 {\ntemplate<typename T>\nstruct TemplateAssignment {\n  explicit TemplateAssignment(int) {\n  }\n\n  TemplateAssignment& operator=(int n) {\n    // No warning\n    return *this = TemplateAssignment(n);\n  }\n};\n}"
    }
  ]
}