{
  "name": "NoRecursion",
  "language": "cpp",
  "description": ".. title:: clang-tidy - misc-no-recursion",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 270,
  "branches": 29,
  "apis": 108,
  "test": [
    {
      "description": null,
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n// RUN: %check_clang_tidy %s misc-no-recursion %t\n\n// We don't have the definition of this function,\n// so we can't tell anything about it..\nvoid external();\n\n// This function is obviously not recursive.\nvoid no_recursion() {\n}\n\n// Since we don't know what `external()` does,\n// we don't know if this is recursive or not.\nvoid maybe_no_recursion() {\n  external();\n}\n\n// Function calls itself - obviously a recursion.\nvoid endless_recursion() {\n  endless_recursion();\n}\n\n// CHECK-NOTES: :[[@LINE-4]]:6: warning: function 'endless_recursion' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-5]]:6: note: example recursive call chain, starting from function 'endless_recursion'\n// CHECK-NOTES: :[[@LINE-5]]:3: note: Frame #1: function 'endless_recursion' calls function 'endless_recursion' here:\n// CHECK-NOTES: :[[@LINE-6]]:3: note: ... which was the starting point of the recursive call chain; there may be other cycles\n\nbool external_oracle();\nbool another_external_oracle();\n\n// Function calls itself if some external function said so - recursion.\nvoid maybe_endless_recursion() {\n  if (external_oracle())\n    maybe_endless_recursion();\n}\n\n// CHECK-NOTES: :[[@LINE-5]]:6: warning: function 'maybe_endless_recursion' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-6]]:6: note: example recursive call chain, starting from function 'maybe_endless_recursion'\n// CHECK-NOTES: :[[@LINE-5]]:5: note: Frame #1: function 'maybe_endless_recursion' calls function 'maybe_endless_recursion' here:\n// CHECK-NOTES: :[[@LINE-6]]:5: note: ... which was the starting point of the recursive call chain; there may be other cycles\n\n// Obviously-constrained recursion.\nvoid recursive_countdown(unsigned x) {\n  if (x == 0)\n    return;\n  recursive_countdown(x - 1);\n}\n\n// CHECK-NOTES: :[[@LINE-6]]:6: warning: function 'recursive_countdown' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-7]]:6: note: example recursive call chain, starting from function 'recursive_countdown'\n// CHECK-NOTES: :[[@LINE-5]]:3: note: Frame #1: function 'recursive_countdown' calls function 'recursive_countdown' here:\n// CHECK-NOTES: :[[@LINE-6]]:3: note: ... which was the starting point of the recursive call chain; there may be other cycles\n\nvoid indirect_recursion();\nvoid conditionally_executed() {\n  if (external_oracle())\n    indirect_recursion();\n}\nvoid indirect_recursion() {\n  if (external_oracle())\n    conditionally_executed();\n}\n\n// CHECK-NOTES: :[[@LINE-9]]:6: warning: function 'conditionally_executed' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-6]]:6: note: example recursive call chain, starting from function 'indirect_recursion'\n// CHECK-NOTES: :[[@LINE-5]]:5: note: Frame #1: function 'indirect_recursion' calls function 'conditionally_executed' here:\n// CHECK-NOTES: :[[@LINE-10]]:5: note: Frame #2: function 'conditionally_executed' calls function 'indirect_recursion' here:\n// CHECK-NOTES: :[[@LINE-11]]:5: note: ... which was the starting point of the recursive call chain; there may be other cycles\n// CHECK-NOTES: :[[@LINE-10]]:6: warning: function 'indirect_recursion' is within a recursive call chain [misc-no-recursion]\n\nvoid taint();\nvoid maybe_selfrecursion_with_two_backedges() {\n  if (external_oracle())\n    maybe_selfrecursion_with_two_backedges();\n  taint();\n  if (another_external_oracle())\n    maybe_selfrecursion_with_two_backedges();\n}\n\n// CHECK-NOTES: :[[@LINE-8]]:6: warning: function 'maybe_selfrecursion_with_two_backedges' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-9]]:6: note: example recursive call chain, starting from function 'maybe_selfrecursion_with_two_backedges'\n// CHECK-NOTES: :[[@LINE-8]]:5: note: Frame #1: function 'maybe_selfrecursion_with_two_backedges' calls function 'maybe_selfrecursion_with_two_backedges' here:\n// CHECK-NOTES: :[[@LINE-9]]:5: note: ... which was the starting point of the recursive call chain; there may be other cycles\n\nvoid indirect_recursion_with_alternatives();\nvoid conditionally_executed_choice_0() {\n  if (external_oracle())\n    indirect_recursion_with_alternatives();\n}\nvoid conditionally_executed_choice_1() {\n  if (external_oracle())\n    indirect_recursion_with_alternatives();\n}\nvoid indirect_recursion_with_alternatives() {\n  if (external_oracle())\n    conditionally_executed_choice_0();\n  else\n    conditionally_executed_choice_1();\n}\n\n// CHECK-NOTES: :[[@LINE-15]]:6: warning: function 'conditionally_executed_choice_0' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-8]]:6: note: example recursive call chain, starting from function 'indirect_recursion_with_alternatives'\n// CHECK-NOTES: :[[@LINE-7]]:5: note: Frame #1: function 'indirect_recursion_with_alternatives' calls function 'conditionally_executed_choice_0' here:\n// CHECK-NOTES: :[[@LINE-16]]:5: note: Frame #2: function 'conditionally_executed_choice_0' calls function 'indirect_recursion_with_alternatives' here:\n// CHECK-NOTES: :[[@LINE-17]]:5: note: ... which was the starting point of the recursive call chain; there may be other cycles\n// CHECK-NOTES: :[[@LINE-16]]:6: warning: function 'conditionally_executed_choice_1' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-13]]:6: warning: function 'indirect_recursion_with_alternatives' is within a recursive call chain [misc-no-recursion]\n\nstatic void indirect_recursion_with_depth2();\nstatic void conditionally_executed_depth1() {\n  if (external_oracle())\n    indirect_recursion_with_depth2();\n}\nstatic void conditionally_executed_depth0() {\n  if (external_oracle())\n    conditionally_executed_depth1();\n}\nvoid indirect_recursion_with_depth2() {\n  if (external_oracle())\n    conditionally_executed_depth0();\n}\n\n// CHECK-NOTES: :[[@LINE-13]]:13: warning: function 'conditionally_executed_depth1' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-10]]:13: note: example recursive call chain, starting from function 'conditionally_executed_depth0'\n// CHECK-NOTES: :[[@LINE-9]]:5: note: Frame #1: function 'conditionally_executed_depth0' calls function 'conditionally_executed_depth1' here:\n// CHECK-NOTES: :[[@LINE-14]]:5: note: Frame #2: function 'conditionally_executed_depth1' calls function 'indirect_recursion_with_depth2' here:\n// CHECK-NOTES: :[[@LINE-7]]:5: note: Frame #3: function 'indirect_recursion_with_depth2' calls function 'conditionally_executed_depth0' here:\n// CHECK-NOTES: :[[@LINE-8]]:5: note: ... which was the starting point of the recursive call chain; there may be other cycles\n// CHECK-NOTES: :[[@LINE-15]]:13: warning: function 'conditionally_executed_depth0' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-12]]:6: warning: function 'indirect_recursion_with_depth2' is within a recursive call chain [misc-no-recursion]\n\nint boo();\nvoid foo(int x = boo()) {}\nvoid bar() {\n  foo();\n  foo();\n}\nint boo() {\n  bar();\n  return 0;\n}\n\n// CHECK-NOTES: :[[@LINE-9]]:6: warning: function 'bar' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-6]]:5: note: example recursive call chain, starting from function 'boo'\n// CHECK-NOTES: :[[@LINE-6]]:3: note: Frame #1: function 'boo' calls function 'bar' here:\n// CHECK-NOTES: :[[@LINE-13]]:18: note: Frame #2: function 'bar' calls function 'boo' here:\n// CHECK-NOTES: :[[@LINE-14]]:18: note: ... which was the starting point of the recursive call chain; there may be other cycles\n// CHECK-NOTES: :[[@LINE-10]]:5: warning: function 'boo' is within a recursive call chain [misc-no-recursion]\n\nint recursion_through_function_ptr() {\n  auto *ptr = &recursion_through_function_ptr;\n  if (external_oracle())\n    return ptr();\n  return 0;\n}\n\nint recursion_through_lambda() {\n  auto zz = []() {\n    if (external_oracle())\n      return recursion_through_lambda();\n    return 0;\n  };\n  return zz();\n}\n\n// CHECK-NOTES: :[[@LINE-9]]:5: warning: function 'recursion_through_lambda' is within a recursive call chain [misc-no-recursion]\n// CHECK-NOTES: :[[@LINE-9]]:13: note: example recursive call chain, starting from function 'operator()'\n// CHECK-NOTES: :[[@LINE-8]]:14: note: Frame #1: function 'operator()' calls function 'recursion_through_lambda' here:\n// CHECK-NOTES: :[[@LINE-6]]:10: note: Frame #2: function 'recursion_through_lambda' calls function 'operator()' here:\n// CHECK-NOTES: :[[@LINE-7]]:10: note: ... which was the starting point of the recursive call chain; there may be other cycles\n// CHECK-NOTES: :[[@LINE-13]]:13: warning: function 'operator()' is within a recursive call chain [misc-no-recursion]\n\nstruct recursion_through_destructor {\n  ~recursion_through_destructor() {\n    if (external_oracle()) {\n      recursion_through_destructor variable;\n      // variable goes out of scope, it's destructor runs, and we are back here.\n    }\n  }\n};"
    }
  ]
}