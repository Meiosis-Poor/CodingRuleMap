{
  "name": "UnusedParameters",
  "language": "cpp",
  "description": ".. title:: clang-tidy - misc-unused-parameters",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 220,
  "branches": 30,
  "apis": 136,
  "test": [
    {
      "description": null,
      "expected-problems": 38,
      "expected-linenumbers": [
        8,
        13,
        17,
        21,
        25,
        29,
        33,
        37,
        42,
        69,
        73,
        77,
        81,
        85,
        91,
        97,
        103,
        138,
        143,
        157,
        160,
        163,
        166,
        176,
        179,
        182,
        185,
        188,
        193,
        218,
        227,
        231,
        232,
        246,
        264,
        279,
        291,
        300
      ],
      "code": "\n// RUN: echo \"static void staticFunctionHeader(int i) {;}\" > %T/header.h\n// RUN: echo \"static void staticFunctionHeader(int  /*i*/) {;}\" > %T/header-fixed.h\n// RUN: %check_clang_tidy  --match-partial-fixes -std=c++11 %s misc-unused-parameters %t -- -header-filter='.*' -- -fno-delayed-template-parsing\n// RUN: diff %T/header.h %T/header-fixed.h\n// FIXME: Make the test work in all language modes.\n\n#include \"header.h\"\n// CHECK-MESSAGES: header.h:1:38: warning\n\n// Basic removal\n// =============\nvoid a(int i) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: parameter 'i' is unused [misc-unused-parameters]\n// CHECK-FIXES: {{^}}void a(int  /*i*/) {;}{{$}}\n\nvoid b(int i = 1) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: parameter 'i' is unused [misc-unused-parameters]\n// CHECK-FIXES: {{^}}void b(int  /*i*/ = 1) {;}{{$}}\n\nvoid c(int *i) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: parameter 'i' is unused [misc-unused-parameters]\n// CHECK-FIXES: {{^}}void c(int * /*i*/) {;}{{$}}\n\nvoid d(int i[]) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: parameter 'i' is unused [misc-unused-parameters]\n// CHECK-FIXES: {{^}}void d(int  /*i*/[]) {;}{{$}}\n\nvoid e(int i[1]) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: parameter 'i' is unused [misc-unused-parameters]\n// CHECK-FIXES: {{^}}void e(int  /*i*/[1]) {;}{{$}}\n\nvoid f(void (*fn)()) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:15: warning: parameter 'fn' is unused [misc-unused-parameters]\n// CHECK-FIXES: {{^}}void f(void (* /*fn*/)()) {;}{{$}}\n\nint *k([[clang::lifetimebound]] int *i) { return nullptr; }\n// CHECK-MESSAGES: :[[@LINE-1]]:38: warning: parameter 'i' is unused [misc-unused-parameters]\n// CHECK-FIXES: {{^}}int *k({{\\[\\[clang::lifetimebound\\]\\]}} int * /*i*/) { return nullptr; }{{$}}\n\n#define ATTR_BEFORE(x) [[clang::lifetimebound]] x\nint* m(ATTR_BEFORE(const int *i)) { return nullptr; }\n// CHECK-MESSAGES: :[[@LINE-1]]:31: warning: parameter 'i' is unused [misc-unused-parameters]\n// CHECK-FIXES: {{^}}int* m(ATTR_BEFORE(const int * /*i*/)) { return nullptr; }{{$}}\n#undef ATTR_BEFORE\n\n// Unchanged cases\n// ===============\nvoid f(int i); // Don't remove stuff in declarations\nvoid g(int i = 1);\nvoid h(int i[]);\nvoid s(int i[1]);\nvoid u(void (*fn)());\nvoid w(int i) { (void)i; } // Don't remove used parameters\n\n// Don't reanchor the attribute to the type:\nint *x(int *i [[clang::lifetimebound]]) { return nullptr; }\n#define ATTR_AFTER(x) x [[clang::lifetimebound]]\nint* y(ATTR_AFTER(const int *i)) { return nullptr; }\n#undef ATTR_AFTER\n\nbool useLambda(int (*fn)(int));\nstatic bool static_var = useLambda([] (int a) { return a; });\n\n// Remove parameters of local functions\n// ====================================\nstatic void staticFunctionA(int i);\n// CHECK-FIXES: {{^}}static void staticFunctionA();\nstatic void staticFunctionA(int i) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:33: warning\n// CHECK-FIXES: {{^}}static void staticFunctionA()\n\nstatic void staticFunctionB(int i, int j) { (void)i; }\n// CHECK-MESSAGES: :[[@LINE-1]]:40: warning\n// CHECK-FIXES: {{^}}static void staticFunctionB(int i)\n\nstatic void staticFunctionC(int i, int j) { (void)j; }\n// CHECK-MESSAGES: :[[@LINE-1]]:33: warning\n// CHECK-FIXES: {{^}}static void staticFunctionC(int j)\n\nstatic void staticFunctionD(int i, int j, int k) { (void)i; (void)k; }\n// CHECK-MESSAGES: :[[@LINE-1]]:40: warning\n// CHECK-FIXES: {{^}}static void staticFunctionD(int i, int k)\n\nstatic void staticFunctionE(int i = 4) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:33: warning\n// CHECK-FIXES: {{^}}static void staticFunctionE()\n\nstatic void staticFunctionF(int i = 4);\n// CHECK-FIXES: {{^}}static void staticFunctionF();\nstatic void staticFunctionF(int i) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:33: warning\n// CHECK-FIXES: {{^}}static void staticFunctionF()\n\nstatic void staticFunctionG(int i[]);\n// CHECK-FIXES: {{^}}static void staticFunctionG();\nstatic void staticFunctionG(int i[]) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:33: warning\n// CHECK-FIXES: {{^}}static void staticFunctionG()\n\nstatic void staticFunctionH(void (*fn)());\n// CHECK-FIXES: {{^}}static void staticFunctionH();\nstatic void staticFunctionH(void (*fn)()) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:36: warning\n// CHECK-FIXES: {{^}}static void staticFunctionH()\n\nstatic void someCallSites() {\n  staticFunctionA(1);\n// CHECK-FIXES: staticFunctionA();\n  staticFunctionB(1, 2);\n// CHECK-FIXES: staticFunctionB(1);\n  staticFunctionC(1, 2);\n// CHECK-FIXES: staticFunctionC(2);\n  staticFunctionD(1, 2, 3);\n// CHECK-FIXES: staticFunctionD(1, 3);\n  staticFunctionE(1);\n// CHECK-FIXES: staticFunctionE();\n  staticFunctionF(1);\n// CHECK-FIXES: staticFunctionF();\n  staticFunctionF();\n// CHECK-FIXES: staticFunctionF();\n  int t[] = {1};\n  staticFunctionG(t);\n// CHECK-FIXES: staticFunctionG();\n  void func();\n  staticFunctionH(&func);\n// CHECK-FIXES: staticFunctionH();\n}\n\n/*\n * FIXME: This fails because the removals overlap and ClangTidy doesn't apply\n *        them.\n * static void bothVarsUnused(int a, int b) {;}\n */\n\n// Regression test for long variable names and expressions\n// =======================================================\nstatic int variableWithLongName1(int LongName1, int LongName2) {\n// CHECK-MESSAGES: :[[@LINE-1]]:53: warning: parameter 'LongName2' is unused\n// CHECK-FIXES: {{^}}static int variableWithLongName1(int LongName1) {\n  return LongName1;\n}\nstatic int variableWithLongName2(int LongName1, int LongName2) {\n// CHECK-MESSAGES: :[[@LINE-1]]:38: warning: parameter 'LongName1' is unused\n// CHECK-FIXES: {{^}}static int variableWithLongName2(int LongName2) {\n  return LongName2;\n}\nstatic void someLongNameCallSites() {\n  int LongName1 = 7, LongName2 = 17;\n  variableWithLongName1(LongName1, LongName2);\n// CHECK-FIXES: variableWithLongName1(LongName1);\n  variableWithLongName2(LongName1, LongName2);\n// CHECK-FIXES: variableWithLongName2(LongName2);\n}\n\nclass SomeClass {\n  static void f(int i) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:21: warning\n// CHECK-FIXES: static void f(int  /*i*/) {;}\n  static void g(int i = 1) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:21: warning\n// CHECK-FIXES: static void g(int  /*i*/ = 1) {;}\n  static void h(int i[]) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:21: warning\n// CHECK-FIXES: static void h(int  /*i*/[]) {;}\n  static void s(void (*fn)()) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:24: warning\n// CHECK-FIXES: static void s(void (* /*fn*/)()) {;}\n};\n\nnamespace {\nclass C {\npublic:\n  void f(int i);\n// CHECK-FIXES: void f();\n  void g(int i) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning\n// CHECK-FIXES: void g() {;}\n  void h(int i) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning\n// CHECK-FIXES: void h(int  /*i*/) {;}\n  void s(int i = 1) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning\n// CHECK-FIXES: void s(int  /*i*/ = 1) {;}\n  void u(int i[]) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning\n// CHECK-FIXES: void u(int  /*i*/[]) {;}\n  void w(void (*fn)()) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning\n// CHECK-FIXES: void w(void (* /*fn*/)()) {;}\n};\n\nvoid C::f(int i) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:15: warning\n// CHECK-FIXES: void C::f() {;}\n\ntemplate <typename T>\nvoid useFunction(T t);\n\nvoid someMoreCallSites() {\n  C c;\n  c.f(1);\n// CHECK-FIXES: c.f();\n  c.g(1);\n// CHECK-FIXES: c.g();\n\n  useFunction(&C::h);\n  useFunction(&C::s);\n  useFunction(&C::u);\n  useFunction(&C::w);\n}\n\nclass Base {\n  virtual void f(int i);\n};\n\nclass Derived : public Base {\n  void f(int i) override {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning\n// CHECK-FIXES: void f(int  /*i*/) override {;}\n};\n\n} // end namespace\n\ntemplate <typename T> void someFunctionTemplate(T b, T e) { (void)b; (void)e; }\n\ntemplate <typename T> void someFunctionTemplateOneUnusedParam(T b, T e) { (void)e; }\n// CHECK-MESSAGES: :[[@LINE-1]]:65: warning\n// CHECK-FIXES: {{^}}template <typename T> void someFunctionTemplateOneUnusedParam(T  /*b*/, T e) { (void)e; }\n\ntemplate <typename T> void someFunctionTemplateAllUnusedParams(T b, T e) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:66: warning\n// CHECK-MESSAGES: :[[@LINE-2]]:71: warning\n// CHECK-FIXES: {{^}}template <typename T> void someFunctionTemplateAllUnusedParams(T  /*b*/, T  /*e*/) {;}\n\nstatic void dontGetConfusedByParametersInFunctionTypes() { void (*F)(int i); }\n\ntemplate <typename T> class Function {};\nstatic Function<void(int, int i)> dontGetConfusedByFunctionReturnTypes() {\n  return Function<void(int, int)>();\n}\n\nnamespace PR38055 {\nnamespace {\nstruct a {\n  void b(int c) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning: parameter 'c' is unused\n// CHECK-FIXES: {{^}}  void b() {;}{{$}}\n};\ntemplate <class>\nclass d {\n  a e;\n  void f() { e.b(0); }\n};\n}  // namespace\n}  // namespace PR38055\n\nnamespace strict_mode_off {\n// Do not warn on empty function bodies.\nvoid f1(int foo1) {}\nvoid f2(int foo2) {\n  // \"empty\" in the AST sense, not in textual sense.\n}\nvoid f3(int foo3) {;}\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: parameter 'foo3' is unused\n// CHECK-FIXES: {{^}}void f3(int  /*foo3*/) {;}{{$}}\n\nclass E {\n  int i;\n\npublic:\n  E(int j) {}\n};\nclass F {\n  int i;\n\npublic:\n  // Constructor initializer counts as a non-empty body.\n  F(int j) : i() {}\n// CHECK-MESSAGES: :[[@LINE-1]]:9: warning: parameter 'j' is unused\n// CHECK-FIXES: {{^}}  F(int  /*j*/) : i() {}{{$}}\n};\n\nclass A {\npublic:\n  A();\n  A(int);\n};\nclass B : public A {\npublic:\n  B(int i) : A() {}\n// CHECK-MESSAGES: :[[@LINE-1]]:9: warning: parameter 'i' is unused\n// CHECK-FIXES: {{^}}  B(int  /*i*/) : A() {}{{$}}\n};\n} // namespace strict_mode_off\n\nnamespace lambda {\nusing fn = void(int);\nvoid f(fn *);\nvoid test() {\n  // CHECK-MESSAGES: :[[@LINE+2]]:12: warning: parameter 'I' is unused\n  // CHECK-FIXES: {{^}}  f([](int  /*I*/) {\n  f([](int I) { return; });\n}\n} // namespace lambda\n\n// Do not warn on naked functions.\n[[gnu::naked]] int nakedFunction(int a, float b, const char *c) { ; }\n__attribute__((naked)) void nakedFunction(int a, int b) { ; }"
    }
  ]
}