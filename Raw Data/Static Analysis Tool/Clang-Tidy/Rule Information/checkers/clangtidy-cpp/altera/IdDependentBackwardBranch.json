{
  "name": "IdDependentBackwardBranch",
  "language": "cpp",
  "description": ".. title:: clang-tidy - altera-id-dependent-backward-branch",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 270,
  "branches": 52,
  "apis": 205,
  "test": [
    {
      "description": null,
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n// RUN: %check_clang_tidy %s altera-id-dependent-backward-branch %t -- -header-filter=.* \"--\" -cl-std=CLC++1.0 -c\n\nvoid error() {\n  // ==== Conditional Expressions ====\n  int accumulator = 0;\n  for (int i = 0; i < get_local_id(0); i++) {\n    // CHECK-NOTES: :[[@LINE-1]]:19: warning: backward branch (for loop) is ID-dependent due to ID function call and may cause performance degradation [altera-id-dependent-backward-branch]\n    accumulator++;\n  }\n\n  int j = 0;\n  while (j < get_local_id(0)) {\n    // CHECK-NOTES: :[[@LINE-1]]:10: warning: backward branch (while loop) is ID-dependent due to ID function call and may cause performance degradation [altera-id-dependent-backward-branch]\n    accumulator++;\n  }\n\n  do {\n    accumulator++;\n  } while (j < get_local_id(0));\n  // CHECK-NOTES: :[[@LINE-1]]:12: warning: backward branch (do loop) is ID-dependent due to ID function call and may cause performance degradation [altera-id-dependent-backward-branch]\n\n  // ==== Assignments ====\n  int ThreadID = get_local_id(0);\n\n  while (j < ThreadID) {\n    // CHECK-NOTES: :[[@LINE-1]]:10: warning: backward branch (while loop) is ID-dependent due to variable reference to 'ThreadID' and may cause performance degradation [altera-id-dependent-backward-branch]\n    // CHECK-NOTES: :[[@LINE-4]]:3: note: assignment of ID-dependent variable ThreadID\n    accumulator++;\n  }\n\n  do {\n    accumulator++;\n  } while (j < ThreadID);\n  // CHECK-NOTES: :[[@LINE-1]]:12: warning: backward branch (do loop) is ID-dependent due to variable reference to 'ThreadID' and may cause performance degradation [altera-id-dependent-backward-branch]\n  // CHECK-NOTES: :[[@LINE-12]]:3: note: assignment of ID-dependent variable ThreadID\n\n  struct { int IDDepField; } Example;\n  Example.IDDepField = get_local_id(0);\n\n  for (int i = 0; i < Example.IDDepField; i++) {\n    // CHECK-NOTES: :[[@LINE-1]]:19: warning: backward branch (for loop) is ID-dependent due to member reference to 'IDDepField' and may cause performance degradation [altera-id-dependent-backward-branch]\n    // CHECK-NOTES: :[[@LINE-4]]:3: note: assignment of ID-dependent field IDDepField\n    accumulator++;\n  }\n\n  while (j < Example.IDDepField) {\n    // CHECK-NOTES: :[[@LINE-1]]:10: warning: backward branch (while loop) is ID-dependent due to member reference to 'IDDepField' and may cause performance degradation [altera-id-dependent-backward-branch]\n    // CHECK-NOTES: :[[@LINE-10]]:3: note: assignment of ID-dependent field IDDepField\n    accumulator++;\n  }\n\n  do {\n    accumulator++;\n  } while (j < Example.IDDepField);\n  // CHECK-NOTES: :[[@LINE-1]]:12: warning: backward branch (do loop) is ID-dependent due to member reference to 'IDDepField' and may cause performance degradation [altera-id-dependent-backward-branch]\n  // CHECK-NOTES: :[[@LINE-18]]:3: note: assignment of ID-dependent field IDDepField\n\n  // ==== Inferred Assignments ====\n  int ThreadID2 = ThreadID * 2;\n\n  for (int i = 0; i < ThreadID2; i++) {\n    // CHECK-NOTES: :[[@LINE-1]]:19: warning: backward branch (for loop) is ID-dependent due to variable reference to 'ThreadID2' and may cause performance degradation [altera-id-dependent-backward-branch]\n    // CHECK-NOTES: :[[@LINE-4]]:3: note: inferred assignment of ID-dependent value from ID-dependent variable ThreadID\n    accumulator++;\n  }\n\n  // ==== Unused Inferred Assignments ====\n  int UnusedThreadID = Example.IDDepField; // OK: not used in any loops\n\n  struct { int IDDepField; } UnusedStruct;\n  UnusedStruct.IDDepField = ThreadID * 2; // OK: not used in any loops\n}\n\nvoid success() {\n  int accumulator = 0;\n\n  for (int i = 0; i < 1000; i++) {\n    if (i < get_local_id(0)) {\n      accumulator++;\n    }\n  }\n}\n\ntemplate<char... STOP>\nvoid gh55408(char const input[], int pos) {\n  while (((input[pos] != STOP) && ...));\n}\n"
    }
  ]
}