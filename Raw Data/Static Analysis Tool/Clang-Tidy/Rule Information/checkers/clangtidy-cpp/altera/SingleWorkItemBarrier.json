{
  "name": "SingleWorkItemBarrier",
  "language": "cpp",
  "description": ".. title:: clang-tidy - altera-single-work-item-barrier",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 83,
  "branches": 9,
  "apis": 44,
  "test": [
    {
      "description": null,
      "expected-problems": 12,
      "expected-linenumbers": [
        8,
        15,
        68,
        75,
        128,
        135,
        143,
        150,
        216,
        223,
        231,
        238
      ],
      "code": "\n// RUN: %check_clang_tidy -check-suffix=OLDCLOLDAOC %s altera-single-work-item-barrier %t -- -header-filter=.* \"--\" -cl-std=CL1.2 -c -DOLDCLOLDAOC\n// RUN: %check_clang_tidy -check-suffix=NEWCLOLDAOC %s altera-single-work-item-barrier %t -- -header-filter=.* \"--\" -cl-std=CL2.0 -c -DNEWCLOLDAOC\n// RUN: %check_clang_tidy -check-suffix=OLDCLNEWAOC %s altera-single-work-item-barrier %t -- -config='{CheckOptions: { altera-single-work-item-barrier.AOCVersion: 1701}}' -header-filter=.* \"--\" -cl-std=CL1.2 -c -DOLDCLNEWAOC\n// RUN: %check_clang_tidy -check-suffix=NEWCLNEWAOC %s altera-single-work-item-barrier %t -- -config='{CheckOptions: { altera-single-work-item-barrier.AOCVersion: 1701}}' -header-filter=.* \"--\" -cl-std=CL2.0 -c -DNEWCLNEWAOC\n\n#ifdef OLDCLOLDAOC  // OpenCL 1.2 Altera Offline Compiler < 17.1\nvoid __kernel error_barrier_no_id(__global int * foo, int size) {\n  // CHECK-MESSAGES-OLDCLOLDAOC: :[[@LINE-1]]:15: warning: kernel function 'error_barrier_no_id' does not call 'get_global_id' or 'get_local_id' and will be treated as a single work-item [altera-single-work-item-barrier]\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  // CHECK-MESSAGES-OLDCLOLDAOC: :[[@LINE-1]]:3: note: barrier call is in a single work-item and may error out\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\nvoid __kernel success_barrier_global_id(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_global_id(0);\n}\n\nvoid __kernel success_barrier_local_id(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_local_id(0);\n}\n\nvoid __kernel success_barrier_both_ids(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int gid = get_global_id(0);\n  int lid = get_local_id(0);\n}\n\nvoid success_nokernel_barrier_no_id(__global int * foo, int size) {\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\nvoid success_nokernel_barrier_global_id(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_global_id(0);\n}\n\nvoid success_nokernel_barrier_local_id(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_local_id(0);\n}\n\nvoid success_nokernel_barrier_both_ids(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int gid = get_global_id(0);\n  int lid = get_local_id(0);\n}\n#endif\n\n#ifdef NEWCLOLDAOC  // OpenCL 2.0 Altera Offline Compiler < 17.1\nvoid __kernel error_barrier_no_id(__global int * foo, int size) {\n  // CHECK-MESSAGES-NEWCLOLDAOC: :[[@LINE-1]]:15: warning: kernel function 'error_barrier_no_id' does not call 'get_global_id' or 'get_local_id' and will be treated as a single work-item [altera-single-work-item-barrier]\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  // CHECK-MESSAGES-NEWCLOLDAOC: :[[@LINE-1]]:3: note: barrier call is in a single work-item and may error out\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\nvoid __kernel success_barrier_global_id(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_global_id(0);\n}\n\nvoid __kernel success_barrier_local_id(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_local_id(0);\n}\n\nvoid __kernel success_barrier_both_ids(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int gid = get_global_id(0);\n  int lid = get_local_id(0);\n}\n\nvoid success_nokernel_barrier_no_id(__global int * foo, int size) {\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\nvoid success_nokernel_barrier_global_id(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_global_id(0);\n}\n\nvoid success_nokernel_barrier_local_id(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_local_id(0);\n}\n\nvoid success_nokernel_barrier_both_ids(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int gid = get_global_id(0);\n  int lid = get_local_id(0);\n}\n#endif\n\n#ifdef OLDCLNEWAOC  // OpenCL 1.2 Altera Offline Compiler >= 17.1\nvoid __kernel error_barrier_no_id(__global int * foo, int size) {\n  // CHECK-MESSAGES-OLDCLNEWAOC: :[[@LINE-1]]:15: warning: kernel function 'error_barrier_no_id' does not call an ID function and may be a viable single work-item, but will be forced to execute as an NDRange [altera-single-work-item-barrier]\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  // CHECK-MESSAGES-OLDCLNEWAOC: :[[@LINE-1]]:3: note: barrier call will force NDRange execution; if single work-item semantics are desired a mem_fence may be more efficient\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\n__attribute__ ((reqd_work_group_size(1,1,1)))\nvoid __kernel error_barrier_no_id_work_group_size(__global int * foo, int size) {\n  // CHECK-MESSAGES-OLDCLNEWAOC: :[[@LINE-1]]:15: warning: kernel function 'error_barrier_no_id_work_group_size' does not call an ID function and may be a viable single work-item, but will be forced to execute as an NDRange [altera-single-work-item-barrier]\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  // CHECK-MESSAGES-OLDCLNEWAOC: :[[@LINE-1]]:3: note: barrier call will force NDRange execution; if single work-item semantics are desired a mem_fence may be more efficient\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\n__attribute__ ((reqd_work_group_size(2,1,1)))\nvoid __kernel success_barrier_no_id_work_group_size(__global int * foo, int size) {\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\nvoid __kernel success_barrier_global_id(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_global_id(0);\n}\n\nvoid __kernel success_barrier_local_id(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_local_id(0);\n}\n\nvoid __kernel success_barrier_both_ids(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int gid = get_global_id(0);\n  int lid = get_local_id(0);\n}\n\nvoid success_nokernel_barrier_no_id(__global int * foo, int size) {\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\nvoid success_nokernel_barrier_global_id(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_global_id(0);\n}\n\nvoid success_nokernel_barrier_local_id(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_local_id(0);\n}\n\nvoid success_nokernel_barrier_both_ids(__global int * foo, int size) {\n  barrier(CLK_GLOBAL_MEM_FENCE);\n  int gid = get_global_id(0);\n  int lid = get_local_id(0);\n}\n#endif\n\n#ifdef NEWCLNEWAOC  // OpenCL 2.0 Altera Offline Compiler >= 17.1\nvoid __kernel error_barrier_no_id(__global int * foo, int size) {\n  // CHECK-MESSAGES-NEWCLNEWAOC: :[[@LINE-1]]:15: warning: kernel function 'error_barrier_no_id' does not call an ID function and may be a viable single work-item, but will be forced to execute as an NDRange [altera-single-work-item-barrier]\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  // CHECK-MESSAGES-NEWCLNEWAOC: :[[@LINE-1]]:3: note: barrier call will force NDRange execution; if single work-item semantics are desired a mem_fence may be more efficient\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\n__attribute__ ((reqd_work_group_size(1,1,1)))\nvoid __kernel error_barrier_no_id_work_group_size(__global int * foo, int size) {\n  // CHECK-MESSAGES-NEWCLNEWAOC: :[[@LINE-1]]:15: warning: kernel function 'error_barrier_no_id_work_group_size' does not call an ID function and may be a viable single work-item, but will be forced to execute as an NDRange [altera-single-work-item-barrier]\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  // CHECK-MESSAGES-NEWCLNEWAOC: :[[@LINE-1]]:3: note: barrier call will force NDRange execution; if single work-item semantics are desired a mem_fence may be more efficient\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\n__attribute__ ((reqd_work_group_size(2,1,1)))\nvoid __kernel success_barrier_no_id_work_group_size(__global int * foo, int size) {\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\nvoid __kernel success_barrier_global_id(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_global_id(0);\n}\n\nvoid __kernel success_barrier_local_id(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_local_id(0);\n}\n\nvoid __kernel success_barrier_both_ids(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int gid = get_global_id(0);\n  int lid = get_local_id(0);\n}\n\nvoid success_nokernel_barrier_no_id(__global int * foo, int size) {\n  for (int j = 0; j < 256; j++) {\n\tfor (int i = 256; i < size; i+= 256) {\n      foo[j] += foo[j+i];\n    }\n  }\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  for (int i = 1; i < 256; i++) {\n\tfoo[0] += foo[i];\n  }\n}\n\nvoid success_nokernel_barrier_global_id(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_global_id(0);\n}\n\nvoid success_nokernel_barrier_local_id(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int tid = get_local_id(0);\n}\n\nvoid success_nokernel_barrier_both_ids(__global int * foo, int size) {\n  work_group_barrier(CLK_GLOBAL_MEM_FENCE);\n  int gid = get_global_id(0);\n  int lid = get_local_id(0);\n}\n#endif"
    }
  ]
}