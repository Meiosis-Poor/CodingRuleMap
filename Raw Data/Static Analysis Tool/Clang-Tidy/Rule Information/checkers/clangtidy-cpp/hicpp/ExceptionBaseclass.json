{
  "name": "ExceptionBaseclass",
  "language": "cpp",
  "description": ".. title:: clang-tidy - hicpp-exception-baseclass",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 57,
  "branches": 4,
  "apis": 50,
  "test": [
    {
      "description": null,
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n// RUN: %check_clang_tidy %s hicpp-exception-baseclass %t -- -- -fcxx-exceptions\n\nnamespace std {\nclass exception {};\nclass invalid_argument : public exception {};\n} // namespace std\n\nclass derived_exception : public std::exception {};\nclass deep_hierarchy : public derived_exception {};\nclass non_derived_exception {};\nclass terrible_idea : public non_derived_exception, public derived_exception {};\n\n// FIXME: More complicated kinds of inheritance should be checked later, but there is\n// currently no way use ASTMatchers for this kind of task.\n#if 0\nclass bad_inheritance : private std::exception {};\nclass no_good_inheritance : protected std::exception {};\nclass really_creative : public non_derived_exception, private std::exception {};\n#endif\n\nvoid problematic() {\n  try {\n    throw int(42);\n    // CHECK-NOTES: [[@LINE-1]]:11: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n  } catch (int e) {\n  }\n  throw int(42);\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n\n  try {\n    throw 12;\n    // CHECK-NOTES: [[@LINE-1]]:11: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n  } catch (...) {\n    throw; // Ok, even if the type is not known, conforming code can never rethrow a non-std::exception object.\n  }\n\n  try {\n    throw non_derived_exception();\n    // CHECK-NOTES: [[@LINE-1]]:11: warning: throwing an exception whose type 'non_derived_exception' is not derived from 'std::exception'\n    // CHECK-NOTES: 10:1: note: type defined here\n  } catch (non_derived_exception &e) {\n  }\n  throw non_derived_exception();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'non_derived_exception' is not derived from 'std::exception'\n  // CHECK-NOTES: 10:1: note: type defined here\n\n// FIXME: More complicated kinds of inheritance should be checked later, but there is\n// currently no way use ASTMatchers for this kind of task.\n#if 0\n  // Handle private inheritance cases correctly.\n  try {\n    throw bad_inheritance();\n    // CHECK NOTES: [[@LINE-1]]:11: warning: throwing an exception whose type 'bad_inheritance' is not derived from 'std::exception'\n    // CHECK NOTES: 11:1: note: type defined here\n    throw no_good_inheritance();\n    // CHECK NOTES: [[@LINE-1]]:11: warning: throwing an exception whose type 'no_good_inheritance' is not derived from 'std::exception'\n    // CHECK NOTES: 12:1: note: type defined here\n    throw really_creative();\n    // CHECK NOTES: [[@LINE-1]]:11: warning: throwing an exception whose type 'really_creative' is not derived from 'std::exception'\n    // CHECK NOTES: 13:1: note: type defined here\n  } catch (...) {\n  }\n  throw bad_inheritance();\n  // CHECK NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'bad_inheritance' is not derived from 'std::exception'\n  // CHECK NOTES: 11:1: note: type defined here\n  throw no_good_inheritance();\n  // CHECK NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'no_good_inheritance' is not derived from 'std::exception'\n  // CHECK NOTES: 12:1: note: type defined here\n  throw really_creative();\n  // CHECK NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'really_creative' is not derived from 'std::exception'\n  // CHECK NOTES: 13:1: note: type defined here\n#endif\n}\n\nvoid allowed_throws() {\n  try {\n    throw std::exception();     // Ok\n  } catch (std::exception &e) { // Ok\n  }\n  throw std::exception();\n\n  try {\n    throw derived_exception();     // Ok\n  } catch (derived_exception &e) { // Ok\n  }\n  throw derived_exception(); // Ok\n\n  try {\n    throw deep_hierarchy();     // Ok, multiple levels of inheritance\n  } catch (deep_hierarchy &e) { // Ok\n  }\n  throw deep_hierarchy(); // Ok\n\n  try {\n    throw terrible_idea();      // Ok, but multiple inheritance isn't clean\n  } catch (std::exception &e) { // Can be caught as std::exception, even with multiple inheritance\n  }\n  throw terrible_idea(); // Ok, but multiple inheritance\n}\n\nvoid test_lambdas() {\n  auto BadLambda = []() { throw int(42); };\n  // CHECK-NOTES: [[@LINE-1]]:33: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n  auto GoodLambda = []() { throw derived_exception(); };\n}\n\n// Templated function that throws exception based on template type\ntemplate <typename T>\nvoid ThrowException() { throw T(); }\n// CHECK-NOTES: [[@LINE-1]]:31: warning: throwing an exception whose type 'bad_generic_exception<int>' is not derived from 'std::exception'\n// CHECK-NOTES: [[@LINE-2]]:31: note: type 'bad_generic_exception<int>' is a template instantiation of 'T'\n// CHECK-NOTES: [[@LINE+25]]:1: note: type defined here\n\n// CHECK-NOTES: [[@LINE-5]]:31: warning: throwing an exception whose type 'bad_generic_exception<std::exception>' is not derived from 'std::exception'\n// CHECK-NOTES: [[@LINE-6]]:31: note: type 'bad_generic_exception<std::exception>' is a template instantiation of 'T'\n// CHECK-NOTES: [[@LINE+21]]:1: note: type defined here\n\n// CHECK-NOTES: [[@LINE-9]]:31: warning: throwing an exception whose type 'exotic_exception<non_derived_exception>' is not derived from 'std::exception'\n// CHECK-NOTES: [[@LINE-10]]:31: note: type 'exotic_exception<non_derived_exception>' is a template instantiation of 'T'\n// CHECK-NOTES: [[@LINE+20]]:1: note: type defined here\n\n// CHECK-NOTES: [[@LINE-13]]:31: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n// CHECK-NOTES: [[@LINE-14]]:31: note: type 'int' is a template instantiation of 'T'\n\n// CHECK-NOTES: [[@LINE-16]]:31: warning: throwing an exception whose type 'non_derived_exception' is not derived from 'std::exception'\n// CHECK-NOTES: [[@LINE-17]]:31: note: type 'non_derived_exception' is a template instantiation of 'T'\n// CHECK-NOTES: 10:1: note: type defined here\n\n#define THROW_EXCEPTION(CLASS) ThrowException<CLASS>()\n#define THROW_BAD_EXCEPTION throw int(42);\n#define THROW_GOOD_EXCEPTION throw std::exception();\n#define THROW_DERIVED_EXCEPTION throw deep_hierarchy();\n\ntemplate <typename T>\nclass generic_exception : std::exception {};\n\ntemplate <typename T>\nclass bad_generic_exception {};\n\ntemplate <typename T>\nclass exotic_exception : public T {};\n\nvoid generic_exceptions() {\n  THROW_EXCEPTION(int);\n  THROW_EXCEPTION(non_derived_exception);\n  THROW_EXCEPTION(std::exception);    // Ok\n  THROW_EXCEPTION(derived_exception); // Ok\n  THROW_EXCEPTION(deep_hierarchy);    // Ok\n\n  THROW_BAD_EXCEPTION;\n  // CHECK-NOTES: [[@LINE-1]]:3: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n  // CHECK-NOTES: [[@LINE-22]]:35: note: expanded from macro 'THROW_BAD_EXCEPTION'\n  THROW_GOOD_EXCEPTION;\n  THROW_DERIVED_EXCEPTION;\n\n  throw generic_exception<int>();            // Ok,\n  THROW_EXCEPTION(generic_exception<float>); // Ok\n\n  throw bad_generic_exception<int>();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'bad_generic_exception<int>' is not derived from 'std::exception'\n  // CHECK-NOTES: [[@LINE-24]]:1: note: type defined here\n  throw bad_generic_exception<std::exception>();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'bad_generic_exception<std::exception>' is not derived from 'std::exception'\n  // CHECK-NOTES: [[@LINE-27]]:1: note: type defined here\n  THROW_EXCEPTION(bad_generic_exception<int>);\n  THROW_EXCEPTION(bad_generic_exception<std::exception>);\n\n  throw exotic_exception<non_derived_exception>();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'exotic_exception<non_derived_exception>' is not derived from 'std::exception'\n  // CHECK-NOTES: [[@LINE-30]]:1: note: type defined here\n  THROW_EXCEPTION(exotic_exception<non_derived_exception>);\n\n  throw exotic_exception<derived_exception>();          // Ok\n  THROW_EXCEPTION(exotic_exception<derived_exception>); // Ok\n}\n\n// Test for typedefed exception types\ntypedef int TypedefedBad;\ntypedef derived_exception TypedefedGood;\nusing UsingBad = int;\nusing UsingGood = deep_hierarchy;\n\nvoid typedefed() {\n  throw TypedefedBad();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'TypedefedBad' (aka 'int') is not derived from 'std::exception'\n  // CHECK-NOTES: [[@LINE-8]]:1: note: type defined here\n  throw TypedefedGood(); // Ok\n\n  throw UsingBad();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'UsingBad' (aka 'int') is not derived from 'std::exception'\n  // CHECK-NOTES: [[@LINE-11]]:1: note: type defined here\n  throw UsingGood(); // Ok\n}\n\n// Fix PR37913\nstruct invalid_argument_maker {\n  ::std::invalid_argument operator()() const;\n};\nstruct int_maker {\n  int operator()() const;\n};\n\ntemplate <typename T>\nvoid templated_thrower() {\n  throw T{}();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n}\ntemplate <typename T>\nvoid templated_thrower2() {\n  T ExceptionFactory; // This test found a <dependant-type> which did not happend with 'throw T{}()'\n  throw ExceptionFactory();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n}\n\nvoid exception_created_with_function() {\n  templated_thrower<invalid_argument_maker>();\n  templated_thrower<int_maker>();\n\n  templated_thrower2<invalid_argument_maker>();\n  templated_thrower2<int_maker>();\n\n  throw invalid_argument_maker{}();\n  throw int_maker{}();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n}\n\nstruct invalid_argument_factory {\n  ::std::invalid_argument make_exception() const;\n};\n\nstruct int_factory {\n  int make_exception() const;\n};\n\ntemplate <typename T>\nvoid templated_factory() {\n  T f;\n  throw f.make_exception();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n}\ntemplate <typename T>\nvoid templated_factory2() {\n  throw T().make_exception();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n}\n\nvoid exception_from_factory() {\n  templated_factory<invalid_argument_factory>();\n  templated_factory<int_factory>();\n\n  templated_factory2<invalid_argument_factory>();\n  templated_factory2<int_factory>();\n\n  throw invalid_argument_factory().make_exception();\n  throw int_factory().make_exception();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n\n  invalid_argument_factory inv_f;\n  throw inv_f.make_exception();\n\n  int_factory int_f;\n  throw int_f.make_exception();\n  // CHECK-NOTES: [[@LINE-1]]:9: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n}\n\ntemplate <typename T>\nstruct ThrowClassTemplateParam {\n  ThrowClassTemplateParam() { throw T(); }\n  // CHECK-NOTES: [[@LINE-1]]:37: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n  // CHECK-NOTES: [[@LINE-2]]:37: note: type 'int' is a template instantiation of 'T'\n};\n\ntemplate <int V>\nstruct ThrowValueTemplate {\n  ThrowValueTemplate() { throw V; }\n  // CHECK-NOTES: [[@LINE-1]]:32: warning: throwing an exception whose type 'int' is not derived from 'std::exception'\n};\n\nvoid class_templates() {\n  ThrowClassTemplateParam<int> IntThrow;\n  ThrowClassTemplateParam<std::invalid_argument> ArgThrow;\n\n  ThrowValueTemplate<42> ValueThrow;\n}"
    }
  ]
}