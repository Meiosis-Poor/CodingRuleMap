{
  "name": "SignedBitwise",
  "language": "cpp",
  "description": ".. title:: clang-tidy - hicpp-signed-bitwise",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 102,
  "branches": 9,
  "apis": 69,
  "test": [
    {
      "description": null,
      "expected-problems": 50,
      "expected-linenumbers": [
        34,
        36,
        38,
        41,
        43,
        45,
        58,
        60,
        62,
        66,
        67,
        73,
        75,
        80,
        82,
        87,
        89,
        94,
        96,
        100,
        102,
        116,
        118,
        125,
        128,
        131,
        134,
        137,
        146,
        148,
        151,
        153,
        156,
        158,
        161,
        166,
        168,
        170,
        212,
        214,
        216,
        218,
        220,
        222,
        224,
        226,
        228,
        235,
        237,
        239
      ],
      "code": "\n// RUN: %check_clang_tidy %s hicpp-signed-bitwise %t -- -- --target=x86_64-linux\n\n// These could cause false positives and should not be considered.\nstruct StreamClass {\n};\nStreamClass &operator<<(StreamClass &os, unsigned int i) {\n  return os;\n}\nStreamClass &operator<<(StreamClass &os, int i) {\n  return os;\n}\nStreamClass &operator>>(StreamClass &os, unsigned int i) {\n  return os;\n}\nStreamClass &operator>>(StreamClass &os, int i) {\n  return os;\n}\nstruct AnotherStream {\n  AnotherStream &operator<<(unsigned char c) { return *this; }\n  AnotherStream &operator<<(signed char c) { return *this; }\n\n  AnotherStream &operator>>(unsigned char c) { return *this; }\n  AnotherStream &operator>>(signed char c) { return *this; }\n};\n\nvoid binary_bitwise() {\n  int SValue = 42;\n  int SResult;\n\n  unsigned int UValue = 42;\n  unsigned int UResult;\n\n  SResult = SValue & 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use of a signed integer operand with a binary bitwise operator\n  SResult = SValue & -1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use of a signed integer operand with a binary bitwise operator\n  SResult = SValue & SValue;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use of a signed integer operand with a binary bitwise operator\n\n  UResult = SValue & 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use of a signed integer operand with a binary bitwise operator\n  UResult = SValue & -1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use of a signed integer operand with a binary bitwise operator\n  UResult&= 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use of a signed integer operand with a binary bitwise operator\n\n  UResult = UValue & 1u;     // Ok\n  UResult = UValue & UValue; // Ok\n  UResult&= 2u;              // Ok\n\n  unsigned char UByte1 = 0u;\n  unsigned char UByte2 = 16u;\n  signed char SByte1 = 0;\n  signed char SByte2 = 16;\n\n  UByte1 = UByte1 & UByte2; // Ok\n  UByte1 = SByte1 & UByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: use of a signed integer operand with a binary bitwise operator\n  UByte1 = SByte1 & SByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: use of a signed integer operand with a binary bitwise operator\n  SByte1 = SByte1 & SByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: use of a signed integer operand with a binary bitwise operator\n\n  // More complex expressions.\n  UResult = UValue & (SByte1 + (SByte1 | SByte2));\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: use of a signed integer operand with a binary bitwise operator\n  // CHECK-MESSAGES: :[[@LINE-2]]:33: warning: use of a signed integer operand with a binary bitwise operator\n\n  // The rest is to demonstrate functionality but all operators are matched equally.\n  // Therefore functionality is the same for all binary operations.\n  UByte1 = UByte1 | UByte2; // Ok\n  UByte1 = UByte1 | SByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: use of a signed integer operand with a binary bitwise operator\n  UByte1|= SByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: use of a signed integer operand with a binary bitwise operator\n  UByte1|= UByte2; // Ok\n\n  UByte1 = UByte1 ^ UByte2; // Ok\n  UByte1 = UByte1 ^ SByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: use of a signed integer operand with a binary bitwise operator\n  UByte1^= SByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:12: warning: use of a signed integer operand with a binary bitwise operator\n  UByte1^= UByte2; // Ok\n\n  UByte1 = UByte1 >> UByte2; // Ok\n  UByte1 = UByte1 >> SByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: use of a signed integer operand with a binary bitwise operator\n  UByte1>>= SByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use of a signed integer operand with a binary bitwise operator\n  UByte1>>= UByte2; // Ok\n\n  UByte1 = UByte1 << UByte2; // Ok\n  UByte1 = UByte1 << SByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: use of a signed integer operand with a binary bitwise operator\n  UByte1<<= SByte2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use of a signed integer operand with a binary bitwise operator\n  UByte1<<= UByte2; // Ok\n\n  int SignedInt1 = 1 << 12;\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: use of a signed integer operand with a binary bitwise operator\n  int SignedInt2 = 1u << 12;\n  // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: use of a signed integer operand with a binary bitwise operator\n}\n\nvoid f1(unsigned char c) {}\nvoid f2(signed char c) {}\nvoid f3(int c) {}\n\nvoid unary_bitwise() {\n  unsigned char UByte1 = 0u;\n  signed char SByte1 = 0;\n\n  UByte1 = ~UByte1; // Ok\n  SByte1 = ~UByte1;\n  SByte1 = ~SByte1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use of a signed integer operand with a unary bitwise operator\n  UByte1 = ~SByte1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: use of a signed integer operand with a unary bitwise operator\n\n  unsigned int UInt = 0u;\n  int SInt = 0;\n\n  f1(~UByte1); // Ok\n  f1(~SByte1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a unary bitwise operator\n  f1(~UInt);\n  f1(~SInt);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a unary bitwise operator\n  f2(~UByte1);\n  f2(~SByte1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a unary bitwise operator\n  f2(~UInt);\n  f2(~SInt);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a unary bitwise operator\n  f3(~UByte1); // Ok\n  f3(~SByte1);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a unary bitwise operator\n}\n\n/// HICPP uses these examples to demonstrate the rule.\nvoid standard_examples() {\n  int i = 3;\n  unsigned int k = 0u;\n\n  int r = i << -1; // Emits -Wshift-count-negative from clang\n  // CHECK-MESSAGES: :[[@LINE-1]]:11: warning: use of a signed integer operand with a binary bitwise operator\n  r = i << 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a binary bitwise operator\n\n  r = -1 >> -1; // Emits -Wshift-count-negative from clang\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a binary bitwise operator\n  r = -1 >> 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a binary bitwise operator\n\n  r = -1 >> i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a binary bitwise operator\n  r = -1 >> -i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a binary bitwise operator\n\n  r = ~0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: use of a signed integer operand with a unary bitwise operator\n  r = ~0u; // Ok\n  k = ~k;  // Ok\n\n  unsigned int u = (-1) & 2u;\n  // CHECK-MESSAGES: :[[@LINE-1]]:20: warning: use of a signed integer operand with a binary bitwise operator\n  u = (-1) | 1u;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a binary bitwise operator\n  u = (-1) ^ 1u;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use of a signed integer operand with a binary bitwise operator\n}\n\nvoid streams_should_work() {\n  StreamClass s;\n  s << 1u; // Ok\n  s << 1;  // Ok\n  s >> 1;  // Ok\n  s >> 1u; // Ok\n\n  AnotherStream as;\n  unsigned char uc = 1u;\n  signed char sc = 1;\n  as << uc; // Ok\n  as << sc; // Ok\n  as >> uc; // Ok\n  as >> sc; // Ok\n}\n\nenum OldEnum {\n  ValueOne,\n  ValueTwo,\n};\n\nenum OldSigned : int {\n  IntOne,\n  IntTwo,\n};\n\nvoid classicEnums() {\n  OldEnum e1 = ValueOne, e2 = ValueTwo;\n  int e3;                   // Using the enum type, results in an error.\n  e3 = ValueOne | ValueTwo; // Ok\n  e3 = ValueOne & ValueTwo; // Ok\n  e3 = ValueOne ^ ValueTwo; // Ok\n  e3 = e1 | e2;             // Ok\n  e3 = e1 & e2;             // Ok\n  e3 = e1 ^ e2;             // Ok\n\n  OldSigned s1 = IntOne, s2 = IntTwo;\n  int s3;\n  s3 = IntOne | IntTwo; // Signed\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: use of a signed integer operand with a binary bitwise operator\n  s3|= IntTwo; // Signed\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use of a signed integer operand with a binary bitwise operator\n  s3 = IntOne & IntTwo; // Signed\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: use of a signed integer operand with a binary bitwise operator\n  s3&= IntTwo; // Signed\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use of a signed integer operand with a binary bitwise operator\n  s3 = IntOne ^ IntTwo; // Signed\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: use of a signed integer operand with a binary bitwise operator\n  s3^= IntTwo; // Signed\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: use of a signed integer operand with a binary bitwise operator\n  s3 = s1 | s2; // Signed\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: use of a signed integer operand with a binary bitwise operator\n  s3 = s1 & s2; // Signed\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: use of a signed integer operand with a binary bitwise operator\n  s3 = s1 ^ s2; // Signed\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: use of a signed integer operand with a binary bitwise operator\n}\n\nenum EnumConstruction {\n  one = 1,\n  two = 2,\n  test1 = 1 << 12,\n  // CHECK-MESSAGES: [[@LINE-1]]:11: warning: use of a signed integer operand with a binary bitwise operator\n  test2 = one << two,\n  // CHECK-MESSAGES: [[@LINE-1]]:11: warning: use of a signed integer operand with a binary bitwise operator\n  test3 = 1u << 12,\n  // CHECK-MESSAGES: [[@LINE-1]]:17: warning: use of a signed integer operand with a binary bitwise operator\n};"
    }
  ]
}