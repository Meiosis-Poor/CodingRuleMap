{
  "name": "AvoidNonConstGlobalVariables",
  "language": "cpp",
  "description": ".. title:: clang-tidy - cppcoreguidelines-avoid-non-const-global-variables",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 79,
  "branches": 3,
  "apis": 57,
  "test": [
    {
      "description": null,
      "expected-problems": 50,
      "expected-linenumbers": [
        6,
        9,
        12,
        13,
        16,
        20,
        28,
        43,
        44,
        48,
        49,
        64,
        67,
        68,
        71,
        74,
        75,
        77,
        82,
        85,
        95,
        107,
        110,
        111,
        114,
        117,
        122,
        130,
        138,
        139,
        152,
        155,
        156,
        159,
        161,
        166,
        174,
        182,
        183,
        192,
        195,
        196,
        199,
        202,
        207,
        215,
        223,
        224,
        233,
        237
      ],
      "code": "\n// RUN: %check_clang_tidy %s -check-suffixes=,DEFAULT cppcoreguidelines-avoid-non-const-global-variables %t\n// RUN: %check_clang_tidy %s -check-suffixes=,INTERNAL-LINKAGE cppcoreguidelines-avoid-non-const-global-variables %t -- \\\n// RUN: -config=\"{CheckOptions: {cppcoreguidelines-avoid-non-const-global-variables.AllowInternalLinkage : 'true'}}\"\n\nint nonConstInt = 0;\n// CHECK-MESSAGES: :[[@LINE-1]]:5: warning: variable 'nonConstInt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nint &nonConstIntReference = nonConstInt;\n// CHECK-MESSAGES: :[[@LINE-1]]:6: warning: variable 'nonConstIntReference' provides global access to a non-const object; consider making the referenced data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nint *pointerToNonConstInt = &nonConstInt;\n// CHECK-MESSAGES: :[[@LINE-1]]:6: warning: variable 'pointerToNonConstInt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES: :[[@LINE-2]]:6: warning: variable 'pointerToNonConstInt' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nint *const constPointerToNonConstInt = &nonConstInt;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: variable 'constPointerToNonConstInt' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nnamespace namespace_name {\nint nonConstNamespaceInt = 0;\n// CHECK-MESSAGES: :[[@LINE-1]]:5: warning: variable 'nonConstNamespaceInt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst int constNamespaceInt = 0;\n} // namespace namespace_name\n\nconst int constInt = 0;\n\nconst int *pointerToConstInt = &constInt;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: variable 'pointerToConstInt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst int *const constPointerToConstInt = &constInt;\n\nconst int &constReferenceToConstInt = constInt;\n\nconstexpr int constexprInt = 0;\n\nint function() {\n  int nonConstReturnValue = 0;\n  return nonConstReturnValue;\n}\n\nnamespace {\nint nonConstAnonymousNamespaceInt = 0;\n// CHECK-MESSAGES-DEFAULT: :[[@LINE-1]]:5: warning: variable 'nonConstAnonymousNamespaceInt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES-INTERNAL-LINKAGE-NOT: :[[@LINE-2]]:5: warning: variable 'nonConstAnonymousNamespaceInt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n} // namespace\n\nstatic int nonConstStaticInt = 0;\n// CHECK-MESSAGES-DEFAULT: :[[@LINE-1]]:12: warning: variable 'nonConstStaticInt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES-INTERNAL-LINKAGE-NOT: :[[@LINE-2]]:12: warning: variable 'nonConstStaticInt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nstatic const int constStaticInt = 0;\n\nclass DummyClass {\npublic:\n  int nonConstPublicMemberVariable = 0;\n  const int constPublicMemberVariable = 0;\n\nprivate:\n  int nonConstPrivateMemberVariable = 0;\n  const int constPrivateMemberVariable = 0;\n};\n\nDummyClass nonConstClassInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: variable 'nonConstClassInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nDummyClass *pointerToNonConstDummyClass = &nonConstClassInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: variable 'pointerToNonConstDummyClass' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES: :[[@LINE-2]]:13: warning: variable 'pointerToNonConstDummyClass' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nDummyClass &referenceToNonConstDummyClass = nonConstClassInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: variable 'referenceToNonConstDummyClass' provides global access to a non-const object; consider making the referenced data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nint *nonConstPointerToMember = &nonConstClassInstance.nonConstPublicMemberVariable;\n// CHECK-MESSAGES: :[[@LINE-1]]:6: warning: variable 'nonConstPointerToMember' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES: :[[@LINE-2]]:6: warning: variable 'nonConstPointerToMember' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\nint *const constPointerToNonConstMember = &nonConstClassInstance.nonConstPublicMemberVariable;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: variable 'constPointerToNonConstMember' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyClass constClassInstance;\n\nDummyClass *const constPointerToNonConstDummyClass = &nonConstClassInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:19: warning: variable 'constPointerToNonConstDummyClass' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyClass *nonConstPointerToConstDummyClass = &constClassInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:19: warning: variable 'nonConstPointerToConstDummyClass' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyClass *const constPointerToConstDummyClass = &constClassInstance;\n\nconst int *const constPointerToConstMember = &constClassInstance.nonConstPublicMemberVariable;\n\nconst DummyClass &constReferenceToDummyClass = constClassInstance;\n\nnamespace namespace_name {\nDummyClass nonConstNamespaceClassInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: variable 'nonConstNamespaceClassInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyClass constDummyClassInstance;\n} // namespace namespace_name\n\n// CHECKING FOR NON-CONST GLOBAL ENUM /////////////////////////////////////////\nenum DummyEnum {\n  first,\n  second\n};\n\nDummyEnum nonConstDummyEnumInstance = DummyEnum::first;\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: variable 'nonConstDummyEnumInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nDummyEnum *pointerToNonConstDummyEnum = &nonConstDummyEnumInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: variable 'pointerToNonConstDummyEnum' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES: :[[@LINE-2]]:12: warning: variable 'pointerToNonConstDummyEnum' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nDummyEnum &referenceToNonConstDummyEnum = nonConstDummyEnumInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: variable 'referenceToNonConstDummyEnum' provides global access to a non-const object; consider making the referenced data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nDummyEnum *const constPointerToNonConstDummyEnum = &nonConstDummyEnumInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: warning: variable 'constPointerToNonConstDummyEnum' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyEnum constDummyEnumInstance = DummyEnum::first;\n\nconst DummyEnum *nonConstPointerToConstDummyEnum = &constDummyEnumInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:18: warning: variable 'nonConstPointerToConstDummyEnum' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyEnum *const constPointerToConstDummyEnum = &constDummyEnumInstance;\n\nconst DummyEnum &referenceToConstDummyEnum = constDummyEnumInstance;\n\nnamespace namespace_name {\nDummyEnum nonConstNamespaceEnumInstance = DummyEnum::first;\n// CHECK-MESSAGES: :[[@LINE-1]]:11: warning: variable 'nonConstNamespaceEnumInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyEnum constNamespaceEnumInstance = DummyEnum::first;\n} // namespace namespace_name\n\nnamespace {\nDummyEnum nonConstAnonymousNamespaceEnumInstance = DummyEnum::first;\n}\n// CHECK-MESSAGES-DEFAULT: :[[@LINE-2]]:11: warning: variable 'nonConstAnonymousNamespaceEnumInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES-INTERNAL-LINKAGE-NOT: :[[@LINE-2]]:11: warning: variable 'nonConstAnonymousNamespaceEnumInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\n// CHECKING FOR NON-CONST GLOBAL STRUCT ///////////////////////////////////////\nstruct DummyStruct {\npublic:\n  int structIntElement = 0;\n  const int constStructIntElement = 0;\n\nprivate:\n  int privateStructIntElement = 0;\n};\n\nDummyStruct nonConstDummyStructInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: variable 'nonConstDummyStructInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nDummyStruct *pointerToNonConstDummyStruct = &nonConstDummyStructInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning: variable 'pointerToNonConstDummyStruct' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES: :[[@LINE-2]]:14: warning: variable 'pointerToNonConstDummyStruct' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nDummyStruct &referenceToNonConstDummyStruct = nonConstDummyStructInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:14: warning: variable 'referenceToNonConstDummyStruct' provides global access to a non-const object; consider making the referenced data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\nDummyStruct *const constPointerToNonConstDummyStruct = &nonConstDummyStructInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:20: warning: variable 'constPointerToNonConstDummyStruct' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyStruct constDummyStructInstance;\n\nconst DummyStruct *nonConstPointerToConstDummyStruct = &constDummyStructInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:20: warning: variable 'nonConstPointerToConstDummyStruct' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyStruct *const constPointerToConstDummyStruct = &constDummyStructInstance;\n\nconst DummyStruct &referenceToConstDummyStruct = constDummyStructInstance;\n\nnamespace namespace_name {\nDummyStruct nonConstNamespaceDummyStructInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: variable 'nonConstNamespaceDummyStructInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyStruct constNamespaceDummyStructInstance;\n} // namespace namespace_name\n\nnamespace {\nDummyStruct nonConstAnonymousNamespaceStructInstance;\n}\n// CHECK-MESSAGES-DEFAULT: :[[@LINE-2]]:13: warning: variable 'nonConstAnonymousNamespaceStructInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES-INTERNAL-LINKAGE-NOT: :[[@LINE-2]]:11: warning: variable 'nonConstAnonymousNamespaceEnumInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\n// CHECKING FOR NON-CONST GLOBAL UNION ////////////////////////////////////////\nunion DummyUnion {\n  int unionInteger;\n  char unionChar;\n};\n\nDummyUnion nonConstUnionIntInstance = {0x0};\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: variable 'nonConstUnionIntInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nDummyUnion *nonConstPointerToNonConstUnionInt = &nonConstUnionIntInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: variable 'nonConstPointerToNonConstUnionInt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES: :[[@LINE-2]]:13: warning: variable 'nonConstPointerToNonConstUnionInt' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nDummyUnion *const constPointerToNonConstUnionInt = &nonConstUnionIntInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:19: warning: variable 'constPointerToNonConstUnionInt' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nDummyUnion &referenceToNonConstUnionInt = nonConstUnionIntInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:13: warning: variable 'referenceToNonConstUnionInt' provides global access to a non-const object; consider making the referenced data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyUnion constUnionIntInstance = {0x0};\n\nconst DummyUnion *nonConstPointerToConstUnionInt = &constUnionIntInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:19: warning: variable 'nonConstPointerToConstUnionInt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyUnion *const constPointerToConstUnionInt = &constUnionIntInstance;\n\nconst DummyUnion &referenceToConstUnionInt = constUnionIntInstance;\n\nnamespace namespace_name {\nDummyUnion nonConstNamespaceDummyUnionInstance;\n// CHECK-MESSAGES: :[[@LINE-1]]:12: warning: variable 'nonConstNamespaceDummyUnionInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\nconst DummyUnion constNamespaceDummyUnionInstance = {0x0};\n} // namespace namespace_name\n\nnamespace {\nDummyUnion nonConstAnonymousNamespaceUnionInstance = {0x0};\n}\n// CHECK-MESSAGES-DEFAULT: :[[@LINE-2]]:12: warning: variable 'nonConstAnonymousNamespaceUnionInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n// CHECK-MESSAGES-INTERNAL-LINKAGE-NOT: :[[@LINE-3]]:12: warning: variable 'nonConstAnonymousNamespaceUnionInstance' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\n// CHECKING FOR NON-CONST GLOBAL FUNCTION POINTER /////////////////////////////\nint dummyFunction() {\n  return 0;\n}\n\ntypedef int (*functionPointer)();\nfunctionPointer fp1 = &dummyFunction;\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: variable 'fp1' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\ntypedef int (*const functionConstPointer)();\nfunctionPointer fp2 = &dummyFunction;\n// CHECK-MESSAGES: :[[@LINE-1]]:17: warning: variable 'fp2' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]\n\n// CHECKING FOR NON-CONST GLOBAL TEMPLATE VARIABLE ////////////////////////////\ntemplate <class T>\nconstexpr T templateVariable = T(0L);\n\n// CHECKING AGAINST FALSE POSITIVES INSIDE FUNCTION SCOPE /////////////////////\nint main() {\n  for (int i = 0; i < 3; ++i) {\n    static int staticNonConstLoopVariable = 42;\n    int nonConstLoopVariable = 42;\n    nonConstInt = nonConstLoopVariable + i + staticNonConstLoopVariable;\n  }\n}\n\n// CHECKING AGAINST FALSE POSITIVES INSIDE STRUCT SCOPE /////////////////////\nstruct StructWithStatic {\n  static DummyStruct nonConstDummyStructInstance;\n  static int value;\n  static int* valuePtr;\n  static int& valueRef;\n};\n\nDummyStruct StructWithStatic::nonConstDummyStructInstance;\nint StructWithStatic::value = 0;\nint* StructWithStatic::valuePtr = &StructWithStatic::value;\nint& StructWithStatic::valueRef = StructWithStatic::value;\n"
    }
  ]
}