{
  "name": "MissingStdForward",
  "language": "cpp",
  "description": ".. title:: clang-tidy - cppcoreguidelines-missing-std-forward",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 161,
  "branches": 9,
  "apis": 148,
  "test": [
    {
      "description": null,
      "expected-problems": 11,
      "expected-linenumbers": [
        34,
        40,
        46,
        53,
        62,
        66,
        70,
        80,
        88,
        94,
        103
      ],
      "code": "\n// RUN: %check_clang_tidy %s cppcoreguidelines-missing-std-forward %t -- -- -fno-delayed-template-parsing\n\n// NOLINTBEGIN\nnamespace std {\n\ntemplate <typename T> struct remove_reference      { using type = T; };\ntemplate <typename T> struct remove_reference<T&>  { using type = T; };\ntemplate <typename T> struct remove_reference<T&&> { using type = T; };\n\ntemplate <typename T> using remove_reference_t = typename remove_reference<T>::type;\n\ntemplate <typename T> constexpr T &&forward(remove_reference_t<T> &t) noexcept;\ntemplate <typename T> constexpr T &&forward(remove_reference_t<T> &&t) noexcept;\ntemplate <typename T> constexpr remove_reference_t<T> &&move(T &&x);\n\n} // namespace std\n// NOLINTEND\n\nstruct S {\n  S();\n  S(const S&);\n  S(S&&) noexcept;\n  S& operator=(const S&);\n  S& operator=(S&&) noexcept;\n};\n\ntemplate <class... Ts>\nvoid consumes_all(Ts&&...);\n\nnamespace positive_cases {\n\ntemplate <class T>\nvoid does_not_forward(T&& t) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: forwarding reference parameter 't' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n  T other = t;\n}\n\ntemplate <class T>\nvoid does_not_forward_invoked(T&& t) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:35: warning: forwarding reference parameter 't' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n  T other = t();\n}\n\ntemplate <class T>\nvoid forwards_pairwise(T&& t) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: forwarding reference parameter 't' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n  auto first = std::forward<T>(t.first);\n  auto second = std::forward<T>(t.second);\n}\n\ntemplate <class... Ts>\nvoid does_not_forward_pack(Ts&&... ts) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:36: warning: forwarding reference parameter 'ts' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n  consumes_all(ts...);\n}\n\ntemplate <class T>\nclass AClass {\n\n  template <class U>\n  AClass(U&& u) : data(u) {}\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: forwarding reference parameter 'u' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n\n  template <class U>\n  AClass& operator=(U&& u) { }\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: forwarding reference parameter 'u' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n\n  template <class U>\n  void mixed_params(T&& t, U&& u) {\n    // CHECK-MESSAGES: :[[@LINE-1]]:32: warning: forwarding reference parameter 'u' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n    T other1 = std::move(t);\n    U other2 = std::move(u);\n  }\n\n  T data;\n};\n\ntemplate <class T>\nvoid does_not_forward_in_evaluated_code(T&& t) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:45: warning: forwarding reference parameter 't' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n  using result_t = decltype(std::forward<T>(t));\n  unsigned len = sizeof(std::forward<T>(t));\n  T other = t;\n}\n\ntemplate <class T>\nvoid lambda_value_capture(T&& t) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:31: warning: forwarding reference parameter 't' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n  [=]() { T other = std::forward<T>(t); };\n}\n\ntemplate <class T>\nvoid lambda_value_capture_copy(T&& t) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:36: warning: forwarding reference parameter 't' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n  [&,t]() { T other = std::forward<T>(t); };\n}\n\ntemplate <typename X>\nvoid use(const X &x) {}\n\ntemplate <typename X, typename Y>\nvoid foo(X &&x, Y &&y) {\n  // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: forwarding reference parameter 'y' is never forwarded inside the function body [cppcoreguidelines-missing-std-forward]\n    use(std::forward<X>(x));\n    use(y);\n}\n\n} // namespace positive_cases\n\nnamespace negative_cases {\n\ntemplate <class T>\nvoid just_a_decl(T&&t);\n\ntemplate <class T>\nvoid does_forward(T&& t) {\n  T other = std::forward<T>(t);\n}\n\ntemplate <class... Ts>\nvoid does_forward_pack(Ts&&... ts) {\n  consumes_all(std::forward<Ts>(ts)...);\n}\n\nvoid pass_by_value(S s) {\n  S other = std::move(s);\n}\n\nvoid lvalue_ref(S& s) {\n  S other = std::move(s);\n}\n\nvoid rvalue_ref(S&& s) {\n  S other = std::move(s);\n}\n\ntemplate <class T>\nvoid templated_rvalue_ref(std::remove_reference_t<T>&& t) {\n  T other = std::move(t);\n}\n\ntemplate <class T>\nclass AClass {\n\n  template <class U>\n  AClass(U&& u) : data(std::forward<U>(u)) {}\n\n  template <class U>\n  AClass& operator=(U&& u) {\n    data = std::forward<U>(u);\n  }\n\n  void rvalue_ref(T&& t) {\n    T other = std::move(t);\n  }\n\n  T data;\n};\n\ntemplate <class T>\nvoid lambda_value_reference(T&& t) {\n  [&]() { T other = std::forward<T>(t); };\n}\n\ntemplate<typename T>\nvoid lambda_value_reference_capture_list_ref_1(T&& t) {\n    [=, &t] { T other = std::forward<T>(t); };\n}\n\ntemplate<typename T>\nvoid lambda_value_reference_capture_list_ref_2(T&& t) {\n    [&t] { T other = std::forward<T>(t); };\n}\n\ntemplate<typename T>\nvoid lambda_value_reference_capture_list(T&& t) {\n    [t = std::forward<T>(t)] { t(); };\n}\n\ntemplate <class T>\nvoid lambda_value_reference_auxiliary_var(T&& t) {\n  [&x = t]() { T other = std::forward<T>(x); };\n}\n\n} // namespace negative_cases\n\nnamespace deleted_functions {\n\ntemplate <typename T>\nvoid f(T &&t) = delete;\n\nstruct S {\n    template <typename T>\n    S(T &&t) = delete;\n\n    template <typename T>\n    void operator&(T &&t) = delete;\n};\n\n} // namespace deleted_functions\n\nnamespace unused_arguments {\n\ntemplate<typename F>\nvoid unused_argument1(F&&) {}\n\ntemplate<typename F>\nvoid unused_argument2([[maybe_unused]] F&& f) {}\n\ntemplate<typename F>\nvoid unused_argument3(F&& _) {}\n\n} // namespace unused_arguments"
    }
  ]
}