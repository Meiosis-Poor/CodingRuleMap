{
  "name": "VirtualClassDestructor",
  "language": "cpp",
  "description": ".. title:: clang-tidy - cppcoreguidelines-virtual-class-destructor",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 223,
  "branches": 24,
  "apis": 124,
  "test": [
    {
      "description": null,
      "expected-problems": 55,
      "expected-linenumbers": [
        3,
        4,
        5,
        19,
        20,
        29,
        30,
        39,
        40,
        41,
        50,
        51,
        63,
        64,
        71,
        72,
        88,
        89,
        90,
        104,
        105,
        114,
        115,
        123,
        124,
        136,
        137,
        161,
        162,
        173,
        174,
        185,
        186,
        195,
        196,
        210,
        217,
        225,
        234,
        235,
        248,
        258,
        259,
        278,
        279,
        285,
        286,
        292,
        293,
        303,
        304,
        314,
        315,
        322,
        323
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s cppcoreguidelines-virtual-class-destructor %t -- --fix-notes\n\n// CHECK-MESSAGES: :[[@LINE+4]]:8: warning: destructor of 'PrivateVirtualBaseStruct' is private and prevents using the type [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+3]]:8: note: make it public and virtual\n// CHECK-MESSAGES: :[[@LINE+2]]:8: note: make it protected\n// As we have 2 conflicting fixes in notes, no fix is applied.\nstruct PrivateVirtualBaseStruct {\n  virtual void f();\n\nprivate:\n  virtual ~PrivateVirtualBaseStruct() {}\n};\n\nstruct PublicVirtualBaseStruct { // OK\n  virtual void f();\n  virtual ~PublicVirtualBaseStruct() {}\n};\n\n// CHECK-MESSAGES: :[[@LINE+2]]:8: warning: destructor of 'ProtectedVirtualBaseStruct' is protected and virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+1]]:8: note: make it protected and non-virtual\nstruct ProtectedVirtualBaseStruct {\n  virtual void f();\n\nprotected:\n  virtual ~ProtectedVirtualBaseStruct() {}\n  // CHECK-FIXES: ~ProtectedVirtualBaseStruct() {}\n};\n\n// CHECK-MESSAGES: :[[@LINE+2]]:8: warning: destructor of 'ProtectedVirtualDefaultBaseStruct' is protected and virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+1]]:8: note: make it protected and non-virtual\nstruct ProtectedVirtualDefaultBaseStruct {\n  virtual void f();\n\nprotected:\n  virtual ~ProtectedVirtualDefaultBaseStruct() = default;\n  // CHECK-FIXES: ~ProtectedVirtualDefaultBaseStruct() = default;\n};\n\n// CHECK-MESSAGES: :[[@LINE+4]]:8: warning: destructor of 'PrivateNonVirtualBaseStruct' is private and prevents using the type [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+3]]:8: note: make it public and virtual\n// CHECK-MESSAGES: :[[@LINE+2]]:8: note: make it protected\n// As we have 2 conflicting fixes in notes, no fix is applied.\nstruct PrivateNonVirtualBaseStruct {\n  virtual void f();\n\nprivate:\n  ~PrivateNonVirtualBaseStruct() {}\n};\n\n// CHECK-MESSAGES: :[[@LINE+2]]:8: warning: destructor of 'PublicNonVirtualBaseStruct' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+1]]:8: note: make it public and virtual\nstruct PublicNonVirtualBaseStruct {\n  virtual void f();\n  ~PublicNonVirtualBaseStruct() {}\n  // CHECK-FIXES: virtual ~PublicNonVirtualBaseStruct() {}\n};\n\nstruct PublicNonVirtualNonBaseStruct { // OK according to C.35, since this struct does not have any virtual methods.\n  void f();\n  ~PublicNonVirtualNonBaseStruct() {}\n};\n\n// CHECK-MESSAGES: :[[@LINE+4]]:8: warning: destructor of 'PublicImplicitNonVirtualBaseStruct' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+3]]:8: note: make it public and virtual\n// CHECK-FIXES: struct PublicImplicitNonVirtualBaseStruct {\n// CHECK-FIXES-NEXT: virtual ~PublicImplicitNonVirtualBaseStruct() = default;\nstruct PublicImplicitNonVirtualBaseStruct {\n  virtual void f();\n};\n\n// CHECK-MESSAGES: :[[@LINE+5]]:8: warning: destructor of 'PublicASImplicitNonVirtualBaseStruct' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+4]]:8: note: make it public and virtual\n// CHECK-FIXES: struct PublicASImplicitNonVirtualBaseStruct {\n// CHECK-FIXES-NEXT: virtual ~PublicASImplicitNonVirtualBaseStruct() = default;\n// CHECK-FIXES-NEXT: private:\nstruct PublicASImplicitNonVirtualBaseStruct {\nprivate:\n  virtual void f();\n};\n\nstruct ProtectedNonVirtualBaseStruct { // OK\n  virtual void f();\n\nprotected:\n  ~ProtectedNonVirtualBaseStruct() {}\n};\n\n// CHECK-MESSAGES: :[[@LINE+4]]:7: warning: destructor of 'PrivateVirtualBaseClass' is private and prevents using the type [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+3]]:7: note: make it public and virtual\n// CHECK-MESSAGES: :[[@LINE+2]]:7: note: make it protected\n// As we have 2 conflicting fixes in notes, no fix is applied.\nclass PrivateVirtualBaseClass {\n  virtual void f();\n  virtual ~PrivateVirtualBaseClass() {}\n};\n\nclass PublicVirtualBaseClass { // OK\n  virtual void f();\n\npublic:\n  virtual ~PublicVirtualBaseClass() {}\n};\n\n// CHECK-MESSAGES: :[[@LINE+2]]:7: warning: destructor of 'ProtectedVirtualBaseClass' is protected and virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+1]]:7: note: make it protected and non-virtual\nclass ProtectedVirtualBaseClass {\n  virtual void f();\n\nprotected:\n  virtual ~ProtectedVirtualBaseClass() {}\n  // CHECK-FIXES: ~ProtectedVirtualBaseClass() {}\n};\n\n// CHECK-MESSAGES: :[[@LINE+5]]:7: warning: destructor of 'PublicImplicitNonVirtualBaseClass' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+4]]:7: note: make it public and virtual\n// CHECK-FIXES: public:\n// CHECK-FIXES-NEXT: virtual ~PublicImplicitNonVirtualBaseClass() = default;\n// CHECK-FIXES-NEXT: };\nclass PublicImplicitNonVirtualBaseClass {\n  virtual void f();\n};\n\n// CHECK-MESSAGES: :[[@LINE+6]]:7: warning: destructor of 'PublicASImplicitNonVirtualBaseClass' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+5]]:7: note: make it public and virtual\n// CHECK-FIXES: public:\n// CHECK-FIXES-NEXT: virtual ~PublicASImplicitNonVirtualBaseClass() = default;\n// CHECK-FIXES-NEXT: int foo = 42;\n// CHECK-FIXES-NEXT: };\nclass PublicASImplicitNonVirtualBaseClass {\n  virtual void f();\n\npublic:\n  int foo = 42;\n};\n\n// CHECK-MESSAGES: :[[@LINE+2]]:7: warning: destructor of 'PublicNonVirtualBaseClass' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+1]]:7: note: make it public and virtual\nclass PublicNonVirtualBaseClass {\n  virtual void f();\n\npublic:\n  ~PublicNonVirtualBaseClass() {}\n  // CHECK-FIXES: virtual ~PublicNonVirtualBaseClass() {}\n};\n\nclass PublicNonVirtualNonBaseClass { // OK according to C.35, since this class does not have any virtual methods.\n  void f();\n\npublic:\n  ~PublicNonVirtualNonBaseClass() {}\n};\n\nclass ProtectedNonVirtualClass { // OK\npublic:\n  virtual void f();\n\nprotected:\n  ~ProtectedNonVirtualClass() {}\n};\n\n// CHECK-MESSAGES: :[[@LINE+7]]:7: warning: destructor of 'OverridingDerivedClass' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+6]]:7: note: make it public and virtual\n// CHECK-FIXES: class OverridingDerivedClass : ProtectedNonVirtualClass {\n// CHECK-FIXES-NEXT: public:\n// CHECK-FIXES-NEXT: virtual ~OverridingDerivedClass() = default;\n// CHECK-FIXES-NEXT: void f() override;\n// CHECK-FIXES-NEXT: };\nclass OverridingDerivedClass : ProtectedNonVirtualClass {\npublic:\n  void f() override; // is implicitly virtual\n};\n\n// CHECK-MESSAGES: :[[@LINE+7]]:7: warning: destructor of 'NonOverridingDerivedClass' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+6]]:7: note: make it public and virtual\n// CHECK-FIXES: class NonOverridingDerivedClass : ProtectedNonVirtualClass {\n// CHECK-FIXES-NEXT: void m();\n// CHECK-FIXES-NEXT: public:\n// CHECK-FIXES-NEXT: virtual ~NonOverridingDerivedClass() = default;\n// CHECK-FIXES-NEXT: };\nclass NonOverridingDerivedClass : ProtectedNonVirtualClass {\n  void m();\n};\n// inherits virtual method\n\n// CHECK-MESSAGES: :[[@LINE+6]]:8: warning: destructor of 'OverridingDerivedStruct' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+5]]:8: note: make it public and virtual\n// CHECK-FIXES: struct OverridingDerivedStruct : ProtectedNonVirtualBaseStruct {\n// CHECK-FIXES-NEXT: virtual ~OverridingDerivedStruct() = default;\n// CHECK-FIXES-NEXT: void f() override;\n// CHECK-FIXES-NEXT: };\nstruct OverridingDerivedStruct : ProtectedNonVirtualBaseStruct {\n  void f() override; // is implicitly virtual\n};\n\n// CHECK-MESSAGES: :[[@LINE+6]]:8: warning: destructor of 'NonOverridingDerivedStruct' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+5]]:8: note: make it public and virtual\n// CHECK-FIXES: struct NonOverridingDerivedStruct : ProtectedNonVirtualBaseStruct {\n// CHECK-FIXES-NEXT: virtual ~NonOverridingDerivedStruct() = default;\n// CHECK-FIXES-NEXT: void m();\n// CHECK-FIXES-NEXT: };\nstruct NonOverridingDerivedStruct : ProtectedNonVirtualBaseStruct {\n  void m();\n};\n// inherits virtual method\n\nnamespace Bugzilla_51912 {\n// Fixes https://bugs.llvm.org/show_bug.cgi?id=51912\n\n// Forward declarations\n// CHECK-MESSAGES-NOT: :[[@LINE+1]]:8: warning: destructor of 'ForwardDeclaredStruct' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\nstruct ForwardDeclaredStruct;\n\nstruct ForwardDeclaredStruct : PublicVirtualBaseStruct {\n};\n\n// Normal Template\n// CHECK-MESSAGES-NOT: :[[@LINE+2]]:8: warning: destructor of 'TemplatedDerived' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\ntemplate <typename T>\nstruct TemplatedDerived : PublicVirtualBaseStruct {\n};\n\nTemplatedDerived<int> InstantiationWithInt;\n\n// Derived from template, base has virtual dtor\n// CHECK-MESSAGES-NOT: :[[@LINE+2]]:8: warning: destructor of 'DerivedFromTemplateVirtualBaseStruct' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\ntemplate <typename T>\nstruct DerivedFromTemplateVirtualBaseStruct : T {\n  virtual void foo();\n};\n\nDerivedFromTemplateVirtualBaseStruct<PublicVirtualBaseStruct> InstantiationWithPublicVirtualBaseStruct;\n\n// Derived from template, base has *not* virtual dtor\n// CHECK-MESSAGES: :[[@LINE+7]]:8: warning: destructor of 'DerivedFromTemplateNonVirtualBaseStruct<PublicNonVirtualBaseStruct>' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+6]]:8: note: make it public and virtual\n// CHECK-FIXES: struct DerivedFromTemplateNonVirtualBaseStruct : T {\n// CHECK-FIXES-NEXT: virtual ~DerivedFromTemplateNonVirtualBaseStruct() = default;\n// CHECK-FIXES-NEXT: virtual void foo();\n// CHECK-FIXES-NEXT: };\ntemplate <typename T>\nstruct DerivedFromTemplateNonVirtualBaseStruct : T {\n  virtual void foo();\n};\n\nDerivedFromTemplateNonVirtualBaseStruct<PublicNonVirtualBaseStruct> InstantiationWithPublicNonVirtualBaseStruct;\n\n// Derived from template, base has virtual dtor, to be used in a typedef\n// CHECK-MESSAGES-NOT: :[[@LINE+2]]:8: warning: destructor of 'DerivedFromTemplateVirtualBaseStruct2' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\ntemplate <typename T>\nstruct DerivedFromTemplateVirtualBaseStruct2 : T {\n  virtual void foo();\n};\n\nusing DerivedFromTemplateVirtualBaseStruct2Typedef = DerivedFromTemplateVirtualBaseStruct2<PublicVirtualBaseStruct>;\nDerivedFromTemplateVirtualBaseStruct2Typedef InstantiationWithPublicVirtualBaseStruct2;\n\n// Derived from template, base has *not* virtual dtor, to be used in a typedef\n// CHECK-MESSAGES: :[[@LINE+7]]:8: warning: destructor of 'DerivedFromTemplateNonVirtualBaseStruct2<PublicNonVirtualBaseStruct>' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+6]]:8: note: make it public and virtual\n// CHECK-FIXES: struct DerivedFromTemplateNonVirtualBaseStruct2 : T {\n// CHECK-FIXES-NEXT: virtual ~DerivedFromTemplateNonVirtualBaseStruct2() = default;\n// CHECK-FIXES-NEXT: virtual void foo();\n// CHECK-FIXES-NEXT: };\ntemplate <typename T>\nstruct DerivedFromTemplateNonVirtualBaseStruct2 : T {\n  virtual void foo();\n};\n\nusing DerivedFromTemplateNonVirtualBaseStruct2Typedef = DerivedFromTemplateNonVirtualBaseStruct2<PublicNonVirtualBaseStruct>;\nDerivedFromTemplateNonVirtualBaseStruct2Typedef InstantiationWithPublicNonVirtualBaseStruct2;\n\n} // namespace Bugzilla_51912\n\nnamespace macro_tests {\n#define MY_VIRTUAL virtual\n#define CONCAT(x, y) x##y\n\n// CHECK-MESSAGES: :[[@LINE+2]]:7: warning: destructor of 'FooBar1' is protected and virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+1]]:7: note: make it protected and non-virtual\nclass FooBar1 {\nprotected:\n  CONCAT(vir, tual) CONCAT(~Foo, Bar1()); // no-fixit\n};\n\n// CHECK-MESSAGES: :[[@LINE+2]]:7: warning: destructor of 'FooBar2' is protected and virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+1]]:7: note: make it protected and non-virtual\nclass FooBar2 {\nprotected:\n  virtual CONCAT(~Foo, Bar2()); // FIXME: We should have a fixit for this.\n};\n\n// CHECK-MESSAGES: :[[@LINE+6]]:7: warning: destructor of 'FooBar3' is protected and virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+5]]:7: note: make it protected and non-virtual\n// CHECK-FIXES:      class FooBar3 {\n// CHECK-FIXES-NEXT: protected:\n// CHECK-FIXES-NEXT:   ~FooBar3();\n// CHECK-FIXES-NEXT: };\nclass FooBar3 {\nprotected:\n  CONCAT(vir, tual) ~FooBar3();\n};\n\n// CHECK-MESSAGES: :[[@LINE+6]]:7: warning: destructor of 'FooBar4' is protected and virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+5]]:7: note: make it protected and non-virtual\n// CHECK-FIXES:      class FooBar4 {\n// CHECK-FIXES-NEXT: protected:\n// CHECK-FIXES-NEXT:   ~CONCAT(Foo, Bar4());\n// CHECK-FIXES-NEXT: };\nclass FooBar4 {\nprotected:\n  CONCAT(vir, tual) ~CONCAT(Foo, Bar4());\n};\n\n// CHECK-MESSAGES: :[[@LINE+3]]:7: warning: destructor of 'FooBar5' is protected and virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+2]]:7: note: make it protected and non-virtual\n#define XMACRO(COLUMN1, COLUMN2) COLUMN1 COLUMN2\nclass FooBar5 {\nprotected:\n  XMACRO(CONCAT(vir, tual), ~CONCAT(Foo, Bar5());) // no-crash, no-fixit\n};\n\n// CHECK-MESSAGES: :[[@LINE+2]]:7: warning: destructor of 'FooBar6' is protected and virtual [cppcoreguidelines-virtual-class-destructor]\n// CHECK-MESSAGES: :[[@LINE+1]]:7: note: make it protected and non-virtual\nclass FooBar6 {\nprotected:\n  MY_VIRTUAL ~FooBar6(); // FIXME: We should have a fixit for this.\n};\n\n#undef XMACRO\n#undef CONCAT\n#undef MY_VIRTUAL\n} // namespace macro_tests\n\nnamespace FinalClassCannotBeBaseClass {\nclass Base {\npublic:\n  Base() = default;\n  virtual void func() = 0;\n\nprotected:\n  ~Base() = default;\n};\n\n// no-warning: 'MostDerived' cannot be a base class, since it's marked 'final'.\nclass MostDerived final : public Base {\npublic:\n  MostDerived() = default;\n  ~MostDerived() = default;\n  void func() final;\n};\n} // namespace FinalClassCannotBeBaseClass"
    }
  ]
}