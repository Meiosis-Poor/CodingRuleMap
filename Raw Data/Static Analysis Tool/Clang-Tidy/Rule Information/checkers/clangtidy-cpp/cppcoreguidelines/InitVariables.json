{
  "name": "InitVariables",
  "language": "cpp",
  "description": ".. title:: clang-tidy - cppcoreguidelines-init-variables",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 121,
  "branches": 19,
  "apis": 74,
  "test": [
    {
      "description": null,
      "expected-problems": 20,
      "expected-linenumbers": [
        30,
        36,
        39,
        43,
        48,
        51,
        52,
        57,
        61,
        66,
        71,
        117,
        119,
        121,
        123,
        125,
        130,
        134,
        143,
        146
      ],
      "code": "\n// RUN: %check_clang_tidy %s cppcoreguidelines-init-variables -fix-errors %t -- -- -fno-delayed-template-parsing -fexceptions\n// CHECK-FIXES: {{^}}#include <math.h>\n\n// Ensure that function declarations are not changed.\nvoid some_func(int x, double d, bool b, const char *p);\n\n// Ensure that function arguments are not changed\nint identity_function(int x) {\n  return x;\n}\n\nint do_not_modify_me;\n\nstatic int should_not_be_initialized;\nextern int should_not_be_initialized2;\n\ntypedef struct {\n  int unaltered1;\n  int unaltered2;\n} UnusedStruct;\n\ntypedef int my_int_type;\n#define MACRO_INT int\n#define FULL_DECLARATION() int macrodecl;\n\ntemplate <typename T>\nvoid template_test_function() {\n  T t;\n  int uninitialized;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: variable 'uninitialized' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  int uninitialized = 0;{{$}}\n}\n\nvoid init_unit_tests() {\n  int x;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: variable 'x' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  int x = 0;{{$}}\n  my_int_type myint;\n  // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: variable 'myint' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  my_int_type myint = 0;{{$}}\n\n  MACRO_INT macroint;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: variable 'macroint' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  MACRO_INT macroint = 0;{{$}}\n  FULL_DECLARATION();\n\n  int x0 = 1, x1, x2 = 2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: variable 'x1' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  int x0 = 1, x1 = 0, x2 = 2;{{$}}\n  int y0, y1 = 1, y2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: variable 'y0' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-MESSAGES: :[[@LINE-2]]:19: warning: variable 'y2' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  int y0 = 0, y1 = 1, y2 = 0;{{$}}\n  int hasval = 42;\n\n  float f;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: variable 'f' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  float f = NAN;{{$}}\n  float fval = 85.0;\n  double d;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: variable 'd' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  double d = NAN;{{$}}\n  double dval = 99.0;\n\n  bool b;\n  // CHECK-MESSAGES: :[[@LINE-1]]:8: warning: variable 'b' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  bool b = false;{{$}}\n  bool bval = true;\n\n  const char *ptr;\n  // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: variable 'ptr' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  const char *ptr = nullptr;{{$}}\n  const char *ptrval = \"a string\";\n\n  UnusedStruct u;\n\n  static int does_not_need_an_initializer;\n  extern int does_not_need_an_initializer2;\n  int parens(42);\n  int braces{42};\n}\n\ntemplate <typename RANGE>\nvoid f(RANGE r) {\n  for (char c : r) {\n  }\n}\n\nvoid catch_variable_decl() {\n  // Expect no warning given here.\n  try {\n  } catch (int X) {\n  }\n}\n\nenum Color { Red,\n             Green,\n             Blue };\n\nenum Car { Benz,\n           BMW = 20,\n           Audi = BMW + 2 };\n\nenum Gender : char { Male,\n                     Female };\n\nenum class Direction { Up,\n                       Down,\n                       Left,\n                       Right };\n\nenum class Fruit : int { Apple,\n                         Orange };\n\nvoid uninitialized_enum() {\n  Color color;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: variable 'color' is not initialized [cppcoreguidelines-init-variables]\n  Car car;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: variable 'car' is not initialized [cppcoreguidelines-init-variables]\n  Gender gender;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: variable 'gender' is not initialized [cppcoreguidelines-init-variables]\n  Direction direction;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: variable 'direction' is not initialized [cppcoreguidelines-init-variables]\n  Fruit fruit;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: variable 'fruit' is not initialized [cppcoreguidelines-init-variables]\n}\n\nvoid test_clang_diagnostic_error() {\n  int a;\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: variable 'a' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: {{^}}  int a = 0;{{$}}\n\n  UnknownType b;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: error: unknown type name 'UnknownType' [clang-diagnostic-error]\n  // CHECK-FIXES-NOT: {{^}}  UnknownType b = 0;{{$}}\n}\n\nnamespace gh112089 {\n    void foo(void*);\n    using FPtr = void(*)(void*);\n    void test() {\n        void(*a1)(void*);\n  // CHECK-MESSAGES: :[[@LINE-1]]:15: warning: variable 'a1' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: void(*a1)(void*) = nullptr;\n        FPtr a2;\n  // CHECK-MESSAGES: :[[@LINE-1]]:14: warning: variable 'a2' is not initialized [cppcoreguidelines-init-variables]\n  // CHECK-FIXES: FPtr a2 = nullptr;\n    }\n} // namespace gh112089\n"
    }
  ]
}