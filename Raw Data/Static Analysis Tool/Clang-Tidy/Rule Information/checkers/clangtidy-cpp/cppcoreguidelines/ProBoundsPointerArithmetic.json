{
  "name": "ProBoundsPointerArithmetic",
  "language": "cpp",
  "description": ".. title:: clang-tidy - cppcoreguidelines-pro-bounds-pointer-arithmetic",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 59,
  "branches": 1,
  "apis": 54,
  "test": [
    {
      "description": null,
      "expected-problems": 26,
      "expected-linenumbers": [
        17,
        19,
        21,
        24,
        26,
        28,
        31,
        33,
        35,
        38,
        40,
        42,
        45,
        47,
        50,
        52,
        55,
        58,
        60,
        62,
        71,
        73,
        75,
        77,
        91,
        96
      ],
      "code": "\n// RUN: %check_clang_tidy %s cppcoreguidelines-pro-bounds-pointer-arithmetic %t\n\nenum E {\n  ENUM_LITERAL = 1\n};\n\ntypedef int* IntPtr;\n\nint i = 4;\nint j = 1;\nint *p = 0;\nint *q = 0;\nIntPtr ip = 0;\n\nvoid fail() {\n  q = p + 4;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n  p = q + i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: do not use pointer arithmetic\n  p = q + ENUM_LITERAL;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: do not use pointer arithmetic\n\n  q = p - 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: do not use pointer arithmetic\n  p = q - i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: do not use pointer arithmetic\n  p = q - ENUM_LITERAL;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: do not use pointer arithmetic\n\n  p += 4;\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: do not use pointer arithmetic\n  p += i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: do not use pointer arithmetic\n  p += ENUM_LITERAL;\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: do not use pointer arithmetic\n\n  q -= 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: do not use pointer arithmetic\n  q -= i;\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: do not use pointer arithmetic\n  q -= ENUM_LITERAL;\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: do not use pointer arithmetic\n\n  p++;\n  // CHECK-MESSAGES: :[[@LINE-1]]:4: warning: do not use pointer arithmetic\n  ++p;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use pointer arithmetic\n\n  p--;\n  // CHECK-MESSAGES: :[[@LINE-1]]:4: warning: do not use pointer arithmetic\n  --p;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use pointer arithmetic\n\n  i = p[1];\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: do not use pointer arithmetic\n\n  p = ip + 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:10: warning: do not use pointer arithmetic\n  ip++;\n  // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: do not use pointer arithmetic\n  i = ip[1];\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: do not use pointer arithmetic\n}\n\ntemplate <typename T>\nvoid template_fail() {\n  T* p;\n  T* q;\n\n  p = q + 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: do not use pointer arithmetic\n  q = p - 1;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: do not use pointer arithmetic\n  p++;\n  // CHECK-MESSAGES: :[[@LINE-1]]:4: warning: do not use pointer arithmetic\n  i = p[1];\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: do not use pointer arithmetic\n}\n\nvoid instantiate() {\n  template_fail<int>();\n}\n\nstruct S {\n  operator int() const;\n};\n\nvoid f(S &s) {\n  int *i;\n  i = i + s;\n  // CHECK-MESSAGES: :[[@LINE-1]]:9: warning: do not use pointer arithmetic\n}\n\nvoid f2(int i[]) {\n  i[1] = 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use pointer arithmetic\n}\n\nvoid okay() {\n  int a[3];\n  i = a[2]; // OK, access to array\n\n  p = q;\n  p = &i;\n\n  i++;\n  ++i;\n  i--;\n  --i;\n  i += 1;\n  i -= 1;\n  i = j + 1;\n  i = j - 1;\n\n  auto diff = p - q; // OK, result is arithmetic\n\n  for(int ii : a) ; // OK, pointer arithmetic generated by compiler\n}\n\nnamespace gh126424 {\n\nnamespace std {\ntemplate <typename, typename>\nclass pair {};\n\ntemplate <typename Key, typename Value>\nclass map {\n  public:\n   using value_type = pair<Key, Value>;\n   value_type& operator[](const Key& key);\n   value_type& operator[](Key&& key);\n };\n}\n\ntemplate <typename R>\nint f(std::map<R*, int>& map, R* r) {\n  return map[r]; // OK\n}\n\n}"
    }
  ]
}