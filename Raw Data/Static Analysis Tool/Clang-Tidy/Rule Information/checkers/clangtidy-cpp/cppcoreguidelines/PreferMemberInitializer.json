{
  "name": "PreferMemberInitializer",
  "language": "cpp",
  "description": ".. title:: clang-tidy - cppcoreguidelines-prefer-member-initializer",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 299,
  "branches": 52,
  "apis": 176,
  "test": [
    {
      "description": null,
      "expected-problems": 33,
      "expected-linenumbers": [
        17,
        20,
        27,
        30,
        45,
        52,
        67,
        74,
        91,
        339,
        396,
        403,
        453,
        456,
        459,
        462,
        465,
        468,
        471,
        485,
        488,
        498,
        505,
        533,
        539,
        546,
        562,
        600,
        603,
        606,
        622,
        628,
        636
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s cppcoreguidelines-prefer-member-initializer %t -- -- -fcxx-exceptions\n\nextern void __assert_fail (__const char *__assertion, __const char *__file,\n    unsigned int __line, __const char *__function)\n     __attribute__ ((__noreturn__));\n#define assert(expr) \\\n  ((expr)  ? (void)(0)  : __assert_fail (#expr, __FILE__, __LINE__, __func__))\n\nclass Simple1 {\n  int n;\n  double x;\n\npublic:\n  Simple1() {\n    // CHECK-FIXES: Simple1() : n(0), x(0.0) {\n    n = 0;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n    x = 0.0;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'x' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n\n  Simple1(int nn, double xx) {\n    // CHECK-FIXES: Simple1(int nn, double xx) : n(nn), x(xx) {\n    n = nn;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n    x = xx;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'x' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n\n  ~Simple1() = default;\n};\n\nclass Simple2 {\n  int n;\n  double x;\n\npublic:\n  Simple2() : n(0) {\n    // CHECK-FIXES: Simple2() : n(0), x(0.0) {\n    x = 0.0;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'x' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n\n  Simple2(int nn, double xx) : n(nn) {\n    // CHECK-FIXES: Simple2(int nn, double xx) : n(nn), x(xx) {\n    x = xx;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'x' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n\n  ~Simple2() = default;\n};\n\nclass Simple3 {\n  int n;\n  double x;\n\npublic:\n  Simple3() : x(0.0) {\n    // CHECK-FIXES: Simple3() : n(0), x(0.0) {\n    n = 0;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n\n  Simple3(int nn, double xx) : x(xx) {\n    // CHECK-FIXES: Simple3(int nn, double xx) : n(nn), x(xx) {\n    n = nn;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n\n  ~Simple3() = default;\n};\n\nint something_int();\ndouble something_double();\n\nclass Simple4 {\n  int n;\n\npublic:\n  Simple4() {\n    // CHECK-FIXES: Simple4() : n(something_int()) {\n    n = something_int();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n\n  ~Simple4() = default;\n};\n\nstatic bool dice();\n\nclass Complex1 {\n  int n;\n  int m;\n\npublic:\n  Complex1() : n(0) {\n    if (dice())\n      m = 1;\n    // NO-MESSAGES: initialization of 'm' is nested in a conditional expression\n  }\n\n  ~Complex1() = default;\n};\n\nclass Complex2 {\n  int n;\n  int m;\n\npublic:\n  Complex2() : n(0) {\n    if (!dice())\n      return;\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows a conditional expression\n  }\n\n  ~Complex2() = default;\n};\n\nclass Complex3 {\n  int n;\n  int m;\n\npublic:\n  Complex3() : n(0) {\n    while (dice())\n      m = 1;\n    // NO-MESSAGES: initialization of 'm' is nested in a conditional loop\n  }\n\n  ~Complex3() = default;\n};\n\nclass Complex4 {\n  int n;\n  int m;\n\npublic:\n  Complex4() : n(0) {\n    while (!dice())\n      return;\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows a conditional loop\n  }\n\n  ~Complex4() = default;\n};\n\nclass Complex5 {\n  int n;\n  int m;\n\npublic:\n  Complex5() : n(0) {\n    do {\n      m = 1;\n      // NO-MESSAGES: initialization of 'm' is nested in a conditional loop\n    } while (dice());\n  }\n\n  ~Complex5() = default;\n};\n\nclass Complex6 {\n  int n;\n  int m;\n\npublic:\n  Complex6() : n(0) {\n    do {\n      return;\n    } while (!dice());\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows a conditional loop\n  }\n\n  ~Complex6() = default;\n};\n\nclass Complex7 {\n  int n;\n  int m;\n\npublic:\n  Complex7() : n(0) {\n    for (int i = 2; i < 1; ++i) {\n      m = 1;\n    }\n    // NO-MESSAGES: initialization of 'm' is nested into a conditional loop\n  }\n\n  ~Complex7() = default;\n};\n\nclass Complex8 {\n  int n;\n  int m;\n\npublic:\n  Complex8() : n(0) {\n    for (int i = 0; i < 2; ++i) {\n      return;\n    }\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows a conditional loop\n  }\n\n  ~Complex8() = default;\n};\n\nclass Complex9 {\n  int n;\n  int m;\n\npublic:\n  Complex9() : n(0) {\n    switch (dice()) {\n    case 1:\n      m = 1;\n      // NO-MESSAGES: initialization of 'm' is nested in a conditional expression\n      break;\n    default:\n      break;\n    }\n  }\n\n  ~Complex9() = default;\n};\n\nclass Complex10 {\n  int n;\n  int m;\n\npublic:\n  Complex10() : n(0) {\n    switch (dice()) {\n    case 1:\n      return;\n      break;\n    default:\n      break;\n    }\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows a conditional expression\n  }\n\n  ~Complex10() = default;\n};\n\nclass E {};\nint risky(); // may throw\n\nclass Complex11 {\n  int n;\n  int m;\n\npublic:\n  Complex11() : n(0) {\n    try {\n      risky();\n      m = 1;\n      // NO-MESSAGES: initialization of 'm' follows is nested in a try-block\n    } catch (const E& e) {\n      return;\n    }\n  }\n\n  ~Complex11() = default;\n};\n\nclass Complex12 {\n  int n;\n  int m;\n\npublic:\n  Complex12() : n(0) {\n    try {\n      risky();\n    } catch (const E& e) {\n      return;\n    }\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows a try-block\n  }\n\n  ~Complex12() = default;\n};\n\nclass Complex13 {\n  int n;\n  int m;\n\npublic:\n  Complex13() : n(0) {\n    return;\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows a return statement\n  }\n\n  ~Complex13() = default;\n};\n\nclass Complex14 {\n  int n;\n  int m;\n\npublic:\n  Complex14() : n(0) {\n    goto X;\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows a goto statement\n  X:\n    ;\n  }\n\n  ~Complex14() = default;\n};\n\nvoid returning();\n\nclass Complex15 {\n  int n;\n  int m;\n\npublic:\n  Complex15() : n(0) {\n    // CHECK-FIXES: Complex15() : n(0), m(1) {\n    returning();\n    m = 1;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'm' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n\n  ~Complex15() = default;\n};\n\n[[noreturn]] void not_returning();\n\nclass Complex16 {\n  int n;\n  int m;\n\npublic:\n  Complex16() : n(0) {\n    not_returning();\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows a non-returning function call\n  }\n\n  ~Complex16() = default;\n};\n\nclass Complex17 {\n  int n;\n  int m;\n\npublic:\n  Complex17() : n(0) {\n    throw 1;\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows a 'throw' statement;\n  }\n\n  ~Complex17() = default;\n};\n\nclass Complex18 {\n  int n;\n\npublic:\n  Complex18() try {\n    n = risky();\n    // NO-MESSAGES: initialization of 'n' in a 'try' body;\n  } catch (const E& e) {\n    n = 0;\n  }\n\n  ~Complex18() = default;\n};\n\nclass Complex19 {\n  int n;\npublic:\n  Complex19() {\n    // CHECK-FIXES: Complex19() : n(0) {\n    n = 0;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n\n  explicit Complex19(int) {\n    // CHECK-FIXES: Complex19(int) : n(12) {\n    n = 12;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n\n  ~Complex19() = default;\n};\n\nclass Complex20 {\n  int n;\n  int m;\n\npublic:\n  Complex20(int k) : n(0) {\n    assert(k > 0);\n    m = 1;\n    // NO-MESSAGES: initialization of 'm' follows an assertion\n  }\n\n  ~Complex20() = default;\n};\n\nclass VeryComplex1 {\n  int n1, n2, n3;\n  double x1, x2, x3;\n  int n4, n5, n6;\n  double x4, x5, x6;\n\n  VeryComplex1() : n3(something_int()), x3(something_double()),\n                   n5(something_int()), x4(something_double()),\n                   x5(something_double()) {\n    // CHECK-FIXES: VeryComplex1() : n2(something_int()), n1(something_int()), n3(something_int()), x2(something_double()), x1(something_double()), x3(something_double()),\n    // CHECK-FIXES:                  n4(something_int()), n5(something_int()), n6(something_int()), x4(something_double()),\n    // CHECK-FIXES:                  x5(something_double()), x6(something_double()) {\n\n// FIXME: Order of elements on the constructor initializer list should match\n//        the order of the declaration of the fields. Thus the correct fixes\n//        should look like these:\n//\n    // C ECK-FIXES: VeryComplex1() : n2(something_int()), n1(something_int()), n3(something_int()), x2(something_double()), x1(something_double()), x3(something_double()),\n    // C ECK-FIXES:                  n4(something_int()), n5(something_int()), n6(something_int()), x4(something_double()),\n    // C ECK-FIXES:                  x5(something_double()), x6(something_double()) {\n//\n//        However, the Diagnostics Engine processes fixes in the order of the\n//        diagnostics and insertions to the same position are handled in left to\n//        right order thus in the case two adjacent fields are initialized\n//        inside the constructor in reverse order the provided fix is a\n//        constructor initializer list that does not match the order of the\n//        declaration of the fields.\n\n    x2 = something_double();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'x2' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n    n2 = something_int();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n2' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n    x6 = something_double();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'x6' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n    x1 = something_double();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'x1' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n    n6 = something_int();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n6' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n    n1 = something_int();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n1' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n    n4 = something_int();\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n4' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  }\n};\n\nstruct Outside {\n  int n;\n  double x;\n  Outside();\n};\n\nOutside::Outside() {\n    // CHECK-FIXES: Outside::Outside() : n(1), x(1.0) {\n  n = 1;\n    // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: 'n' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n  x = 1.0;\n    // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: 'x' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n    // CHECK-FIXES: {{^\\ *$}}\n}\n\nstruct SafeDependancy {\n  int m;\n  int n;\n  SafeDependancy(int M) : m(M) {\n    // CHECK-FIXES: SafeDependancy(int M) : m(M), n(m) {\n    n = m;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n' should be initialized in a member initializer of the constructor\n  }\n  // We match against direct field dependancy as well as descendant field\n  // dependancy, ensure both are accounted for.\n  SafeDependancy(short M) : m(M) {\n    // CHECK-FIXES: SafeDependancy(short M) : m(M), n(m + 1) {\n    n = m + 1;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'n' should be initialized in a member initializer of the constructor\n  }\n};\n\nstruct BadDependancy {\n  int m;\n  int n;\n  BadDependancy(int N) : n(N) {\n    m = n;\n  }\n  BadDependancy(short N) : n(N) {\n    m = n + 1;\n  }\n};\n\nstruct InitFromVarDecl {\n  int m;\n  InitFromVarDecl() {\n    // Can't apply this fix as n is declared in the body of the constructor.\n    int n = 3;\n    m = n;\n  }\n};\n\nstruct HasInClassInit {\n  int m = 4;\n  HasInClassInit() {\n    m = 3;\n    // CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'm' should be initialized in a member initializer of the constructor\n  }\n};\n\nstruct HasInitListInit {\n  int M;\n  // CHECK-MESSAGES: :[[@LINE+5]]:5: warning: 'M' should be initialized in a member initializer of the constructor\n  // CHECK-FIXES: HasInitListInit(const HasInitListInit &Other) : M(Other.M) {\n  // CHECK-FIXES-NEXT: {{^    $}}\n  // CHECK-FIXES-NEXT: }\n  HasInitListInit(const HasInitListInit &Other) : M(4) {\n    M = Other.M;\n  }\n  // CHECK-MESSAGES: :[[@LINE+5]]:5: warning: 'M' should be initialized in a member initializer of the constructor\n  // CHECK-FIXES: HasInitListInit(HasInitListInit &&Other) : M(Other.M) {\n  // CHECK-FIXES-NEXT: {{^    $}}\n  // CHECK-FIXES-NEXT: }\n  HasInitListInit(HasInitListInit &&Other) : M() {\n    M = Other.M;\n  }\n};\n\n#define ASSIGN_IN_MACRO(FIELD, VALUE) FIELD = (VALUE);\n\nstruct MacroCantFix {\n  int n; // NoFix\n  // CHECK-FIXES: int n; // NoFix\n  MacroCantFix() {\n    ASSIGN_IN_MACRO(n, 0)\n    // CHECK-MESSAGES: :[[@LINE-1]]:21: warning: 'n' should be initialized in a member initializer of the constructor\n    // CHECK-FIXES: ASSIGN_IN_MACRO(n, 0)\n  }\n};\n\nstruct PR52818  {\n    PR52818() : bar(5) {}\n    PR52818(int) : PR52818() { bar = 3; }\n\n    int bar;\n};\n\nstruct RefReassignment {\n  RefReassignment(int &i) : m_i{i} {\n    m_i = 1;\n  }\n  int & m_i;\n};\n\nstruct ReassignmentAfterUnsafetyAssignment {\n  ReassignmentAfterUnsafetyAssignment() {\n    int a = 10;\n    m_i = a;\n    m_i = 1;\n  }\n  int m_i;\n};\n\nnamespace PR70189 {\n#define RGB(r,g,b) ((unsigned long)(((unsigned char)(r)|((unsigned short)((unsigned char)(g))<<8))|(((unsigned long)(unsigned char)(b))<<16)))\n#define INVALID_HANDLE_VALUE ((void*)(unsigned long long)-1)\n#define SIMPLE 12\n\nclass Foo {\npublic:\n  Foo() {\n// CHECK-FIXES: Foo() : m_color(RGB(255, 128, 0)), m_handle(INVALID_HANDLE_VALUE), m_myval(SIMPLE) {\n    m_color = RGB(255, 128, 0);\n// CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'm_color' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n// CHECK-FIXES: {{^\\ *$}}\n    m_handle = INVALID_HANDLE_VALUE;\n// CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'm_handle' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n// CHECK-FIXES: {{^\\ *$}}\n    m_myval = SIMPLE;\n// CHECK-MESSAGES: :[[@LINE-1]]:5: warning: 'm_myval' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n// CHECK-FIXES: {{^\\ *$}}\n  }\nprivate:\n  unsigned long m_color;\n  void* m_handle;\n  int m_myval;\n};\n\n#undef SIMPLE\n#undef INVALID_HANDLE_VALUE\n#undef RGB\n}\n\nnamespace GH77684 {\nstruct S1 {\n// CHECK-MESSAGES: :[[@LINE+1]]:16: warning: 'M' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n  S1() : M{} { M = 0; }\n// CHECK-FIXES:  S1() : M{0} { }\n  int M;\n};\nstruct S2 {\n// CHECK-MESSAGES: :[[@LINE+1]]:17: warning: 'M' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n  S2() : M{2} { M = 1; }\n// CHECK-FIXES:  S2() : M{1} { }\n  int M;\n};\nstruct T { int a; int b; int c; };\nT v;\nstruct S3 {\n// CHECK-MESSAGES: :[[@LINE+1]]:21: warning: 'M' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]\n  S3() : M{1,2,3} { M = v; }\n// CHECK-FIXES:  S3() : M{v} { }\n  T M;\n};\n}\n\nnamespace GH82970 {\nstruct InitFromBindingDecl {\n  int m;\n  InitFromBindingDecl() {\n    struct { int i; } a;\n    auto [n] = a;\n    m = n;\n  }\n};\n} // namespace GH82970"
    }
  ]
}