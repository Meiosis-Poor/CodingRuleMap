{
  "name": "ProTypeStaticCastDowncast",
  "language": "cpp",
  "description": ".. title:: clang-tidy - cppcoreguidelines-pro-type-static-cast-downcast",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 59,
  "branches": 5,
  "apis": 27,
  "test": [
    {
      "description": null,
      "expected-problems": 12,
      "expected-linenumbers": [
        30,
        34,
        44,
        49,
        61,
        67,
        74,
        77,
        81,
        91,
        96,
        101
      ],
      "code": "\n// RUN: %check_clang_tidy  -check-suffixes=NSTRICT,STRICT %s cppcoreguidelines-pro-type-static-cast-downcast %t\n// RUN: %check_clang_tidy  -check-suffix=NSTRICT %s cppcoreguidelines-pro-type-static-cast-downcast %t -- -config=\"{CheckOptions: {cppcoreguidelines-pro-type-static-cast-downcast.StrictMode: false}}\"\n\nclass Base {\n};\n\nclass Derived : public Base {\n};\n\nclass Base2 {\n};\n\nclass MultiDerived : public Base, public Base2 {\n};\n\nclass PolymorphicBase {\npublic:\n  virtual ~PolymorphicBase();\n};\n\nclass PolymorphicDerived : public PolymorphicBase {\n};\n\nclass PolymorphicMultiDerived : public Base, public PolymorphicBase {\n};\n\nvoid pointers() {\n\n  auto P0 = static_cast<Derived*>(new Base());\n  // CHECK-MESSAGES-STRICT: :[[@LINE-1]]:13: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]\n\n  const Base* B0;\n  auto PC0 = static_cast<const Derived*>(B0);\n  // CHECK-MESSAGES-STRICT: :[[@LINE-1]]:14: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]\n\n  auto P1 = static_cast<Base*>(new Derived()); // OK, upcast to a public base\n  auto P2 = static_cast<Base*>(new MultiDerived()); // OK, upcast to a public base\n  auto P3 = static_cast<Base2*>(new MultiDerived()); // OK, upcast to a public base\n}\n\nvoid pointers_polymorphic() {\n\n  auto PP0 = static_cast<PolymorphicDerived*>(new PolymorphicBase());\n  // CHECK-MESSAGES-NSTRICT: :[[@LINE-1]]:14: warning: do not use static_cast to downcast from a base to a derived class; use dynamic_cast instead [cppcoreguidelines-pro-type-static-cast-downcast]\n  // CHECK-FIXES-NSTRICT: auto PP0 = dynamic_cast<PolymorphicDerived*>(new PolymorphicBase());\n\n  const PolymorphicBase* B0;\n  auto PPC0 = static_cast<const PolymorphicDerived*>(B0);\n  // CHECK-MESSAGES-NSTRICT: :[[@LINE-1]]:15: warning: do not use static_cast to downcast from a base to a derived class; use dynamic_cast instead [cppcoreguidelines-pro-type-static-cast-downcast]\n  // CHECK-FIXES-NSTRICT: auto PPC0 = dynamic_cast<const PolymorphicDerived*>(B0);\n\n\n  auto B1 = static_cast<PolymorphicBase*>(new PolymorphicDerived()); // OK, upcast to a public base\n  auto B2 = static_cast<PolymorphicBase*>(new PolymorphicMultiDerived()); // OK, upcast to a public base\n  auto B3 = static_cast<Base*>(new PolymorphicMultiDerived()); // OK, upcast to a public base\n}\n\nvoid arrays() {\n  Base ArrayOfBase[10];\n  auto A0 = static_cast<Derived*>(ArrayOfBase);\n  // CHECK-MESSAGES-STRICT: :[[@LINE-1]]:13: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]\n}\n\nvoid arrays_polymorphic() {\n  PolymorphicBase ArrayOfPolymorphicBase[10];\n  auto AP0 = static_cast<PolymorphicDerived*>(ArrayOfPolymorphicBase);\n  // CHECK-MESSAGES-NSTRICT: :[[@LINE-1]]:14: warning: do not use static_cast to downcast from a base to a derived class; use dynamic_cast instead\n  // CHECK-FIXES-NSTRICT: auto AP0 = dynamic_cast<PolymorphicDerived*>(ArrayOfPolymorphicBase);\n}\n\nvoid references() {\n  Base B0;\n  auto R0 = static_cast<Derived&>(B0);\n  // CHECK-MESSAGES-STRICT: :[[@LINE-1]]:13: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]\n  Base& RefToBase = B0;\n  auto R1 = static_cast<Derived&>(RefToBase);\n  // CHECK-MESSAGES-STRICT: :[[@LINE-1]]:13: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]\n\n  const Base& ConstRefToBase = B0;\n  auto RC1 = static_cast<const Derived&>(ConstRefToBase);\n  // CHECK-MESSAGES-STRICT: :[[@LINE-1]]:14: warning: do not use static_cast to downcast from a base to a derived class [cppcoreguidelines-pro-type-static-cast-downcast]\n\n\n  Derived RD1;\n  auto R2 = static_cast<Base&>(RD1); // OK, upcast to a public base\n}\n\nvoid references_polymorphic() {\n  PolymorphicBase B0;\n  auto RP0 = static_cast<PolymorphicDerived&>(B0);\n  // CHECK-MESSAGES-NSTRICT: :[[@LINE-1]]:14: warning: do not use static_cast to downcast from a base to a derived class; use dynamic_cast instead\n  // CHECK-FIXES-NSTRICT: auto RP0 = dynamic_cast<PolymorphicDerived&>(B0);\n\n  PolymorphicBase& RefToPolymorphicBase = B0;\n  auto RP1 = static_cast<PolymorphicDerived&>(RefToPolymorphicBase);\n  // CHECK-MESSAGES-NSTRICT: :[[@LINE-1]]:14: warning: do not use static_cast to downcast from a base to a derived class; use dynamic_cast instead [cppcoreguidelines-pro-type-static-cast-downcast]\n  // CHECK-FIXES-NSTRICT: auto RP1 = dynamic_cast<PolymorphicDerived&>(RefToPolymorphicBase);\n\n  const PolymorphicBase& ConstRefToPolymorphicBase = B0;\n  auto RPC2 = static_cast<const PolymorphicDerived&>(ConstRefToPolymorphicBase);\n  // CHECK-MESSAGES-NSTRICT: :[[@LINE-1]]:15: warning: do not use static_cast to downcast from a base to a derived class; use dynamic_cast instead [cppcoreguidelines-pro-type-static-cast-downcast]\n  // CHECK-FIXES-NSTRICT: auto RPC2 = dynamic_cast<const PolymorphicDerived&>(ConstRefToPolymorphicBase);\n\n  PolymorphicDerived d1;\n  auto RP2 = static_cast<PolymorphicBase&>(d1); // OK, upcast to a public base\n}\n\ntemplate<class B, class D>\nvoid templ() {\n  auto B0 = static_cast<B*>(new D());\n}\n\nvoid templ_bad_call() {\n  templ<Derived, Base>(); //FIXME: this should trigger a warning\n}\n\nvoid templ_good_call() {\n  templ<Base, Derived>(); // OK, upcast to a public base\n}"
    }
  ]
}