{
  "name": "ImplicitConversionInLoop",
  "language": "cpp",
  "description": ".. title:: clang-tidy - performance-implicit-conversion-in-loop",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 101,
  "branches": 11,
  "apis": 50,
  "test": [
    {
      "description": null,
      "expected-problems": 12,
      "expected-linenumbers": [
        101,
        109,
        118,
        126,
        135,
        143,
        151,
        159,
        168,
        176,
        184,
        193
      ],
      "code": "\n// RUN: %check_clang_tidy %s performance-implicit-conversion-in-loop %t\n\n// ---------- Classes used in the tests ----------\n\n// Iterator returning by value.\ntemplate <typename T>\nstruct Iterator {\n  void operator++();\n  T operator*();\n  bool operator!=(const Iterator& other);\n};\n\n// Iterator returning by reference.\ntemplate <typename T>\nstruct RefIterator {\n  void operator++();\n  T& operator*();\n  bool operator!=(const RefIterator& other);\n};\n\n// The template argument is an iterator type, and a view is an object you can\n// run a for loop on.\ntemplate <typename T>\nstruct View {\n  T begin();\n  T end();\n};\n\n// With this class, the implicit conversion is a call to the (implicit)\n// constructor of the class.\ntemplate <typename T>\nclass ImplicitWrapper {\n public:\n  // Implicit!\n  ImplicitWrapper(const T& t);\n};\n\n// With this class, the implicit conversion is a call to the conversion\n// operators of SimpleClass and ComplexClass.\ntemplate <typename T>\nclass OperatorWrapper {\n public:\n  OperatorWrapper() = delete;\n};\n\nstruct SimpleClass {\n  int foo;\n  operator OperatorWrapper<SimpleClass>();\n};\n\n// The materialize expression is not the same when the class has a destructor,\n// so we make sure we cover that case too.\nclass ComplexClass {\n public:\n  ComplexClass();\n  ~ComplexClass();\n  operator OperatorWrapper<ComplexClass>();\n};\n\ntypedef View<Iterator<SimpleClass>> SimpleView;\ntypedef View<RefIterator<SimpleClass>> SimpleRefView;\ntypedef View<Iterator<ComplexClass>> ComplexView;\ntypedef View<RefIterator<ComplexClass>> ComplexRefView;\n\n// ---------- The test themselves ----------\n// For each test we do, in the same order, const ref, non const ref, const\n// value, non const value.\n\nvoid SimpleClassIterator() {\n  for (const SimpleClass& foo : SimpleView()) {}\n  // This line does not compile because a temporary cannot be assigned to a non\n  // const reference.\n  // for (SimpleClass& foo : SimpleView()) {}\n  for (const SimpleClass foo : SimpleView()) {}\n  for (SimpleClass foo : SimpleView()) {}\n}\n\nvoid SimpleClassRefIterator() {\n  for (const SimpleClass& foo : SimpleRefView()) {}\n  for (SimpleClass& foo : SimpleRefView()) {}\n  for (const SimpleClass foo : SimpleRefView()) {}\n  for (SimpleClass foo : SimpleRefView()) {}\n}\n\nvoid ComplexClassIterator() {\n  for (const ComplexClass& foo : ComplexView()) {}\n  // for (ComplexClass& foo : ComplexView()) {}\n  for (const ComplexClass foo : ComplexView()) {}\n  for (ComplexClass foo : ComplexView()) {}\n}\n\nvoid ComplexClassRefIterator() {\n  for (const ComplexClass& foo : ComplexRefView()) {}\n  for (ComplexClass& foo : ComplexRefView()) {}\n  for (const ComplexClass foo : ComplexRefView()) {}\n  for (ComplexClass foo : ComplexRefView()) {}\n}\n\nvoid ImplicitSimpleClassIterator() {\n  for (const ImplicitWrapper<SimpleClass>& foo : SimpleView()) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the loop variable 'foo' is different from the one returned by the iterator and generates an implicit conversion; you can either change the type to the matching one ('const SimpleClass &' but 'const auto&' is always a valid option) or remove the reference to make it explicit that you are creating a new value [performance-implicit-conversion-in-loop]\n  // for (ImplicitWrapper<SimpleClass>& foo : SimpleView()) {}\n  for (const ImplicitWrapper<SimpleClass> foo : SimpleView()) {}\n  for (ImplicitWrapper<SimpleClass> foo : SimpleView()) {}\n}\n\nvoid ImplicitSimpleClassRefIterator() {\n  for (const ImplicitWrapper<SimpleClass>& foo : SimpleRefView()) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const SimpleClass &'.*}}\n  // for (ImplicitWrapper<SimpleClass>& foo : SimpleRefView()) {}\n  for (const ImplicitWrapper<SimpleClass> foo : SimpleRefView()) {}\n  for (ImplicitWrapper<SimpleClass> foo : SimpleRefView()) {}\n}\n\nvoid ImplicitSimpleClassArray() {\n  SimpleClass array[5];\n  for (const ImplicitWrapper<SimpleClass>& foo : array) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const SimpleClass &'.*}}\n  // for (ImplicitWrapper<SimpleClass>& foo : array) {}\n  for (const ImplicitWrapper<SimpleClass> foo : array) {}\n  for (ImplicitWrapper<SimpleClass> foo : array) {}\n}\n\nvoid ImplicitComplexClassIterator() {\n  for (const ImplicitWrapper<ComplexClass>& foo : ComplexView()) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const ComplexClass &'.*}}\n  // for (ImplicitWrapper<ComplexClass>& foo : ComplexView()) {}\n  for (const ImplicitWrapper<ComplexClass> foo : ComplexView()) {}\n  for (ImplicitWrapper<ComplexClass> foo : ComplexView()) {}\n}\n\nvoid ImplicitComplexClassRefIterator() {\n  ComplexClass array[5];\n  for (const ImplicitWrapper<ComplexClass>& foo : array) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const ComplexClass &'.*}}\n  // for (ImplicitWrapper<ComplexClass>& foo : array) {}\n  for (const ImplicitWrapper<ComplexClass> foo : array) {}\n  for (ImplicitWrapper<ComplexClass> foo : array) {}\n}\n\nvoid ImplicitComplexClassArray() {\n  for (const ImplicitWrapper<ComplexClass>& foo : ComplexRefView()) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const ComplexClass &'.*}}\n  // for (ImplicitWrapper<ComplexClass>& foo : ComplexRefView()) {}\n  for (const ImplicitWrapper<ComplexClass> foo : ComplexRefView()) {}\n  for (ImplicitWrapper<ComplexClass> foo : ComplexRefView()) {}\n}\n\nvoid OperatorSimpleClassIterator() {\n  for (const OperatorWrapper<SimpleClass>& foo : SimpleView()) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const SimpleClass &'.*}}\n  // for (OperatorWrapper<SimpleClass>& foo : SimpleView()) {}\n  for (const OperatorWrapper<SimpleClass> foo : SimpleView()) {}\n  for (OperatorWrapper<SimpleClass> foo : SimpleView()) {}\n}\n\nvoid OperatorSimpleClassRefIterator() {\n  for (const OperatorWrapper<SimpleClass>& foo : SimpleRefView()) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const SimpleClass &'.*}}\n  // for (OperatorWrapper<SimpleClass>& foo : SimpleRefView()) {}\n  for (const OperatorWrapper<SimpleClass> foo : SimpleRefView()) {}\n  for (OperatorWrapper<SimpleClass> foo : SimpleRefView()) {}\n}\n\nvoid OperatorSimpleClassArray() {\n  SimpleClass array[5];\n  for (const OperatorWrapper<SimpleClass>& foo : array) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const SimpleClass &'.*}}\n  // for (OperatorWrapper<SimpleClass>& foo : array) {}\n  for (const OperatorWrapper<SimpleClass> foo : array) {}\n  for (OperatorWrapper<SimpleClass> foo : array) {}\n}\n\nvoid OperatorComplexClassIterator() {\n  for (const OperatorWrapper<ComplexClass>& foo : ComplexView()) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const ComplexClass &'.*}}\n  // for (OperatorWrapper<ComplexClass>& foo : ComplexView()) {}\n  for (const OperatorWrapper<ComplexClass> foo : ComplexView()) {}\n  for (OperatorWrapper<ComplexClass> foo : ComplexView()) {}\n}\n\nvoid OperatorComplexClassRefIterator() {\n  for (const OperatorWrapper<ComplexClass>& foo : ComplexRefView()) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const ComplexClass &'.*}}\n  // for (OperatorWrapper<ComplexClass>& foo : ComplexRefView()) {}\n  for (const OperatorWrapper<ComplexClass> foo : ComplexRefView()) {}\n  for (OperatorWrapper<ComplexClass> foo : ComplexRefView()) {}\n}\n\nvoid OperatorComplexClassArray() {\n  ComplexClass array[5];\n  for (const OperatorWrapper<ComplexClass>& foo : array) {}\n  // CHECK-MESSAGES: [[@LINE-1]]:{{[0-9]*}}: warning: the type of the{{.*'const ComplexClass &'.*}}\n  // for (OperatorWrapper<ComplexClass>& foo : array) {}\n  for (const OperatorWrapper<ComplexClass> foo : array) {}\n  for (OperatorWrapper<ComplexClass> foo : array) {}\n}"
    }
  ]
}