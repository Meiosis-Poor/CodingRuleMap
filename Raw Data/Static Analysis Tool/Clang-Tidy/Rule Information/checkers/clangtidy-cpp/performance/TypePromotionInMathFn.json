{
  "name": "TypePromotionInMathFn",
  "language": "cpp",
  "description": ".. title:: clang-tidy - performance-type-promotion-in-math-fn",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 196,
  "branches": 6,
  "apis": 144,
  "test": [
    {
      "description": null,
      "expected-problems": 63,
      "expected-linenumbers": [
        69,
        72,
        75,
        78,
        81,
        84,
        87,
        90,
        93,
        96,
        99,
        102,
        105,
        108,
        111,
        114,
        117,
        120,
        123,
        126,
        129,
        132,
        135,
        138,
        141,
        144,
        147,
        150,
        153,
        156,
        159,
        162,
        165,
        168,
        171,
        174,
        177,
        180,
        183,
        186,
        189,
        192,
        195,
        198,
        201,
        204,
        207,
        210,
        213,
        216,
        219,
        222,
        225,
        228,
        231,
        239,
        242,
        245,
        248,
        261,
        264,
        277,
        280
      ],
      "code": "\n// RUN: %check_clang_tidy %s performance-type-promotion-in-math-fn %t\n\n// CHECK-FIXES: #include <cmath>\n\ndouble acos(double);\ndouble acosh(double);\ndouble asin(double);\ndouble asinh(double);\ndouble atan2(double, double);\ndouble atan(double);\ndouble atanh(double);\ndouble cbrt(double);\ndouble ceil(double);\ndouble copysign(double, double);\ndouble cos(double);\ndouble cosh(double);\ndouble erfc(double);\ndouble erf(double);\ndouble exp2(double);\ndouble exp(double);\ndouble expm1(double);\ndouble fabs(double);\ndouble fdim(double, double);\ndouble floor(double);\ndouble fma(double, double, double);\ndouble fmax(double, double);\ndouble fmin(double, double);\ndouble fmod(double, double);\ndouble frexp(double, int *);\ndouble hypot(double, double);\ndouble ilogb(double);\ndouble ldexp(double, double);\ndouble lgamma(double);\nlong long llrint(double);\ndouble log10(double);\ndouble log1p(double);\ndouble log2(double);\ndouble logb(double);\ndouble log(double);\nlong lrint(double);\ndouble modf(double);\ndouble nearbyint(double);\ndouble nextafter(double, double);\ndouble nexttoward(double, long double);\ndouble pow(double, double);\ndouble remainder(double, double);\ndouble remquo(double, double, int *);\ndouble rint(double);\ndouble round(double);\ndouble scalbln(double, long);\ndouble scalbn(double, int);\ndouble sin(double);\ndouble sinh(double);\ndouble sqrt(double);\ndouble tan(double);\ndouble tanh(double);\ndouble tgamma(double);\ndouble trunc(double);\nlong long llround(double);\nlong lround(double);\n\nvoid check_all_fns() {\n  float a, b, c;\n  int i;\n  long l;\n  int *int_ptr;\n\n  acos(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'acos' promotes float to double [performance-type-promotion-in-math-fn]\n  // CHECK-FIXES: std::acos(a);\n  acosh(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'acosh'\n  // CHECK-FIXES: std::acosh(a);\n  asin(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'asin'\n  // CHECK-FIXES: std::asin(a);\n  asinh(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'asinh'\n  // CHECK-FIXES: std::asinh(a);\n  atan2(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'atan2'\n  // CHECK-FIXES: std::atan2(a, b);\n  atan(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'atan'\n  // CHECK-FIXES: std::atan(a);\n  atanh(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'atanh'\n  // CHECK-FIXES: std::atanh(a);\n  cbrt(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'cbrt'\n  // CHECK-FIXES: std::cbrt(a);\n  ceil(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'ceil'\n  // CHECK-FIXES: std::ceil(a);\n  copysign(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'copysign'\n  // CHECK-FIXES: std::copysign(a, b);\n  cos(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'cos'\n  // CHECK-FIXES: std::cos(a);\n  cosh(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'cosh'\n  // CHECK-FIXES: std::cosh(a);\n  erf(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'erf'\n  // CHECK-FIXES: std::erf(a);\n  erfc(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'erfc'\n  // CHECK-FIXES: std::erfc(a);\n  exp2(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'exp2'\n  // CHECK-FIXES: std::exp2(a);\n  exp(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'exp'\n  // CHECK-FIXES: std::exp(a);\n  expm1(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'expm1'\n  // CHECK-FIXES: std::expm1(a);\n  fabs(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'fabs'\n  // CHECK-FIXES: std::fabs(a);\n  fdim(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'fdim'\n  // CHECK-FIXES: std::fdim(a, b);\n  floor(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'floor'\n  // CHECK-FIXES: std::floor(a);\n  fma(a, b, c);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'fma'\n  // CHECK-FIXES: std::fma(a, b, c);\n  fmax(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'fmax'\n  // CHECK-FIXES: std::fmax(a, b);\n  fmin(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'fmin'\n  // CHECK-FIXES: std::fmin(a, b);\n  fmod(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'fmod'\n  // CHECK-FIXES: std::fmod(a, b);\n  frexp(a, int_ptr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'frexp'\n  // CHECK-FIXES: std::frexp(a, int_ptr);\n  hypot(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'hypot'\n  // CHECK-FIXES: std::hypot(a, b);\n  ilogb(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'ilogb'\n  // CHECK-FIXES: std::ilogb(a);\n  ldexp(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'ldexp'\n  // CHECK-FIXES: std::ldexp(a, b);\n  lgamma(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'lgamma'\n  // CHECK-FIXES: std::lgamma(a);\n  llrint(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'llrint'\n  // CHECK-FIXES: std::llrint(a);\n  llround(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'llround'\n  // CHECK-FIXES: std::llround(a);\n  log10(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'log10'\n  // CHECK-FIXES: std::log10(a);\n  log1p(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'log1p'\n  // CHECK-FIXES: std::log1p(a);\n  log2(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'log2'\n  // CHECK-FIXES: std::log2(a);\n  log(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'log'\n  // CHECK-FIXES: std::log(a);\n  logb(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'logb'\n  // CHECK-FIXES: std::logb(a);\n  lrint(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'lrint'\n  // CHECK-FIXES: std::lrint(a);\n  lround(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'lround'\n  // CHECK-FIXES: std::lround(a);\n  nearbyint(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'nearbyint'\n  // CHECK-FIXES: std::nearbyint(a);\n  nextafter(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'nextafter'\n  // CHECK-FIXES: std::nextafter(a, b);\n  nexttoward(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'nexttoward'\n  // CHECK-FIXES: std::nexttoward(a, b);\n  pow(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'pow'\n  // CHECK-FIXES: std::pow(a, b);\n  remainder(a, b);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'remainder'\n  // CHECK-FIXES: std::remainder(a, b);\n  remquo(a, b, int_ptr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'remquo'\n  // CHECK-FIXES: std::remquo(a, b, int_ptr);\n  rint(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'rint'\n  // CHECK-FIXES: std::rint(a);\n  round(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'round'\n  // CHECK-FIXES: std::round(a);\n  scalbln(a, l);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'scalbln'\n  // CHECK-FIXES: std::scalbln(a, l);\n  scalbn(a, i);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'scalbn'\n  // CHECK-FIXES: std::scalbn(a, i);\n  sin(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'sin'\n  // CHECK-FIXES: std::sin(a);\n  sinh(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'sinh'\n  // CHECK-FIXES: std::sinh(a);\n  sqrt(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'sqrt'\n  // CHECK-FIXES: std::sqrt(a);\n  tan(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'tan'\n  // CHECK-FIXES: std::tan(a);\n  tanh(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'tanh'\n  // CHECK-FIXES: std::tanh(a);\n  tgamma(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'tgamma'\n  // CHECK-FIXES: std::tgamma(a);\n  trunc(a);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'trunc'\n  // CHECK-FIXES: std::trunc(a);\n}\n\n// nexttoward/nexttowardf are weird -- the second param is always long double.\n// So we warn if the first arg is a float, regardless of what the second arg is.\nvoid check_nexttoward() {\n  nexttoward(0.f, 0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'nexttoward'\n  // CHECK-FIXES: std::nexttoward(0.f, 0);\n  nexttoward(0.f, 0l);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'nexttoward'\n  // CHECK-FIXES: std::nexttoward(0.f, 0l);\n  nexttoward(0.f, 0.f);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'nexttoward'\n  // CHECK-FIXES: std::nexttoward(0.f, 0.f);\n  nexttoward(0.f, 0.);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'nexttoward'\n  // CHECK-FIXES: std::nexttoward(0.f, 0.);\n\n  // No warnings for these.\n  nexttoward(0., 0);\n  nexttoward(0., 0.f);\n  nexttoward(0., 0.);\n}\n\n// The second parameter to scalbn and scalbnf is an int, so we don't care what\n// type you pass as that argument; we warn iff the first argument is a float.\nvoid check_scalbn() {\n  scalbn(0.f, 0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'scalbn'\n  // CHECK-FIXES: std::scalbn(0.f, 0);\n  scalbn(0.f, static_cast<char>(0));\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'scalbn'\n  // CHECK-FIXES: std::scalbn(0.f, static_cast<char>(0));\n\n  // No warnings for these.\n  scalbn(0., 0);\n  scalbn(0., static_cast<char>(0));\n}\n\n// scalbln/scalblnf are like scalbn/scalbnf except their second arg is a long.\n// Again, doesn't matter what we pass for the second arg; we warn iff the first\n// arg is a float.\nvoid check_scalbln() {\n  scalbln(0.f, 0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'scalbln'\n  // CHECK-FIXES: std::scalbln(0.f, 0);\n  scalbln(0.f, 0l);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: call to 'scalbln'\n  // CHECK-FIXES: std::scalbln(0.f, 0l);\n\n  // No warnings for these.\n  scalbln(0., 0);\n  scalbln(0., 0l);\n}\n\nfloat cosf(float);\ndouble foo(double);         // not a math.h function\nfloat cos(float);           // not a math.h function (wrong signature)\ndouble cos(double, double); // not a math.h function (wrong signature)\n\nnamespace std {\nvoid cos(float);\n} // namespace std\n\nvoid check_no_warnings() {\n  foo(0.); // no warning because not a math.h function.\n\n  sin(0);        // no warning because arg is an int\n  cos(0.);       // no warning because arg is a double\n  std::cos(0.f); // no warning because not ::cos.\n  cosf(0.f);     // no warning; we expect this to take a float\n  cos(0.f);      // does not match the expected signature of ::cos\n  cos(0.f, 0.f); // does not match the expected signature of ::cos\n\n  // No warnings because all args are not floats.\n  remainder(0., 0.f);\n  remainder(0.f, 0.);\n  remainder(0, 0.f);\n  remainder(0.f, 0);\n  fma(0.f, 0.f, 0);\n  fma(0.f, 0.f, 0.);\n  fma(0.f, 0., 0.f);\n  fma(0., 0.f, 0.f);\n}"
    }
  ]
}