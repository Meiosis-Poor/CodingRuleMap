{
  "name": "AvoidEndl",
  "language": "cpp",
  "description": ".. title:: clang-tidy - performance-avoid-endl",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 87,
  "branches": 10,
  "apis": 59,
  "test": [
    {
      "description": null,
      "expected-problems": 50,
      "expected-linenumbers": [
        56,
        59,
        62,
        65,
        68,
        71,
        77,
        80,
        83,
        86,
        89,
        92,
        98,
        99,
        102,
        103,
        106,
        107,
        110,
        111,
        114,
        115,
        118,
        119,
        125,
        128,
        131,
        134,
        137,
        140,
        143,
        146,
        149,
        152,
        155,
        158,
        169,
        172,
        175,
        178,
        182,
        185,
        188,
        191,
        198,
        201,
        208,
        211,
        225,
        235
      ],
      "code": "\n// RUN: %check_clang_tidy %s performance-avoid-endl %t\n\nnamespace std {\n  template <typename CharT>\n  class basic_ostream {\n    public:\n    template <typename T>\n    basic_ostream& operator<<(T);\n    basic_ostream& operator<<(basic_ostream<CharT>& (*)(basic_ostream<CharT>&));\n  };\n\n  template <typename CharT>\n  class basic_iostream : public basic_ostream<CharT> {};\n\n  using ostream = basic_ostream<char>;\n  using wostream = basic_ostream<wchar_t>;\n\n  using iostream = basic_iostream<char>;\n  using wiostream = basic_iostream<wchar_t>;\n\n  ostream cout;\n  wostream wcout;\n\n  ostream cerr;\n  wostream wcerr;\n\n  ostream clog;\n  wostream wclog;\n\n  template<typename CharT>\n  basic_ostream<CharT>& endl(basic_ostream<CharT>&);\n} // namespace std\n\nvoid good() {\n  std::cout << \"Hello\" << '\\n';\n  std::cout << \"World\\n\";\n\n  std::wcout << \"Hello\" << '\\n';\n  std::wcout << \"World\\n\";\n\n  std::cerr << \"Hello\" << '\\n';\n  std::cerr << \"World\\n\";\n\n  std::wcerr << \"Hello\" << '\\n';\n  std::wcerr << \"World\\n\";\n\n  std::clog << \"Hello\" << '\\n';\n  std::clog << \"World\\n\";\n\n  std::wclog << \"Hello\" << '\\n';\n  std::wclog << \"World\\n\";\n}\n\nvoid bad() {\n  std::cout << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::cout << \"World\" << '\\n';\n  std::wcout << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wcout << \"World\" << '\\n';\n  std::cerr << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::cerr << \"World\" << '\\n';\n  std::wcerr << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wcerr << \"World\" << '\\n';\n  std::clog << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::clog << \"World\" << '\\n';\n  std::wclog << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wclog << \"World\" << '\\n';\n}\n\nvoid bad_single_argument() {\n  std::cout << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::cout << '\\n';\n  std::wcout << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wcout << '\\n';\n  std::cerr << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::cerr << '\\n';\n  std::wcerr << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wcerr << '\\n';\n  std::clog << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::clog << '\\n';\n  std::wclog << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wclog << '\\n';\n}\n\nvoid bad_multiple() {\n  std::cout << \"Hello\" << std::endl << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-MESSAGES: :[[@LINE-2]]:51: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::cout << \"Hello\" << '\\n' << \"World\" << '\\n';\n  std::wcout << \"Hello\" << std::endl << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-MESSAGES: :[[@LINE-2]]:52: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wcout << \"Hello\" << '\\n' << \"World\" << '\\n';\n  std::cerr << \"Hello\" << std::endl << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-MESSAGES: :[[@LINE-2]]:51: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::cerr << \"Hello\" << '\\n' << \"World\" << '\\n';\n  std::wcerr << \"Hello\" << std::endl << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-MESSAGES: :[[@LINE-2]]:52: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wcerr << \"Hello\" << '\\n' << \"World\" << '\\n';\n  std::clog << \"Hello\" << std::endl << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-MESSAGES: :[[@LINE-2]]:51: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::clog << \"Hello\" << '\\n' << \"World\" << '\\n';\n  std::wclog << \"Hello\" << std::endl << \"World\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:28: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-MESSAGES: :[[@LINE-2]]:52: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wclog << \"Hello\" << '\\n' << \"World\" << '\\n';\n}\n\nvoid bad_function_call() {\n  std::endl(std::cout);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::cout << '\\n';\n  std::endl(std::cout << \"Hi\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::cout << \"Hi\" << '\\n';\n  std::endl(std::wcout);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wcout << '\\n';\n  std::endl(std::wcout << \"Hi\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wcout << \"Hi\" << '\\n';\n  std::endl(std::cerr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::cerr << '\\n';\n  std::endl(std::cerr << \"Hi\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::cerr << \"Hi\" << '\\n';\n  std::endl(std::wcerr);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wcerr << '\\n';\n  std::endl(std::wcerr << \"Hi\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wcerr << \"Hi\" << '\\n';\n  std::endl(std::clog);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::clog << '\\n';\n  std::endl(std::clog << \"Hi\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::clog << \"Hi\" << '\\n';\n  std::endl(std::wclog);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wclog << '\\n';\n  std::endl(std::wclog << \"Hi\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: std::wclog << \"Hi\" << '\\n';\n}\n\nvoid bad_user_stream() {\n  std::iostream my_iostream;\n  std::wiostream my_wiostream;\n  std::ostream my_ostream;\n  std::wostream my_wostream;\n\n  my_iostream << \"Hi\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: my_iostream << \"Hi\" << '\\n';\n  my_wiostream << \"Hi\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:27: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: my_wiostream << \"Hi\" << '\\n';\n  my_ostream << \"Hi\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:25: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: my_ostream << \"Hi\" << '\\n';\n  my_wostream << \"Hi\" << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:26: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: my_wostream << \"Hi\" << '\\n';\n\n  std::endl(my_iostream);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: my_iostream << '\\n';\n  std::endl(my_wiostream);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: my_wiostream << '\\n';\n  std::endl(my_ostream);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: my_ostream << '\\n';\n  std::endl(my_wostream);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: my_wostream << '\\n';\n}\n\nusing namespace std;\nvoid bad_using_namespace_std() {\n  cout << \"Hello\" << endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:22: warning: do not use 'endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: cout << \"Hello\" << '\\n';\n  endl(cout);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: cout << '\\n';\n}\n\nnamespace my_prefix = std;\nvoid bad_using_user_namespace() {\n  my_prefix::cout << \"Hello\" << my_prefix::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:33: warning: do not use 'my_prefix::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: my_prefix::cout << \"Hello\" << '\\n';\n  my_prefix::endl(my_prefix::cout);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: do not use 'my_prefix::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: my_prefix::cout << '\\n';\n}\n\nstruct CustomLogger {\n  template <typename T>\n  std::ostream& operator<<(T);\n  std::ostream& operator<<(std::ostream& (*)(std::ostream&));\n};\n\nvoid bad_custom_stream() {\n  CustomLogger logger;\n\n  logger << std::endl;\n  // CHECK-MESSAGES: :[[@LINE-1]]:13: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n  // CHECK-FIXES: logger << '\\n';\n}\n\nnamespace gh107859 {\n\n#define ENDL std::endl;\n\nvoid bad_macro() {\n  std::cout << ENDL;\n  // CHECK-MESSAGES: :[[@LINE-1]]:16: warning: do not use 'std::endl' with streams; use '\\n' instead [performance-avoid-endl]\n}\n\n} // namespace gh107859"
    }
  ]
}