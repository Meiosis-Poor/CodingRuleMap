{
  "name": "NoexceptDestructor",
  "language": "cpp",
  "description": ".. title:: clang-tidy - performance-noexcept-destructor",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 37,
  "branches": 1,
  "apis": 13,
  "test": [
    {
      "description": null,
      "expected-problems": 13,
      "expected-linenumbers": [
        30,
        36,
        43,
        50,
        55,
        65,
        71,
        84,
        89,
        98,
        106,
        112,
        118
      ],
      "code": "\n// RUN: %check_clang_tidy %s performance-noexcept-destructor %t -- -- -fexceptions\n\nstruct Empty\n{};\n\nstruct IntWrapper {\n  int value;\n};\n\ntemplate <typename T>\nstruct FalseT {\n  static constexpr bool value = false;\n};\n\ntemplate <typename T>\nstruct TrueT {\n  static constexpr bool value = true;\n};\n\nstruct ThrowOnAnything {\n  ThrowOnAnything() noexcept(false);\n  ThrowOnAnything(ThrowOnAnything&&) noexcept(false);\n  ThrowOnAnything& operator=(ThrowOnAnything &&) noexcept(false);\n  ~ThrowOnAnything() noexcept(false);\n};\n\nstruct B {\n  static constexpr bool kFalse = false;\n  ~B() noexcept(kFalse);\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: noexcept specifier on the destructor evaluates to 'false' [performance-noexcept-destructor]\n};\n\nstruct D {\n  static constexpr bool kFalse = false;\n  ~D() noexcept(kFalse) = default;\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: noexcept specifier on the destructor evaluates to 'false' [performance-noexcept-destructor]\n};\n\ntemplate <typename>\nstruct E {\n  static constexpr bool kFalse = false;\n  ~E() noexcept(kFalse);\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: noexcept specifier on the destructor evaluates to 'false'\n};\n\ntemplate <typename>\nstruct F {\n  static constexpr bool kFalse = false;\n  ~F() noexcept(kFalse) = default;\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: noexcept specifier on the destructor evaluates to 'false' [performance-noexcept-destructor]\n};\n\nstruct G {\n  ~G() = default;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: destructors should be marked noexcept [performance-noexcept-destructor]\n  // CHECK-FIXES: ~G() noexcept  = default;\n\n  ThrowOnAnything field;\n};\n\nvoid throwing_function() noexcept(false) {}\n\nstruct H {\n  ~H() noexcept(noexcept(throwing_function()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: noexcept specifier on the destructor evaluates to 'false' [performance-noexcept-destructor]\n};\n\ntemplate <typename>\nstruct I {\n  ~I() noexcept(noexcept(throwing_function()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: noexcept specifier on the destructor evaluates to 'false' [performance-noexcept-destructor]\n};\n\ntemplate <typename T> struct TemplatedType {\n  static void f() {}\n};\n\ntemplate <> struct TemplatedType<int> {\n  static void f() noexcept {}\n};\n\nstruct J {\n  ~J() noexcept(noexcept(TemplatedType<double>::f()));\n  // CHECK-MESSAGES: :[[@LINE-1]]:17: warning: noexcept specifier on the destructor evaluates to 'false' [performance-noexcept-destructor]\n};\n\nstruct K : public ThrowOnAnything {\n  ~K() = default;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: destructors should be marked noexcept [performance-noexcept-destructor]\n  // CHECK-FIXES: ~K() noexcept  = default;\n};\n\nstruct InheritFromThrowOnAnything : public ThrowOnAnything\n{};\n\nstruct L {\n  ~L() = default;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: destructors should be marked noexcept [performance-noexcept-destructor]\n  // CHECK-FIXES: ~L() noexcept  = default;\n\n  InheritFromThrowOnAnything IFF;\n};\n\nstruct M : public InheritFromThrowOnAnything {\n  ~M() = default;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: destructors should be marked noexcept [performance-noexcept-destructor]\n  // CHECK-FIXES: ~M() noexcept  = default;\n};\n\nstruct N : public IntWrapper, ThrowOnAnything {\n  ~N() = default;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: destructors should be marked noexcept [performance-noexcept-destructor]\n  // CHECK-FIXES: ~N() noexcept  = default;\n};\n\nstruct O : virtual IntWrapper, ThrowOnAnything {\n  ~O() = default;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: destructors should be marked noexcept [performance-noexcept-destructor]\n  // CHECK-FIXES: ~O() noexcept  = default;\n};\n\nclass OK {};\n\nstruct OK1 {\n  ~OK1() noexcept;\n};\n\nstruct OK2 {\n  static constexpr bool kTrue = true;\n\n  ~OK2() noexcept(true) {}\n};\n\nstruct OK4 {\n  ~OK4() noexcept(false) {}\n};\n\nstruct OK3 {\n  ~OK3() = default;\n};\n\nstruct OK5 {\n  ~OK5() noexcept(true) = default;\n};\n\nstruct OK6 {\n  ~OK6() = default;\n};\n\ntemplate <typename>\nstruct OK7 {\n  ~OK7() = default;\n};\n\ntemplate <typename>\nstruct OK8 {\n  ~OK8() noexcept = default;\n};\n\ntemplate <typename>\nstruct OK9 {\n  ~OK9() noexcept(true) = default;\n};\n\ntemplate <typename>\nstruct OK10 {\n  ~OK10() noexcept(false) = default;\n};\n\ntemplate <typename>\nstruct OK11 {\n  ~OK11() = delete;\n};\n\nvoid noexcept_function() noexcept {}\n\nstruct OK12 {\n  ~OK12() noexcept(noexcept(noexcept_function()));\n};\n\nstruct OK13 {\n  ~OK13() noexcept(noexcept(noexcept_function())) = default;\n};\n\ntemplate <typename>\nstruct OK14 {\n  ~OK14() noexcept(noexcept(TemplatedType<int>::f()));\n};\n\nstruct OK15 {\n  ~OK15() = default;\n\n  int member;\n};\n\ntemplate <typename>\nstruct OK16 {\n  ~OK16() = default;\n\n  int member;\n};\n\nstruct OK17 {\n  ~OK17() = default;\n\n  OK empty_field;\n};\n\ntemplate <typename>\nstruct OK18 {\n  ~OK18() = default;\n\n  OK empty_field;\n};\n\nstruct OK19 : public OK {\n  ~OK19() = default;\n};\n\nstruct OK20 : virtual OK {\n  ~OK20() = default;\n};\n\ntemplate <typename T>\nstruct OK21 : public T {\n  ~OK21() = default;\n};\n\ntemplate <typename T>\nstruct OK22 : virtual T {\n  ~OK22() = default;\n};\n\ntemplate <typename T>\nstruct OK23 {\n  ~OK23() = default;\n\n  T member;\n};\n\nvoid testTemplates() {\n  OK21<Empty> value(OK21<Empty>{});\n  value = OK21<Empty>{};\n\n  OK22<Empty> value2{OK22<Empty>{}};\n  value2 = OK22<Empty>{};\n\n  OK23<Empty> value3{OK23<Empty>{}};\n  value3 =OK23<Empty>{};\n}\n\nstruct OK24 : public Empty, OK1 {\n  ~OK24() = default;\n};\n\nstruct OK25 : virtual Empty, OK1 {\n  ~OK25() = default;\n};\n\nstruct OK26 : public Empty, IntWrapper {\n  ~OK26() = default;\n};\n\ntemplate <typename T>\nstruct OK27 : public T {\n  ~OK27() = default;\n};\n\ntemplate <typename T>\nstruct OK28 : virtual T {\n  ~OK28() = default;\n};\n\ntemplate <typename T>\nstruct OK29 {\n  ~OK29() = default;\n\n  T member;\n};\n\nstruct OK30 {\n  ~OK30() noexcept(TrueT<OK30>::value) = default;\n};\n\ntemplate <typename>\nstruct OK31 {\n  ~OK31() noexcept(TrueT<int>::value) = default;\n};\n\nstruct OK32 {\n  ~OK32();\n};\n\ntemplate <typename>\nstruct OK33 {\n  ~OK33();\n};\n\nstruct OK34 {\n  ~OK34() {}\n};\n\ntemplate <typename>\nstruct OK35 {\n  ~OK35() {}\n};"
    }
  ]
}