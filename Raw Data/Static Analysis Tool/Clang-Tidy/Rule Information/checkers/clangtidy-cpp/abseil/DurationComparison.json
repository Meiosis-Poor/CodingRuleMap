{
  "name": "DurationComparison",
  "language": "cpp",
  "description": ".. title:: clang-tidy - abseil-duration-comparison",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 54,
  "branches": 6,
  "apis": 29,
  "test": [
    {
      "description": null,
      "expected-problems": 34,
      "expected-linenumbers": [
        13,
        16,
        19,
        22,
        25,
        28,
        31,
        36,
        39,
        42,
        45,
        48,
        53,
        56,
        61,
        64,
        67,
        70,
        73,
        78,
        81,
        84,
        87,
        90,
        93,
        98,
        101,
        104,
        107,
        110,
        119,
        127,
        133,
        140
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s abseil-duration-comparison %t -- -- -I%S/Inputs\n\n#include \"absl/time/time.h\"\n\nvoid f() {\n  double x;\n  absl::Duration d1, d2;\n  bool b;\n  absl::Time t1, t2;\n\n  // Check against the RHS\n  b = x > absl::ToDoubleSeconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(x) > d1;\n  b = x >= absl::ToDoubleSeconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(x) >= d1;\n  b = x == absl::ToDoubleSeconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(x) == d1;\n  b = x <= absl::ToDoubleSeconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(x) <= d1;\n  b = x < absl::ToDoubleSeconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(x) < d1;\n  b = x == absl::ToDoubleSeconds(t1 - t2);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(x) == t1 - t2;\n  b = absl::ToDoubleSeconds(d1) > absl::ToDoubleSeconds(d2);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: d1 > d2;\n\n  // Check against the LHS\n  b = absl::ToDoubleSeconds(d1) < x;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: d1 < absl::Seconds(x);\n  b = absl::ToDoubleSeconds(d1) <= x;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: d1 <= absl::Seconds(x);\n  b = absl::ToDoubleSeconds(d1) == x;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: d1 == absl::Seconds(x);\n  b = absl::ToDoubleSeconds(d1) >= x;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: d1 >= absl::Seconds(x);\n  b = absl::ToDoubleSeconds(d1) > x;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: d1 > absl::Seconds(x);\n\n  // Comparison against zero\n  b = absl::ToDoubleSeconds(d1) < 0.0;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: d1 < absl::ZeroDuration();\n  b = absl::ToDoubleSeconds(d1) < 0;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: d1 < absl::ZeroDuration();\n\n  // Scales other than Seconds\n  b = x > absl::ToDoubleMicroseconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Microseconds(x) > d1;\n  b = x >= absl::ToDoubleMilliseconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Milliseconds(x) >= d1;\n  b = x == absl::ToDoubleNanoseconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Nanoseconds(x) == d1;\n  b = x <= absl::ToDoubleMinutes(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Minutes(x) <= d1;\n  b = x < absl::ToDoubleHours(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Hours(x) < d1;\n\n  // Integer comparisons\n  b = x > absl::ToInt64Microseconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Microseconds(x) > d1;\n  b = x >= absl::ToInt64Milliseconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Milliseconds(x) >= d1;\n  b = x == absl::ToInt64Nanoseconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Nanoseconds(x) == d1;\n  b = x == absl::ToInt64Seconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(x) == d1;\n  b = x <= absl::ToInt64Minutes(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Minutes(x) <= d1;\n  b = x < absl::ToInt64Hours(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Hours(x) < d1;\n\n  // Other abseil-duration checks folded into this one\n  b = static_cast<double>(5) > absl::ToDoubleSeconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(5) > d1;\n  b = double(5) > absl::ToDoubleSeconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(5) > d1;\n  b = float(5) > absl::ToDoubleSeconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(5) > d1;\n  b = ((double)5) > absl::ToDoubleSeconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(5) > d1;\n  b = 5.0 > absl::ToDoubleSeconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Seconds(5) > d1;\n\n  // A long expression\n  bool some_condition;\n  int very_very_very_very_long_variable_name;\n  absl::Duration SomeDuration;\n  if (some_condition && very_very_very_very_long_variable_name\n     < absl::ToDoubleSeconds(SomeDuration)) {\n  // CHECK-MESSAGES: [[@LINE-2]]:25: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: if (some_condition && absl::Seconds(very_very_very_very_long_variable_name) < SomeDuration) {\n    return;\n  }\n\n  // A complex expression\n  int y;\n  b = (y + 5) * 10 > absl::ToDoubleMilliseconds(d1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: absl::Milliseconds((y + 5) * 10) > d1;\n\n  // We should still transform the expression inside this macro invocation\n#define VALUE_IF(v, e) v ? (e) : 0\n  int a = VALUE_IF(1, 5 > absl::ToDoubleSeconds(d1));\n  // CHECK-MESSAGES: [[@LINE-1]]:23: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: VALUE_IF(1, absl::Seconds(5) > d1);\n#undef VALUE_IF\n\n#define VALUE_IF_2(e) (e)\n#define VALUE_IF(v, e) v ? VALUE_IF_2(e) : VALUE_IF_2(0)\n  int a2 = VALUE_IF(1, 5 > absl::ToDoubleSeconds(d1));\n  // CHECK-MESSAGES: [[@LINE-1]]:24: warning: perform comparison in the duration domain [abseil-duration-comparison]\n  // CHECK-FIXES: VALUE_IF(1, absl::Seconds(5) > d1);\n#undef VALUE_IF\n#undef VALUE_IF_2\n\n#define VALUE_IF_2(e) (e)\n#define VALUE_IF(v, e, type) (v ? VALUE_IF_2(absl::To##type##Seconds(e)) : 0)\n  int a3 = VALUE_IF(1, d1, Double);\n#undef VALUE_IF\n#undef VALUE_IF_2\n\n#define VALUE_IF_2(e) (e)\n#define VALUE_IF(v, e, type) (v ? (5 > VALUE_IF_2(absl::To##type##Seconds(e))) : 0)\n  int a4 = VALUE_IF(1, d1, Double);\n#undef VALUE_IF\n#undef VALUE_IF_2\n\n  // These should not match\n  b = 6 < 4;\n\n#define TODOUBLE(x) absl::ToDoubleSeconds(x)\n  b = 5.0 > TODOUBLE(d1);\n#undef TODOUBLE\n#define THIRTY 30.0\n  b = THIRTY > absl::ToDoubleSeconds(d1);\n#undef THIRTY\n}"
    }
  ]
}