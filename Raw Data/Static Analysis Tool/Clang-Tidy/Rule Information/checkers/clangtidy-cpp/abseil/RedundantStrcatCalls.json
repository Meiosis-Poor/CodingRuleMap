{
  "name": "RedundantStrcatCalls",
  "language": "cpp",
  "description": ".. title:: clang-tidy - abseil-redundant-strcat-calls",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 136,
  "branches": 16,
  "apis": 83,
  "test": [
    {
      "description": null,
      "expected-problems": 7,
      "expected-linenumbers": [
        71,
        75,
        85,
        89,
        96,
        98,
        102
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s abseil-redundant-strcat-calls %t -- -- -isystem %clang_tidy_headers\n#include <string>\n\nnamespace absl {\n\nclass string_view {\n public:\n  typedef std::char_traits<char> traits_type;\n\n  string_view();\n  string_view(const char *);\n  string_view(const std::string &);\n  string_view(const char *, int);\n  string_view(string_view, int);\n\n  template <typename A>\n  explicit operator std::basic_string<char, traits_type, A>() const;\n\n  const char *data() const;\n  int size() const;\n  int length() const;\n};\n\nbool operator==(string_view A, string_view B);\n\nstruct AlphaNum {\n  AlphaNum(int i);\n  AlphaNum(double f);\n  AlphaNum(const char *c_str);\n  AlphaNum(const std::string &str);\n  AlphaNum(const string_view &pc);\n\n private:\n  AlphaNum(const AlphaNum &);\n  AlphaNum &operator=(const AlphaNum &);\n};\n\nstd::string StrCat();\nstd::string StrCat(const AlphaNum &A);\nstd::string StrCat(const AlphaNum &A, const AlphaNum &B);\nstd::string StrCat(const AlphaNum &A, const AlphaNum &B, const AlphaNum &C);\nstd::string StrCat(const AlphaNum &A, const AlphaNum &B, const AlphaNum &C,\n                   const AlphaNum &D);\n\n// Support 5 or more arguments\ntemplate <typename... AV>\nstd::string StrCat(const AlphaNum &A, const AlphaNum &B, const AlphaNum &C,\n              const AlphaNum &D, const AlphaNum &E, const AV &... args);\n\nvoid StrAppend(std::string *Dest, const AlphaNum &A);\nvoid StrAppend(std::string *Dest, const AlphaNum &A, const AlphaNum &B);\nvoid StrAppend(std::string *Dest, const AlphaNum &A, const AlphaNum &B,\n                    const AlphaNum &C);\nvoid StrAppend(std::string *Dest, const AlphaNum &A, const AlphaNum &B,\n                    const AlphaNum &C, const AlphaNum &D);\n\n// Support 5 or more arguments\ntemplate <typename... AV>\nvoid StrAppend(std::string *Dest, const AlphaNum &A, const AlphaNum &B,\n               const AlphaNum &C, const AlphaNum &D, const AlphaNum &E,\n               const AV &... args);\n\n}  // namespace absl\n\nusing absl::AlphaNum;\nusing absl::StrAppend;\nusing absl::StrCat;\n\nvoid Positives() {\n  std::string S = StrCat(1, StrCat(\"A\", StrCat(1.1)));\n  // CHECK-MESSAGES: [[@LINE-1]]:19: warning: multiple calls to 'absl::StrCat' can be flattened into a single call\n  // CHECK-FIXES: string S = StrCat(1, \"A\", 1.1);\n\n  S = StrCat(StrCat(StrCat(StrCat(StrCat(1)))));\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: multiple calls to 'absl::StrCat' can be flattened into a single call\n  // CHECK-FIXES: S = StrCat(1);\n\n  // TODO: should trigger. The issue here is that in the current\n  // implementation we ignore any StrCat with StrCat ancestors. Therefore\n  // inserting anything in between calls will disable triggering the deepest\n  // ones.\n  // s = StrCat(Identity(StrCat(StrCat(1, 2), StrCat(3, 4))));\n\n  StrAppend(&S, 001, StrCat(1, 2, \"3\"), StrCat(\"FOO\"));\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: multiple calls to 'absl::StrCat' can be flattened into a single call\n  // CHECK-FIXES: StrAppend(&S, 001, 1, 2, \"3\", \"FOO\");\n\n  StrAppend(&S, 001, StrCat(StrCat(1, 2), \"3\"), StrCat(\"FOO\"));\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: multiple calls to 'absl::StrCat' can be flattened into a single call\n  // CHECK-FIXES: StrAppend(&S, 001, 1, 2, \"3\", \"FOO\");\n\n  // Too many args. Ignore for now.\n  S = StrCat(1, 2, StrCat(3, 4, 5, 6, 7), 8, 9, 10,\n             StrCat(11, 12, 13, 14, 15, 16, 17, 18), 19, 20, 21, 22, 23, 24, 25,\n             26, 27);\n  // CHECK-MESSAGES: :[[@LINE-3]]:7: warning: multiple calls to 'absl::StrCat' can be flattened into a single call\n  StrAppend(&S, StrCat(1, 2, 3, 4, 5), StrCat(6, 7, 8, 9, 10));\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: multiple calls to 'absl::StrCat' can be flattened into a single call\n  // CHECK-FIXES: StrAppend(&S, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n  StrCat(1, StrCat());\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: multiple calls to 'absl::StrCat' can be flattened into a single call\n}\n\nvoid Negatives() {\n  // One arg. It is used for conversion. Ignore.\n  std::string S = StrCat(1);\n\n#define A_MACRO(x, y, z) StrCat(x, y, z)\n  S = A_MACRO(1, 2, StrCat(\"A\", \"B\"));\n}"
    }
  ]
}