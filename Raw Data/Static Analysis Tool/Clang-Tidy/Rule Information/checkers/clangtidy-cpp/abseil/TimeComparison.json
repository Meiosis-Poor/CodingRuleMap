{
  "name": "TimeComparison",
  "language": "cpp",
  "description": ".. title:: clang-tidy - abseil-time-comparison",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 56,
  "branches": 6,
  "apis": 29,
  "test": [
    {
      "description": null,
      "expected-problems": 23,
      "expected-linenumbers": [
        13,
        16,
        19,
        22,
        25,
        28,
        31,
        36,
        39,
        42,
        45,
        48,
        53,
        56,
        61,
        64,
        67,
        70,
        73,
        82,
        90,
        96,
        103
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s abseil-time-comparison %t -- -- -I%S/Inputs\n\n#include \"absl/time/time.h\"\n\nvoid f() {\n  double x;\n  absl::Duration d1, d2;\n  bool b;\n  absl::Time t1, t2;\n\n  // Check against the RHS\n  b = x > absl::ToUnixSeconds(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixSeconds(x) > t1;\n  b = x >= absl::ToUnixSeconds(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixSeconds(x) >= t1;\n  b = x == absl::ToUnixSeconds(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixSeconds(x) == t1;\n  b = x <= absl::ToUnixSeconds(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixSeconds(x) <= t1;\n  b = x < absl::ToUnixSeconds(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixSeconds(x) < t1;\n  b = x == absl::ToUnixSeconds(t1 - d2);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixSeconds(x) == t1 - d2;\n  b = absl::ToUnixSeconds(t1) > absl::ToUnixSeconds(t2);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: t1 > t2;\n\n  // Check against the LHS\n  b = absl::ToUnixSeconds(t1) < x;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: t1 < absl::FromUnixSeconds(x);\n  b = absl::ToUnixSeconds(t1) <= x;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: t1 <= absl::FromUnixSeconds(x);\n  b = absl::ToUnixSeconds(t1) == x;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: t1 == absl::FromUnixSeconds(x);\n  b = absl::ToUnixSeconds(t1) >= x;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: t1 >= absl::FromUnixSeconds(x);\n  b = absl::ToUnixSeconds(t1) > x;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: t1 > absl::FromUnixSeconds(x);\n\n  // Comparison against zero\n  b = absl::ToUnixSeconds(t1) < 0.0;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: t1 < absl::UnixEpoch();\n  b = absl::ToUnixSeconds(t1) < 0;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: t1 < absl::UnixEpoch();\n\n  // Scales other than Seconds\n  b = x > absl::ToUnixMicros(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixMicros(x) > t1;\n  b = x >= absl::ToUnixMillis(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixMillis(x) >= t1;\n  b = x == absl::ToUnixNanos(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixNanos(x) == t1;\n  b = x <= absl::ToUnixMinutes(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixMinutes(x) <= t1;\n  b = x < absl::ToUnixHours(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixHours(x) < t1;\n\n  // A long expression\n  bool some_condition;\n  int very_very_very_very_long_variable_name;\n  absl::Time SomeTime;\n  if (some_condition && very_very_very_very_long_variable_name\n     < absl::ToUnixSeconds(SomeTime)) {\n  // CHECK-MESSAGES: [[@LINE-2]]:25: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: if (some_condition && absl::FromUnixSeconds(very_very_very_very_long_variable_name) < SomeTime) {\n    return;\n  }\n\n  // A complex expression\n  int y;\n  b = (y + 5) * 10 > absl::ToUnixMillis(t1);\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: absl::FromUnixMillis((y + 5) * 10) > t1;\n\n  // We should still transform the expression inside this macro invocation\n#define VALUE_IF(v, e) v ? (e) : 0\n  int a = VALUE_IF(1, 5 > absl::ToUnixSeconds(t1));\n  // CHECK-MESSAGES: [[@LINE-1]]:23: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: VALUE_IF(1, absl::FromUnixSeconds(5) > t1);\n#undef VALUE_IF\n\n#define VALUE_IF_2(e) (e)\n#define VALUE_IF(v, e) v ? VALUE_IF_2(e) : VALUE_IF_2(0)\n  int a2 = VALUE_IF(1, 5 > absl::ToUnixSeconds(t1));\n  // CHECK-MESSAGES: [[@LINE-1]]:24: warning: perform comparison in the time domain [abseil-time-comparison]\n  // CHECK-FIXES: VALUE_IF(1, absl::FromUnixSeconds(5) > t1);\n#undef VALUE_IF\n#undef VALUE_IF_2\n\n#define VALUE_IF_2(e) (e)\n#define VALUE_IF(v, e, type) (v ? VALUE_IF_2(absl::To##type##Seconds(e)) : 0)\n  int a3 = VALUE_IF(1, t1, Unix);\n#undef VALUE_IF\n#undef VALUE_IF_2\n\n#define VALUE_IF_2(e) (e)\n#define VALUE_IF(v, e, type) (v ? (5 > VALUE_IF_2(absl::To##type##Seconds(e))) : 0)\n  int a4 = VALUE_IF(1, t1, Unix);\n#undef VALUE_IF\n#undef VALUE_IF_2\n\n  // These should not match\n  b = 6 < 4;\n\n#define TODOUBLE(x) absl::ToUnixSeconds(x)\n  b = 5.0 > TODOUBLE(t1);\n#undef TODOUBLE\n#define THIRTY 30.0\n  b = THIRTY > absl::ToUnixSeconds(t1);\n#undef THIRTY\n}"
    }
  ]
}