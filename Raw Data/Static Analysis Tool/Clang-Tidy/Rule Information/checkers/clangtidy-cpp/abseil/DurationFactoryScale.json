{
  "name": "DurationFactoryScale",
  "language": "cpp",
  "description": ".. title:: clang-tidy - abseil-duration-factory-scale",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 225,
  "branches": 42,
  "apis": 137,
  "test": [
    {
      "description": null,
      "expected-problems": 25,
      "expected-linenumbers": [
        13,
        16,
        19,
        22,
        25,
        28,
        31,
        34,
        37,
        40,
        43,
        48,
        51,
        56,
        59,
        62,
        65,
        70,
        73,
        76,
        79,
        84,
        87,
        90,
        93
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes %s abseil-duration-factory-scale %t -- -- -I%S/Inputs\n\n#include \"absl/time/time.h\"\n\nnamespace std { typedef long long int64_t; }\nusing int64_t = std::int64_t;\n\nvoid ScaleTest() {\n  absl::Duration d;\n\n  // Zeroes\n  d = absl::Hours(0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n  d = absl::Minutes(0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n  d = absl::Seconds(0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n  d = absl::Milliseconds(0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n  d = absl::Microseconds(0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n  d = absl::Nanoseconds(0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n  d = absl::Seconds(0.0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n  d = absl::Seconds(0x0.000001p-126f);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n  d = absl::Seconds(int{0});\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n  d = absl::Seconds(int64_t{0});\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n  d = absl::Seconds(float{0});\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use ZeroDuration() for zero-length time intervals [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::ZeroDuration();\n\n  // Fold seconds into minutes\n  d = absl::Seconds(30 * 60);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Minutes(30);\n  d = absl::Seconds(60 * 30);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Minutes(30);\n\n  // Try a few more exotic multiplications\n  d = absl::Seconds(60 * 30 * 60);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Minutes(60 * 30);\n  d = absl::Seconds(1e-3 * 30);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Milliseconds(30);\n  d = absl::Milliseconds(30 * 1000);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Seconds(30);\n  d = absl::Milliseconds(30 * 0.001);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Microseconds(30);\n\n  // Multiple steps\n  d = absl::Seconds(5 * 3600);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Hours(5);\n  d = absl::Microseconds(5 * 1e6);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Seconds(5);\n  d = absl::Seconds(5 * 1e-6);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Microseconds(5);\n  d = absl::Microseconds(5 * 1000000);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Seconds(5);\n\n  // Division\n  d = absl::Hours(30 / 60.);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Minutes(30);\n  d = absl::Seconds(30 / 1000.);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Milliseconds(30);\n  d = absl::Milliseconds(30 / 1e3);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Microseconds(30);\n  d = absl::Seconds(30 / 1e6);\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: internal duration scaling can be removed [abseil-duration-factory-scale]\n  // CHECK-FIXES: absl::Microseconds(30);\n\n  // None of these should trigger the check\n  d = absl::Seconds(60);\n  d = absl::Seconds(int{60});\n  d = absl::Seconds(float{60});\n  d = absl::Seconds(60 + 30);\n  d = absl::Seconds(60 - 30);\n  d = absl::Seconds(50 * 30);\n  d = absl::Hours(60 * 60);\n  d = absl::Nanoseconds(1e-3 * 30);\n  d = absl::Seconds(1000 / 30);\n  // We don't support division by integers, which could cause rounding\n  d = absl::Seconds(10 / 1000);\n  d = absl::Seconds(30 / 50);\n\n#define EXPRESSION 30 * 60\n  d = absl::Seconds(EXPRESSION);\n#undef EXPRESSION\n\n// This should not trigger\n#define HOURS(x) absl::Minutes(60 * x)\n  d = HOURS(40);\n#undef HOURS\n}"
    }
  ]
}