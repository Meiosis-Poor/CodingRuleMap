{
  "name": "StringFindStartswith",
  "language": "cpp",
  "description": ".. title:: clang-tidy - abseil-string-find-startswith",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 145,
  "branches": 4,
  "apis": 106,
  "test": [
    {
      "description": null,
      "expected-problems": 16,
      "expected-linenumbers": [
        31,
        35,
        39,
        43,
        47,
        51,
        55,
        59,
        63,
        67,
        71,
        75,
        79,
        83,
        87,
        91
      ],
      "code": "\n// RUN: %check_clang_tidy -std=c++17 %s abseil-string-find-startswith %t -- \\\n// RUN:   -config=\"{CheckOptions: \\\n// RUN:     {abseil-string-find-startswith.StringLikeClasses: \\\n// RUN:       '::std::basic_string;::std::basic_string_view;::basic_string'}}\" \\\n// RUN:   -- -isystem %clang_tidy_headers\n\n#include <string>\n\nusing size_t = decltype(sizeof(int));\n\nnamespace std {\nstruct cxx_string {\n  int find(const char *s, int pos = 0);\n  int rfind(const char *s, int pos = npos);\n  static constexpr size_t npos = -1;\n};\n} // namespace std\n\nstruct basic_string : public std::cxx_string {\n  basic_string();\n};\ntypedef basic_string global_string;\n\nstd::string foo(std::string);\nstd::string bar();\n\n#define A_MACRO(x, y) ((x) == (y))\n\nvoid tests(std::string s, global_string s2, std::string_view sv) {\n  s.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use absl::StartsWith instead of find() == 0 [abseil-string-find-startswith]\n  // CHECK-FIXES: absl::StartsWith(s, \"a\");\n\n  s.find(s) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use absl::StartsWith\n  // CHECK-FIXES: absl::StartsWith(s, s);\n\n  s.find(\"aaa\") != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use !absl::StartsWith\n  // CHECK-FIXES: !absl::StartsWith(s, \"aaa\");\n\n  s.find(foo(foo(bar()))) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use !absl::StartsWith\n  // CHECK-FIXES: !absl::StartsWith(s, foo(foo(bar())));\n\n  if (s.find(\"....\") == 0) { /* do something */ }\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use absl::StartsWith\n  // CHECK-FIXES: if (absl::StartsWith(s, \"....\")) { /* do something */ }\n\n  0 != s.find(\"a\");\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use !absl::StartsWith\n  // CHECK-FIXES: !absl::StartsWith(s, \"a\");\n\n  s2.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use absl::StartsWith\n  // CHECK-FIXES: absl::StartsWith(s2, \"a\");\n\n  s.rfind(\"a\", 0) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use absl::StartsWith instead of rfind() == 0 [abseil-string-find-startswith]\n  // CHECK-FIXES: absl::StartsWith(s, \"a\");\n\n  s.rfind(s, 0) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use absl::StartsWith\n  // CHECK-FIXES: absl::StartsWith(s, s);\n\n  s.rfind(\"aaa\", 0) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use !absl::StartsWith\n  // CHECK-FIXES: !absl::StartsWith(s, \"aaa\");\n\n  s.rfind(foo(foo(bar())), 0) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use !absl::StartsWith\n  // CHECK-FIXES: !absl::StartsWith(s, foo(foo(bar())));\n\n  if (s.rfind(\"....\", 0) == 0) { /* do something */ }\n  // CHECK-MESSAGES: :[[@LINE-1]]:7: warning: use absl::StartsWith\n  // CHECK-FIXES: if (absl::StartsWith(s, \"....\")) { /* do something */ }\n\n  0 != s.rfind(\"a\", 0);\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use !absl::StartsWith\n  // CHECK-FIXES: !absl::StartsWith(s, \"a\");\n\n  s2.rfind(\"a\", 0) == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use absl::StartsWith\n  // CHECK-FIXES: absl::StartsWith(s2, \"a\");\n\n  sv.find(\"a\") == 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use absl::StartsWith\n  // CHECK-FIXES: absl::StartsWith(sv, \"a\");\n\n  sv.rfind(\"a\", 0) != 0;\n  // CHECK-MESSAGES: :[[@LINE-1]]:3: warning: use !absl::StartsWith\n  // CHECK-FIXES: !absl::StartsWith(sv, \"a\");\n\n  // expressions that don't trigger the check are here.\n  A_MACRO(s.find(\"a\"), 0);\n  A_MACRO(s.rfind(\"a\", 0), 0);\n  s.find(\"a\", 1) == 0;\n  s.find(\"a\", 1) == 1;\n  s.find(\"a\") == 1;\n  s.rfind(\"a\", 1) == 0;\n  s.rfind(\"a\", 1) == 1;\n  s.rfind(\"a\") == 0;\n  s.rfind(\"a\") == 1;\n}"
    }
  ]
}