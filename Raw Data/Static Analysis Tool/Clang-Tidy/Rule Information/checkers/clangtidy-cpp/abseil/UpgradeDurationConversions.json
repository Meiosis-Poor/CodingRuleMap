{
  "name": "UpgradeDurationConversions",
  "language": "cpp",
  "description": ".. title:: clang-tidy - abseil-upgrade-duration-conversions",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "cpp",
  "loc": 161,
  "branches": 8,
  "apis": 139,
  "test": [
    {
      "description": null,
      "expected-problems": 68,
      "expected-linenumbers": [
        20,
        23,
        26,
        29,
        32,
        35,
        38,
        41,
        44,
        47,
        51,
        54,
        57,
        58,
        61,
        62,
        65,
        66,
        130,
        142,
        149,
        155,
        158,
        164,
        168,
        170,
        196,
        199,
        212,
        214,
        217,
        227,
        232,
        235,
        238,
        241,
        249,
        252,
        255,
        258,
        261,
        264,
        269,
        272,
        275,
        278,
        281,
        284,
        289,
        292,
        295,
        298,
        301,
        304,
        345,
        355,
        361,
        367,
        375,
        379,
        398,
        407,
        409,
        412,
        419,
        423,
        426,
        429
      ],
      "code": "\n// RUN: %check_clang_tidy --match-partial-fixes -std=c++11-or-later %s abseil-upgrade-duration-conversions %t -- -- -I%S/Inputs\n\nusing int64_t = long long;\n\n#include \"absl/time/time.h\"\n\ntemplate <typename T> struct ConvertibleTo {\n  operator T() const;\n};\n\ntemplate <typename T>\nConvertibleTo<T> operator+(ConvertibleTo<T>, ConvertibleTo<T>);\n\ntemplate <typename T>\nConvertibleTo<T> operator*(ConvertibleTo<T>, ConvertibleTo<T>);\n\nvoid arithmeticOperatorBasicPositive() {\n  absl::Duration d;\n  d *= ConvertibleTo<int64_t>();\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d *= static_cast<int64_t>(ConvertibleTo<int64_t>());\n  d /= ConvertibleTo<int64_t>();\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d /= static_cast<int64_t>(ConvertibleTo<int64_t>());\n  d = ConvertibleTo<int64_t>() * d;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d = static_cast<int64_t>(ConvertibleTo<int64_t>()) * d;\n  d = d * ConvertibleTo<int64_t>();\n  // CHECK-MESSAGES: [[@LINE-1]]:11: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d = d * static_cast<int64_t>(ConvertibleTo<int64_t>());\n  d = d / ConvertibleTo<int64_t>();\n  // CHECK-MESSAGES: [[@LINE-1]]:11: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d = d / static_cast<int64_t>(ConvertibleTo<int64_t>());\n  d.operator*=(ConvertibleTo<int64_t>());\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d.operator*=(static_cast<int64_t>(ConvertibleTo<int64_t>()));\n  d.operator/=(ConvertibleTo<int64_t>());\n  // CHECK-MESSAGES: [[@LINE-1]]:16: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d.operator/=(static_cast<int64_t>(ConvertibleTo<int64_t>()));\n  d = operator*(ConvertibleTo<int64_t>(), d);\n  // CHECK-MESSAGES: [[@LINE-1]]:17: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d = operator*(static_cast<int64_t>(ConvertibleTo<int64_t>()), d);\n  d = operator*(d, ConvertibleTo<int64_t>());\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d = operator*(d, static_cast<int64_t>(ConvertibleTo<int64_t>()));\n  d = operator/(d, ConvertibleTo<int64_t>());\n  // CHECK-MESSAGES: [[@LINE-1]]:20: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d = operator/(d, static_cast<int64_t>(ConvertibleTo<int64_t>()));\n  ConvertibleTo<int64_t> c;\n  d *= (c + c) * c + c;\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d *= static_cast<int64_t>((c + c) * c + c)\n  d /= (c + c) * c + c;\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d /= static_cast<int64_t>((c + c) * c + c)\n  d = d * c * c;\n  // CHECK-MESSAGES: [[@LINE-1]]:11: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-MESSAGES: [[@LINE-2]]:15: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d = d * static_cast<int64_t>(c) * static_cast<int64_t>(c)\n  d = c * d * c;\n  // CHECK-MESSAGES: [[@LINE-1]]:7: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-MESSAGES: [[@LINE-2]]:15: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d = static_cast<int64_t>(c) * d * static_cast<int64_t>(c)\n  d = d / c * c;\n  // CHECK-MESSAGES: [[@LINE-1]]:11: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-MESSAGES: [[@LINE-2]]:15: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d = d / static_cast<int64_t>(c) * static_cast<int64_t>(c)\n}\n\nvoid arithmeticOperatorBasicNegative() {\n  absl::Duration d;\n  d *= char{1};\n  d *= 1;\n  d *= int64_t{1};\n  d *= 1.0f;\n  d *= 1.0;\n  d *= 1.0l;\n  d /= char{1};\n  d /= 1;\n  d /= int64_t{1};\n  d /= 1.0f;\n  d /= 1.0;\n  d /= 1.0l;\n  d = d * char{1};\n  d = d * 1;\n  d = d * int64_t{1};\n  d = d * 1.0f;\n  d = d * 1.0;\n  d = d * 1.0l;\n  d = char{1} * d;\n  d = 1 * d;\n  d = int64_t{1} * d;\n  d = 1.0f * d;\n  d = 1.0 * d;\n  d = 1.0l * d;\n  d = d / char{1};\n  d = d / 1;\n  d = d / int64_t{1};\n  d = d / 1.0f;\n  d = d / 1.0;\n  d = d / 1.0l;\n\n  d *= static_cast<int>(ConvertibleTo<int>());\n  d *= (int)ConvertibleTo<int>();\n  d *= int(ConvertibleTo<int>());\n  d /= static_cast<int>(ConvertibleTo<int>());\n  d /= (int)ConvertibleTo<int>();\n  d /= int(ConvertibleTo<int>());\n  d = static_cast<int>(ConvertibleTo<int>()) * d;\n  d = (int)ConvertibleTo<int>() * d;\n  d = int(ConvertibleTo<int>()) * d;\n  d = d * static_cast<int>(ConvertibleTo<int>());\n  d = d * (int)ConvertibleTo<int>();\n  d = d * int(ConvertibleTo<int>());\n  d = d / static_cast<int>(ConvertibleTo<int>());\n  d = d / (int)ConvertibleTo<int>();\n  d = d / int(ConvertibleTo<int>());\n\n  d *= 1 + ConvertibleTo<int>();\n  d /= 1 + ConvertibleTo<int>();\n  d = (1 + ConvertibleTo<int>()) * d;\n  d = d * (1 + ConvertibleTo<int>());\n  d = d / (1 + ConvertibleTo<int>());\n}\n\ntemplate <typename T> void templateForOpsSpecialization(T) {}\ntemplate <>\nvoid templateForOpsSpecialization<absl::Duration>(absl::Duration d) {\n  d *= ConvertibleTo<int64_t>();\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d *= static_cast<int64_t>(ConvertibleTo<int64_t>());\n}\n\ntemplate <int N> void arithmeticNonTypeTemplateParamSpecialization() {\n  absl::Duration d;\n  d *= N;\n}\n\ntemplate <> void arithmeticNonTypeTemplateParamSpecialization<5>() {\n  absl::Duration d;\n  d *= ConvertibleTo<int>();\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d *= static_cast<int64_t>(ConvertibleTo<int>());\n}\n\ntemplate <typename T> void templateOpsFix() {\n  absl::Duration d;\n  d *= ConvertibleTo<int64_t>();\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d *= static_cast<int64_t>(ConvertibleTo<int64_t>());\n}\n\ntemplate <typename T, typename U> void templateOpsWarnOnly(T t, U u) {\n  t *= u;\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  absl::Duration d;\n  d *= u;\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n}\n\ntemplate <typename T> struct TemplateTypeOpsWarnOnly {\n  void memberA(T t) {\n    d *= t;\n    // CHECK-MESSAGES: [[@LINE-1]]:10: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  }\n  template <typename U, typename V> void memberB(U u, V v) {\n    u *= v;\n    // CHECK-MESSAGES: [[@LINE-1]]:10: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n    d *= v;\n    // CHECK-MESSAGES: [[@LINE-1]]:10: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  }\n\n  absl::Duration d;\n};\n\ntemplate <typename T, typename U>\nvoid templateOpsInstantiationBeforeDefinition(T t, U u);\n\nvoid arithmeticOperatorsInTemplates() {\n  templateForOpsSpecialization(5);\n  templateForOpsSpecialization(absl::Duration());\n  arithmeticNonTypeTemplateParamSpecialization<1>();\n  arithmeticNonTypeTemplateParamSpecialization<5>();\n  templateOpsFix<int>();\n  templateOpsWarnOnly(absl::Duration(), ConvertibleTo<int>());\n  templateOpsInstantiationBeforeDefinition(absl::Duration(),\n                                           ConvertibleTo<int>());\n  TemplateTypeOpsWarnOnly<ConvertibleTo<int>> t;\n  t.memberA(ConvertibleTo<int>());\n  t.memberB(absl::Duration(), ConvertibleTo<int>());\n}\n\ntemplate <typename T, typename U>\nvoid templateOpsInstantiationBeforeDefinition(T t, U u) {\n  t *= u;\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  absl::Duration d;\n  d *= u;\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n}\n\n#define FUNCTION_MACRO(x) x\n#define CONVERTIBLE_TMP ConvertibleTo<int>()\n#define ONLY_WARN_INSIDE_MACRO_ARITHMETIC_OP d *= ConvertibleTo<int>()\n\n#define T_OBJECT T()\n#define T_CALL_EXPR d *= T()\n\ntemplate <typename T> void arithmeticTemplateAndMacro() {\n  absl::Duration d;\n  d *= T_OBJECT;\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  d *= CONVERTIBLE_TMP;\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d *= static_cast<int64_t>(CONVERTIBLE_TMP);\n  T_CALL_EXPR;\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n}\n\n#define TEMPLATE_MACRO(type)                                                   \\\n  template <typename T> void TemplateInMacro(T t) {                            \\\n    type d;                                                                    \\\n    d *= t;                                                                    \\\n  }\n\nTEMPLATE_MACRO(absl::Duration)\n// CHECK-MESSAGES: [[@LINE-1]]:1: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n\nvoid arithmeticOperatorsInMacros() {\n  absl::Duration d;\n  d = FUNCTION_MACRO(d * ConvertibleTo<int>());\n  // CHECK-MESSAGES: [[@LINE-1]]:26: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d = FUNCTION_MACRO(d * static_cast<int64_t>(ConvertibleTo<int>()));\n  d *= FUNCTION_MACRO(ConvertibleTo<int>());\n  // CHECK-MESSAGES: [[@LINE-1]]:23: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d *= static_cast<int64_t>(FUNCTION_MACRO(ConvertibleTo<int>()));\n  d *= CONVERTIBLE_TMP;\n  // CHECK-MESSAGES: [[@LINE-1]]:8: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: d *= static_cast<int64_t>(CONVERTIBLE_TMP);\n  ONLY_WARN_INSIDE_MACRO_ARITHMETIC_OP;\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  arithmeticTemplateAndMacro<ConvertibleTo<int>>();\n  TemplateInMacro(ConvertibleTo<int>());\n}\n\nvoid factoryFunctionPositive() {\n  // User defined conversion:\n  (void)absl::Nanoseconds(ConvertibleTo<int64_t>());\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Nanoseconds(static_cast<int64_t>(ConvertibleTo<int64_t>()));\n  (void)absl::Microseconds(ConvertibleTo<int64_t>());\n  // CHECK-MESSAGES: [[@LINE-1]]:28: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Microseconds(static_cast<int64_t>(ConvertibleTo<int64_t>()));\n  (void)absl::Milliseconds(ConvertibleTo<int64_t>());\n  // CHECK-MESSAGES: [[@LINE-1]]:28: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Milliseconds(static_cast<int64_t>(ConvertibleTo<int64_t>()));\n  (void)absl::Seconds(ConvertibleTo<int64_t>());\n  // CHECK-MESSAGES: [[@LINE-1]]:23: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Seconds(static_cast<int64_t>(ConvertibleTo<int64_t>()));\n  (void)absl::Minutes(ConvertibleTo<int64_t>());\n  // CHECK-MESSAGES: [[@LINE-1]]:23: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Minutes(static_cast<int64_t>(ConvertibleTo<int64_t>()));\n  (void)absl::Hours(ConvertibleTo<int64_t>());\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Hours(static_cast<int64_t>(ConvertibleTo<int64_t>()));\n\n  // User defined conversion to integral type, followed by built-in conversion:\n  (void)absl::Nanoseconds(ConvertibleTo<char>());\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Nanoseconds(static_cast<int64_t>(ConvertibleTo<char>()));\n  (void)absl::Microseconds(ConvertibleTo<char>());\n  // CHECK-MESSAGES: [[@LINE-1]]:28: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Microseconds(static_cast<int64_t>(ConvertibleTo<char>()));\n  (void)absl::Milliseconds(ConvertibleTo<char>());\n  // CHECK-MESSAGES: [[@LINE-1]]:28: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Milliseconds(static_cast<int64_t>(ConvertibleTo<char>()));\n  (void)absl::Seconds(ConvertibleTo<char>());\n  // CHECK-MESSAGES: [[@LINE-1]]:23: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Seconds(static_cast<int64_t>(ConvertibleTo<char>()));\n  (void)absl::Minutes(ConvertibleTo<char>());\n  // CHECK-MESSAGES: [[@LINE-1]]:23: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Minutes(static_cast<int64_t>(ConvertibleTo<char>()));\n  (void)absl::Hours(ConvertibleTo<char>());\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Hours(static_cast<int64_t>(ConvertibleTo<char>()));\n\n  // User defined conversion to floating point type, followed by built-in conversion:\n  (void)absl::Nanoseconds(ConvertibleTo<float>());\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Nanoseconds(static_cast<int64_t>(ConvertibleTo<float>()));\n  (void)absl::Microseconds(ConvertibleTo<float>());\n  // CHECK-MESSAGES: [[@LINE-1]]:28: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Microseconds(static_cast<int64_t>(ConvertibleTo<float>()));\n  (void)absl::Milliseconds(ConvertibleTo<float>());\n  // CHECK-MESSAGES: [[@LINE-1]]:28: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Milliseconds(static_cast<int64_t>(ConvertibleTo<float>()));\n  (void)absl::Seconds(ConvertibleTo<float>());\n  // CHECK-MESSAGES: [[@LINE-1]]:23: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Seconds(static_cast<int64_t>(ConvertibleTo<float>()));\n  (void)absl::Minutes(ConvertibleTo<float>());\n  // CHECK-MESSAGES: [[@LINE-1]]:23: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Minutes(static_cast<int64_t>(ConvertibleTo<float>()));\n  (void)absl::Hours(ConvertibleTo<float>());\n  // CHECK-MESSAGES: [[@LINE-1]]:21: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Hours(static_cast<int64_t>(ConvertibleTo<float>()));\n}\n\nvoid factoryFunctionNegative() {\n  (void)absl::Nanoseconds(char{1});\n  (void)absl::Nanoseconds(1);\n  (void)absl::Nanoseconds(int64_t{1});\n  (void)absl::Nanoseconds(1.0f);\n  (void)absl::Microseconds(char{1});\n  (void)absl::Microseconds(1);\n  (void)absl::Microseconds(int64_t{1});\n  (void)absl::Microseconds(1.0f);\n  (void)absl::Milliseconds(char{1});\n  (void)absl::Milliseconds(1);\n  (void)absl::Milliseconds(int64_t{1});\n  (void)absl::Milliseconds(1.0f);\n  (void)absl::Seconds(char{1});\n  (void)absl::Seconds(1);\n  (void)absl::Seconds(int64_t{1});\n  (void)absl::Seconds(1.0f);\n  (void)absl::Minutes(char{1});\n  (void)absl::Minutes(1);\n  (void)absl::Minutes(int64_t{1});\n  (void)absl::Minutes(1.0f);\n  (void)absl::Hours(char{1});\n  (void)absl::Hours(1);\n  (void)absl::Hours(int64_t{1});\n  (void)absl::Hours(1.0f);\n\n  (void)absl::Nanoseconds(static_cast<int>(ConvertibleTo<int>()));\n  (void)absl::Microseconds(static_cast<int>(ConvertibleTo<int>()));\n  (void)absl::Milliseconds(static_cast<int>(ConvertibleTo<int>()));\n  (void)absl::Seconds(static_cast<int>(ConvertibleTo<int>()));\n  (void)absl::Minutes(static_cast<int>(ConvertibleTo<int>()));\n  (void)absl::Hours(static_cast<int>(ConvertibleTo<int>()));\n}\n\ntemplate <typename T> void templateForFactorySpecialization(T) {}\ntemplate <> void templateForFactorySpecialization<ConvertibleTo<int>>(ConvertibleTo<int> c) {\n  (void)absl::Nanoseconds(c);\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Nanoseconds(static_cast<int64_t>(c));\n}\n\ntemplate <int N> void factoryNonTypeTemplateParamSpecialization() {\n  (void)absl::Nanoseconds(N);\n}\n\ntemplate <> void factoryNonTypeTemplateParamSpecialization<5>() {\n  (void)absl::Nanoseconds(ConvertibleTo<int>());\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Nanoseconds(static_cast<int64_t>(ConvertibleTo<int>()));\n}\n\ntemplate <typename T> void templateFactoryFix() {\n  (void)absl::Nanoseconds(ConvertibleTo<int>());\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Nanoseconds(static_cast<int64_t>(ConvertibleTo<int>()));\n}\n\ntemplate <typename T> void templateFactoryWarnOnly(T t) {\n  (void)absl::Nanoseconds(t);\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n}\n\ntemplate <typename T> void templateFactoryInstantiationBeforeDefinition(T t);\n\ntemplate <typename T> struct TemplateTypeFactoryWarnOnly {\n  void memberA(T t) {\n    (void)absl::Nanoseconds(t);\n    // CHECK-MESSAGES: [[@LINE-1]]:29: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  }\n  template <typename U> void memberB(U u) {\n    (void)absl::Nanoseconds(u);\n    // CHECK-MESSAGES: [[@LINE-1]]:29: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  }\n};\n\nvoid factoryInTemplates() {\n  templateForFactorySpecialization(5);\n  templateForFactorySpecialization(ConvertibleTo<int>());\n  factoryNonTypeTemplateParamSpecialization<1>();\n  factoryNonTypeTemplateParamSpecialization<5>();\n  templateFactoryFix<int>();\n  templateFactoryWarnOnly(ConvertibleTo<int>());\n  templateFactoryInstantiationBeforeDefinition(ConvertibleTo<int>());\n  TemplateTypeFactoryWarnOnly<ConvertibleTo<int>> t;\n  t.memberA(ConvertibleTo<int>());\n  t.memberB(ConvertibleTo<int>());\n}\n\ntemplate <typename T> void templateFactoryInstantiationBeforeDefinition(T t) {\n  (void)absl::Nanoseconds(t);\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n}\n\n#define ONLY_WARN_INSIDE_MACRO_FACTORY                                         \\\n  (void)absl::Nanoseconds(ConvertibleTo<int>())\n#define T_CALL_FACTORTY_INSIDE_MACRO (void)absl::Nanoseconds(T())\n\ntemplate <typename T> void factoryTemplateAndMacro() {\n  (void)absl::Nanoseconds(T_OBJECT);\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  (void)absl::Nanoseconds(CONVERTIBLE_TMP);\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Nanoseconds(static_cast<int64_t>(CONVERTIBLE_TMP))\n  T_CALL_FACTORTY_INSIDE_MACRO;\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n}\n\n#define TEMPLATE_FACTORY_MACRO(factory)                                        \\\n  template <typename T> void TemplateFactoryInMacro(T t) { (void)factory(t); }\n\nTEMPLATE_FACTORY_MACRO(absl::Nanoseconds)\n// CHECK-MESSAGES: [[@LINE-1]]:1: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n\nvoid factoryInMacros() {\n  (void)absl::Nanoseconds(FUNCTION_MACRO(ConvertibleTo<int>()));\n  // CHECK-MESSAGES: [[@LINE-1]]:42: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Nanoseconds(static_cast<int64_t>(FUNCTION_MACRO(ConvertibleTo<int>())));\n  (void)absl::Nanoseconds(CONVERTIBLE_TMP);\n  // CHECK-MESSAGES: [[@LINE-1]]:27: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  // CHECK-FIXES: (void)absl::Nanoseconds(static_cast<int64_t>(CONVERTIBLE_TMP))\n  ONLY_WARN_INSIDE_MACRO_FACTORY;\n  // CHECK-MESSAGES: [[@LINE-1]]:3: warning: implicit conversion to 'int64_t' is deprecated in this context; use an explicit cast instead\n  factoryTemplateAndMacro<ConvertibleTo<int>>();\n  TemplateFactoryInMacro(ConvertibleTo<int>());\n}\n\n// This is a reduced test-case for PR39949 and manifested in this check.\nnamespace std {\ntemplate <typename _Tp>\n_Tp declval();\n\ntemplate <typename _Functor, typename... _ArgTypes>\nstruct __res {\n  template <typename... _Args>\n  static decltype(declval<_Functor>()(_Args()...)) _S_test(int);\n\n  template <typename...>\n  static void _S_test(...);\n\n  typedef decltype(_S_test<_ArgTypes...>(0)) type;\n};\n\ntemplate <typename>\nstruct function;\n\ntemplate <typename... _ArgTypes>\nstruct function<void(_ArgTypes...)> {\n  template <typename _Functor,\n            typename = typename __res<_Functor, _ArgTypes...>::type>\n  function(_Functor) {}\n};\n} // namespace std\n\ntypedef std::function<void(void)> F;\n\nF foo() {\n  return F([] {});\n}"
    }
  ]
}