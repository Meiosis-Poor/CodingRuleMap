{
  "name": "NPathComplexity",
  "language": "plsql",
  "description": "\nThe NPath complexity of a method is the number of acyclic execution paths through that method.\nA threshold of 200 is generally considered the point where measures should be taken to reduce\ncomplexity and increase readability.\n        ",
  "example": "CREATE OR REPLACE\nPROCEDURE bar AS BEGIN  -- this is something more complex than it needs to be,\n    if (y) THEN -- it should be broken down into smaller methods or functions\n        for j IN 0 .. j-1 LOOP\n            if (j > r) THEN\n                doSomething;\n                while (f < 5 ) LOOP\n                    anotherThing;\n                    f := f - 27;\n                    END LOOP;\n            else\n                tryThis();\n            END IF;\n        END LOOP;\n    END IF;\n    if ( r - n > 45) THEN\n        while (doMagic) LOOP\n            findRabbits;\n        END LOOP;\n    END IF;\n    BEGIN\n        doSomethingDangerous();\n    EXCEPTION WHEN FooException THEN\n        makeAmends;\n        BEGIN\n            dontDoItAgain;\n        EXCEPTION\n        WHEN OTHERS THEN\n            log_problem;\n        END;\n    END;\nEND;",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 77,
  "branches": 8,
  "apis": 4,
  "test": [
    {
      "description": "A too complex procedure which triggers NPathComplexityRule",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nCREATE OR REPLACE\nPROCEDURE bar AS BEGIN      -- this is something more complex than it needs to be,\n    if (y) THEN             -- it should be broken down into smaller methods or functions\n        for j IN 0 .. j-1 LOOP\n            if (j > r) THEN\n                doSomething;\n                while (f < 5 ) LOOP\n                    anotherThing;\n                    f := f - 27;\n                END LOOP;\n            else\n                tryThis();\n            END IF;\n        END LOOP;\n    END IF;\n    if ( r - n > 45) THEN\n        while (doMagic) LOOP\n            findRabbits;\n        END LOOP;\n    END IF;\n    BEGIN\n        doSomethingDangerous();\n    EXCEPTION\n    WHEN FooException THEN\n        makeAmends;\n        BEGIN\n            dontDoItAgain;\n        EXCEPTION\n        WHEN OTHERS THEN\n            log_problem;\n        END;\n    END;\nEND;\n        "
    }
  ]
}