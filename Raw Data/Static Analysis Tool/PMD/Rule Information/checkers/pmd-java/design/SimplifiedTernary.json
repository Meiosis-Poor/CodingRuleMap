{
  "name": "SimplifiedTernary",
  "language": "java",
  "description": "\n\nReports ternary expression with the form `condition ? literalBoolean : foo`\nor `condition ? foo : literalBoolean`.\n\nThese expressions can be simplified as follows:\n* `condition ? true : expr` simplifies to `condition || expr`\n* `condition ? false : expr` simplifies to `!condition && expr`\n* `condition ? expr : true` simplifies to `!condition || expr`\n* `condition ? expr : false` simplifies to `condition && expr`\n\n        ",
  "example": "public class Foo {\n    public boolean test() {\n        return condition ? true : something(); // can be as simple as return condition || something();\n    }\n\n    public void test2() {\n        final boolean value = condition ? false : something(); // can be as simple as value = !condition && something();\n    }\n\n    public boolean test3() {\n        return condition ? something() : true; // can be as simple as return !condition || something();\n    }\n\n    public void test4() {\n        final boolean otherValue = condition ? something() : false; // can be as simple as condition && something();\n    }\n\n    public boolean test5() {\n        return condition ? true : false; // can be as simple as return condition;\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "condition ? true : foo",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public boolean test(boolean condition) {\n        return condition ? true : something();\n    }\n}\n        "
    },
    {
      "description": "condition ? false : foo",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test(boolean condition) {\n        final boolean value = condition ? false : something();\n    }\n}\n        "
    },
    {
      "description": "condition ? foo : true",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public boolean test(boolean condition) {\n        return condition ? something() : true;\n    }\n}\n        "
    },
    {
      "description": "condition ? foo : false",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test(boolean condition) {\n        final boolean otherValue = condition ? something() : false;\n    }\n}\n        "
    },
    {
      "description": "#3603 condition ? true : false",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public boolean test(boolean condition) {\n        return condition ? true : false;\n    }\n}\n        "
    },
    {
      "description": "#1424 False positive with ternary operator",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class SimplifiedTernary {\n    private SimplifiedTernary doStuff(SimplifiedTernary someValue, boolean condition) {\n        return condition ? something(true) : someValue;\n    }\n}\n        "
    },
    {
      "description": "#232 False positive with ternary operator using nullables",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class SimplifiedTernary {\n    public Boolean getHasCustomName(boolean mHasCustomName) {\n        return mHasCustomName ? true : null;\n    }\n}\n        "
    }
  ]
}