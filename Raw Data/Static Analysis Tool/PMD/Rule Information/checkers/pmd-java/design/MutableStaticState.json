{
  "name": "MutableStaticState",
  "language": "java",
  "description": "\nNon-private static fields should be made constants (or immutable references) by\ndeclaring them final.\n\nNon-private non-final static fields break encapsulation and can lead to hard to find\nbugs, since these fields can be modified from anywhere within the program.\nCallers can trivially access and modify non-private non-final static fields. Neither\naccesses nor modifications can be guarded against, and newly set values cannot\nbe validated.\n\nIf you are using this rule, then you don't need this\nrule {% rule java/errorprone/AssignmentToNonFinalStatic %}.\n        ",
  "example": "public class Greeter { public static Foo foo = new Foo(); ... }       // avoid this\npublic class Greeter { public static final Foo FOO = new Foo(); ... } // use this instead",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "Public fields",
      "expected-problems": 1,
      "expected-linenumbers": [
        2
      ],
      "code": "\npublic class Foo {\n    public static Foo foo = new Foo();\n    public static final Foo FOO = new Foo();\n}\n        "
    },
    {
      "description": "Default fields",
      "expected-problems": 1,
      "expected-linenumbers": [
        2
      ],
      "code": "\npublic class Foo {\n    static Foo foo = new Foo();\n    static final Foo FOO = new Foo();\n}\n        "
    },
    {
      "description": "Protected fields",
      "expected-problems": 1,
      "expected-linenumbers": [
        2
      ],
      "code": "\npublic class Foo {\n    protected static Foo foo = new Foo();\n    protected static final Foo FOO = new Foo();\n}\n        "
    },
    {
      "description": "Private fields",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private static Foo foo = new Foo();\n    private static final Foo FOO = new Foo();\n}\n        "
    }
  ]
}