{
  "name": "SimplifyBooleanExpressions",
  "language": "java",
  "description": "\nAvoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.\n        ",
  "example": "public class Bar {\n  // can be simplified to\n  // bar = isFoo();\n  private boolean bar = (isFoo() == true);\n\n  public isFoo() { return false;}\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "in field assignment",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private boolean foo = (isFoo() == true);\n    boolean isFoo() {return foo;}\n}\n        "
    },
    {
      "description": "in method body",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        boolean bar = (new String().length() >2) == false;\n    }\n}\n        "
    },
    {
      "description": "ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    boolean bar = true;\n}\n        "
    },
    {
      "description": "two cases in an && expression",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        if (getFoo() == false && isBar() == true) {}\n    }\n}\n        "
    },
    {
      "description": "simple use of BooleanLiteral, should not be flagged",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        if (true) {}\n        if (false) {}\n    }\n}\n        "
    }
  ]
}