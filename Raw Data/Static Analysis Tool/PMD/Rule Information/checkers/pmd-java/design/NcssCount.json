{
  "name": "NcssCount",
  "language": "java",
  "description": "\nThis rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines\nof code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual\nstatements. For more details on the calculation, see the documentation\n{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\n        ",
  "example": "import java.util.Collections;       // +0\nimport java.io.IOException;         // +0\n\nclass Foo {                         // +1, total Ncss = 12\n\n  public void bigMethod()           // +1\n      throws IOException {\n    int x = 0, y = 2;               // +1\n    boolean a = false, b = true;    // +1\n\n    if (a || b) {                   // +1\n      try {                         // +1\n        do {                        // +1\n          x += 2;                   // +1\n        } while (x < 12);\n\n        System.exit(0);             // +1\n      } catch (IOException ioe) {   // +1\n        throw new PatheticFailException(ioe); // +1\n      }\n    } else {\n      assert false;                 // +1\n    }\n  }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 125,
  "branches": 11,
  "apis": 14,
  "test": [
    {
      "description": "Full example - Standard version",
      "expected-problems": 4,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Full example - JavaNcss version",
      "expected-problems": 4,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Short method",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public static void main(String args[]) {\n        bar();\n    }\n}\n        "
    },
    {
      "description": "Lots of comments",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public static void main(String args[]) {\n        //nothing to see here\n        //nothing to see here\n        //nothing to see here\n        //nothing to see here\n        bar();\n        //nothing to see here\n        //nothing to see here\n        //nothing to see here\n        //nothing to see here\n        foo();\n    }\n}\n        "
    },
    {
      "description": "Test high class report level",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Test high method report Level",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Nullpointer for getQualifiedName",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic enum EnumWithAnonymousInnerClass {\n    A {\n        @Override\n        public void foo() {\n            super.foo();\n        }\n    },\n    B;\n\n    public void foo() {\n    }\n\n    interface Inner {\n        int get();\n    }\n\n    public static final Inner VAL = new Inner() {\n        @Override\n        public int get() {\n            return 1;\n        }\n    };\n}\n        "
    }
  ]
}