{
  "name": "LogicInversion",
  "language": "java",
  "description": "\nUse opposite operator instead of negating the whole expression with a logic complement operator.\n        ",
  "example": "public boolean bar(int a, int b) {\n\n    if (!(a == b)) { // use !=\n         return false;\n     }\n\n    if (!(a < b)) { // use >=\n         return false;\n    }\n\n    return true;\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "failure case, inequality",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class Foo {\n   public int bar(int x) {\n      if (!(x == 0))\n         return x;\n      return 0;\n   }\n}\n        "
    },
    {
      "description": "failure case, comparison",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class Foo {\n   public int bar(int x) {\n      if (!(x <= 0))\n         return x;\n      return 0;\n   }\n}\n        "
    },
    {
      "description": "correct inequality",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n   public int bar(int x) {\n      if (x != 0)\n         return x;\n      return 0;\n   }\n}\n        "
    },
    {
      "description": "correct comparison",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n   public int bar(int x) {\n      if (x > 0)\n         return x;\n      return 0;\n   }\n}\n        "
    },
    {
      "description": "negated negation",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(int a, int b) {\n        if (!(a != b)) { } // violation\n        if (a == b) { } // ok\n    }\n}\n        "
    }
  ]
}