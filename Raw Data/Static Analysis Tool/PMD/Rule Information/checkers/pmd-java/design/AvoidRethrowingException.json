{
  "name": "AvoidRethrowingException",
  "language": "java",
  "description": "\nCatch blocks that merely rethrow a caught exception only add to code size and runtime complexity.\n        ",
  "example": "public void bar() {\n    try {\n        // do something\n    }  catch (SomeException se) {\n       throw se;\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "failure case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        try {\n        } catch (RuntimeException se) {\n            throw se;\n        }\n    }\n}\n        "
    },
    {
      "description": "doing something else before throwing it, ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        try {\n        } catch (RuntimeException se) {\n            System.out.println(\"something interesting\");\n            throw se;\n        }\n    }\n}\n        "
    },
    {
      "description": "throwing the return value of a method call on the exception, ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        try {\n        } catch (RuntimeException se) {\n            throw se.getCause();\n        }\n    }\n}\n        "
    },
    {
      "description": "throwing a different exception, ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        try {\n        } catch (RuntimeException se) {\n            try {\n            } catch (IllegalArgumentException oe) {\n                throw se;\n            }\n        }\n    }\n}\n        "
    }
  ]
}