{
  "name": "TooManyMethods",
  "language": "java",
  "description": "\nA class with too many methods is probably a good suspect for refactoring, in order to reduce its\ncomplexity and find a way to have more fine grained objects.\n        ",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "Less than 10 methods.",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void method1(){}\n    public void method2(){}\n    public void method3(){}\n    public void method4(){}\n    public void method5(){}\n    public void method6(){}\n    public void method7(){}\n    public void method8(){}\n    public void method9(){}\n}\n        "
    },
    {
      "description": "More than 10 methods.",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void method1(){}\n    public void method2(){}\n    public void method3(){}\n    public void method4(){}\n    public void method5(){}\n    public void method6(){}\n    public void method7(){}\n    public void method8(){}\n    public void method9(){}\n    public void method10(){}\n    public void method11(){}\n    public void method12(){}\n    public void method13(){}\n    public void method14(){}\n    public void method15(){}\n    public void method16(){}\n}\n        "
    },
    {
      "description": "Less than 10 methods, with getter/setter...",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void setMethod1(){}\n    public void setMethod2(){}\n    public void setMethod3(){}\n    public void setMethod4(){}\n    public void setMethod5(){}\n\n    public void getMethod6(){}\n    public void getMethod7(){}\n    public void getMethod8(){}\n    public void getMethod9(){}\n    public void getMethod10(){}\n\n    public boolean isMethod11(){}\n    public boolean isMethod12(){}\n    public boolean isMethod13(){}\n    public boolean isMethod14(){}\n    public boolean isMethod15(){}\n    public boolean isMethod16(){}\n\n    public void method17(){}\n    public void method18(){}\n    public void method19(){}\n    public void method20(){}\n    public void method21(){}\n    public void method22(){}\n}\n        "
    },
    {
      "description": "#1457 TooManyMethods counts inner class methods",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class OuterClass {\n    public void method1() {}\n    public void method2() {}\n    public void method3() {}\n    public void method4() {}\n    public void method5() {}\n    public void method6() {}\n    public void method7() {}\n\n    public static class InnerClass extends OuterClass {\n        @Override\n        public void method1() {}\n        @Override\n        public void method2() {}\n        @Override\n        public void method3() {}\n        @Override\n        public void method4() {}\n        @Override\n        public void method5() {}\n        @Override\n        public void method6() {}\n        @Override\n        public void method7() {}\n    }\n}\n        "
    },
    {
      "description": "#3729 TooManyMethods ignores \"real\" methods which are named like getters or setters - default",
      "expected-problems": 1,
      "expected-linenumbers": [
        1
      ],
      "code": null
    },
    {
      "description": "#3729 TooManyMethods ignores \"real\" methods which are named like getters or setters - max 22 methods",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": null
    }
  ]
}