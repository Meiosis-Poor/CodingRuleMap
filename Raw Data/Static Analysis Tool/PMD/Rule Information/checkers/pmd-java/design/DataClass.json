{
  "name": "DataClass",
  "language": "java",
  "description": "\nData Classes are simple data holders, which reveal most of their state, and\nwithout complex functionality. The lack of functionality may indicate that\ntheir behaviour is defined elsewhere, which is a sign of poor data-behaviour\nproximity. By directly exposing their internals, Data Classes break encapsulation,\nand therefore reduce the system's maintainability and understandability. Moreover,\nclasses tend to strongly rely on their data representation, which makes for a brittle\ndesign.\n\nRefactoring a Data Class should focus on restoring a good data-behaviour proximity. In\nmost cases, that means moving the operations defined on the data back into the class.\nIn some other cases it may make sense to remove entirely the class and move the data\ninto the former client classes.\n\nThe rule uses metrics to implement its detection strategy. The violation message\ngives information about the values of these metrics:\n* WMC: a class complexity measure for a class, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHED_METHOD_COUNT %}\n* WOC: a 'non-triviality' measure for a class, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHT_OF_CLASS %}\n* NOPA: number of public attributes, see {% jdoc java::lang.java.metrics.JavaMetrics#NUMBER_OF_PUBLIC_FIELDS %}\n* NOAM: number of public accessor methods, see {% jdoc java::lang.java.metrics.JavaMetrics#NUMBER_OF_ACCESSORS %}\n\nThe rule identifies a god class by looking for classes which have all of the following properties:\n* High NOPA + NOAM\n* Low WOC\n* Low WMC\n        ",
  "example": "public class DataClass {\n\n  // class exposes public attributes\n  public String name = \"\";\n  public int bar = 0;\n  public int na = 0;\n\n  private int bee = 0;\n\n  // and private ones through getters\n  public void setBee(int n) {\n    bee = n;\n  }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 79,
  "branches": 11,
  "apis": 6,
  "test": [
    {
      "description": "ArgoUML data class",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "PMD data class",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "[java] [6.0.0] NPE in DataClass rule caused by empty declaration #785",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            \npublic class Foo {\n    ;;\n}\n        "
    },
    {
      "description": "Example from the documentation",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n            \n            public class DataClass {\n\n                // class exposes public attributes\n                public String name = \"\";\n                public int bar = 0;\n                public int na = 0;\n\n                private int bee = 0;\n\n                // and private ones through getters\n                public void setBee(int n) {\n                    bee = n;\n                }\n            }\n        "
    }
  ]
}