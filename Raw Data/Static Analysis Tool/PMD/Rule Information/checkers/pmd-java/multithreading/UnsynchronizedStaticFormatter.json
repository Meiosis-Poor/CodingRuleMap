{
  "name": "UnsynchronizedStaticFormatter",
  "language": "java",
  "description": "\nInstances of `java.text.Format` are generally not synchronized.\nSun recommends using separate format instances for each thread.\nIf multiple threads must access a static formatter, the formatter must be\nsynchronized on block level.\n        ",
  "example": "public class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    void bar() {\n        sdf.format(); // poor, no thread-safety\n    }\n    void foo() {\n        synchronized (sdf) { // preferred\n            sdf.format();\n        }\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 115,
  "branches": 16,
  "apis": 16,
  "test": [
    {
      "description": "Format called from non-synchronized block",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    void bar() {\n        sdf.format();\n    }\n}\n        "
    },
    {
      "description": "2, No call to format",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private final SimpleDateFormat sdf = new SimpleDateFormat();\n    void bar() {\n    }\n}\n        "
    },
    {
      "description": "3, Inside synchronized, Not OK",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    synchronized void bar() {\n        sdf.format();\n    }\n}\n        "
    },
    {
      "description": "4, Inside synchronized, OK",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    public void bar() {\n        synchronized (sdf) {\n            sdf.format();\n        }\n    }\n}\n        "
    },
    {
      "description": "5, Use DateFormat, not ok",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.text.DateFormat;\n\npublic class Foo {\n    private static final DateFormat sdf = new DateFormat();\n    synchronized void bar() {\n        sdf.format();\n    }\n}\n        "
    },
    {
      "description": "5a, Use DateFormat, ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.text.DateFormat;\n\npublic class Foo {\n    private static final DateFormat sdf = new DateFormat();\n    void bar() {\n        synchronized(sdf) {\n            sdf.format();\n        }\n    }\n}\n        "
    },
    {
      "description": "6, Use DateFormat, fail",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.text.DateFormat;\n\npublic class Foo {\n    private static final DateFormat sdf = new DateFormat();\n    void bar() {\n        sdf.format();\n    }\n}\n        "
    },
    {
      "description": "#940 False positive on UnsynchronizedStaticDateFormatter",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Locale;\n\npublic class Test {\n    private static final DateFormat enFormat = new SimpleDateFormat(\"EEEE MMMM d, yyyy 'at' hh':'mma\", Locale.US);\n    private static final DateFormat frFormat = new SimpleDateFormat(\"EEEE 'le' d MMMM yyyy 'à' HH'h'mm\", Locale.CANADA_FRENCH);\n\n    protected DateFormat getDateFormat() {\n        return \"fr\".equals(getLang()) ? frFormat : enFormat;\n    }\n\n    private String getLang() {\n        return \"fr\";\n    }\n}\n        "
    },
    {
      "description": "NumberFormatters should be detected",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.text.DecimalFormat;\n\npublic class Foo {\n    private static final DecimalFormat decimalFormat = new DecimalFormat();\n    void bar() {\n        decimalFormat.format();\n    }\n}\n        "
    },
    {
      "description": "MessageFormatters should be detected",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.text.MessageFormat;\n\npublic class Foo {\n    private static final MessageFormat messageFormat = new MessageFormat();\n    void bar() {\n        messageFormat.format();\n    }\n}\n        "
    },
    {
      "description": "#1633 [java] UnsynchronizedStaticFormatter reports commons lang FastDateFormat",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport org.apache.commons.lang3.time.FastDateFormat;\nimport java.util.Date;\n\npublic class Foo {\n    private static final FastDateFormat FDF = FastDateFormat.getInstance(\"dd.MM.yyyy HH:mm:ss\");\n    public void format() {\n        FDF.format(new Date());\n    }\n}\n        "
    },
    {
      "description": "#1815 static synchronized, Not OK",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    synchronized void bar() { // not static\n        sdf.format();\n    }\n}\n        "
    },
    {
      "description": "#1815 static synchronized, also Not OK",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    static synchronized void bar() { // not a synchronized blocks\n        sdf.format();\n    }\n}\n        "
    },
    {
      "description": "#1815 static synchronized, OK if allowMethodLevelSynchronization",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    static synchronized void bar() {\n        sdf.format();\n    }\n}\n        "
    },
    {
      "description": "#1815 static synchronized, Not OK if allowMethodLevelSynchronization",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    synchronized void bar() { // should be static\n        sdf.format();\n    }\n}\n        "
    },
    {
      "description": "#1815 static synchronized, OK",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    static void bar() {\n        synchronized(sdf) {\n            sdf.format();\n        }\n    }\n}\n        "
    },
    {
      "description": "#1815 static synchronized, Not OK",
      "expected-problems": 1,
      "expected-linenumbers": [
        7
      ],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    static void bar() {\n        synchronized(Foo.class) { // not synchronized on sdf\n            sdf.format();\n        }\n    }\n}\n        "
    },
    {
      "description": "#1903 - Block synch is valid even with allowMethodLevelSynchronization",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.text.SimpleDateFormat;\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    private void bar() {\n        synchronized(sdf) {\n            sdf.format();\n        }\n    }\n}\n        "
    },
    {
      "description": " [java] False positive UnsynchronizedStaticFormatter in static initializer #2368 ",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            import java.text.NumberFormat;\n\n            class WithFormatter {\n                private static final NumberFormat formatter;\n\n                static {\n                    formatter = NumberFormat.getInstance();\n                    formatter.setMaximumFractionDigits(2); // FALSE POSITIVE\n                }\n                // …\n            }\n        "
    }
  ]
}