{
  "name": "UseDiamondOperator",
  "language": "java",
  "description": "\nIn some cases, explicit type arguments in a constructor call for a generic type\nmay be replaced by diamond type arguments (`<>`), and be inferred by the compiler.\nThis rule recommends that you use diamond type arguments anywhere possible, since\nit avoids duplication of the type arguments, and makes the code more concise and readable.\n\nThis rule is useful when upgrading a codebase to Java 1.7, Java 1.8, or Java 9.\nThe diamond syntax was first introduced in Java 1.7. In Java 8, improvements in Java's\ntype inference made more type arguments redundant. In Java 9, type arguments inference\nwas made possible for anonymous class constructors.\n            ",
  "example": "import java.util.*;\n            class Foo {\n                static {\n                    List<String> strings;\n                    strings = new ArrayList<String>(); // unnecessary duplication of type parameters\n                    strings = new ArrayList<>();       // using diamond type arguments is more concise\n\n                    strings = new ArrayList(); // accidental use of a raw type, you can use ArrayList<> instead\n\n                    strings = new ArrayList<>() {\n                        // for anonymous classes, this is possible since Java 9 only\n                    };\n                }\n            }",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 287,
  "branches": 46,
  "apis": 22,
  "test": [
    {
      "description": "Use Diamond",
      "expected-problems": 3,
      "expected-linenumbers": [
        6,
        9,
        10
      ],
      "code": "\nimport java.util.ArrayList;\nimport java.util.List;\npublic class Foo {\n    List<String> field;\n    public void foo() {\n       List<String> strings = new ArrayList<String>();\n       List<String> strings2 = new ArrayList<>();\n       List<List<String>> strings3 = new ArrayList<>();\n       List<List<List<String>>> strings4 = new ArrayList<List<List<String>>>();\n       this.field = new ArrayList<String>();\n    }\n}\n        "
    },
    {
      "description": "False positive cases",
      "expected-problems": 2,
      "expected-linenumbers": [
        10,
        15
      ],
      "code": "\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\npublic class E {\n    public void foo(List<E> files) {\n        Iterator<E> EMPTY_ITERATOR = new ArrayList<E>().iterator(); // necessary\n        ((ListNode<E>) null).list = new ArrayList<E>();             // violation\n    }\n\n    public Map<ListNode<?>, Object> getOverriddenPropertiesByPropertyDescriptor() {\n        // assignment context\n        return Integer.compare(1,2) == 0 ? new HashMap<ListNode<?>, Object>() // violation\n                                         : new HashMap<>();\n    }\n\n    static class ListNode<E> {\n        List<E> list;\n    }\n}\n        "
    },
    {
      "description": "Anonymous classes before java 9",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class E {\n    public void foo(List<E> files) {\n        Collections.sort(files, new Comparator<E>() {\n            @Override\n            public int compare(E left, E right) {\n                return left.toString().compareTo(right.toString());\n            }\n        });\n        new ThreadLocal<List<E>>() {\n            @Override\n            protected List<E> initialValue() {\n                return null;\n            }\n        };\n    }\n}\n        "
    },
    {
      "description": "Anonymous classes after java 9",
      "expected-problems": 2,
      "expected-linenumbers": [
        8,
        17
      ],
      "code": "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class E {\n    public void foo(List<E> files) {\n        Collections.sort(files, new Comparator<E>() {\n            @Override\n            public int compare(E left, E right) {\n                return left.toString().compareTo(right.toString());\n            }\n        });\n        new ThreadLocal<List<E>>() { // not this one, it has no context\n            @Override\n            protected List<E> initialValue() {\n                return new ArrayList<E>();\n            }\n        };\n    }\n}\n        "
    },
    {
      "description": "#1624[java] UseDiamondOperator doesn't work with var",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.util.ArrayList;\npublic class Buzz {\n    public void buzz() {\n        var f = new ArrayList<String>(); // ok\n        f = new ArrayList<>(); // ok\n        f = new ArrayList<String>(); // flagged by rule\n    }\n}\n        "
    },
    {
      "description": "Multiple initializations in a single declaration",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.util.ArrayList;\nimport java.util.List;\npublic class Buzz {\n    public void buzz() {\n        List<String> foo,\n            bar = new ArrayList<String>(), // flagged\n            baz = new ArrayList<>(); // ok\n    }\n}\n        "
    },
    {
      "description": "#1723 FP with var inside lambda (declaration)",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.ArrayList;\nclass Foo {\n    {\n        Runnable someAction = () -> {\n            var foo = new ArrayList<String>(5); // ok\n            System.err.println(foo);\n        };\n    }\n}\n        "
    },
    {
      "description": "#1723 FP with var inside lambda (assignment)",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.ArrayList;\nclass Foo {\n    {\n        Runnable someAction;\n        someAction = () -> {\n            var foo = new ArrayList<String>(5); // ok\n            System.err.println(foo);\n        };\n    }\n}\n        "
    },
    {
      "description": "FP with array creation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nclass Foo {\n    {\n        Class<?> c = new Class<?>[0];\n    }\n}\n        "
    },
    {
      "description": "(J7) Version sensitive tests - avoid possible false positives on Java7",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.lang.ref.WeakReference;\n\npublic class Foo {\n    private WeakReference<Class<?>> typeReference;\n    public void foo() {\n        // this should be positive in Java 8, negative in Java 7\n        // in java 7: no violation, in java 8 violation\n        typeReference = new WeakReference<Class<?>>(String.class);\n        // this is because in java 7, new WeakReference<>(String.class) types as WeakReference<Class<String>>\n        // which is incompatible with WeakReference<Class<?>>, whereas Java 8's type inference is better.\n\n        // the following is the same:\n        // in java 7: no violation, in java 8 violation\n        Class<?> type = null;\n        typeReference = new WeakReference<Class<?>>(type);\n    }\n}\n        "
    },
    {
      "description": "(J8) Version sensitive tests - known false negatives on Java8+",
      "expected-problems": 2,
      "expected-linenumbers": [
        6,
        8
      ],
      "code": "\nimport java.lang.ref.WeakReference;\n\npublic class Foo {\n    private WeakReference<Class<?>> typeReference;\n    public void foo() {\n        typeReference = new WeakReference<Class<?>>(String.class); // pos\n        Class<?> type = null;\n        typeReference = new WeakReference<Class<?>>(type); // pos\n    }\n}\n        "
    },
    {
      "description": "False negative for nested type parameters (#2545)",
      "expected-problems": 3,
      "expected-linenumbers": [
        8,
        9,
        19
      ],
      "code": "\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.lang.ref.WeakReference;\n\npublic class UseDiamondOperatorFalseNegative {\n\n    static List<Map<String, Object>> l = new ArrayList<Map<String, Object>>(); // FN\n    static WeakReference<Class<String>> typeReference = new WeakReference<Class<String>>(String.class); // FN\n    static WeakReference<Class<?>> typeReference2 = new WeakReference<Class<?>>(String.class); // FP\n\n    public void test() {\n        final List<String> l2;\n        l2 = true ? new ArrayList<String>()\n                  : new ArrayList<String>(); // FN twice for java8+, but for java7, this is ok!\n    }\n\n    static {\n        l = new ArrayList<Map<String, Object>>(); // FN\n    }\n}\n        "
    },
    {
      "description": "(J8+) False negative for Java8+ and ternary operator (#2545)",
      "expected-problems": 2,
      "expected-linenumbers": [
        7,
        7
      ],
      "code": "\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class UseDiamondOperatorFalseNegative {\n    public void test() {\n        final List<String> l2;\n        l2 = true ? new ArrayList<String>() : new ArrayList<String>(); // FN twice for java8+, but for java7, this is ok!\n    }\n}\n        "
    },
    {
      "description": "Java 7 invocation context",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Generic<T> {\n    <E> Generic<E> method(Generic<E> e) { return e; }\n    public Generic<T> test() {\n        return method(new Generic<T>());\n    }\n}\n        "
    },
    {
      "description": "Java 8+ invocation context",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Generic<T> {\n    <E> Generic<E> method(Generic<E> e) { return e; }\n    public Generic<T> test() {\n        return method(new Generic<T>());\n    }\n}\n        "
    },
    {
      "description": "Java 8+ invocation context, no target",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Generic<T> {\n    <E> Generic<E> method(Generic<E> e) { return e; }\n    public Generic<T> test() {\n        var m = method(new Generic<T>());\n    }\n}\n        "
    },
    {
      "description": "Test message with fqcn",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npackage p;\n\npublic class Generic<T> {\n    <E> Generic<E> method(Generic<E> e) { return e; }\n    public Generic<T> test() {\n\n        return method(new p.Generic<T>());\n    }\n}\n        "
    },
    {
      "description": "Test message with inner class",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npackage p;\n\npublic class Generic<T> {\n    static class Inner<K> {}\n    <E> Generic<E> method(Generic<E> e) { return e; }\n    public Generic<T> test() {\n\n        return method(new Generic.Inner<T>());\n    }\n}\n        "
    },
    {
      "description": "Test message with raw type",
      "expected-problems": 2,
      "expected-linenumbers": [
        6,
        9
      ],
      "code": "\n            import java.util.List;\n            import java.util.ArrayList;\n            class Foo {\n                static {\n                    List<String> strings;\n                    strings = new ArrayList<String>(5); // unnecessary duplication of type parameters\n                    strings = new ArrayList<>();       // using diamond type arguments is more concise\n\n                    strings = new ArrayList(); // accidental use of a raw type, you can use ArrayList<> instead\n\n                    strings = new ArrayList<>() {\n                        // for anonymous classes, this is possible since Java 9 only\n                    };\n                }\n            }\n            "
    },
    {
      "description": "[Java] UseDiamondOperator FP when expected type and constructed type have a different parameterization #2391",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            import java.util.List;\n            interface LambdaKey<T> { String key(T value);}\n            class LambdaKeyConverter<T> {\n                public LambdaKeyConverter(final LambdaKey<T> lambdaKey) {}\n            }\n\n            public class SomeClass {\n                private final LambdaKeyConverter converter =\n                        new LambdaKeyConverter<List>(list -> String.valueOf(list.size()));\n            }\n            "
    },
    {
      "description": "IllegalStateException overload resolution not complete",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            import non.existing.ForOverloadResolution;\n            import java.util.HashMap;\n            \n            class OverloadFailure {\n                public void foo() {\n                    ForOverloadResolution.method(new HashMap<String, Object>());\n                }\n            }\n            "
    },
    {
      "description": "#2710 FP with Lombok val initializer",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport lombok.val;\nimport java.util.ArrayList;\n\npublic class Foo {\n    val foo = new ArrayList<String>(5);\n}\n            "
    },
    {
      "description": "Diamond cannot be used for anon classes in Java 8 sources",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Diamond cannot be used for anon classes in Java 7 sources",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Diamond can be used for anon classes in Java 9+ sources",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Diamond can be used for anon classes in Java 17+ sources",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Issue #3353 - FNs in PMD 6",
      "expected-problems": 3,
      "expected-linenumbers": [],
      "code": "\n            import java.sql.Timestamp;\n            import java.util.ArrayList;\n            import java.util.Arrays;\n            import java.util.Date;\n            import java.util.List;\n            import java.util.function.Consumer;\n\n            public class DiamondIssues {\n\n                public static void main(final String[] args) {\n                    // <String> is not necessary. IntelliJ does not catch this one either\n                    doStuff(new ArrayList<String>());\n\n                    // specifying <Date> is also not necessary. IntelliJ does not catch this one either\n                    final List<Timestamp> timestamps = Arrays.asList(new Timestamp(new Date().getTime()));\n                    doOtherStuff(new ArrayList<Date>(timestamps));\n\n                    // <Integer> is not required. IntelliJ correctly reports this one as un-necessary\n                    addConsumer(Integer.class, new MyConsumer<Integer>());\n                }\n\n                private static void doStuff(final Object object) {\n                    System.out.println(object);\n                }\n\n                private static void doOtherStuff(final List<? extends Date> dates) {\n                    System.out.println(dates);\n                }\n\n                private static <T> void addConsumer(final Class<? extends T> type, final Consumer<T> consumer) {\n                    // do something useful here\n                }\n\n                private static class MyConsumer<T extends Number> implements Consumer<T> {\n\n                    @Override\n                    public void accept(final T t) {\n                        System.out.println(t);\n                    }\n                }\n            }\n        "
    },
    {
      "description": "Test case with collectors",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n            public class DiamondIssues {\n\n                public static Collector<CharSequence, ?, String> joining() {\n                    return new CollectorImpl<CharSequence, StringBuilder, String>(\n                            StringBuilder::new, StringBuilder::append,\n                            (r1, r2) -> { r1.append(r2); return r1; },\n                            StringBuilder::toString);\n                }\n\n                interface Collector<A, B, C> {\n\n                }\n                interface Collector<A, B, C> {\n\n                }\n                interface Supplier<A> { A get(); }\n                interface BiConsumer<A, T> { void accept(A a, T t); }\n                interface BinaryOperator<T> { T apply(T t, T t); }\n                interface Function<T, R> { R apply(T t); }\n                static class CollectorImpl<T, A, R> implements Collector<T, A, R> {\n                    private final Supplier<A> supplier;\n                    private final BiConsumer<A, T> accumulator;\n                    private final BinaryOperator<A> combiner;\n                    private final Function<A, R> finisher;\n\n                    CollectorImpl(Supplier<A> supplier,\n                                  BiConsumer<A, T> accumulator,\n                                  BinaryOperator<A> combiner,\n                                  Function<A, R> finisher) {\n                        this.supplier = supplier;\n                        this.accumulator = accumulator;\n                        this.combiner = combiner;\n                        this.finisher = finisher;\n                    }\n                }\n            }\n        "
    }
  ]
}