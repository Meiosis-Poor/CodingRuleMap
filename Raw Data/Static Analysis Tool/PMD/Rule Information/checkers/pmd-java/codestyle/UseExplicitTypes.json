{
  "name": "UseExplicitTypes",
  "language": "java",
  "description": "\nJava 10 introduced the `var` keyword. This reduces the amount of code written because java can infer the type\nfrom the initializer of the variable declaration.\n\nThis is essentially a trade-off: On the one hand, it can make code more readable by eliminating redundant\ninformation. On the other hand, it can make code less readable by eliding useful information. There is no\nblanket rule for when `var` should be used or shouldn't.\n\nIt may make sense to use `var` when the type is inherently clear upon reading the statement\n(ie: assignment to either a literal value or a constructor call). Those use cases\ncan be enabled through properties.\n\nNotice that lambda parameters are allowed, as they are already inferred  by default (the `var` keyword\nis completely optional).\n\nSee also [Local Variable Type Inference Style Guidelines](https://openjdk.org/projects/amber/guides/lvti-style-guide).\n        ",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "No vars anywhere",
      "expected-problems": 4,
      "expected-linenumbers": [
        5,
        6,
        8,
        9
      ],
      "code": null
    },
    {
      "description": "Allow literals",
      "expected-problems": 2,
      "expected-linenumbers": [
        8,
        9
      ],
      "code": null
    },
    {
      "description": "Allow constructor calls",
      "expected-problems": 3,
      "expected-linenumbers": [
        5,
        6,
        8
      ],
      "code": null
    }
  ]
}