{
  "name": "LocalVariableNamingConventions",
  "language": "java",
  "description": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        ",
  "example": "class Foo {\n                void bar() {\n                    int localVariable = 1; // This is in camel case, so it's ok\n                    int local_variable = 1; // This will be reported unless you change the regex\n\n                    final int i_var = 1; // final local variables can be configured separately\n\n                    try {\n                        foo();\n                    } catch (IllegalArgumentException e_illegal) {\n                        // exception block parameters can be configured separately\n                    }\n\n                }\n            }",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 79,
  "branches": 12,
  "apis": 2,
  "test": [
    {
      "description": "Default is camel case",
      "expected-problems": 3,
      "expected-linenumbers": [],
      "code": "\npublic class Bar {\n    {\n        int Foo;\n        final int Hoo;\n\n        try {\n\n        } catch (Exception E) {\n\n        }\n    }\n}\n        "
    },
    {
      "description": "Test local variable property",
      "expected-problems": 3,
      "expected-linenumbers": [],
      "code": "\npublic class Bar {\n    {\n        int Foo;\n        int FOO; // that's ok\n        final int Hoo;\n\n        try {\n\n        } catch (Exception E) {\n\n        }\n    }\n}\n        "
    },
    {
      "description": "Test final local variable property",
      "expected-problems": 3,
      "expected-linenumbers": [],
      "code": "\npublic class Bar {\n    {\n        int Foo;\n        final int FOO; // that's ok\n        final int Hoo;\n\n        try {\n\n        } catch (Exception E) {\n\n        }\n    }\n}\n        "
    },
    {
      "description": "Test exception parameter property",
      "expected-problems": 3,
      "expected-linenumbers": [],
      "code": "\npublic class Bar {\n    {\n        int Foo;\n        final int Hoo;\n\n        try {\n\n        } catch (Exception Eff) {\n\n        }\n\n        try {\n\n        } catch (Exception EFF) { // that's ok\n\n        }\n    }\n}\n        "
    },
    {
      "description": "One character for loop variables should be ok by default",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.*;\npublic class LocalVarNamingConvention {\n    public void bar() {\n        for (int i = 0; i < 10; i++) { }\n\n        List<String> data = Arrays.asList(\"a\", \"b\");\n        for (String s : data) { }\n    }\n}\n        "
    },
    {
      "description": "#4954 Test unnamed vars are not checked",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            public class Bar {\n                {\n                    int _;\n                    final int _; // that's ok\n                    final int _;\n\n                    try {\n\n                    } catch (Exception _) {\n\n                    }\n                }\n            }\n            "
    }
  ]
}