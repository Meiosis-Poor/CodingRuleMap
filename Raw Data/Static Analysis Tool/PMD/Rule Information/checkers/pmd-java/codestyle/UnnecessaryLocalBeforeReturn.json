{
  "name": "UnnecessaryLocalBeforeReturn",
  "language": "java",
  "description": "\nAvoid the creation of unnecessary local variables\n        ",
  "example": "public class Foo {\n   public int foo() {\n     int x = doSomething();\n     return x;  // instead, just 'return doSomething();'\n   }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 55,
  "branches": 10,
  "apis": 7,
  "test": [
    {
      "description": "skip void/native/abstract methods",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar() {}\n    public native int buz();\n    public abstract int baz();\n}\n        "
    },
    {
      "description": "skip literal returns",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public int bar() { return 5; }\n}\n        "
    },
    {
      "description": "simple failure case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public int bar() {\n        int x = doSomething();\n        return x;\n    }\n}\n        "
    },
    {
      "description": "skip complicated returns",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public int bar() {\n        int x = doSomething();\n        return x == null ? foo : bar;\n    }\n}\n        "
    },
    {
      "description": "skip method calls",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public int bar() {\n        return doSomething(a, b, c);\n    }\n}\n        "
    },
    {
      "description": "#1495 [java] UnnecessaryLocalBeforeReturn with assert",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public int bar() {\n        int res = 2; assert res>=0;\n        return res;\n    }\n}\n        "
    },
    {
      "description": "#219 ClassCastException in switch case with local variable returned",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public int m(int val) {\n        switch (vl) {\n            default:\n                int i = 0;\n                return i;\n        }\n    }\n}\n        "
    },
    {
      "description": "Detect violation even if not on consecutive lines",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public int bar() {\n        int res = 2;\n        doSomething();\n        return res;\n    }\n\n    public void doSomething() { }\n}\n        "
    },
    {
      "description": "No violations on multiple uses of the variable",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public int bar() {\n        int res = 2;\n        doSomething(res);\n        return res;\n    }\n\n    public void doSomething(int x) { }\n}\n        "
    },
    {
      "description": "No violations on multiple uses of the variable - statement order does not matter",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public int bar() {\n        int res = 2;\n        doSomething(res);\n        return res;\n    }\n\n    public void doSomething(int x) { }\n}\n        "
    },
    {
      "description": "#933 UnnecessaryLocalBeforeReturn false positive for SuppressWarnings annotation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class TestCase<T> {\n    T getSomeT() { return null; }\n    private static <T> T findEventTypeValueByName(TestCase<?> unchecked) {\n        @SuppressWarnings(\"unchecked\")\n        T result = (T) unchecked.getSomeT();\n        return result;\n    }\n}\n        "
    },
    {
      "description": "#282 UnnecessaryLocalBeforeReturn false positive when cloning Maps",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\nimport java.util.HashMap;\npublic class CustomerErrorCollector {\n\n    private final ConcurrentHashMap<String, String> customerErrors = new ConcurrentHashMap<>();\n\n    public void error(String customerNr, String errorMsg) {\n        customerErrors.put(customerNr, errorMsg);\n    }\n\n    public Map<String, String> getAndReset() {\n        final Map<String, String> copy = new HashMap<>(customerErrors);\n        customerErrors.clear();\n        return copy; // PMD complains that variable could be avoided\n    }\n}\n        "
    },
    {
      "description": "#310 UnnecessaryLocalBeforeReturn enhancement is overly restrictive -- method order matters",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Mutable {\n    public int example1() {\n        int i = compute(); // might throw\n        markComputationDone();\n        return i; // PMD complains that variable could be avoided\n    }\n\n    public int example2() {\n        Mutable m = new Mutable();\n        int i = compute(m);\n        sideEffect(m);\n        return i;\n    }\n    static void sideEffect(Mutable m) {}\n    static int sideEffect(Mutable m) {}\n    static int compute() {}\n    static int markComputationDone() {}\n}\n        "
    },
    {
      "description": "#310 UnnecessaryLocalBeforeReturn statement order does not matter",
      "expected-problems": 2,
      "expected-linenumbers": [
        3,
        10
      ],
      "code": "\npublic class Mutable {\n    public int example1() {\n        int i = compute(); // might throw\n        markComputationDone();\n        return i; // PMD complains that variable could be avoided\n    }\n\n    public int example2() {\n        Mutable m = new Mutable();\n        int i = compute(m);\n        sideEffect(m);\n        return i;\n    }\n    static void sideEffect(Mutable m) {}\n    static int sideEffect(Mutable m) {}\n    static int compute() {}\n    static int markComputationDone() {}\n}\n        "
    },
    {
      "description": "#1775 [java] False negative in UnnecessaryLocalBeforeReturn when splitting statements across multiple lines",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class UnnecessaryLocalBeforeReturnFP {\n    public Object test2() {\n        int i = 0;\n        Object o = thing()\n            .make(i);\n        return o; // true positive\n    }\n}\n        "
    },
    {
      "description": "#1804 [java] NPE with fields",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class ObjectCreator {\n\n    private static final String A = \"\";\n    private static final String B = \"\" + A; // the existence of this line causes the NPE.\n\n    public Object create() {\n        final Object o = new Object(A);\n        return o;\n    }\n}\n        "
    },
    {
      "description": "FP with captured method reference",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.function.Supplier;\npublic class ObjectCreator {\n    public Supplier<String> create() {\n        final Object o = new Object(); // captured by the method ref\n        return o::toString;\n    }\n}\n        "
    },
    {
      "description": "FN with lambdas #3275",
      "expected-problems": 1,
      "expected-linenumbers": [
        5
      ],
      "code": "\nimport java.util.concurrent.Callable;\n\npublic class UnnecessaryLocal {\n    void foo() {\n        Callable<String> c = () -> { String s = \"1\"; return s; };\n    }\n}\n        "
    },
    {
      "description": "FN with anonymous classes #3275",
      "expected-problems": 1,
      "expected-linenumbers": [
        7
      ],
      "code": "\nimport java.util.concurrent.Callable;\n\npublic class UnnecessaryLocal {\n    void foo() {\n        Callable<String> c = new Callable<>() {\n            public String call() {\n                String s = \"1\";\n                return s;\n            }\n        };\n    }\n}\n        "
    },
    {
      "description": "[java] UnnecessaryLocalBeforeReturn - false positive with catch clause",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Example {\n    public Example() {\n        Exception result = attempt(() -> {});\n        if (result != null) {\n            throw new RuntimeException(result);\n        }\n    }\n\n    private Exception attempt(Runnable task) {\n        try {\n            task.run();\n            return null;\n        } catch (Exception e) {\n            // src/Example.java:15:    UnnecessaryLocalBeforeReturn:   Consider simply returning the value vs storing it in local variable 'e'\n            return e;\n        }\n    }\n}\n"
    },
    {
      "description": "[java] UnnecessaryLocalBeforeReturn false positive when negating variable #2206",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Example {\n    public boolean isOk() {\n        boolean isWrong = foo();\n        return !isWrong;\n    }\n\n    private boolean foo() {\n        return false;\n    }\n}\n"
    }
  ]
}