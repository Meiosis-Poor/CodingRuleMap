{
  "name": "UseUnderscoresInNumericLiterals",
  "language": "java",
  "description": "\n            Since Java 1.7, numeric literals can use underscores to separate digits. This rule enforces that\n            numeric literals above a certain length use these underscores to increase readability.\n\n            The rule only supports decimal (base 10) literals for now. The acceptable length under which literals\n            are not required to have underscores is configurable via a property. Even under that length, underscores\n            that are misplaced (not making groups of 3 digits) are reported.\n        ",
  "example": "public class Foo {\n    private int num = 1000000; // should be 1_000_000\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "ok, numeric literal with correct '_' usage",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private int num = 1_000_000;\n}\n        "
    },
    {
      "description": "bad, numeric literal without '_'",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private Integer num = 2000000;\n}\n        "
    },
    {
      "description": "bad, numeric literal used as a method parameter without '_'",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private callBar() {\n        bar(10000);\n    }\n}\n        "
    },
    {
      "description": "ok, float value with less than 3 numbers.",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    float number = 3.14f;\n}\n        "
    },
    {
      "description": "bad, double value without '_'",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    double number = 314159265.359;\n}\n        "
    },
    {
      "description": "ok, numeric literal used as a method parameter with '_'",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private callBar() {\n        bar(314_159_265.359);\n    }\n}\n        "
    },
    {
      "description": "ok, Long value with 'l' used as a method parameter with '_'",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private callBar() {\n        bar(314_159_265l);\n    }\n}\n        "
    },
    {
      "description": "bad, numeric literal with incorrect '_' usage",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    Integer number = 1_11_21_1211;\n}\n        "
    },
    {
      "description": "ok, Double value with 'D' used as a method parameter with '_'",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private callBar() {\n        bar(314_159_265.359D);\n    }\n}\n        "
    },
    {
      "description": "ok, Float value with 'F' with less than 3 numbers",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    Float number = 36.39F;\n}\n        "
    },
    {
      "description": "ok, Double value with 'd' with correct '_' usage",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    Double number = 35_007.93d;\n}\n        "
    },
    {
      "description": "ok, Long value with 'L' used as a method parameter with '_'",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private callBar() {\n        bar(314_159_265L);\n    }\n}\n        "
    },
    {
      "description": "ok, String value with '_'",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    String pi = \"zcx_xvc_cbv_vnb_bmn\";\n}\n        "
    },
    {
      "description": "ok, String value without '_'",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    String pi = \"3639\";\n}\n        "
    },
    {
      "description": "ok, Numeric Literal in binary",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int binary = 0b100111;\n}\n        "
    },
    {
      "description": "ok, Numeric Literal in octal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int binary = 047474747;\n}\n        "
    },
    {
      "description": "ok, Numeric Literal in hexadecimal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int binary = 0xabcdef;\n}\n        "
    },
    {
      "description": "ok, Numeric Literal in negative binary",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int binary = -0b100111;\n}\n        "
    },
    {
      "description": "ok, Numeric Literal in negative octal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int binary = -047474747;\n}\n        "
    },
    {
      "description": "ok, Numeric Literal in negative hexadecimal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int binary = -0xabcdef;\n}\n        "
    },
    {
      "description": "ok, Numeric Literal with exponent",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int binary = 39e1234;\n}\n        "
    },
    {
      "description": "bad, Negative exponent without '_'",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int binary = 36e-11234;\n}\n        "
    },
    {
      "description": "ok, Numeric Literal with positive exponent",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int binary = 100e+10;\n}\n        "
    },
    {
      "description": "ok, float literal in hexadecimal and exponent",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    float f = 0x1.0000_ffff_eeeep+2f;\n}\n        "
    },
    {
      "description": "ok, Lengthy numeric literal with variable name as serialVersionUID",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    static final long serialVersionUID = -2518308549741147689L;\n}\n        "
    },
    {
      "description": "bad, testing acceptableDecimalLength",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private callBar() {\n        bar(1000);\n    }\n}\n        "
    },
    {
      "description": "ok, testing acceptableDecimalLength",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int value = 10000;\n}\n        "
    },
    {
      "description": "bad, testing acceptableDecimalLength",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int value = -32_3639_6_9;\n}\n        "
    },
    {
      "description": "ok, Decimal number test",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    double value1 = 0.393_6;\n    double value2 = 0.39;\n    double value3 = -0.1;\n    double value4 = -0.123_456;\n    double value5 = +0.123_456;\n\n    double valid1 = 0.3936;\n    double valid2 = 1000.0;\n}\n        "
    },
    {
      "description": "#1527 [java] UseUnderscoresInNumericLiterals false positive on floating point numbers",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    double value1 = 36.363_636_363_636_37;\n    double value2 = 0.000_000_1;\n}\n        "
    },
    {
      "description": "Decimal number test - bad cases",
      "expected-problems": 4,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    double value1 = 0.39361234;\n    double value2 = 0.39_361_234;\n    double value3 = -0.123456;\n    double value4 = +0.123456;\n}\n        "
    }
  ]
}