{
  "name": "UnnecessaryReturn",
  "language": "java",
  "description": "\nAvoid the use of unnecessary return statements. A return is unnecessary when no\ninstructions follow anyway.\n        ",
  "example": "public class Foo {\n    public void bar() {\n        int x = 42;\n        return;\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 86,
  "branches": 15,
  "apis": 17,
  "test": [
    {
      "description": "End of a method",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n\n                void bar() {\n                    int y = 3;\n                    return;\n                }\n            }\n            "
    },
    {
      "description": "ok since method is not void",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int bar() {\n        return 2;\n    }\n}\n        "
    },
    {
      "description": "Return within if",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        if (System.out != null) return;\n    }\n}\n        "
    },
    {
      "description": "Return within if, has follower",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\npublic class Foo {\n    void bar() {\n        if (System.out != null) return;\n\n        if (System.in != null) {\n            return; // unnecessary\n        } else {\n            System.out.println(\"ok\");\n        }\n    }\n}\n        "
    },
    {
      "description": "interface methods don't have return statements",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic interface Foo {\n    void bar();\n}\n        "
    },
    {
      "description": "abstract methods don't have return statements",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    abstract void bar();\n}\n        "
    },
    {
      "description": "return inside a catch",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        try {\n        } catch(Exception e){\n            return;\n        }\n    }\n}\n        "
    },
    {
      "description": "return inside a catch - no problem",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        try {\n        } catch(Exception e){\n            return;\n        }\n        toString();\n    }\n}\n        "
    },
    {
      "description": "Catch within initializer",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    static {\n        try {\n        } catch(Exception e){\n            return;\n        }\n        toString();\n    }\n}\n        "
    },
    {
      "description": "Catch within initializer - violation",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    static {\n        try {\n        } catch(Exception e){\n            return;\n        }\n    }\n}\n        "
    },
    {
      "description": "Catch within initializer - violation",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    static {\n        try {\n        } catch(Exception e) {\n            return;\n        } finally {\n            printSomething();\n        }\n    }\n}\n        "
    },
    {
      "description": "If within initializer - violation",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    static {\n        int i;\n        if (foo()) {\n            i = 0;\n            return;\n        } else if (bar()) {\n            i = 1;\n            return;\n        }\n    }\n}\n        "
    },
    {
      "description": "If within initializer - no violation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    static {\n        int i;\n        if (foo()) {\n            i = 0;\n            return;\n        } else if (bar()) {\n            i = 1;\n            return;\n        }\n        System.out.println(i);\n    }\n}\n            "
    },
    {
      "description": "Return in fallthrough switch",
      "expected-problems": 1,
      "expected-linenumbers": [
        11
      ],
      "code": "\n            public class Foo {\n                {\n                    int i, j;\n                    switch (i) {\n                    case 1:\n                        return;\n                    case 2:\n                        j = 2;\n                    case 4:\n                        j = 5;\n                        return; // this one is unnecessary\n                    }\n                }\n            }\n            "
    },
    {
      "description": "Return in fallthrough switch (with blocks)",
      "expected-problems": 1,
      "expected-linenumbers": [
        15
      ],
      "code": "\n            public class Foo {\n                // Note that those blocks are useless, they just limit the scope of locals,\n                // and don't act on control flow. So this is identical as the above.\n                {\n                    int i, j;\n                    switch (i) {\n                    case 1: {\n                        return;\n                    }\n                    case 2: {\n                        j = 2;\n                    }\n                    case 4: {\n                        j = 5;\n                        return; // this one is unnecessary\n                    }\n                    }\n                }\n            }\n            "
    },
    {
      "description": "Return in switch arrow: violation",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n\n                static {\n                    int i, j;\n                    switch (i) {\n                    case 1 -> {\n                        j = 1;\n                        return; // unnecessary\n                    }\n                    case 2 -> {\n                        j = 2;\n                    }\n                    case 4 -> {\n                        j = 5;\n                        return; // unnecessary\n                    }\n                    }\n                }\n            }\n            "
    },
    {
      "description": "Return in switch arrow: no violation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n\n                static {\n                    int i, j;\n                    switch (i) {\n                    case 1 -> {\n                        j = 1;\n                        return; // necessary\n                    }\n                    case 2 -> {\n                        j = 2;\n                    }\n                    case 4 -> {\n                        j = 5;\n                        return; // necessary\n                    }\n                    }\n                    System.out.println(j);\n                }\n            }\n            "
    },
    {
      "description": "Return in switch expression: no violation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n\n                static {\n                    int i, j;\n                    int k = switch (i) {\n                        case 1 -> {\n                            return; // necessary\n                        }\n                        case 2 -> {\n                            j = 2;\n                        }\n                        case 4 -> {\n                            j = 5;\n                            return; // necessary\n                        }\n                    };\n                }\n            }\n            "
    },
    {
      "description": "Return in lambda x ctor",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n\n                interface Lambda { void run();}\n\n                static void foo(Lambda lambda) {}\n\n                public Foo() {\n                    foo(() -> {return;}); // unnecessary\n                    foo(() -> {\n                        if (System.out == null)\n                            return;  // unnecessary\n                        else {\n                            System.out.println(\"djiedeid\");\n                        }\n                    }); // unnecessary\n                }\n            }\n            "
    },
    {
      "description": "Return in loop (like break)",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            import java.util.List;\n            public class Foo {\n\n                protected boolean process(String str) {return str.isEmpty();}\n\n                protected void process(List<String> list) {\n                    for (String resource : list) {\n                        boolean found = process(resource);\n                        if (resource.isEmpty() || found) {\n                            return; // necessary, it's like a break from the loop\n                        }\n                    }\n                }\n            }\n            "
    },
    {
      "description": "Ignore local class statements",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n                protected void process() {\n                    if (System.out == null) return;\n                    // This could be ignore because it doesn't contribute to control flow.\n                    // But this is rare enough that it hasn't been implemented\n                    class Foo {}\n                }\n            }\n            "
    },
    {
      "description": "nested classes",
      "expected-problems": 4,
      "expected-linenumbers": [
        6,
        12,
        19,
        26
      ],
      "code": "\npublic class Foo {\n    void myMethod() {\n        Object anonymous = new Object() {\n            public void bar1() {\n                int y = 1;\n                return;\n            }\n        };\n        class Local {\n            public void bar2() {\n                int y = 2;\n                return;\n            }\n        }\n    }\n    class Inner {\n        void bar3() {\n            int y = 3;\n            return;\n        }\n    }\n}\ninterface MyInterface {\n    default void myDefaultMethod() {\n        int y = 4;\n        return;\n    }\n}\n        "
    }
  ]
}