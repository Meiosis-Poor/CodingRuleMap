{
  "name": "CallSuperInConstructor",
  "language": "java",
  "description": "\nIt is a good practice to call super() in a constructor. If super() is not called but\nanother constructor (such as an overloaded constructor) is called, this rule will not report it.\n        ",
  "example": "public class Foo extends Bar{\n  public Foo() {\n   // call the constructor of Bar\n   super();\n  }\n public Foo(int code) {\n  // do something with code\n   this();\n   // no problem with this\n  }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "TEST1",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() {\n        super();\n    }\n}\n        "
    },
    {
      "description": "TEST2",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo(Object o) {\n        this();\n    }\n    public Foo() {\n        super();\n    }\n}\n        "
    },
    {
      "description": "don't flag classes w/o extends",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() {\n        int x = 2;\n    }\n}\n        "
    },
    {
      "description": "Enum",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nclass Buz {}\npublic class Bar extends Buz {\n    public static enum Foo {\n        ;\n        public Foo() {}\n    }\n}\n        "
    }
  ]
}