{
  "name": "UnnecessaryConstructor",
  "language": "java",
  "description": "\nThis rule detects when a constructor is not necessary; i.e., when there is only one constructor and the\nconstructor is identical to the default constructor. The default constructor should has same access\nmodifier as the declaring class. In an enum type, the default constructor is implicitly private.\n        ",
  "example": "public class Foo {\n  public Foo() {}\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 96,
  "branches": 21,
  "apis": 10,
  "test": [
    {
      "description": "simple failure case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() {}\n}\n        "
    },
    {
      "description": "private constructor",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private Foo() {}\n}\n        "
    },
    {
      "description": "constructor with arguments",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo(int x) {}\n}\n        "
    },
    {
      "description": "constructor with contents",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() {\n        int x = 2;\n    }\n}\n        "
    },
    {
      "description": "constructor throws exception",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() throws java.io.IOException {\n    }\n}\n        "
    },
    {
      "description": "two constructors",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() {\n    }\n    public Foo(String foo) {}\n}\n        "
    },
    {
      "description": "inner class with unnecessary constructor",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public class Inner {\n        public Inner() {}\n    }\n}\n        "
    },
    {
      "description": "inner and outer both have unnecessary constructors",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public class Inner {\n        public Inner() {}\n    }\n    public Foo() {}\n}\n        "
    },
    {
      "description": "inner and outer, both ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public class Inner {\n    }\n}\n        "
    },
    {
      "description": "inner ok, outer bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public class Inner {\n    }\n    public Foo() {}\n}\n        "
    },
    {
      "description": "inner ok due to nonpublic constructor",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public class Inner {\n        private Inner() {}\n    }\n}\n        "
    },
    {
      "description": "constructor calls super",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() {super(7);}\n}\n        "
    },
    {
      "description": "constructor calls super, no args",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() {super();}\n}\n        "
    },
    {
      "description": "Issue #1003: UnnecessaryConstructor triggered on required empty constructor (Dagger @Inject)",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport javax.inject.Inject;\npublic class Foo {\n    @Inject\n    public Foo() {\n        super();\n    }\n}\n        "
    },
    {
      "description": "the class is declared protected -- 1",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    protected class Inner {\n        public Inner(){}\n    }\n}\n        "
    },
    {
      "description": "the class is declared protected -- 2",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class Foo {\n    protected class Inner {\n        protected Inner(){}\n    }\n}\n        "
    },
    {
      "description": "unnecessary constructor in enum",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic enum Foo {\n    MON, TUE;\n    private Foo() {}\n}\n        "
    },
    {
      "description": "Verify ignoredAnnotations property is used",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    @Deprecated\n    public Foo() {\n    }\n}\n        "
    },
    {
      "description": "Issue #4487: [java]A false-positive about UnnecessaryConstructor and @Inject",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport com.google.inject.Inject;\nimport org.springframework.beans.factory.annotation.Autowired;\npublic class Foo {\n    private Foo() {}\n}\npublic class Bar extends Foo {\n    @Inject\n    public Bar() {}\n}\npublic class Bar extends Foo {\n    @Autowired\n    public Bar() {}\n}\n        "
    }
  ]
}