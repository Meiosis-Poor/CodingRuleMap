{
  "name": "ControlStatementBraces",
  "language": "java",
  "description": "\n            Enforce a policy for braces on control statements. It is recommended to use braces on 'if ... else'\n            statements and loop statements, even if they are optional. This usually makes the code clearer, and\n            helps prepare the future when you need to add another statement. That said, this rule lets you control\n            which statements are required to have braces via properties.\n\n            From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,\n            and IfElseStmtMustUseBraces.\n        ",
  "example": "while (true)    // not recommended\n  x++;\n\nwhile (true) {  // preferred approach\n  x++;\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "While, no braces",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        while (true)\n            x++;\n    }\n}\n        "
    },
    {
      "description": "While, no braces, allowed",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        while (true)\n            x++;\n    }\n}\n        "
    },
    {
      "description": "While, with braces",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        while (true) {\n            x++;\n        }\n    }\n}\n        "
    },
    {
      "description": "Empty while",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        while (true)\n            ;\n    }\n}\n        "
    },
    {
      "description": "Empty while, allowed",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        while (true)\n            ;\n    }\n}\n        "
    },
    {
      "description": "For, no braces",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        for (; ; )\n            x++;\n    }\n}\n        "
    },
    {
      "description": "For, no braces, allowed",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        for (; ; )\n            x++;\n    }\n}\n        "
    },
    {
      "description": "For, with braces",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        for (; ; ) {\n            x++;\n        }\n    }\n}\n        "
    },
    {
      "description": "Empty for",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        for (; ; )\n            ;\n    }\n}\n        "
    },
    {
      "description": "Empty for, allowed",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        for (; ; )\n            ;\n    }\n}\n        "
    },
    {
      "description": "Do while, no braces",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        do\n            x++;\n        while(true);\n    }\n}\n        "
    },
    {
      "description": "Do while, no braces, allowed",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        do\n            x++;\n        while (true);\n    }\n}\n        "
    },
    {
      "description": "Do while, with braces",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        do {\n            x++;\n        } while (true);\n    }\n}\n        "
    },
    {
      "description": "Empty Do while",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        do;\n        while (true);\n    }\n}\n        "
    },
    {
      "description": "Empty Do while, allowed",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        do;\n        while (true);\n    }\n}\n        "
    },
    {
      "description": "If else, no braces",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        if (true)\n            x++;\n        else\n            x--;\n    }\n}\n        "
    },
    {
      "description": "If else, no braces, allowed",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        if (true)\n            x++;\n        else\n            x--;\n    }\n}\n        "
    },
    {
      "description": "If else, braces on if",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        if (true) {\n            x++;\n        } else\n            x--;\n    }\n}\n        "
    },
    {
      "description": "If else, braces on else",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        if (true)\n            x++;\n         else {\n            x--;\n        }\n    }\n}\n        "
    },
    {
      "description": "If chain, partial braces",
      "expected-problems": 2,
      "expected-linenumbers": [
        5,
        10
      ],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        if (true)\n            x++; // here\n         else if (false) {\n            x--;\n        } else\n\n            ; // and here\n    }\n}\n        "
    },
    {
      "description": "Single if, allowed",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        if (true)\n            x++; // this is allowed\n    }\n}\n        "
    },
    {
      "description": "If chain, checkSingleIfStmt doesn't apply",
      "expected-problems": 2,
      "expected-linenumbers": [
        5,
        10
      ],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        if (true)\n            x++; // here\n         else if (false) {\n            x--;\n        } else\n\n            ; // and here\n    }\n}\n        "
    },
    {
      "description": "If chain, checkSingleIfStmt doesn't apply (even on last branch)",
      "expected-problems": 2,
      "expected-linenumbers": [
        5,
        7
      ],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        if (true)\n            x++; // here\n        else if (false)\n            x--; // and here\n\n    }\n}\n        "
    },
    {
      "description": "If else, braces on else, checkSingleIfStmt doesn't apply",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        if (true)\n            x++;\n        else {\n            x--;\n        }\n    }\n}\n        "
    },
    {
      "description": "Single if, checkIfElseStmt overrides checkSingleIfStmt",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        if (true)\n            x++; // this is allowed\n    }\n}\n        "
    },
    {
      "description": "Case, no braces, allowed",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        switch (x) {\n        case 1:\n        case 2: x++;break;\n        default: break;\n        }\n    }\n}\n        "
    },
    {
      "description": "Case, no braces",
      "expected-problems": 2,
      "expected-linenumbers": [
        6,
        9
      ],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        switch (x) {\n        case 1:\n        case 2:    // here\n            x++;   // not here\n            break; // not here\n        default:   // here\n            break; // not here\n        }\n    }\n}\n        "
    },
    {
      "description": "Case, dangling unbraced statement",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        switch (x) {\n        case 1:\n        case 2: {    // here\n            x++;\n        }\n        break;       // not here\n        default: {   // not here\n            break;\n        }\n        }\n    }\n}\n        "
    },
    {
      "description": "Case, dangling unbraced statement 2",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\npublic class Foo {\n    void foo() {\n        int x = 0;\n        switch (x) {\n        case 1:\n        case 2: {    // here, should have a single block\n            x++;\n        }\n        {\n            break;\n        }\n        default: {   // not here\n            break;\n        }\n        }\n    }\n}\n        "
    }
  ]
}