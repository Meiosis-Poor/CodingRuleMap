{
  "name": "MethodArgumentCouldBeFinal",
  "language": "java",
  "description": "\n            Reports method and constructor parameters that can be made final because they are never reassigned within the body of the method.\n\n            This rule ignores unused parameters so as not to overlap with the rule {% rule java/bestpractices/UnusedFormalParameter %}.\n            It will also ignore the parameters of abstract methods.\n        ",
  "example": "class Foo {\n    // reported, parameter can be declared final\n    public String foo1(String param) {\n        return param;\n    }\n    // not reported, parameter is declared final\n    public String foo2(final String param) {\n        return param.trim();\n    }\n    // not reported because param is unused\n    public String unusedParam(String param) {\n        return \"abc\";\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 48,
  "branches": 9,
  "apis": 7,
  "test": [
    {
      "description": "One non-final parameter",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(int a) {\n        System.out.println(a); // a is used here\n    }\n}\n        "
    },
    {
      "description": "Two non-final parameters",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(int a, Object o) {\n        System.out.println(a);\n        System.out.println(o);\n    }\n}\n        "
    },
    {
      "description": "Two non-final parameters with assignments to local vars",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(int a, Object o) {\n        int z = a;\n        Object x = o.clone();\n    }\n}\n        "
    },
    {
      "description": "Two parameters, one final, one non-final (1)",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(final int a, Object o) {\n        int z = a;\n        Object x = o.clone();\n    }\n}\n        "
    },
    {
      "description": "Two parameters, one final, one non-final (2)",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(int a, final Object o) {\n        int z = a;\n        Object x = o.clone();\n    }\n}\n        "
    },
    {
      "description": "Already two final parameters",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(final int a, final Object o) {\n        int z = a;\n        Object x = o.clone();\n    }\n}\n        "
    },
    {
      "description": "Shouldn't trigger on try blocks",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(final Foo batch) {\n        try {} catch (Exception e) {}\n        try {} catch (Exception ee) {}\n    }\n}\n        "
    },
    {
      "description": "Skip native methods",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public native void bar(Object x);\n}\n        "
    },
    {
      "description": "Skip abstract methods",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public abstract void bar(Object x);\n}\n        "
    },
    {
      "description": "self assignment of a method param means it can't be final",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(int a) {\n        x[a++] = 1;\n    }\n}\n        "
    },
    {
      "description": "same as above but prefix vs postfix",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(int a) {\n        x[--a] = 1;\n    }\n}\n        "
    },
    {
      "description": "same as above but with extra parenthesis",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(int a) {\n        x[--(a)] = 1;\n    }\n}\n        "
    },
    {
      "description": "bug 1808158 - Constructor args could also be final",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    int field;\n    public Foo(int a) {\n        this.field = a;\n    }\n}\n        "
    },
    {
      "description": "#3265 False negative with default methods in interface",
      "expected-problems": 2,
      "expected-linenumbers": [
        2,
        7
      ],
      "code": "\npublic interface DefaultMethodInInterface {\n    default String toString(Object one) {\n        return toString(one, one);\n    }\n    String toString(Object one, Object two);\n\n    default Object justReturn(Object o) {\n        return o;\n    }\n}\n        "
    },
    {
      "description": "#3265 False negative with classes in interfaces",
      "expected-problems": 2,
      "expected-linenumbers": [
        3,
        6
      ],
      "code": "\npublic interface InterfaceWithClass {\n    class Inner {\n        public Inner(Object o) {\n            Object a = o;\n        }\n        public Object justReturn(Object o) {\n            return o;\n        }\n    }\n}\n        "
    },
    {
      "description": "#4512 [java] MethodArgumentCouldBeFinal shouldn't report unused parameters",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public static void main(String[] args) {}\n}\n"
    }
  ]
}