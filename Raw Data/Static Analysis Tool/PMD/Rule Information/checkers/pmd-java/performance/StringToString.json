{
  "name": "StringToString",
  "language": "java",
  "description": "\nAvoid calling toString() on objects already known to be string instances; this is unnecessary.\n        ",
  "example": "private String baz() {\n    String bar = \"howdy\";\n    return bar.toString();\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "local var",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private String baz() {\n        String bar = \"howdy\";\n        return bar.toString();\n    }\n}\n        "
    },
    {
      "description": "parameter",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private String baz(String bar) {\n        return bar.toString();\n    }\n}\n        "
    },
    {
      "description": "field",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private String baz;\n    private int getBaz() {\n        return baz.toString();\n    }\n}\n        "
    },
    {
      "description": "primitive",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private int baz;\n    private int getBaz() {\n        return baz;\n    }\n}\n        "
    },
    {
      "description": "multiple similar params",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private String getBaz(String foo, StringBuffer buffer) {\n        return buffer.toString();\n    }\n}\n        "
    },
    {
      "description": "string array",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private String getBaz() {\n        String[] foo = {\"hi\"};\n        return foo[0].toString();\n    }\n}\n        "
    },
    {
      "description": "ToString on String Array Object",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public String getFoo() {\n        String foo[] = new String[0];\n        foo.toString();\n    }\n}\n        "
    },
    {
      "description": "Should only look at toString's of Arrays",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    protected static void parse_args(String argv[]){\n        int len = argv.length;\n        int i;\n        for (i = 0; i < len; i++) {\n            if (argv[i].equals(\"-package\")) {\n            }\n        }\n    }\n}\n        "
    },
    {
      "description": "#959 StringToString False Positive",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class MyObject {\n    public static String toString(MyObject o) {\n        return \"MyObject: \" + o;\n    }\n\n    public static void main(String[] args) {\n        //in your code\n        MyObject o = new MyObject(); //MyObject has no relation with String\n        System.out.println(MyObject.toString(o)); //PMD violation false positive\n    }\n}\n        "
    },
    {
      "description": "#1397 StringToString should ignore method references",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private void log(java.util.function.Supplier<String> msg) { }\n    public void run() {\n        String abc = \"abc\";\n        log(abc::toString); // fails rule\n        log(() -> abc); // passes rule\n    }\n}\n        "
    },
    {
      "description": "#2530 toString on String value returned from a method should be detected",
      "expected-problems": 1,
      "expected-linenumbers": [
        7
      ],
      "code": "\npublic class Foo {\n    public String foo() {\n        return \"Test String\";\n    }\n\n    public int bar() {\n        String test = this.foo().toString();\n        return test.length();\n    }\n}\n        "
    },
    {
      "description": "getString().toString(), anonymous class method false-positive test",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Integer value() {\n        return 0;\n    }\n\n    public String bar() {\n        Object obj = new Object() {\n            public String value() {\n                return \"0\";\n            }\n        };\n        return value().toString();\n    }\n}\n        "
    },
    {
      "description": "getString().toString(), method overloading false-positive test",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public String value(String str) {\n        return str.trim();\n    }\n\n    public Integer value(Integer num) {\n        return num + 1;\n    }\n\n    public void bar() {\n        String str = value(5).toString();\n    }\n}\n        "
    },
    {
      "description": "getString().toString(), object false-positive test",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Person {\n    public String value() {\n        return \"test\";\n    }\n\n    public void bar() {\n        Person p = new Person();\n        String val = p.value();\n        if (val == null) {\n            throw new RuntimeException();\n        }\n    }\n}\n        "
    },
    {
      "description": "external class as a method parameter",
      "expected-problems": 1,
      "expected-linenumbers": [
        10
      ],
      "code": "\nimport java.util.Properties;\npublic class User {\n    public Long getData(User usr) {\n        return usr.getId();\n    }\n    public String getData(Properties props) {\n        return \"Props: \" + props.toString();\n    }\n    public void bar() {\n        String s = getData(new Properties()).toString();\n    }\n}\n        "
    },
    {
      "description": "Limitations",
      "expected-problems": 3,
      "expected-linenumbers": [
        5,
        6,
        7
      ],
      "code": "\nimport java.io.*;\nclass A {\n    public void foo() {\n        String s = new A().str().toString(); // not detected because str() is from another class which is not on the auxclasspath\n        s = getString().toString(); // detected\n        s = getData(new FileInputStream()).toString(); // detected because of argument (sub) type\n        s = getData(new Integer(4), new Integer(5)).toString(); // detected because of unique args count\n    }\n    public String getString() {\n        return \"exampleStr\";\n    }\n    public String getData(InputStream is) {\n        return \"argsResolutionIssueExample\";\n    }\n    public int getData(String s) {\n        return 0;\n    }\n    public String getData(Number a, Number b) {\n        return \"uniqueArgsCountExample\";\n    }\n}\n        "
    },
    {
      "description": "Limitations with type resolution",
      "expected-problems": 4,
      "expected-linenumbers": [
        7,
        8,
        9,
        10
      ],
      "code": "\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport net.sourceforge.pmd.lang.java.rule.performance.stringtostring.User;\n\nclass B {\n    public void foo() {\n        String s = new User().getName().toString(); // detected because class User is on the auxclasspath\n        s = getString().toString(); // detected\n        s = getData(new FileInputStream()).toString(); // detected because of argument (sub) type\n        s = getData(new Integer(4), new Integer(5)).toString(); // detected because of unique args count\n    }\n    public String getString() {\n        return \"exampleStr\";\n    }\n    public String getData(InputStream is) {\n        return \"argsResolutionIssueExample\";\n    }\n    public int getData(String s) {\n        return 0;\n    }\n    public String getData(Number a, Number b) {\n        return \"uniqueArgsCountExample\";\n    }\n}\n        "
    },
    {
      "description": "variable as method call argument",
      "expected-problems": 1,
      "expected-linenumbers": [
        5
      ],
      "code": "\npackage net.sourceforge.pmd.lang.java.rule.performance.stringtostring;\npublic class Foo {\n    public void bar() {\n        User user = new User();\n        String s = getId(user).toString();\n    }\n    public int getId(Car car) {\n        return 0;\n    }\n    public String getId(User user) {\n        return \"\";\n    }\n}\n        "
    },
    {
      "description": "method call as method call argument",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class Foo {\n    public void bar() {\n        String s = getData(getLong()).toString();\n    }\n    public long getLong() {\n        return 0;\n    }\n    public long getData(String d) {\n        return 0;\n    }\n    public String getData(long d) {\n        return \"\";\n    }\n}\n        "
    },
    {
      "description": "[java] StringToString false-positive with local method name confusion #3977",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npackage net.sourceforge.pmd.lang.java.rule.performance.stringtostring;\npublic class StringToStringFP {\n  private String s;\n\n  public void print(A a) {\n    this.s = a.getB().getC().toString(); // line 6 - false positive\n    this.s = String.valueOf(a.getB().getC()); // workaround\n    System.out.println(s);\n  }\n\n  public String getC() {\n    return \"\";\n  }\n\n  interface A {\n      B getB();\n  }\n\n  interface B {\n      Character getC();\n  }\n}\n"
    },
    {
      "description": "Use type resolution for method call return type",
      "expected-problems": 1,
      "expected-linenumbers": [
        5
      ],
      "code": "\npackage net.sourceforge.pmd.lang.java.rule.performance.stringtostring;\npublic class Foo {\n    public void bar() {\n        User user = new User();\n        String s = user.getName().toString();\n    }\n}\n"
    },
    {
      "description": "[java] StringToString doesn't trigger on string literals #3681",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\nclass Impl {\n  String foo() {\n    return \"123\".toString();\n  }\n  String bar() {\n    return 'a'.toString();\n  }\n}\n"
    },
    {
      "description": "[java] StringToString rule false-positive with field access #2080",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npackage net.sourceforge.pmd.lang.java.rule.performance.stringtostring;\n\npublic final class Issue2080 {\n    String value;\n\n    public void foo() {\n        A a = new A();\n        value = a.value.toString(); // false positive\n    }\n\n    class A {\n        B value;\n    }\n\n    class B { }\n}\n"
    },
    {
      "description": "[java] StringToString doesn't trigger on Bar.class.getSimpleName().toString() #3437",
      "expected-problems": 1,
      "expected-linenumbers": [
        4
      ],
      "code": "\npublic class Foo {\n  @Override\n  public String toString() {\n    return new StringJoiner(\",\", Bar.class.getSimpleName().toString() + \"[\", \"]\");\n  }\n}\n"
    },
    {
      "description": "False positive with unqualified toString() call",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npackage net.sourceforge.pmd.lang.java.rule.performance.stringtostring;\n\npublic class User {\n\n    public String getName() {\n        String s;\n        s = toString();\n        s = this.toString();\n        s = super.toString();\n        s = convert(toString());\n        s = convert(this.toString());\n        s = convert(super.toString());\n        return s;\n    }\n\n    private String convert(String s) {\n        return s.toLowerCase(Locale.ROOT);\n    }\n}\n"
    }
  ]
}