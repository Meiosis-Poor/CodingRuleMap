{
  "name": "TooFewBranchesForSwitch",
  "language": "java",
  "description": "\nSwitch statements are intended to be used to support complex branching behaviour. Using a switch for only a few\ncases is ill-advised, since switches are not as easy to understand as if-else statements. In these cases use the\nif-else statement to increase code readability.\n\nNote: This rule was named TooFewBranchesForASwitchStatement before PMD 7.7.0.\n        ",
  "example": "// With a minimumNumberCaseForASwitch of 3\npublic class Foo {\n    public void bar(int condition) {\n        switch (condition) {\n            case 1:\n                instruction;\n                break;\n            default:\n                break; // not enough for a 'switch' stmt, a simple 'if' stmt would have been more appropriate\n        }\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "Switch Statement with no case, ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class DumbSwitch {\n    public void foo(int i) {\n        switch (i) { } // This is detected by EmptyControlStatement\n    }\n}\n        "
    },
    {
      "description": "Switch Statement with only one case, not ok",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class DumbSwitch {\n    public void foo(int i) {\n        switch (i) {\n            case 0:\n            {\n                System.err.println(\"I am a fish.\");\n            }\n        }\n    }\n}\n        "
    },
    {
      "description": "Switch Expression with only one case, not ok #5250",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class DumbSwitch {\n    public String foo(int i) {\n        return switch (i) {\n            case 0:\n            {\n                yield \"I am a fish.\";\n            }\n        };\n    }\n}\n        "
    },
    {
      "description": "Even two branches is not enough for a switch statement",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class DumbSwitch {\n    public void foo(int i) {\n        switch (i) {\n            case 0:\n            {\n                System.err.println(\"I am a fish.\");\n            }\n            case 1:\n            {\n                System.exit();\n            }\n        }\n    }\n}\n        "
    },
    {
      "description": "Three branches in a switch statement is ok.",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class ValidSwitch {\n    public void foo(int i) {\n        switch (i) {\n            case 0:\n            {\n                System.err.println(\"I am a fish.\");\n            }\n            case 1:\n            {\n                System.exit();\n            }\n            case 2:\n            {\n                // ...\n            }\n        }\n    }\n}\n        "
    },
    {
      "description": "[java] TooFewBranchesForASwitchStatement false positive for Pattern Matching #5249",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nsealed interface S permits A {}\nfinal class A implements S {}\npublic class Sample {\n    public void simpleSwitchStatment(S s) {\n        switch(s) {\n            case A a -> System.out.println(\"a\");\n        }\n    }\n\n    public void simpleSwitchExpression(S s) {\n        String result = switch(s) {\n            case A a -> \"a\";\n        };\n    }\n}\n"
    },
    {
      "description": "Record patterns are ignored, too #5249",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nrecord R(int i) {}\n\npublic class SwitchWithRecordPattern {\n    public void check(R r) {\n        switch(r) {\n            case R(int a) -> System.out.println(a);\n        }\n    }\n}\n"
    },
    {
      "description": "#5287 [java] TooFewBranchesForSwitch false-positive with switch using list of case constants",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nenum SomeEnum { A, B, C, D }\nclass Tester {\n    int checkSwitchExpression(SomeEnum someEnumValue) {\n        return switch(someEnumValue) {\n            case A, B, C -> 1;\n            default -> 0;\n        };\n    }\n\n    int checkSwitchStatement(SomeEnum someEnumValue) {\n        int result;\n        switch(someEnumValue) {\n            case A, B, C -> { result = 1; }\n            default -> { result = 0; }\n        }\n        return result;\n    }\n\n    int checkSwitchExpressionGroup(SomeEnum someEnumValue) {\n        return switch(someEnumValue) {\n            case A, B, C: yield 1;\n            default: yield 0;\n        };\n    }\n\n    int checkSwitchStatementGroup(SomeEnum someEnumValue) {\n        int result;\n        switch(someEnumValue) {\n            case A, B, C: result = 1; break;\n            default: result = 0; break;\n        }\n        return result;\n    }\n}\n"
    },
    {
      "description": "From #5311: Another example for list of case constants",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n\n  String foo(Bar bar) {\n    return switch (bar) {\n      case A, B, C, D -> \"Hello\";\n      case E, F, G -> \"World\";\n    };\n  }\n\n  enum Bar {\n    A, B, C, D, E, F, G\n  }\n}\n"
    },
    {
      "description": "#5311 [java] TooFewBranchesForSwitch false positive for exhaustive switches over enums without default case",
      "expected-problems": 1,
      "expected-linenumbers": [
        10
      ],
      "code": "\npublic class Foo {\n    String foo(Bar bar) {\n        return switch (bar) {\n            case A -> \"A\";\n            case B -> \"B\";\n        };\n    }\n\n    String fooWithDefault(Bar bar) {\n        return switch (bar) { // line 10 - violation\n            case A -> \"A\";\n            case B -> \"B\";\n            default -> \"?\";\n        };\n    }\n\n    enum Bar { A, B }\n}\n"
    },
    {
      "description": "#5311 [java] TooFewBranchesForSwitch false positive for exhaustive switches over sealed without default case",
      "expected-problems": 1,
      "expected-linenumbers": [
        13
      ],
      "code": "\npublic sealed class Foo {\n    static final class A extends Foo {}\n    static final class B extends Foo {}\n\n    String foo(Foo foo) {\n        return switch (foo) {\n            case A a -> \"A\";\n            case B b -> \"B\";\n        };\n    }\n\n    String fooWithDefault(Foo foo) {\n        return switch (foo) { // line 13 - violation\n            case A a -> \"A\";\n            case B b -> \"B\";\n            default -> \"?\";\n        };\n    }\n}\n"
    }
  ]
}