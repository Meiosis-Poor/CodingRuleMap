{
  "name": "UseIndexOfChar",
  "language": "java",
  "description": "\nUse String.indexOf(char) when checking for the index of a single character; it executes faster.\n        ",
  "example": "String s = \"hello world\";\n// avoid this\nif (s.indexOf(\"d\") {}\n// instead do this\nif (s.indexOf('d') {}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 37,
  "branches": 8,
  "apis": 5,
  "test": [
    {
      "description": "failure case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        String x = \"hello\";\n        if (x.indexOf(\"o\") == -1) {}\n    }\n}\n        "
    },
    {
      "description": "using single quotes, OK",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        String x = \"hello\";\n        if (x.indexOf('o') == -1) {}\n    }\n}\n        "
    },
    {
      "description": "indexOf multi-character literal, OK",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        String x = \"hello\";\n        if (x.indexOf(\"ello\") == -1) {}\n    }\n}\n        "
    },
    {
      "description": "using indexOf(singleCharString, int)",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        String x = \"hello world\";\n        if (x.indexOf(\"e\", 5) == -1) {}\n    }\n}\n        "
    },
    {
      "description": "using lastIndexOf(singleCharString)",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        String x = \"hello world\";\n        if (x.lastIndexOf(\"e\", 5) == -1) {}\n    }\n}\n        "
    },
    {
      "description": "complicated expressions are ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        String x = \"hello world\";\n        if (x.indexOf(\"e\" + \"o\") == -1) {}\n    }\n}\n        "
    },
    {
      "description": "all escaped characters",
      "expected-problems": 8,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(String x) {\n        if (x.indexOf(\"\\n\") == -1) {}\n        if (x.indexOf(\"\\t\") == -1) {}\n        if (x.indexOf(\"\\b\") == -1) {}\n        if (x.indexOf(\"\\r\") == -1) {}\n        if (x.indexOf(\"\\f\") == -1) {}\n        if (x.indexOf(\"\\\\\") == -1) {}\n        if (x.indexOf(\"\\'\") == -1) {}\n        if (x.indexOf(\"\\\"\") == -1) {}\n    }\n}\n        "
    },
    {
      "description": "a single octal character",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(String x) {\n        if (x.indexOf(\"\\12\") == -1) {}\n        if (x.indexOf(\"\\123\") == -1) {}\n    }\n}\n        "
    },
    {
      "description": "octal character in longer string",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(String x) {\n        if (x.indexOf(\"\\1234\") == -1) {}\n    }\n}\n        "
    },
    {
      "description": "UseIndexOfChar: null pointer with lambdas",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npackage pmdtestcase;\n\nimport java.util.function.Consumer;\n\n/**\n * Created by RWorsnop on 7/8/2014.\n */\npublic class FooTest {\n    public static void main(String[] args) {\n        new String(\"s\");\n        Consumer<String> c = s -> {};\n    }\n}\n        "
    },
    {
      "description": "#1211 PMD is failing with NPE for rule UseIndexOfChar while analyzing Jdk 8 Lambda expression",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.List;\nimport java.util.Optional;\npublic class Foo {\n    int getLastSeen() { return 0; }\n    public void bar(List<Foo> foos) {\n        Optional<Foo> optionalResult = foos.stream()\n            .filter(s -> s.getLastSeen() > 0)\n            .findFirst();\n    }\n}\n        "
    },
    {
      "description": "NPE with var used in try-with-resources",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.io.FileInputStream;\n\npublic class LocalVariableTypeInferenceTryWithResources {\n\n    public void aMethod() throws Exception {\n        String filename = \"file.txt\";\n        try (var in = new FileInputStream(filename)) {\n        }\n    }\n}\n        "
    }
  ]
}