{
  "name": "UseStringBufferLength",
  "language": "java",
  "description": "\nUse StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals(\"\")\nor StringBuffer.toString().length() == ...\n        ",
  "example": "StringBuffer sb = new StringBuffer();\n\nif (sb.toString().equals(\"\")) {}        // inefficient\n\nif (sb.length() == 0) {}                // preferred",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "Using length properly",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        StringBuffer sb = new StringBuffer();\n        if ( sb.length() == 0 ) {\n            sb.append(\",\");\n        }\n        sb.append( \"whatever\" );\n    }\n    void bar2() {\n        StringBuilder sb = new StringBuilder();\n        if ( sb.length() == 0 ) {\n            sb.append(\",\");\n        }\n        sb.append( \"whatever\" );\n    }\n}\n        "
    },
    {
      "description": "#5320 StringBuffer.toString.equals(\"\"), bad",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        StringBuffer sb = new StringBuffer();\n        if ( sb.toString().equals(\"\") ) {\n            sb.append(\",\");\n        }\n        sb.append( \"whatever\" );\n    }\n    void bar2() {\n        StringBuilder sb = new StringBuilder();\n        if ( sb.toString().equals(\"\") ) {\n            sb.append(\",\");\n        }\n        sb.append( \"whatever\" );\n    }\n}\n        "
    },
    {
      "description": "StringBuffer.toString.equals(\"foo\"), ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        StringBuffer sb = new StringBuffer();\n        if ( sb.toString().equals(\"foo\") ) {\n            sb.append(\",\");\n        }\n        sb.append( \"whatever\" );\n    }\n    void bar2() {\n        StringBuilder sb = new StringBuilder();\n        if ( sb.toString().equals(\"foo\") ) {\n            sb.append(\",\");\n        }\n        sb.append( \"whatever\" );\n    }\n}\n        "
    },
    {
      "description": "StringBuffer.toString.length(), bad",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar() {\n        StringBuffer sb = new StringBuffer();\n        if ( sb.toString().length() == 0 ) {\n            sb.append(\",\");\n        }\n        sb.append( \"whatever\" );\n    }\n    void bar2() {\n        StringBuilder sb = new StringBuilder();\n        if ( sb.toString().length() == 0 ) {\n            sb.append(\",\");\n        }\n        sb.append( \"whatever\" );\n    }\n}\n        "
    },
    {
      "description": "no literals",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    boolean bar(Object foo) {\n        StringBuffer sb = new StringBuffer();\n        return sb.toString().equals(foo);\n    }\n    boolean bar2(Object foo) {\n        StringBuilder sb = new StringBuilder();\n        return sb.toString().equals(foo);\n    }\n}\n        "
    },
    {
      "description": "empty + non-empty string sb.toString().equals(\"\" + \"x\"), ok (as in: do not use StringBuffer.length())",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    boolean bar() {\n        StringBuffer sb = new StringBuffer();\n        return sb.toString().equals(\"\" + \"x\");\n    }\n}\n        "
    },
    {
      "description": "sb.toString().trim().equals(\"\"), ok (as in: do not use StringBuffer.length())",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    boolean bar() {\n        StringBuffer sb = new StringBuffer(\" \");\n        return sb.toString().trim().equals(\"\");\n    }\n}\n        "
    },
    {
      "description": "sb.toString().equals(baz(\"\")), ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    boolean bar() {\n        StringBuffer sb = new StringBuffer();\n        return sb.toString().equals(baz(\"\"));\n    }\n    String baz(String s) {\n        return s + \"x\";\n    }\n}\n        "
    },
    {
      "description": "sb.toString().trim().length == 0, ok (as in: do not use StringBuffer.length())",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    boolean bar() {\n        StringBuffer sb = new StringBuffer();\n        return sb.toString().trim().length == 0;\n    }\n}\n        "
    },
    {
      "description": "#1177 Incorrect StringBuffer warning when that class is not used",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Ineffecient\n{\n    public static String getValue(int in)\n    {\n        Integer i = new Integer(in);\n        if (i.toString().length() == 1)\n        {\n            return \"length 1\";\n        }\n        return \"\";\n    }\n\n    public String toString()\n    {\n        return \"Ineffecient\";\n    }\n}\n        "
    },
    {
      "description": "[java] UseStringBufferLength: false negative with empty string variable #3639",
      "expected-problems": 1,
      "expected-linenumbers": [
        5
      ],
      "code": "\npublic class Foo {\n    public void foo() {\n        StringBuffer sb = new StringBuffer(\"any_string\");\n        final String nullStr = \"\";\n        if (sb.toString().equals(nullStr)) { // PMD should report a warning here\n            System.out.println(\"Buffer is empty\");\n        }\n\n        // the preferred way\n        if (sb.length() == 0) {\n            System.out.println(\"Buffer is empty\");\n        }\n    }\n}\n        "
    },
    {
      "description": "#5320 [java] UseStringBufferLength: false-negative on StringBuffer of sb.toString().equals(\"\")",
      "expected-problems": 3,
      "expected-linenumbers": [
        6,
        7,
        9
      ],
      "code": "\npublic class UseStringBufferLengthTest {\n    public void example1() {\n        StringBuffer sb = new StringBuffer();\n        final String empty = \"\";\n\n        if (sb.toString().equals(\"\")) {System.out.println();}        // line 6, inefficient\n        if (sb.toString().equals(empty)) {System.out.println();}     // line 7, inefficient\n        if (sb.length() == 0) {System.out.println();}                // line 8, preferred\n        if (sb.toString().length() == 2) {System.out.println();}     // line 9, inefficient\n        if (sb.length() == 2) {System.out.println();}                // line 10, preferred\n    }\n}\n"
    }
  ]
}