{
  "name": "CommentRequired",
  "language": "java",
  "description": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        ",
  "example": "/**\n*\n*\n* @author Jon Doe\n*/",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 218,
  "branches": 34,
  "apis": 17,
  "test": [
    {
      "description": "Missing comments - all required (default).",
      "expected-problems": 6,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "All elements have javadoc comments.",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Missing comments - only class level required.",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Too many comments - all comments are unwanted.",
      "expected-problems": 6,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "#1115 commentRequiredRule in pmd 5.1 is not working properly",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\n/**\n * Test class\n */\npublic class Test {\n    public void method1() {\n        /**\n         * comment here\n         */\n    }\n\n    public void method2() {\n    }\n}\n        "
    },
    {
      "description": "#1115 commentRequiredRule in pmd 5.1 is not working properly - without new lines",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\n/** Test class */ public class Test { public void method1() { /** comment here */ } public void method2() { } }\n        "
    },
    {
      "description": "#1289 CommentRequired not ignored if javadoc {@inheritDoc} anon inner classes",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * Comment required test class.\n */\npublic class CommentRequired {\n    /**\n     * Creates a new instance of comment required.\n     */\n    public CommentRequired() {\n        Object o = new Object() {\n            /**\n             * {@inheritDoc}\n             */\n            public String toString() {\n                return \"Inner Class\";\n            }\n        };\n    }\n}\n        "
    },
    {
      "description": "#1434 CommentRequired raises violation on serialVersionUID field",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.io.Serializable;\n/** The class comment */\npublic class CommentRequired implements Serializable {\n    private static final long serialVersionUID = 42L;\n}\n        "
    },
    {
      "description": "comment required on serialVersionUID of wrong type",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\n/** The class comment */\npublic class CommentRequired implements java.io.Serializable {\n    private static final int serialVersionUID = 42L;\n}\n        "
    },
    {
      "description": "serialVersionUID comment required",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\n/** The class comment */\npublic class CommentRequired implements java.io.Serializable {\n    private static final long serialVersionUID = 42L;\n}\n        "
    },
    {
      "description": "#1684 whitelist serialPersistentFields",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.io.ObjectStreamField;\nimport java.util.List;\n/** The class comment */\npublic class CommentRequired implements java.io.Serializable {\n    /** My list */\n    List next;\n    private static final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField(\"next\", List.class)};\n}\n        "
    },
    {
      "description": "#1684 comment required on serialPersistentFields of wrong type",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport java.util.List;\n/** The class comment */\npublic class CommentRequired implements java.io.Serializable {\n    /** My list */\n    List next;\n    private static final String[] serialPersistentFields = {\"next\"};\n}\n        "
    },
    {
      "description": "#1684 comment required on serialPersistentFields of wrong visibility",
      "expected-problems": 1,
      "expected-linenumbers": [
        7
      ],
      "code": "\nimport java.io.ObjectStreamField;\nimport java.util.List;\n/** The class comment */\npublic class CommentRequired implements java.io.Serializable {\n    /** My list */\n    List next;\n    static final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField(\"next\", List.class)};\n}\n        "
    },
    {
      "description": "#1684 comment required on serialPersistentFields not static",
      "expected-problems": 1,
      "expected-linenumbers": [
        7
      ],
      "code": "\nimport java.io.ObjectStreamField;\nimport java.util.List;\n/** The class comment */\npublic class CommentRequired implements java.io.Serializable {\n    /** My list */\n    List next;\n    private final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField(\"next\", List.class)};\n}\n        "
    },
    {
      "description": "#1684 comment required on serialPersistentFields not final",
      "expected-problems": 1,
      "expected-linenumbers": [
        7
      ],
      "code": "\nimport java.io.ObjectStreamField;\nimport java.util.List;\n/** The class comment */\npublic class CommentRequired implements java.io.Serializable {\n    /** My list */\n    List next;\n    private static ObjectStreamField[] serialPersistentFields = {new ObjectStreamField(\"next\", List.class)};\n}\n        "
    },
    {
      "description": "#1684 serialPersistentFields comment required",
      "expected-problems": 1,
      "expected-linenumbers": [
        7
      ],
      "code": "\nimport java.io.ObjectStreamField;\nimport java.util.List;\n/** The class comment */\npublic class CommentRequired implements java.io.Serializable {\n    /** My list */\n    List next;\n    private static final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField(\"next\", List.class)};\n}\n        "
    },
    {
      "description": "#1522 [java] CommentRequired: false positive",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npackage de.konsens.biene.ka.client;\n\n/**\n * Kommentar zu PmdMissingHeaderCommentTest\n */\npublic class PmdMissingHeaderCommentTest {\n\n    /**\n     * Kommentar zu methode1()\n     */\n    public void methode1() {\n\n        /**\n        * Kommentar zu Local\n        */\n        class Local {\n\n            /**\n             * Kommentar zu methode1()\n             */\n            void methode1() {\n\n            }\n        }\n\n        Local local = new Local();\n        local.methode1();\n\n        /**\n         * Kommentar zu Local2\n         */\n        class Local2 {\n\n            /**\n             * Kommentar zu methode1()\n             */\n            void methode1() {\n            }\n        }\n\n        Local2 local2 = new Local2();\n        local2.methode1();\n    }\n}\n        "
    },
    {
      "description": "Comment required ignores @override methods by default",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * Comment required test class.\n */\npublic class CommentRequired {\n    @Override\n    public void noComment() {\n        Object o = new Object() {\n\n            @Override\n            public String toString() {\n                return \"Inner Class\";\n            }\n        };\n    }\n}\n        "
    },
    {
      "description": "Test @override methods reporting",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\n/**\n * Comment required test class.\n */\npublic class CommentRequired {\n    @Override\n    public void noComment() {\n        Object o = new Object() {\n\n            @Override\n            public String toString() {\n                return \"Inner Class\";\n            }\n        };\n    }\n}\n        "
    },
    {
      "description": "Test @override methods reporting #2",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * Comment required test class.\n */\npublic class CommentRequired {\n    /**\n     * Comment provided\n     */\n    @Override\n    public void noComment() {\n        Object o = new Object() {\n\n            /**\n             * @inheritDoc\n             */\n            @Override\n            public String toString() {\n                return \"Inner Class\";\n            }\n        };\n    }\n}\n        "
    },
    {
      "description": "Test @override methods unwanted",
      "expected-problems": 2,
      "expected-linenumbers": [
        9,
        16
      ],
      "code": "\n/**\n * Comment required test class.\n */\npublic class CommentRequired {\n    /**\n     * Comment provided\n     */\n    @Override\n    public void noComment() {\n        Object o = new Object() {\n\n            /**\n             * @inheritDoc\n             */\n            @Override\n            public String toString() {\n                return \"Inner Class\";\n            }\n        };\n    }\n}\n        "
    },
    {
      "description": "Test getter or setter comments are ignored by default",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * Comment required test class.\n */\npublic class CommentRequired {\n\n    private int foo;\n\n    public int getFoo() {\n        Object o = new Object() {\n\n            String foox;\n\n            public String getFoox() {\n                return foox;\n            }\n        };\n        return foo;\n    }\n\n    public void setFoo(int x) {\n        foo = x;\n    }\n}\n        "
    },
    {
      "description": "Test accessors are reported when required",
      "expected-problems": 3,
      "expected-linenumbers": [],
      "code": "\n/**\n * Comment required test class.\n */\npublic class CommentRequired {\n\n    private int foo;\n\n    public int getFoo() {\n        Object o = new Object() {\n\n            String foox;\n\n            public String getFoox() {\n                return foox;\n            }\n        };\n        return foo;\n    }\n\n    public void setFoo(int x) {\n        foo = x;\n    }\n}\n        "
    },
    {
      "description": "Test accessors are reported when unwanted",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\n/**\n * Comment required test class.\n */\npublic class CommentRequired {\n\n    private int foo;\n\n    /**\n     * @return foo\n     */\n    public int getFoo() {\n        Object o = new Object() {\n\n            String foox;\n            /**\n             * @return foox\n             */\n            public String getFoox() {\n                return foox;\n            }\n        };\n        return foo;\n    }\n\n    public void setFoo(int x) {\n        foo = x;\n    }\n}\n        "
    },
    {
      "description": "#1683 [java] CommentRequired property names are inconsistent",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/** Unwanted class comment */\npublic class CommentRequirement {}\n        "
    },
    {
      "description": "Method overridden without @Override (#3123)",
      "expected-problems": 1,
      "expected-linenumbers": [
        4
      ],
      "code": "\n/** Comment */\npublic class CommentRequirement {\n    //no @Override annotation\n    public String toString() { // comment required\n        return \"\";\n    }\n}\n"
    },
    {
      "description": "Methods inside annotations (#3123)",
      "expected-problems": 2,
      "expected-linenumbers": [
        3,
        4
      ],
      "code": "\n/** Comment */\n@interface MyAnnotation1 {\n    String name(); // comment required\n    int version(); // comment required\n}\n"
    },
    {
      "description": "Traditional Javadoc with single line comment intercepted",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * Class level comment.\n */\n// this single line comment is ignored. The above javadoc is used.\npublic class Foo {\n}\n"
    },
    {
      "description": "Markdown Javadoc Comment (since java 23, JEP 467)",
      "expected-problems": 1,
      "expected-linenumbers": [
        7
      ],
      "code": "\n/// Class level comment.\npublic class Foo {\n    /// the bar counter\n    // some other single line comment\n    public int bar;\n    // this is missing a javadoc comment\n    public int anotherField;\n    /// the test enum\n    public enum Enum {}\n    /// This is the comment for the constructor\n    public Foo() {}\n    /// This is the comment for the first method\n    public void doNothing() {}\n    /// This is the comment for the second method\n    public void doSomething() {}\n}\n"
    }
  ]
}