{
  "name": "UnnecessaryCaseChange",
  "language": "java",
  "description": "\nUsing equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()\n        ",
  "example": "boolean answer1 = buz.toUpperCase().equals(\"BAZ\");              // should be buz.equalsIgnoreCase(\"BAZ\")\n\nboolean answer2 = buz.toUpperCase().equalsIgnoreCase(\"BAZ\");    // another unnecessary toUpperCase()",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 48,
  "branches": 9,
  "apis": 3,
  "test": [
    {
      "description": "failure case with toUpperCase().equals()",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private boolean baz(String buz) {\n        return buz.toUpperCase().equals(\"foo\");\n    }\n}\n        "
    },
    {
      "description": "failure case with toLowerCase().equals()",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private boolean baz(String buz) {\n        return buz.toLowerCase().equals(\"foo\");\n    }\n}\n        "
    },
    {
      "description": "failure case with toUpperCase().equalsIgnoreCase()",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private boolean baz(String buz) {\n        return buz.toUpperCase().equalsIgnoreCase(\"foo\");\n    }\n}\n        "
    },
    {
      "description": "don't flag toUpperCase() invocations with Locale args",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private boolean baz(String buz) {\n        return buz.toUpperCase(locale).equals(\"foo\");\n    }\n}\n        "
    },
    {
      "description": "failure case with toLowerCase().equals()",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Object visit(Foo node, Object data) {\n        Foo cl = node.getFirstParentOfType(Foo.class);\n        if (cl != null && node.getVariableName().toLowerCase().equals(cl.getImage().toLowerCase())) {\n            addViolation(data, node);\n        }\n        return data;\n    }\n\n    public Foo getFirstParentOfType(Class<?> clazz) { return null; }\n    public String getVariableName() { return null; }\n    public String getImage() { return null; }\n}\n        "
    },
    {
      "description": "#2531 foo.equals(bar.toLowerCase()) false negative",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(String s) {\n        if (\"test\".equals(s.toLowerCase())) {\n            System.out.println(\"Done\");\n        }\n    }\n}\n        "
    },
    {
      "description": "NullPointerException if in constructor test",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Person {\n    public Person(String name) { }\n    public void printData() { }\n\n    public static void bar(String s) {\n        Person p = new Person(s.toUpperCase());\n        p.printData();\n    }\n}\n        "
    }
  ]
}