{
  "name": "UseLocaleWithCaseConversions",
  "language": "java",
  "description": "\nWhen doing `String::toLowerCase()/toUpperCase()` conversions, use an explicit locale argument to specify the case\ntransformation rules.\n\nUsing `String::toLowerCase()` without arguments implicitly uses `Locale::getDefault()`.\nThe problem is that the default locale depends on the current JVM setup (and usually on the system in which\nit is running). Using the system default may be exactly what you want (e.g. if you are manipulating strings\nyou got through standard input), but it may as well not be the case (e.g. if you are getting the string over\nthe network or a file, and the encoding is well-defined and independent of the environment). In the latter case,\nusing the default locale makes the case transformation brittle, as it may yield unexpected results on a machine\nwhose locale has other case translation rules. For example, in Turkish, the uppercase form of `i` is `Ä°` (U+0130,\nnot ASCII) and not `I` (U+0049) as in English.\n\nThe rule is intended to *force* developers to think about locales when dealing with strings. By taking a\nconscious decision about the choice of locale at the time of writing, you reduce the risk of surprising\nbehaviour down the line, and communicate your intent to future readers.\n        ",
  "example": "// violation - implicitly system-dependent conversion\nif (x.toLowerCase().equals(\"list\")) {}\n\n// The above will not match \"LIST\" on a system with a Turkish locale.\n// It could be replaced with\nif (x.toLowerCase(Locale.US).equals(\"list\")) { }\n// or simply\nif (x.equalsIgnoreCase(\"list\")) { }\n\n// ok - system independent conversion\nString z = a.toLowerCase(Locale.ROOT);\n\n// ok - explicit system-dependent conversion\nString z2 = a.toLowerCase(Locale.getDefault());",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "toLowerCase() with no args",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class Foo {\n    public void run(String y) {\n        String x = y.toLowerCase();\n    }\n}\n        "
    },
    {
      "description": "toUpperCase() with no args",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class Foo {\n    public void run(String y) {\n        String x = y.toUpperCase();\n    }\n}\n        "
    },
    {
      "description": "both ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.Locale;\n\npublic class Foo {\n    public void run(String y) {\n        String x = y.toUpperCase(Locale.EN);\n        String z = y.toLowerCase(Locale.EN);\n    }\n}\n        "
    },
    {
      "description": "toHexString OK",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void run() {\n        String x = Integer.toHexString(42).toUpperCase();\n    }\n}\n        "
    },
    {
      "description": "Compound method call",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.Locale;\n\npublic class Foo {\n    public String getString(){\n        String x = \"hello world\";\n        return x.toUpperCase(Locale.GERMANY).trim();\n    }\n}\n        "
    },
    {
      "description": "#1556 [java] UseLocaleWithCaseConversions does not works with `ResultSet` (false negative)",
      "expected-problems": 1,
      "expected-linenumbers": [
        7
      ],
      "code": "\nimport java.sql.*;\n\nfinal class Test {\n    private Test() { }\n\n    public static String foo(ResultSet r) throws SQLException {\n        return r.getString(\"bar\").toLowerCase();\n    }\n}\n        "
    },
    {
      "description": "#4277 FP when invoking a method called toLowerCase on a non-String class",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public static String generateUlid(boolean uppercase) {\n        Ulid ulid = new Ulid();\n        return uppercase ? ulid.toString() : ulid.toLowerCase(); // not a String, should be ok\n    }\n\n    private static class Ulid {\n        public Strinc toLowerCase() {\n            return null;\n        }\n    }\n}\n        "
    }
  ]
}