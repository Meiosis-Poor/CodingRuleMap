{
  "name": "SingletonClassReturningNewInstance",
  "language": "java",
  "description": "\n            A singleton class should only ever have one instance. Failure to check\n            whether an instance has already been created may result in multiple\n            instances being created.\n        ",
  "example": "class Singleton {\n    private static Singleton instance = null;\n    public static Singleton getInstance() {\n        synchronized(Singleton.class) {\n            return new Singleton(); // this should be assigned to the field\n        }\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 102,
  "branches": 24,
  "apis": 11,
  "test": [
    {
      "description": "failure case",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class Singleton {\n    private static Singleton instance = null;\n    public static Singleton getInstance() {\n        synchronized(Singleton.class) {\n            return new Singleton();\n        }\n    }\n}\n        "
    },
    {
      "description": "failure case",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class Singleton {\n    private static Singleton instance = null;\n    public static Singleton getInstance() {\n        synchronized(Singleton.class) {\n            if (instance == null) {\n                Singleton instance = new Singleton();\n                return instance;\n            }\n        }\n        return instance;\n    }\n}\n        "
    },
    {
      "description": "Works! Does not return locally created variable",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Singleton {\n    private static Singleton instance = null;\n    public static Singleton getInstance() {\n        synchronized(Singleton.class){\n            if (instance == null) {\n                instance = new Singleton();\n            }\n        }\n        return instance;\n    }\n}\n        "
    },
    {
      "description": "[java] SingletonClassReturningNewInstance false positive with double assignment #932 - variant 1",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic final class Foo {\n    private static volatile Foo myFoo;\n    public static Foo getInstance() {\n        Foo instance = myFoo;\n        if (instance == null) {\n            synchronized (Foo.class) {\n                instance = myFoo;\n                if (instance == null) {\n                    myFoo = instance = new Foo(); // here: double assignment to instance and then field\n                }\n            }\n        }\n        return instance;\n    }\n}\n"
    },
    {
      "description": "[java] SingletonClassReturningNewInstance false positive with double assignment #932 - variant 2",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic final class Foo {\n    private static volatile Foo myFoo;\n    public static Foo getInstance() {\n        Foo instance = myFoo;\n        if (instance == null) {\n            synchronized (Foo.class) {\n                instance = myFoo;\n                if (instance == null) {\n                    instance = myFoo = new Foo(); // here: double assignment to field and then instance\n                }\n            }\n        }\n        return instance;\n    }\n}\n"
    }
  ]
}