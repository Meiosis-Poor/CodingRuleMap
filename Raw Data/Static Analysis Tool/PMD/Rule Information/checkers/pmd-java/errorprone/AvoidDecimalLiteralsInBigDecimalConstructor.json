{
  "name": "AvoidDecimalLiteralsInBigDecimalConstructor",
  "language": "java",
  "description": "\nOne might assume that the result of \"new BigDecimal(0.1)\" is exactly equal to 0.1, but it is actually\nequal to .1000000000000000055511151231257827021181583404541015625.\nThis is because 0.1 cannot be represented exactly as a double (or as a binary fraction of any finite\nlength). Thus, the long value that is being passed in to the constructor is not exactly equal to 0.1,\nappearances notwithstanding.\n\nThe (String) constructor, on the other hand, is perfectly predictable: 'new BigDecimal(\"0.1\")' is\nexactly equal to 0.1, as one would expect.  Therefore, it is generally recommended that the\n(String) constructor be used in preference to this one.\n        ",
  "example": "BigDecimal bd = new BigDecimal(1.123);       // loss of precision, this would trigger the rule\n\nBigDecimal bd = new BigDecimal(\"1.123\");     // preferred approach\n\nBigDecimal bd = new BigDecimal(12);          // preferred approach, ok for integer values",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "bad, new BigDecimal(.1)",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport java.math.BigDecimal;\n\npublic class Foo {\n    void bar() {\n        BigDecimal bd = new BigDecimal(.1);\n    }\n}\n        "
    },
    {
      "description": "ok, new BigDecimal(\".1\")",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.math.BigDecimal;\n\npublic class Foo {\n    void bar() {\n        BigDecimal bd = new BigDecimal(\".1\");\n    }\n}\n        "
    },
    {
      "description": "ok, new BigDecimal(10)",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.math.BigDecimal;\n\npublic class Foo {\n    void bar() {\n        BigDecimal bd = new BigDecimal(10);\n    }\n}\n        "
    },
    {
      "description": "bad, same as #1 but outside an initializer context",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport java.math.BigDecimal;\n\npublic class Foo {\n    BigDecimal bar() {\n        return new BigDecimal(1.0);\n    }\n}\n        "
    },
    {
      "description": "#1187 double variable with AvoidDecimalLiteralsInBigDecimalConstructor",
      "expected-problems": 8,
      "expected-linenumbers": [
        6,
        10,
        13,
        16,
        20,
        24,
        27,
        30
      ],
      "code": "\nimport java.math.BigDecimal;\n\npublic class Foo {\n    public void bar() {\n        double d = 0.1;\n        BigDecimal bd = new BigDecimal(d); // line 6\n    }\n    public void bar2() {\n        float f = 0.1f;\n        BigDecimal bd = new BigDecimal(f); // line 10\n    }\n    public BigDecimal bar3(double e) {\n        return new BigDecimal(e); // line 13\n    }\n    public BigDecimal bar4(float g) {\n        return new BigDecimal(g); // line 16\n    }\n    public void bar5() {\n        Double h = 0.1;\n        BigDecimal bd = new BigDecimal(h); // line 20\n    }\n    public void bar6() {\n        Float k = 0.1f;\n        BigDecimal bd = new BigDecimal(k); // line 24\n    }\n    public BigDecimal bar7(Double m) {\n        return new BigDecimal(m); // line 27\n    }\n    public BigDecimal bar8(Float n) {\n        return new BigDecimal(n); // line 30\n    }\n}\n        "
    },
    {
      "description": "#2532 Expression as argument",
      "expected-problems": 1,
      "expected-linenumbers": [
        5
      ],
      "code": "\nimport java.math.BigDecimal;\n\npublic class Foo {\n    public void bar(double d) {\n        BigDecimal bd = new BigDecimal(6 * d);\n    }\n}\n        "
    },
    {
      "description": "#3080 [java] AvoidDecimalLiteralsInBigDecimalConstructor FP with PMD 6.30.0",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.math.BigDecimal;\nclass TestAvoidDecimalLiteralsInBigDecimalConstructor{\n        public static void main(String[] args){\n                BigDecimal d = new BigDecimal(Double.toString(0.1));\n        }\n}\n"
    }
  ]
}