{
  "name": "ComparisonWithNaN",
  "language": "java",
  "description": "\n            Reports comparisons with double and float `NaN` (Not-a-Number) values.\n            These are [specified](https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.1)\n            to have unintuitive behavior: NaN is considered unequal to itself.\n            This means a check like `someDouble == Double.NaN` will always return\n            false, even if `someDouble` is really the NaN value. To test whether a\n            value is the NaN value, one should instead use `Double.isNaN(someDouble)`\n            (or `Float.isNaN`). The `!=` operator should be treated similarly.\n            Finally, comparisons like `someDouble <= Double.NaN` are nonsensical\n            and will always evaluate to false.\n            \n            This rule has been renamed from \"BadComparison\" in PMD 6.36.0.\n        ",
  "example": "boolean x = (y == Double.NaN);",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "equality operators with Double.NaN",
      "expected-problems": 4,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n\n                {\n                    boolean x;\n                    x = (Double.NaN == y);\n                    x = (Double.NaN != y);\n\n                    x = (y == Double.NaN);\n                    x = (y != Double.NaN);\n                }\n            }\n            "
    },
    {
      "description": "equality operators with Float.NaN",
      "expected-problems": 4,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n                {\n                    boolean x;\n                    x = (Float.NaN == y);\n                    x = (Float.NaN != y);\n\n                    x = (y == Float.NaN);\n                    x = (y != Float.NaN);\n                }\n            }\n            "
    },
    {
      "description": "relational operators with Double.NaN",
      "expected-problems": 8,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n\n                {\n                    boolean x;\n                    x = (y <= Double.NaN);\n                    x = (y >= Double.NaN);\n                    x = (y > Double.NaN);\n                    x = (y < Double.NaN);\n\n                    x = (Double.NaN <= y);\n                    x = (Double.NaN >= y);\n                    x = (Double.NaN > y);\n                    x = (Double.NaN < y);\n                }\n            }\n            "
    },
    {
      "description": "relational operators with Float.NaN",
      "expected-problems": 8,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n\n                {\n                    boolean x;\n                    x = (y <= Float.NaN);\n                    x = (y >= Float.NaN);\n                    x = (y > Float.NaN);\n                    x = (y < Float.NaN);\n\n                    x = (Float.NaN <= y);\n                    x = (Float.NaN >= y);\n                    x = (Float.NaN > y);\n                    x = (Float.NaN < y);\n                }\n            }\n            "
    },
    {
      "description": "ok equality comparison with something else",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n\n                {\n                    boolean x = (y == z);\n                    x = y != z;\n                }\n\n\n            }\n            "
    }
  ]
}