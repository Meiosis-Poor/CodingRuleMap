{
  "name": "AvoidLiteralsInIfCondition",
  "language": "java",
  "description": "\nAvoid using hard-coded literals in conditional statements. By declaring them as static variables\nor private members with descriptive names maintainability is enhanced. By default, the literals \"-1\" and \"0\" are ignored.\nMore exceptions can be defined with the property \"ignoreMagicNumbers\".\n\nThe rule doesn't consider deeper expressions by default, but this can be enabled via the property `ignoreExpressions`.\nWith this property set to false, if-conditions like `i == 1 + 5` are reported as well. Note that in that case,\nthe property ignoreMagicNumbers is not taken into account, if there are multiple literals involved in such an expression.\n        ",
  "example": "private static final int MAX_NUMBER_OF_REQUESTS = 10;\n\npublic void checkRequests() {\n\n    if (i == 10) {                        // magic number, buried in a method\n      doSomething();\n    }\n\n    if (i == MAX_NUMBER_OF_REQUESTS) {    // preferred approach\n      doSomething();\n    }\n\n    if (aString.indexOf('.') != -1) {}     // magic number -1, by default ignored\n    if (aString.indexOf('.') >= 0) { }     // alternative approach\n\n    if (aDouble > 0.0) {}                  // magic number 0.0\n    if (aDouble >= Double.MIN_VALUE) {}    // preferred approach\n\n    // with rule property \"ignoreExpressions\" set to \"false\"\n    if (i == pos + 5) {}  // violation: magic number 5 within an (additive) expression\n    if (i == pos + SUFFIX_LENGTH) {} // preferred approach\n    if (i == 5 && \"none\".equals(aString)) {} // 2 violations: magic number 5 and literal \"none\"\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "basic test",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class PrimitiveType {\n    public void downCastPrimitiveType() {\n        if(i==1) {\n        }\n    }\n}\n        "
    },
    {
      "description": "basic test, part2",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class PrimitiveType {\n    public static final int PRIMITIVE_TYPE = 1;\n    public void downCastPrimitiveType() {\n        if(i==PRIMITIVE_TYPE) {\n        }\n    }\n}\n        "
    },
    {
      "description": "allow null literal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class MyClass {\n    public void myMethod(Object foo) {\n        if(foo != null) {\n        }\n    }\n}\n        "
    },
    {
      "description": "#1213 AvoidLiteralsInIfCondition -- switch for integer comparison with 0",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(String aString) {\n        if( ( flags & Flag.IMPORTANT ) != 0 ) {}\n        if (aString.indexOf(DOT) != -1) {}     // magic number -1, by default ignored\n    }\n    private static final String DOT = \".\";\n    public static class Flag {\n        public static final int IMPORTANT = 0x1;\n    }\n}\n        "
    },
    {
      "description": "#1213 AvoidLiteralsInIfCondition -- switch for integer comparison with 0.0",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(double aDouble) {\n        if (aDouble > 0.0) {}                  // magic number 0.0\n        if (aDouble >= Double.MIN_VALUE) {}    // preferred approach\n    }\n}\n        "
    },
    {
      "description": "XPath error: An empty sequence is not allowed as the second argument of index-of()",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(double aDouble) {\n        if (true && aDouble > 0) {\n        }\n    }\n}\n        "
    },
    {
      "description": "#388 False positive due to space in property list",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nclass Foo {\n    void bar(double num) {\n        if (num == 0.0) {\n            return Math.signum(num) == 1 ? IEEEclass.PositiveZero : IEEEclass.NegativeZero;\n        }\n    }\n    public static enum IEEEclass { PositiveZero, NegativeZero; }\n}\n        "
    },
    {
      "description": "#2140 [java] AvoidLiteralsInIfCondition: false negative for expressions",
      "expected-problems": 4,
      "expected-linenumbers": [
        3,
        3,
        4,
        5
      ],
      "code": "\npublic class Foo {\n    public void bar(int a) {\n        if (a > 3 + 5) {}\n        if (b == -5) {}\n        if (true && b == -5) {}\n        if (c == -1) {}\n    }\n}\n        "
    },
    {
      "description": "More tests with expressions (see #2150)",
      "expected-problems": 8,
      "expected-linenumbers": [
        4,
        7,
        7,
        8,
        9,
        10,
        11,
        11
      ],
      "code": "\npublic class AvoidLiteralsInIfConditionWithExpressions {\n    public void test(String currentToken, int bodyStart, String s) {\n        if (1) {}    // ok, \"1\" is in ignoreMagicNumbers\n        if (1+1) {}  // not ok! multiple literals in expression\n        if (a+1) {}  // ok, single literal, whitelisted\n        if (bodyStart >= 0 && bodyStart != (currentToken.length() - 1)) {} // ok, single literal per expression, both whitelisted\n        if (1 * 5) {} // not ok - literal 5 and also a expression with two literals\n        if (a + 5) {} // not ok\n        if (i == a + 5) {} // not ok - literal 5\n        if (i == 1 + 5) {} // not ok - expression with two literals\n        if (s.equals(\"Prefix\" + \"Suffix\")) {}\n    }\n}\n        "
    },
    {
      "description": "[java] AvoidLiteralsInIfCondition false positive and negative for String literals when ignoreExpressions=true #4514",
      "expected-problems": 2,
      "expected-linenumbers": [
        4,
        5
      ],
      "code": null
    },
    {
      "description": "[java] AvoidLiteralsInIfCondition false positive and negative for String literals when ignoreExpressions=false #4514",
      "expected-problems": 5,
      "expected-linenumbers": [
        4,
        5,
        8,
        9,
        9
      ],
      "code": null
    }
  ]
}