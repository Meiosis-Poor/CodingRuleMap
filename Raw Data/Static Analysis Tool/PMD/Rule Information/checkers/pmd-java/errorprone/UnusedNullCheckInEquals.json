{
  "name": "UnusedNullCheckInEquals",
  "language": "java",
  "description": "\nAfter checking an object reference for null, you should invoke equals() on that object rather than passing\nit to another object's equals() method.\n        ",
  "example": "public class Test {\n\n    public String method1() { return \"ok\";}\n    public String method2() { return null;}\n\n    public void method(String a) {\n        String b;\n        // I don't know it method1() can be \"null\"\n        // but I know \"a\" is not null..\n        // I'd better write a.equals(method1())\n\n        if (a!=null && method1().equals(a)) { // will trigger the rule\n            //whatever\n        }\n\n        if (method1().equals(a) && a != null) { // won't trigger the rule\n            //whatever\n        }\n\n        if (a!=null && method1().equals(b)) { // won't trigger the rule\n            //whatever\n        }\n\n        if (a!=null && \"LITERAL\".equals(a)) { // won't trigger the rule\n            //whatever\n        }\n\n        if (a!=null && !a.equals(\"go\")) { // won't trigger the rule\n            a=method2();\n            if (method1().equals(a)) {\n                //whatever\n            }\n        }\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "failure case",
      "expected-problems": 1,
      "expected-linenumbers": [
        4
      ],
      "code": "\npublic class Foo {\n    public Foo getBar(Foo x) {\n        Foo foo = new Foo();\n        if (x != null && foo.getBar(foo).equals(x)) {}\n    }\n}\n        "
    },
    {
      "description": "different var, 'tis ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(Foo x, Foo y) {\n        Foo foo = new Foo();\n        if (x != null && foo.equals(y)) {}\n    }\n}\n        "
    },
    {
      "description": "proper usage",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(Foo x, Foo y) {\n        if (x != null && x.equals(y)) {}\n    }\n}\n        "
    },
    {
      "description": "variation of correct usage",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(String x, String y) {\n        if (x != null && \"Foo\".equals(y)) {}\n        if (y.equals(x)) {}\n    }\n}\n        "
    },
    {
      "description": "var is not used in equals() call",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public static Foo A = new Foo();\n    public void bar(String c) {\n        String d = \"bar\";\n        if (c != null && A.bar(c).equals(d)) {}\n    }\n}\n        "
    },
    {
      "description": "[ 1481051 ] false + UnusedNullCheckInEquals",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar(Foo[] o1, Foo[] o2) {\n        if (o1 != null && o1[0] != null && o2[0].getName() != null && o2[0].getName().equals(o1[0].getName())) { }\n        if (o1 != null && o2.equals(o1.getName())) { }\n    }\n    public String getName() { return \"\"; }\n}\n        "
    },
    {
      "description": "shouldn't this fail? Yes, it should. Fixed it, so that method calls to equals on variables are considered, too.",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class Foo {\n    public void bar(String x, String y) {\n        if (x != null && y.equals(x)) {}\n    }\n}\n        "
    },
    {
      "description": "Arrays can't be compared directly but with Arrays.equals().",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.Arrays;\n\npublic class Foo {\n    private static boolean isSame(Object[] a1, Object[] a2) {\n        return a1 == a2 || (a1 != null && a2 != null && Arrays.equals(a1, a2));\n    }\n}\n        "
    },
    {
      "description": "False negative with another condition in the middle",
      "expected-problems": 3,
      "expected-linenumbers": [
        3,
        7,
        14
      ],
      "code": "\npublic class Foo {\n    private boolean matches(String thatString, Object other, Class<?> otherClass) {\n        return thatString != null && otherClass == thatString.getClass() && other.equals(thatString);\n    }\n\n    private boolean matches_if(String thatString, Object other, Class<?> otherClass) {\n        if (thatString != null && otherClass == thatString.getClass() && other.equals(thatString)) {\n            return true;\n        }\n        return false;\n    }\n\n    private boolean matches_var(String thatString, Object other, Class<?> otherClass) {\n        boolean result = thatString != null && otherClass == thatString.getClass() && other.equals(thatString);\n        return result;\n    }\n\n    private boolean matchesCorrected(String thatString, Object other, Class<?> otherClass) {\n        return thatString != null && otherClass == thatString.getClass() && thatString.equals(other);\n    }\n}\n        "
    },
    {
      "description": "False positive with string literals / constants",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private static final String CONST = \"\";\n\n    private boolean test(String val) {\n        return val != null && \"\".equals(val);\n    }\n\n    private boolean test_const(String val) {\n        return val != null && CONST.equals(val);\n    }\n}\n        "
    },
    {
      "description": "[java] UnusedNullCheckInEquals: various false positives #3432",
      "expected-problems": 1,
      "expected-linenumbers": [
        22
      ],
      "code": "\npublic class UnusedNullCheckInEquals {\n    // Arrays.equals... note: this is actually a false negative, see https://github.com/pmd/pmd/issues/4907\n    void case1(char[] name, Other other) {\n        if (other.name != null && java.util.Arrays.equals(other.name, name));\n    }\n\n    // Bytes.equals... note: this is actually a false negative, see https://github.com/pmd/pmd/issues/4907\n    void case2(byte[] startRow, byte[] stopRow) {\n        if (startRow != null && startRow.length > 0 && Bytes.equals(startRow,stopRow));\n    }\n\n    // overridden equals() that has more than two arguments - actual false positive, should not be reported\n    void case3a(HashingStrategy hashingStrategy, String k1, String k2) {\n        if (k1 == k2 || (k1 != null && hashingStrategy.equals(k1, k2)));\n    }\n    void case3b(String passthroughNsPrefix, Attribute attribute) {\n        if (passthroughNsPrefix != null && LexerUtils.equals(passthroughNsPrefix, attribute.namespacePrefix(), true, true));\n    }\n\n    // .class.getName() cannot return null - this should be reported, as the null check is indeed unused\n    void case4(String driverDelegate) {\n        if (driverDelegate != null && StdJDBCDelegate.class.getName().equals(driverDelegate)); // line 22\n        if (driverDelegate != null && driverDelegate.equals(StdJDBCDelegate.class.getName())); // corrected version\n    }\n\n    // null checked in condition of conditional expression\n    private int start;\n    private int length;\n    private String file;\n    void case5(UnusedNullCheckInEquals other) {\n        if (this.start == other.start && this.length == other.length &&\n            (this.file == null ? other.file == null : (other.file != null && this.file.equals(other.file))));\n            // note: the last check \"other.file != null\" is actually unnecessary, as we use this.file.equals(...)\n            // to compare with and this.file we already verified, cannot be null\n    }\n}\nclass Other {\n    char[] name;\n}\ninterface HashingStrategy {\n    boolean equals(String s1, String s2);\n}\ninterface Attribute {\n    String namespacePrefix();\n}\nclass LexerUtils {\n    static boolean equals(String prefix1, String prefix2, boolean flag1, boolean flag2) {\n        return false;\n    }\n}\nclass StdJDBCDelegate {}\n"
    }
  ]
}