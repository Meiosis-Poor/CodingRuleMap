{
  "name": "UnitTestShouldUseAfterAnnotation",
  "language": "java",
  "description": "\nThis rule detects methods called `tearDown()` that are not properly annotated as a cleanup method.\nThis is primarily intended to assist in upgrading from JUnit 3, where tear down methods were required to be called `tearDown()`.\nTo a lesser extent, this may help detect omissions even under newer JUnit versions or under TestNG,\nas long as you are following this convention to name the methods.\n\n* JUnit 4 will only execute methods annotated with `@After` after running each test.\n* JUnit 5 introduced `@AfterEach` and `@AfterAll` annotations to execute methods after each test or after\n  all tests in the class, respectively.\n* TestNG provides the annotations `@AfterMethod` and `@AfterClass` to execute methods after each test or after\n  tests in the class, respectively.\n\nNote: This rule was named JUnit4TestShouldUseAfterAnnotation before PMD 7.7.0.\n        ",
  "example": "public class MyTest {\n    public void tearDown() {\n        bad();\n    }\n}\npublic class MyTest2 {\n    @After public void tearDown() {\n        good();\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "JUnit4 test class contains tearDown",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\nimport org.junit.Test;\npublic class Foo {\n    public void tearDown() {}\n    @Test\n    public void foo() {}\n}\n        "
    },
    {
      "description": "JUnit4 test class contains tearDown with different signature is ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport org.junit.Test;\npublic class Foo {\n    public void tearDown(int something) {}\n    @Test\n    public void foo() {}\n}\n"
    },
    {
      "description": "JUnit4 test class contains @After tearDown is ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport org.junit.Test;\nimport org.junit.After;\npublic class Foo {\n    @After\n    public void tearDown() {}\n    @Test\n    public void foo() {}\n}\n        "
    },
    {
      "description": "JUnit4 test class contains renamed tearDown is ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport org.junit.Test;\nimport org.junit.After;\npublic class Foo {\n    @After\n    public void clean() {}\n    @Test\n    public void foo() {}\n}\n        "
    },
    {
      "description": "Contains tearDown, not a JUnit 4/5 or TestNG test is ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            public class Foo {\n                public void tearDown() {}\n                public void foo() {}\n            }\n            "
    },
    {
      "description": "[java] JUnit4TestShouldUseBeforeAnnotation false positive when overriding setUp #1592",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport net.sourceforge.pmd.lang.java.rule.bestpractices.UnitTestShouldUseAfterAnnotationTest.BaseTest;\n\npublic class AReallyCoolFeatureTest extends BaseTest {\n    @Override\n    public void setUp() {\n        super.setUp();\n    }\n\n    @Override\n    public void tearDown() {\n        super.tearDown();\n    }\n}\n        "
    },
    {
      "description": "TestNG test contains tearDown",
      "expected-problems": 1,
      "expected-linenumbers": [
        4
      ],
      "code": "\nimport org.testng.annotations.Test;\n\npublic class MyTestCase {\n    public void tearDown() {} // violation expected\n\n    @Test\n    public void myTest() {}\n}\n"
    },
    {
      "description": "TestNG test contains tearDown with different signature is ok (#1446)",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport org.testng.annotations.AfterMethod;\nimport org.testng.annotations.Test;\npublic class Foo {\n    @AfterMethod\n    public void tearDown(java.lang.reflect.Method m) {}\n    @Test\n    public void foo() {}\n}\n"
    },
    {
      "description": "TestNG test contains tearDown with @AfterMethod is ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport org.testng.annotations.AfterMethod;\nimport org.testng.annotations.Test;\n\npublic class MyTestCase {\n    @AfterMethod\n    public void tearDown() {}\n\n    @Test\n    public void myTest() {}\n}\n"
    },
    {
      "description": "TestNG test contains tearDown with @AfterClass is ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.Test;\n\npublic class MyTestCase {\n    @AfterClass\n    public void tearDown() {}\n\n    @Test\n    public void myTest() {}\n}\n"
    },
    {
      "description": "JUnit 5 test class contains tearDown",
      "expected-problems": 1,
      "expected-linenumbers": [
        4
      ],
      "code": "\nimport org.junit.jupiter.api.Test;\n\npublic class MyTestCase {\n    public void tearDown() {} // violation expected\n\n    @Test\n    public void myTest() {}\n}\n"
    },
    {
      "description": "JUnit 5 test class contains tearDown with @AfterEach is ok (#940)",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MyTestCase {\n    @AfterEach\n    public void tearDown() {}\n\n    @Test\n    public void myTest() {}\n}\n"
    },
    {
      "description": "JUnit 5 test class contains tearDown with @AfterAll is ok (#940)",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.Test;\n\npublic class MyTestCase {\n    @AfterAll\n    public void tearDown() {}\n\n    @Test\n    public void myTest() {}\n}\n"
    }
  ]
}