{
  "name": "UnitTestAssertionsShouldIncludeMessage",
  "language": "java",
  "description": "\nUnit assertions should include an informative message - i.e., use the three-argument version of\n`assertEquals()`, not the two-argument version.\n\nThis rule supports tests using JUnit (3, 4 and 5) and TestNG.\n\nNote: This rule was named JUnitAssertionsShouldIncludeMessage before PMD 7.7.0.\n        ",
  "example": "public class Foo {\n    @Test\n    public void testSomething() {\n        assertEquals(\"foo\", \"bar\");\n        // Use the form:\n        // assertEquals(\"Foo does not equals bar\", \"foo\", \"bar\");\n        // instead\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 45,
  "branches": 4,
  "apis": 5,
  "test": [
    {
      "description": "assertArrayEquals ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport static org.junit.Assert.assertArrayEquals;\npublic class Foo {\n    public void test1() {\n        assertArrayEquals(\"[1] != [1]\", new int[] {1}, new int[] {1});\n    }\n}\n        "
    },
    {
      "description": "assertArrayEquals bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport static org.junit.Assert.assertArrayEquals;\npublic class Foo {\n    public void test1() {\n        assertArrayEquals(new int[] {1}, new int[] {1});\n    }\n}\n        "
    },
    {
      "description": "assertEquals ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertEquals(\"1 != 1\", 1, 1);\n    }\n}\n        "
    },
    {
      "description": "assertEquals with string variable as message ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        String s = \"1 != 1\";\n        assertEquals(s, 1, 1);\n    }\n}\n        "
    },
    {
      "description": "assertEquals with delta ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertEquals(\"foo\", 1, 2, 3);\n    }\n}\n        "
    },
    {
      "description": "assertEquals bad",
      "expected-problems": 1,
      "expected-linenumbers": [
        4
      ],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertEquals(1, 1);\n    }\n}\n        "
    },
    {
      "description": "assertEquals bad, without import",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\npublic class Foo extends junit.framework.TestCase {\n    public void test1() {\n        assertEquals(1, 1);\n    }\n}\n        "
    },
    {
      "description": "assertEquals with delta bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertEquals(1, 2, 3);\n    }\n}\n        "
    },
    {
      "description": "assertEquals with delta but missing assertion message not ok",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        double d = 1;\n        assertEquals(d, 1, 1);\n    }\n}\n        "
    },
    {
      "description": "assertFalse ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void testBar() {\n        assertFalse(\"foo!\", \"foo\".equals(\"foo\"));\n    }\n}\n        "
    },
    {
      "description": "assertFalse bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void testBar() {\n        assertFalse(\"foo\".equals(\"foo\"));\n    }\n}\n        "
    },
    {
      "description": "assertNotNull OK",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertNotNull(\"foo\", null);\n    }\n}\n        "
    },
    {
      "description": "assertNotNull bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertNotNull(null);\n    }\n}\n        "
    },
    {
      "description": "assertNotSame ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertNotSame(\"1 == 2\", 1, 2);\n    }\n}\n        "
    },
    {
      "description": "assertNotSame bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertNotSame(1, 2);\n    }\n}\n        "
    },
    {
      "description": "assertNull OK",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertNull(\"it's not null\", null);\n    }\n}\n        "
    },
    {
      "description": "assertNull bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertNull(null);\n    }\n}\n        "
    },
    {
      "description": "assertSame OK",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertSame(\"not same!\", null, null);\n    }\n}\n        "
    },
    {
      "description": "assertSame bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertSame(null, null);\n    }\n}\n        "
    },
    {
      "description": "assertThat ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\nimport static org.hamcrest.CoreMatchers.*;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertThat(\"Zero is one\", 0, is(not(1)));\n    }\n}\n        "
    },
    {
      "description": "assertThat bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport static org.junit.Assert.assertThat;\nimport static org.hamcrest.CoreMatchers.*;\npublic class Foo {\n    public void test1() {\n        assertThat(0, is(not(1)));\n    }\n}\n        "
    },
    {
      "description": "assertTrue ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertTrue(\"foo\", \"foo\".equals(\"foo\"));\n    }\n}\n        "
    },
    {
      "description": "assertTrue bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        assertTrue(\"foo\".equals(\"foo\"));\n    }\n}\n        "
    },
    {
      "description": "fail ok",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        fail(\"foo\");\n    }\n}\n        "
    },
    {
      "description": "fail bad",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        fail();\n    }\n}\n        "
    },
    {
      "description": "find that pesky bug",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport junit.framework.TestCase;\npublic class Foo extends TestCase {\n    public void test1() {\n        this.test1(\"foo\");\n    }\n}\n        "
    },
    {
      "description": "Not a JUnit test - assertEquals bad",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        assertEquals(1, 1);\n    }\n    private void assertEquals(int x, int y) {\n        if (x != y) throw new AssertionError();\n    }\n}\n        "
    },
    {
      "description": "JUnit 4 - assertEquals",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\nimport org.junit.Test;\nimport org.junit.Assert;\npublic class Foo {\n    @Test\n    public void foo() {\n        Assert.assertEquals(1, 1);\n    }\n}\n        "
    },
    {
      "description": "JUnit 4 - assertEquals - without imports",
      "expected-problems": 1,
      "expected-linenumbers": [
        4
      ],
      "code": "\npublic class Foo {\n    @org.junit.Test\n    public void foo() {\n        org.junit.Assert.assertEquals(1, 1);\n        Foo.fail();\n    }\n    private static void fail() { }\n}\n        "
    },
    {
      "description": "#1374 JUnitAssertionsShouldIncludeMessage does not work",
      "expected-problems": 4,
      "expected-linenumbers": [
        10,
        11,
        12,
        13
      ],
      "code": "\nimport static org.hamcrest.Matchers.containsString;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class TestClass extends Assert {\n\n    @Test\n    public void test() {\n        assertTrue(true);\n        assertEquals(\"\", \"\");\n        assertNull(null);\n        assertThat(\"\", containsString(\"\"));\n    }\n}\n        "
    },
    {
      "description": "#1373 JUnitAssertionsShouldIncludeMessage is no longer compatible with TestNG",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport org.testng.annotations.Test;\nimport static org.testng.Assert.*;\n\npublic class TestNgTestCase {\n    @Test\n    public void testAssert() {\n        assertEquals(\"a\", \"b\", \"message\");\n        assertEquals(1, 2, \"message\");\n        assertFalse(true, \"message\");\n        assertTrue(false, \"message\");\n        assertNotEquals(new Object(), new Object(), \"message\");\n        assertNotNull(null, \"message\");\n        assertNull(null, \"message\");\n    }\n}\n        "
    },
    {
      "description": "Issue #1009: JUnitAssertionsShouldIncludeMessage - False positive with assertEquals and JUnit5",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\n\nclass SimpleTest {\n    @Test\n    public void simpleMethod() {\n        assertEquals(0, 1, \"Not equals 0 != 1\");\n    }\n}\n        "
    },
    {
      "description": "#2149 [java] JUnitAssertionsShouldIncludeMessage - False positive with assertEquals and JUnit5",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\n\nclass SimpleTest {\n    @Test\n    public void simpleMethod() {\n        assertEquals(0, Integer.compare(0, 0), \"Not equals 0 != 1\");\n    }\n}\n        "
    },
    {
      "description": "[java] JUnitAssertionsShouldIncludeMessage false positive with method call #2883",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport static org.junit.Assert.assertEquals;\n\npublic class AssertionMessageTest {\n    public void bar(int expectedLength) {\n        try {\n            Integer.parseInt(\"a\");\n        } catch (RuntimeException e) {\n            assertEquals(e.toString(), expectedLength, e.getMessage().length()); // no warning expected\n        }\n    }\n}\n        "
    },
    {
      "description": "JUnitAssertionsShouldIncludeMessage false positive with AssertJ #1565",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.HashMap;\n\npublic class AssertionMessageTest {\n    public void bar(int expectedLength) {\n        assertThat(new HashMap<>()).as(\"Should return database entries as map\")\n         .hasSize(3)\n         .containsEntry(3, 4);\n    }\n}\n        "
    },
    {
      "description": "[java] JUnitAssertionsShouldIncludeMessage - False positive with AssertJ assertThat and JUnit5 #3350",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\n\nclass SimpleTest {\n    @Test\n    public void simpleMethod() {\n        assertThat(Map.of(\"foo\", \"FOO\"))\n            .containsEntry(\"foo\", \"FOO\")\n            .containsOnlyKeys(\"foo\");\n    }\n}\n        "
    },
    {
      "description": "Assert calls should be considered in the whole file that contains at least one test case",
      "expected-problems": 1,
      "expected-linenumbers": [
        14
      ],
      "code": "\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SimpleTest {\n    @Test\n    public void myTest() {\n        Bean bean = new Bean();\n        bean.doSomething(\"foo\");\n    }\n}\n\nclass Bean {\n    public void doSomething(String name) {\n        assertEquals(\"foo\", name);\n    }\n}\n        "
    }
  ]
}