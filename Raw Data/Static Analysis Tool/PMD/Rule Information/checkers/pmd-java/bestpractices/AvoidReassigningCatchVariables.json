{
  "name": "AvoidReassigningCatchVariables",
  "language": "java",
  "description": "\nReassigning exception variables caught in a catch statement should be avoided because of:\n\n1) If it is needed, multi catch can be easily added and code will still compile.\n\n2) Following the principle of least surprise we want to make sure that a variable caught in a catch statement\nis always the one thrown in a try block.\n        ",
  "example": "public class Foo {\n    public void foo() {\n        try {\n            // do something\n        } catch (Exception e) {\n            e = new NullPointerException(); // not recommended\n        }\n\n        try {\n            // do something\n        } catch (MyException | ServerException e) {\n            e = new RuntimeException(); // won't compile\n        }\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 35,
  "branches": 4,
  "apis": 6,
  "test": [
    {
      "description": "simple catch variable reassignment",
      "expected-problems": 1,
      "expected-linenumbers": [
        8
      ],
      "code": "\nimport java.io.File;\nimport java.io.IOException;\npublic class Foo {\n    public void foo() {\n        try {\n            new File(\"/text.txt\");\n        } catch (IOException e) {\n            e = new NullPointerException();\n        }\n    }\n}\n        "
    },
    {
      "description": "new exception variable allocation is OK",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nimport java.io.File;\nimport java.io.IOException;\npublic class Foo {\n    public void foo() {\n        try {\n            new File(\"/text.txt\");\n        } catch (IOException e) {\n            Exception t;\n            t = new NullPointerException();\n        }\n    }\n}\n        "
    }
  ]
}