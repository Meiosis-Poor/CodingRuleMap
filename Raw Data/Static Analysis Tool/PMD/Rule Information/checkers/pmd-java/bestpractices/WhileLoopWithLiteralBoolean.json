{
  "name": "WhileLoopWithLiteralBoolean",
  "language": "java",
  "description": "\n`do {} while (true);` requires reading the end of the statement before it is\napparent that it loops forever, whereas `while (true) {}` is easier to understand.\n\n`do {} while (false);` is redundant, and if an inner variable scope is required,\na block `{}` is sufficient.\n\n`while (false) {}` will never execute the block and can be removed in its entirety.\n        ",
  "example": "public class Example {\n  {\n    while (true) { } // allowed\n    while (false) { } // disallowed\n    do { } while (true); // disallowed\n    do { } while (false); // disallowed\n    do { } while (false | false); // disallowed\n    do { } while (false || false); // disallowed\n  }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "do while true",
      "expected-problems": 2,
      "expected-linenumbers": [
        4,
        6
      ],
      "code": "\nclass Foo {\n    {\n        do {\n        } while (true);\n        do {\n        } while ((true));\n    }\n}\n        "
    },
    {
      "description": "do while true | true",
      "expected-problems": 8,
      "expected-linenumbers": [
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        12
      ],
      "code": "\nclass Foo {\n    {\n        do { } while (true | true);\n        do { } while (true || true);\n        do { } while ((true | true));\n        do { } while ((true || true));\n\n        boolean otherBool = false;\n        do { } while (true | otherBool);\n        do { } while (true || otherBool);\n        do { } while ((true | otherBool));\n        do { } while ((true || otherBool));\n    }\n}\n        "
    },
    {
      "description": "do while false",
      "expected-problems": 2,
      "expected-linenumbers": [
        4,
        6
      ],
      "code": "\nclass Foo {\n    {\n        do {\n        } while (false);\n        do {\n        } while ((false));\n    }\n}\n        "
    },
    {
      "description": "do while false | false #3455",
      "expected-problems": 4,
      "expected-linenumbers": [
        3,
        5,
        8,
        10
      ],
      "code": "\nclass Foo {\n    {\n        do {\n        } while (false | false);\n        do {\n        } while ((false | false));\n\n        do {\n        } while (false || false);\n        do {\n        } while ((false || false));\n    }\n}\n        "
    },
    {
      "description": "[java] WhileLoopWithLiteralBoolean misses constant expression #3370",
      "expected-problems": 1,
      "expected-linenumbers": [
        4
      ],
      "code": "\nclass Test {\n    public void whileLoopWithLiteralBoolean() {\n        boolean var = true;\n        do {\n            System.out.println(\"test\");\n        } while(false | false);  // should report a warning\n    }\n}\n"
    },
    {
      "description": "do while false & false",
      "expected-problems": 8,
      "expected-linenumbers": [
        3,
        5,
        7,
        9,
        13,
        15,
        17,
        19
      ],
      "code": "\nclass Foo {\n    {\n        do {\n        } while (false & false);\n        do {\n        } while ((false & false));\n        do {\n        } while (false && false);\n        do {\n        } while ((false && false));\n\n        boolean otherBool = true;\n        do {\n        } while (false & otherBool);\n        do {\n        } while ((false & otherBool));\n        do {\n        } while (false && otherBool);\n        do {\n        } while ((false && otherBool));\n    }\n}\n        "
    },
    {
      "description": "do while true && true",
      "expected-problems": 8,
      "expected-linenumbers": [
        3,
        5,
        7,
        9,
        12,
        14,
        16,
        18
      ],
      "code": "\nclass Foo {\n    {\n        do {\n        } while (true & true);\n        do {\n        } while ((true & true));\n        do {\n        } while (true && true);\n        do {\n        } while ((true && true));\n\n        do {\n        } while (true & true & true);\n        do {\n        } while ((true & true & true));\n        do {\n        } while (true && true && true);\n        do {\n        } while ((true && true && true));\n\n        // the following loops are not reported, because they depend on otherBool\n        boolean otherBool = true;\n        do {\n        } while (true & otherBool);\n        do {\n        } while ((true & otherBool));\n        do {\n        } while (true && otherBool);\n        do {\n        } while ((true && otherBool));\n    }\n}\n\n"
    },
    {
      "description": "do while call",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nclass Foo {\n    {\n        do {\n        } while (call(true));\n    }\n}\n        "
    },
    {
      "description": "while true - allowed",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nclass Foo {\n    {\n        while (true) {\n        }\n    }\n}\n        "
    },
    {
      "description": "while false",
      "expected-problems": 2,
      "expected-linenumbers": [
        3,
        5
      ],
      "code": "\nclass Foo {\n    {\n        while (false) {\n        }\n        while ((false)) {\n        }\n    }\n}\n        "
    },
    {
      "description": "while false | false",
      "expected-problems": 8,
      "expected-linenumbers": [
        3,
        4,
        5,
        6,
        8,
        9,
        10,
        11
      ],
      "code": "\nclass Foo {\n    {\n        while (false | false) { }\n        while ((false | false)) { }\n        while (false || false) { }\n        while ((false || false)) { }\n\n        while (false | false | false) { }\n        while ((false | false | false)) { }\n        while (false || false || false) { }\n        while ((false || false || false)) { }\n    }\n}\n        "
    },
    {
      "description": "while call false",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nclass Foo {\n    {\n        while (call(false)) {\n        }\n    }\n}\n        "
    },
    {
      "description": "conditional or with only one boolean literal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nclass Foo {\n    void bar(boolean arg) {\n        while (false | arg) { }\n        while (false || arg) { }\n        do { } while (false || arg);\n    }\n}\n"
    },
    {
      "description": "conditional and with only one boolean literal",
      "expected-problems": 3,
      "expected-linenumbers": [
        3,
        4,
        5
      ],
      "code": "\nclass Foo {\n    void bar(boolean arg) {\n        while (false & arg) { }\n        while (false && arg) { }\n        do { } while (false && arg);\n    }\n}\n"
    },
    {
      "description": "conditional-and boolean literal",
      "expected-problems": 28,
      "expected-linenumbers": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39
      ],
      "code": "\nclass Foo {\n    {\n        // these evaluate to true and are allowed\n        while (true & true) { }\n        while ((true & true)) { }\n        while (true && true) { }\n        while ((true && true)) { }\n\n        // these evaluate to false and should be flagged\n        while (false & false) { } // line 10\n        while ((false & false)) { }\n        while (false && false) { }\n        while ((false && false)) { }\n        while (false & true) { }\n        while ((false & true)) { }\n        while (false && true) { }\n        while ((false && true)) { }\n        while (true & false) { }\n        while ((true & false)) { }\n        while (true && false) { }\n        while ((true && false)) { }\n\n        // do-while loops should always be flagged\n        do {} while (false & false);\n        do {} while ((false & false));\n        do {} while (false && false);\n        do {} while ((false && false));\n        do {} while (true & false);\n        do {} while ((true & false));\n        do {} while (true && false);\n        do {} while ((true && false));\n        do {} while (false & true);\n        do {} while ((false & true));\n        do {} while (false && true);\n        do {} while ((false && true));\n        do {} while (true & true);\n        do {} while ((true & true));\n        do {} while (true && true);\n        do {} while ((true && true));\n    }\n}\n"
    },
    {
      "description": "[java] WhileLoopWithLiteralBoolean - false negative with complex expressions still occurs in PMD 6.52.0 #4250",
      "expected-problems": 4,
      "expected-linenumbers": [
        3,
        7,
        11,
        15
      ],
      "code": "\npublic class Foo {\n    public void func() {\n        do {\n            // Loop Body\n        } while (false || false || false || false); // This is a false negative\n\n        do {\n            // Loop Body\n        } while (false | false | false | false | false); // This is a similar false negative.\n\n        do {            //reported: WhileLoopWithLiteralBoolean:    The loop can be simplified.\n            // Loop Body\n        } while (false && false && false && false);\n\n        do {            //reported: WhileLoopWithLiteralBoolean:    The loop can be simplified.\n            // Loop Body\n        } while (false & false & false & false & false);\n    }\n}\n"
    },
    {
      "description": "False positives without literal booleans",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void func(int x, int y) {\n        do {\n            System.out.println(\"Testing\");\n        } while (x==0 || y==2);\n    }\n}\n"
    }
  ]
}