{
  "name": "AbstractClassWithoutAbstractMethod",
  "language": "java",
  "description": "\nThe abstract class does not contain any abstract methods. An abstract class suggests\nan incomplete implementation, which is to be completed by subclasses implementing the\nabstract methods. If the class is intended to be used as a base class only (not to be instantiated\ndirectly) a protected constructor can be provided to prevent direct instantiation.\n        ",
  "example": "public abstract class Foo {\n  void int method1() { ... }\n  void int method2() { ... }\n  // consider using abstract methods or removing\n  // the abstract modifier and adding protected constructors\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 38,
  "branches": 9,
  "apis": 3,
  "test": [
    {
      "description": "concrete class",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {}\n        "
    },
    {
      "description": "failure case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic abstract class Foo {}\n        "
    },
    {
      "description": "failure case, 1 method",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic abstract class Foo {\n   int bar() {}\n}\n        "
    },
    {
      "description": "abstract class with abstract method",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic abstract class Foo {\n   abstract int bar();\n}\n        "
    },
    {
      "description": "abstract class implements interface",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic abstract class Foo implements SomeItf {\n}\n        "
    }
  ]
}