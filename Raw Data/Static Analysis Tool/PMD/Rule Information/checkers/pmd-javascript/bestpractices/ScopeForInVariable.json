{
  "name": "ScopeForInVariable",
  "language": "javascript",
  "description": "\nA for-in loop in which the variable name is not explicitly scoped to the enclosing scope with the 'var' keyword can\nrefer to a variable in an enclosing scope outside the nearest enclosing scope.  This will overwrite the\nexisting value of the variable in the outer scope when the body of the for-in is evaluated.  When the for-in loop\nhas finished, the variable will contain the last value used in the for-in, and the original value from before\nthe for-in loop will be gone.  Since the for-in variable name is most likely intended to be a temporary name, it\nis better to explicitly scope the variable name to the nearest enclosing scope with 'var'.\n        ",
  "example": "// Ok\nfunction foo() {\n    var p = 'clean';\n    function() {\n        var obj = { dirty: 'dirty' };\n        for (var p in obj) { // Use 'var' here.\n            obj[p] = obj[p];\n        }\n        return x;\n    }();\n\n    // 'p' still has value of 'clean'.\n}\n// Bad\nfunction bar() {\n    var p = 'clean';\n    function() {\n        var obj = { dirty: 'dirty' };\n        for (p in obj) { // Oh no, missing 'var' here!\n            obj[p] = obj[p];\n        }\n        return x;\n    }();\n\n    // 'p' is trashed and has value of 'dirty'!\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": []
}