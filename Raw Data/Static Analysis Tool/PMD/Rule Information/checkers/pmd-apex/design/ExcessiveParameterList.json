{
  "name": "ExcessiveParameterList",
  "language": "apex",
  "description": "\nMethods with numerous parameters are a challenge to maintain, especially if most of them share the\nsame datatype. These situations usually denote the need for new objects to wrap the numerous parameters.\n        ",
  "example": "// too many arguments liable to be mixed up\npublic void addPerson(Integer birthYear, Integer birthMonth, Integer birthDate, Integer height, Integer weight, Integer ssn) {\n    // ...\n}\n// preferred approach\npublic void addPerson(Date birthdate, BodyMeasurements measurements, int ssn) {\n    // ...\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 46,
  "branches": 5,
  "apis": 6,
  "test": [
    {
      "description": "short",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {}\n}\n        "
    },
    {
      "description": "long",
      "expected-problems": 1,
      "expected-linenumbers": [
        2
      ],
      "code": "\npublic class Foo {\n    public void foo(Integer p01, Integer p02, Integer p03, Integer p04, Integer p05, Integer p06, Integer p07, Integer p08, Integer p09, Integer p10 ) { }\n    public void bar(Integer p01, Integer p02, Integer p03, Integer p04, Integer p05 ) { }\n}\n        "
    },
    {
      "description": "#1396 Public method with javadoc",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * Class comment\n */\npublic class SomeClass {\n\n    /**\n     * Comment\n     */\n    public void doSomething() {\n        System.debug('hello world');\n    }\n\n    /** Field comment */\n    private String field;\n}\n       "
    },
    {
      "description": "#5616 [apex] ExcessiveParameterList reports entire method instead of signature only",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\nclass Excessive {\n    void method1(\n        int i1, int i2, int i3, int i4) {\n        // some more lines\n        someMethodCall(i1);\n        someMethodCall(i2);\n    }\n\n    void method2(\n        int i1, int i2,\n        int i3, int i4) {\n        // some more lines\n    }\n}\n"
    }
  ]
}