{
  "name": "StdCyclomaticComplexity",
  "language": "apex",
  "description": "\nComplexity directly affects maintenance costs is determined by the number of decision points in a method\nplus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity.\n        ",
  "example": "// This has a Cyclomatic Complexity = 12\npublic class Foo {\n1   public void example() {\n2   if (a == b || (c == d && e == f)) {\n3       if (a1 == b1) {\n            fiddle();\n4       } else if a2 == b2) {\n            fiddle();\n        }  else {\n            fiddle();\n        }\n5   } else if (c == d) {\n6       while (c == d) {\n            fiddle();\n        }\n7   } else if (e == f) {\n8       for (int n = 0; n < h; n++) {\n            fiddle();\n        }\n    } else {\n        switch (z) {\n9           case 1:\n                fiddle();\n                break;\n10          case 2:\n                fiddle();\n                break;\n11          case 3:\n                fiddle();\n                break;\n12          default:\n                fiddle();\n                break;\n        }\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 210,
  "branches": 30,
  "apis": 17,
  "test": [
    {
      "description": "Simple method",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {}\n}\n        "
    },
    {
      "description": "Simple trigger",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\ntrigger Accounts on Account (before insert, after insert, before update, after update, before delete, after delete) {\n    fflib_SObjectDomain.triggerHandler(Accounts.class);\n}\n        "
    },
    {
      "description": "Simple enum",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic enum Day {\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY\n}\n        "
    },
    {
      "description": "Simple interface",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic interface Foo {\n    void fuu();\n}\n        "
    },
    {
      "description": "Complicated method",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Constructor",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() {}\n}\n        "
    },
    {
      "description": "Testing new parameter showClassesComplexity",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Testing new parameter showMethodsMethods",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Testing default value of showClassMethods and showClassesComplexity",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "#984 Cyclomatic complexity should treat constructors like methods: 1 - showMethodsComplexity=true",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "#984 Cyclomatic complexity should treat constructors like methods: 2 - showMethodsComplexity=false",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "StdCyclomaticComplexity for triggers",
      "expected-problems": 3,
      "expected-linenumbers": [],
      "code": "\ntrigger Accounts on Account (before insert, before update, before delete, after insert, after update, after delete, after undelete) {\n    for(Account acc : Trigger.new) {\n        if(Trigger.isInsert) {\n            // ...\n        }\n\n        // ...\n\n        if(Trigger.isDelete) {\n            // ...\n        }\n    }\n\n    void anotherMethod(Integer i) {\n        if (i == 1) {\n        } else if (i == 2) {\n        }\n    }\n}\n"
    }
  ]
}