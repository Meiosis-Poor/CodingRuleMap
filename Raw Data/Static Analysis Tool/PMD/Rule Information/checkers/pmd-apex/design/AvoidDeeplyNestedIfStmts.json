{
  "name": "AvoidDeeplyNestedIfStmts",
  "language": "apex",
  "description": "\nAvoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.\n        ",
  "example": "public class Foo {\n    public void bar(Integer x, Integer y, Integer z) {\n        if (x>y) {\n            if (y>z) {\n                if (z==x) {\n                    // !! too deep\n                }\n            }\n        }\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 49,
  "branches": 4,
  "apis": 5,
  "test": [
    {
      "description": "Bad, very deep",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar() {\n        Integer x=2;\n        Integer y=3;\n        Integer z=4;\n        if (x>y) {\n            if (y>z) {\n                if (z==x) {\n                    // this is officially out of control now\n                }\n            }\n        }\n    }\n}\n        "
    },
    {
      "description": "OK, not so deep",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar() {\n        if (true) {\n        } else if (true) {\n        } else if (true) {\n        } else {\n            // this ain't good code, but it shouldn't trigger this rule\n        }\n    }\n}\n        "
    },
    {
      "description": "Bad, many deep ifs",
      "expected-problems": 4,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void bar() {\n        if (true) {\n            if (true) {\n                if (true) {\n                }\n            }\n            if(true) {\n                if(true) {\n                    if(true) {\n                    }\n                }\n                if(true) {\n                }\n                if(true) {\n                }\n            }\n        }\n    }\n}\n        "
    },
    {
      "description": "nested ifs with else if",
      "expected-problems": 2,
      "expected-linenumbers": [
        5,
        7
      ],
      "code": "\npublic class Foo {\n    public void bar(Integer x, Integer y, Integer z) {\n        if (x>y) {\n            if (y>z) {\n                if (z==x) { // violation 1\n                    // !! too deep\n                } else if (z == 42) { // violation 2\n                    // !! too deep\n                }\n            }\n        }\n    }\n}\n"
    },
    {
      "description": "if statements within trigger (#5138)",
      "expected-problems": 2,
      "expected-linenumbers": [
        11,
        14
      ],
      "code": "\n// https://github.com/SalesforceLabs/Partner-Onboarding/blob/main/Partner%20Onboarding/triggers/AccountTrigger.trigger\ntrigger AccountTrigger on Account (after insert, after update) {\n\n    public List<Account> updatedAccounts = Trigger.new;\n    if(trigger.isAfter){\n        Map<Id,Account> mapOfOldValues = trigger.oldMap;\n        Map<Id,Id> accountWithOnboardingTemplateIDs = new Map<Id,Id>();\n        for(Account updated_Account : updatedAccounts) {\n            if(updated_Account.Onboarding_Plan__c != null)\n            {\n                if(mapOfOldValues == null){\n                    accountWithOnboardingTemplateIDs.put(updated_Account.Id, updated_Account.Onboarding_Plan__c);\n                } else {\n                    if(updated_Account.Onboarding_Plan__c != mapOfOldValues.get(updated_Account.Id).Onboarding_Plan__c)\n                        accountWithOnboardingTemplateIDs.put(updated_Account.Id, updated_Account.Onboarding_Plan__c);\n                }\n            }\n        } //End For\n\n        if(accountWithOnboardingTemplateIDs.size() > 0){\n            OnboardingPlanService.updateContactsWithOndbPlan(accountWithOnboardingTemplateIDs);\n        }\n    }\n}\n"
    }
  ]
}