{
  "name": "CyclomaticComplexity",
  "language": "apex",
  "description": "\nThe complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic\nin a single method makes its behaviour hard to read and change.\n\nCyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,\nplus one for the method entry. Decision points are places where the control flow jumps to another place in the\nprogram. As such, they include all control flow statements, such as 'if', 'while', 'for', and 'case'.\n\nGenerally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote\nhigh complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10.\nAdditionally, classes with many methods of moderate complexity get reported as well once the total of their\nmethods' complexities reaches 40, even if none of the methods was directly reported.\n\nReported methods should be broken down into several smaller methods. Reported classes should probably be broken down\ninto subcomponents.\n        ",
  "example": "public class Complicated {\n  public void example() { // This method has a cyclomatic complexity of 12\n    int x = 0, y = 1, z = 2, t = 2;\n    boolean a = false, b = true, c = false, d = true;\n    if (a && b || b && d) {\n      if (y == z) {\n        x = 2;\n      } else if (y == t && !d) {\n        x = 2;\n      } else {\n        x = 2;\n      }\n    } else if (c && d) {\n      while (z < y) {\n        x = 2;\n      }\n    } else {\n      for (int n = 0; n < t; n++) {\n        x = 2;\n      }\n    }\n  }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 109,
  "branches": 10,
  "apis": 8,
  "test": [
    {
      "description": "Simple method",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {}\n}\n        "
    },
    {
      "description": "testLessComplicatedThanReportLevel",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {}\n}\n        "
    },
    {
      "description": "Complicated method",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Constructor",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() {}\n}\n        "
    },
    {
      "description": "Test class report level",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Test method report level",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "#984 Cyclomatic complexity should treat constructors like methods: 1 - reportMethods=true",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "#984 Cyclomatic complexity should treat constructors like methods: 2 -reportMethods=false",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Standard Cyclo should count boolean paths",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "Test many unreported methods",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "#768 NPE caused by exception in ApexQualifiedName.ofMethod because of trigger",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": null
    },
    {
      "description": "#768 NPE caused by exception in ApexQualifiedName.ofMethod because of trigger",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": null
    }
  ]
}