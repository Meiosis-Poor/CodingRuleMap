{
  "name": "ApexUnitTestClassShouldHaveAsserts",
  "language": "apex",
  "description": "\nApex unit tests should include at least one assertion.  This makes the tests more robust, and using assert\nwith messages provide the developer a clearer idea of what the test does.  Custom assert method invocation\npatterns can be specified using the 'additionalAssertMethodPattern' property if required.\n        ",
  "example": "@isTest\npublic class Foo {\n    public static testMethod void testSomething() {\n        Account a = null;\n        // This is better than having a NullPointerException\n        // System.assertNotEquals(a, null, 'account not found');\n        a.toString();\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 147,
  "branches": 17,
  "apis": 6,
  "test": [
    {
      "description": "Problematic apex unit test - no assert calls",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n@isTest\npublic class Foo {\n   public static testMethod void testSomething() {\n      Account a = null;\n      // This is better than having a NullPointerException\n      // System.assertNotEquals(a, null, 'account not found');\n      a.toString();\n   }\n}\n        "
    },
    {
      "description": "#1543 [apex] ApexUnitTestClassShouldHaveAsserts assumes APEX is case sensitive",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@isTest\npublic class Foo {\n   public static testMethod void testSomething() {\n      Account a = null;\n      SYSTEM.AssertNotEquals(a, null, 'account not found');\n   }\n}\n        "
    },
    {
      "description": "#1521 [apex] ApexUnitTestClassShouldHaveAsserts: Parsing error on APEX class: expected one element but was: <BlockStatement, BlockStatement>",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@isTest\nprivate class C2_Assignment_Report_Job_Test {\n\n    public static testMethod void testCreateAssignmentsForDifferentRoles() {\n        User u = C2_Test_Utils.getWFUser('testWfc', true);\n        System.runAs(u) {\n            C2_Assignment_Report_Data_Aggregate_Job job = new C2_Assignment_Report_Data_Aggregate_Job();\n            String query = job.start(null).getQuery();\n            C2_Receiver_Unit__c ru = new C2_Receiver_Unit__c(Name='RU1');\n            insert ru;\n            List<C2_Case__c> cases = new List<C2_Case__c>();\n            cases.add(new C2_Case__c(Name='TT0000000', Queue__c = 'PA-CSA', Status__c=C2_Case_Util.STATUS_NEW, PA_CSA__c=u.Id, DSA__c=u.Id, QR_CSA__c=u.Id, Receiver_Unit__c=ru.Id));\n            cases.add(new C2_Case__c(Name='TT0000001', Queue__c = 'PA-CSA', Status__c=C2_Case_Util.STATUS_NEW, PA_CSA__c=u.Id, DSA__c=u.Id, QR_CSA__c=u.Id, Receiver_Unit__c=ru.Id));\n            cases.add(new C2_Case__c(Name='TT0000002', Queue__c = 'PA-CSA', Status__c=C2_Case_Util.STATUS_NEW, PA_CSA__c=u.Id, DSA__c=u.Id, QR_CSA__c=u.Id, Receiver_Unit__c=ru.Id));\n            cases.add(new C2_Case__c(Name='TT0000011', Queue__c = 'DSA', Status__c=C2_Case_Util.STATUS_PACSA_COMPLETE, PA_CSA__c=u.Id, DSA__c=u.Id, QR_CSA__c=u.Id, Receiver_Unit__c=ru.Id));\n            cases.add(new C2_Case__c(Name='TT0000012', Queue__c = 'DSA', Status__c=C2_Case_Util.STATUS_PACSA_COMPLETE, PA_CSA__c=u.Id, DSA__c=u.Id, QR_CSA__c=u.Id, Receiver_Unit__c=ru.Id));\n            cases.add(new C2_Case__c(Name='TT0000021', Queue__c = 'QR-CSA', Status__c=C2_Case_Util.STATUS_DSA_COMPLETE, PA_CSA__c=u.Id, DSA__c=u.Id, QR_CSA__c=u.Id, Receiver_Unit__c=ru.Id));\n            insert cases;\n            List<C2_Case__c> scope = Database.query(query);\n            Test.startTest();\n            job.execute(null, scope);\n            Test.stopTest();\n            List<C2_Case_Assign_Report_Data__c> caseEventEntries =\n                    [select Num_Cases_Assign__c, Num_Cases_Not_Completed__c, Num_Cases_Reassigned__c, Num_Cases_Completed__c, User__c, Role__c\n                    from C2_Case_Assign_Report_Data__c];\n            System.assertEquals(3, caseEventEntries.size());\n            Map<String, Integer> userIdWithRole2ReportData = getCaseEventEntriesMap(caseEventEntries);\n            System.assertEquals(3, userIdWithRole2ReportData.get(createUserRoleKey(u.Id, 'PA-CSA')));\n            System.assertEquals(2, userIdWithRole2ReportData.get(createUserRoleKey(u.Id, 'DSA')));\n            System.assertEquals(1, userIdWithRole2ReportData.get(createUserRoleKey(u.Id, 'QR-CSA')));\n        }\n    }\n}\n        "
    },
    {
      "description": "#1089 [apex] ApexUnitTestClassShouldHaveAsserts: Verify use of additionalAssertMethodPattern, positive test",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@isTest\npublic class Foo {\n   public static testMethod void testAssertIsTrue() {\n      MyAssert.isTrue(someCondition);\n   }\n\n   public static testMethod void testLocalVerify() {\n      verifyState();\n   }\n\n   private static void verifyState() {\n   }\n}\n        "
    },
    {
      "description": "#1089 [apex] ApexUnitTestClassShouldHaveAsserts: Verify use of additionalAssertMethodPattern, negative test",
      "expected-problems": 2,
      "expected-linenumbers": [
        3,
        7
      ],
      "code": "\n@isTest\npublic class Foo {\n   public static testMethod void testAssertIsTrue() {\n      MyAssert.isTrue(someCondition);\n   }\n\n   public static testMethod void testLocalVerify() {\n      verifyState();\n   }\n\n   private static void verifyState() {\n   }\n}\n        "
    },
    {
      "description": "[apex] ApexUnitTestClassShouldHaveAssertsRule: Support new Assert class (Apex v56.0) #4097",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@isTest\npublic class Foo {\n   @isTest\n      static void testAreEqual() {\n      String sub = 'abcde'.substring(2);\n      Assert.areEqual('cde', sub);\n   }\n\n   @isTest\n      static void testAreNotEqual() {\n      String sub = 'abcde'.substring(2);\n      Assert.areNotEqual('xyz', sub);\n   }\n\n   @isTest\n   static void testFail() {\n      try {\n         SomeClass.methodUnderTest();\n         Assert.fail();\n      } catch (DmlException ex) {\n         // Add assertions here about the expected exception\n      }\n   }\n\n   @isTest\n   static void testIsFalse() {\n      Boolean containsCode = 'Salesforce'.contains('code');\n      Assert.isFalse(containsCode);\n   }\n\n   @isTest\n   static void testIsInstanceOf() {\n      Account o = new Account();\n      Assert.isInstanceOfType(o, Account.class);\n   }\n\n   @isTest\n   static void testIsNotInstanceOf() {\n      Contact con = new Contact();\n      Assert.isNotInstanceOfType(con, Account.class);\n   }\n\n   @isTest\n   static void testIsNotNull() {\n      String myString = 'value';\n      Assert.isNotNull(myString);\n   }\n\n   @isTest\n   static void testIsNull() {\n      String myString = null;\n      Assert.isNull(myString);\n   }\n\n   @isTest\n   static void testIsTrue() {\n      Boolean containsForce = 'Salesforce'.contains('force');\n      Assert.isTrue(containsForce);\n   }\n}\n      "
    }
  ]
}