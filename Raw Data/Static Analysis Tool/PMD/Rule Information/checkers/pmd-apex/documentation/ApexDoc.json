{
  "name": "ApexDoc",
  "language": "apex",
  "description": "\nThis rule validates that:\n\n*   ApexDoc comments are present for classes, methods, and properties that are public or global, excluding\n    overrides and test classes (as well as the contents of test classes).\n*   ApexDoc comments are present for classes, methods, and properties that are protected or private, depending\n    on the properties `reportPrivate` and `reportProtected`.\n*   ApexDoc comments should contain @description depending on the property `reportMissingDescription`.\n*   ApexDoc comments on non-void, non-constructor methods should contain @return.\n*   ApexDoc comments on void or constructor methods should not contain @return.\n*   ApexDoc comments on methods with parameters should contain @param for each parameter, in the same\n    order as the method signature.\n*   ApexDoc comments are present on properties is only validated, if the property `reportProperty` is enabled.\n    By setting `reportProperty` to false, you can ignore missing comments on properties.\n\nMethod overrides and tests are both exempted from having ApexDoc.\n        ",
  "example": "/**\n * @description Hello World\n */\npublic class HelloWorld {\n    /**\n     * @description Bar\n     * @return Bar\n     */\n    public Object bar() { return null; }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 209,
  "branches": 41,
  "apis": 12,
  "test": [
    {
      "description": "comment should start with two asterisks",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/*\n * @description Foo\n */\npublic class Foo { }\n        "
    },
    {
      "description": "public test class does not need comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@isTest\npublic class Foo { }\n        "
    },
    {
      "description": "public class should have comment",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo { }\n        "
    },
    {
      "description": "global class should have comment",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nglobal class Foo { }\n        "
    },
    {
      "description": "private class does not need comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nprivate class Foo { }\n        "
    },
    {
      "description": "private class should have comment if specified",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nprivate class Foo { }\n        "
    },
    {
      "description": "class comment should have description",
      "expected-problems": 1,
      "expected-linenumbers": [
        3
      ],
      "code": "\n/**\n */\npublic class Foo { }\n        "
    },
    {
      "description": "correct class comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo { }\n        "
    },
    {
      "description": "correct class comment with annotation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\n@Deprecated\npublic class Foo { }\n        "
    },
    {
      "description": "public interface should have comment",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic interface Foo { }\n        "
    },
    {
      "description": "global interface should have comment",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nglobal interface Foo { }\n        "
    },
    {
      "description": "private interface does not need comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nprivate interface Foo { }\n        "
    },
    {
      "description": "private interface should have comment if specified",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\nprivate interface Foo { }\n        "
    },
    {
      "description": "interface comment should have description",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n */\npublic interface Foo { }\n        "
    },
    {
      "description": "correct interface comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic interface Foo { }\n        "
    },
    {
      "description": "correct interface comment with annotation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\n@Deprecated\npublic interface Foo { }\n        "
    },
    {
      "description": "public method in interface should have comment",
      "expected-problems": 1,
      "expected-linenumbers": [
        5
      ],
      "code": "\n/**\n * @description My Interface\n */\npublic interface MyInterface {\n    void func();\n}\n"
    },
    {
      "description": "public method should have comment",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    public void bar() { }\n}\n        "
    },
    {
      "description": "global method should have comment",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    global void bar() { }\n}\n        "
    },
    {
      "description": "private method does not need comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    private void bar() { }\n}\n        "
    },
    {
      "description": "private method should have comment if specified",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    private void bar() { }\n}\n        "
    },
    {
      "description": "protected method does not need comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    protected void bar() { }\n}\n        "
    },
    {
      "description": "protected method should have comment if specified",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    protected void bar() { }\n}\n        "
    },
    {
      "description": "public override method does not need comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    public override void bar() { }\n}\n        "
    },
    {
      "description": "method comment should have description",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     */\n    public void bar() { }\n}\n        "
    },
    {
      "description": "non-void method comment should have return",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * @description Bar\n     */\n    public Object bar() { return null; }\n}\n        "
    },
    {
      "description": "constructor comment does not need return",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * @description Foo\n     */\n    public Foo() { }\n}\n        "
    },
    {
      "description": "method with param comment should have param",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * @description Bar\n     */\n    public void bar(String foo) { }\n}\n        "
    },
    {
      "description": "params should match method",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * @description Bar\n     * @param foo1 Foo\n     */\n    public void bar(String foo) { }\n}\n        "
    },
    {
      "description": "correct void method comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * @description Bar\n     */\n    public void bar() { }\n}\n        "
    },
    {
      "description": "correct non-void method comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * @description Bar\n     * @return Bar\n     */\n    public Object bar() { return null; }\n}\n        "
    },
    {
      "description": "correct method with params comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * @description Bar\n     * @param foo1 Foo1\n     * @param foo2 Foo2\n     */\n    public void bar(String foo1, String foo2) { return null; }\n}\n        "
    },
    {
      "description": "correct method comment with annotation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * @description Bar\n     */\n    @Deprecated\n    public void bar() { }\n}\n        "
    },
    {
      "description": "public property should have comment",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    public Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "global property should have comment",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    global Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "private property does not need a comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    private Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "private property should have a comment if specified",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    private Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "protected property does not need a comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    protected Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "protected property should have a comment if specified",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    protected Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "property comment should have description",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    public Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "correct property comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * @description Bar\n     */\n    public Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "correct property comment with annotation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * @description Bar\n     */\n    @Deprecated\n    public Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "#1783 correct comments for constructor and inner class",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n\n    /**\n     * @description Foo\n     */\n    public Foo() {\n    }\n\n    /**\n     * @description Bar\n     */\n    public class Bar {\n    }\n}\n        "
    },
    {
      "description": "#1783 correct comments for constructor and inner class - false negative",
      "expected-problems": 1,
      "expected-linenumbers": [
        12
      ],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n\n    /**\n     * @description Foo\n     */\n    public Foo() {\n    }\n\n    public class Bar {\n    }\n}\n        "
    },
    {
      "description": "#3566 [apex] ApexDoc: Verify use of reportMissingDescription, negative test unspecified/default",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\n/**\n * No at-description tag provided.\n */\npublic class Foo {\n\n    /**\n     * No at-description tag provided.\n     */\n    public Foo() {\n    }\n}\n        "
    },
    {
      "description": "#3566 [apex] ApexDoc: Verify use of reportMissingDescription, negative test specified",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\n/**\n * No at-description tag provided.\n */\npublic class Foo {\n\n    /**\n     * No at-description tag provided.\n     */\n    public Foo() {\n    }\n}\n        "
    },
    {
      "description": "#3566 [apex] ApexDoc: Verify use of reportMissingDescription, positive test",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * No at-description tag provided.\n */\npublic class Foo {\n\n    /**\n     * No at-description tag provided.\n     */\n    public Foo() {\n    }\n}\n        "
    },
    {
      "description": "property should have comment",
      "expected-problems": 1,
      "expected-linenumbers": [
        5
      ],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    global Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "property with missing description",
      "expected-problems": 1,
      "expected-linenumbers": [
        8
      ],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    /**\n     * the property bar\n     */\n    global Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "property does not need comment",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description Foo\n */\npublic class Foo {\n    global Object Bar { get; set; }\n}\n        "
    },
    {
      "description": "No comment required for static initializer blocks",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description My Class\n */\npublic class MyClass {\n  static {\n    Test = 1;\n  }\n}\n"
    },
    {
      "description": "Misplaced formal comment for static initializer blocks",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description My Class\n */\npublic class MyClass {\n  /**\n   * Missing description... but that's no problem. Fields are not considered (yet) by ApexDoc.\n   **/\n  public static Integer Test;\n\n  static {\n    Test = 1;\n  }\n}\n"
    },
    {
      "description": "[apex] ApexDoc false-positive for the first method of an annotated Apex class #4774",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n/**\n * @description       : rest service\n **/\n@RestResource(urlMapping='/api/v1/get/*')\nglobal without sharing class TestService {\n    /**\n     * @description Bar\n     */\n    public void bar() { return; }\n}\n"
    }
  ]
}