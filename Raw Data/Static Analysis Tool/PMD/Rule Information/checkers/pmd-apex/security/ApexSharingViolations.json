{
  "name": "ApexSharingViolations",
  "language": "apex",
  "description": "\nDetect classes declared without explicit sharing mode if DML methods are used. This\nforces the developer to take access restrictions into account before modifying objects.\n        ",
  "example": "public without sharing class Foo {\n    // DML operation here\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 162,
  "branches": 24,
  "apis": 16,
  "test": [
    {
      "description": "Apex class that is queued",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class FooBar implements Database.Batchable {\n    public void test1() {\n        List<Account> accounts = [SELECT Id FROM Account LIMIT 1];\n    }\n}\n        "
    },
    {
      "description": "Apex class without any sharing declared with SOQL",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        List<Account> accounts = [SELECT Id FROM Account LIMIT 1];\n    }\n}\n        "
    },
    {
      "description": "Apex class without any sharing declared with DML",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        List<Account> accounts = [SELECT Id FROM Account LIMIT 1];\n        upsert accounts;\n    }\n}\n        "
    },
    {
      "description": "Apex class without any sharing declared with Database method",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public List<SObject> test1() {\n        return Database.query('Select Id from Account LIMIT 100');\n    }\n}\n        "
    },
    {
      "description": "Apex class with sharing and Database method",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic with sharing class Foo {\n    public List<SObject> test1() {\n        return Database.query('Select Id from Account LIMIT 100');\n    }\n}\n        "
    },
    {
      "description": "Apex class with explicit sharing with DML",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic with sharing class Foo {\n    public void test1() {\n        List<Account> accounts = [SELECT Id FROM Account LIMIT 1];\n        upsert accounts;\n    }\n}\n        "
    },
    {
      "description": "Apex class with explicit sharing with DML",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic without sharing class Foo {\n    public void test1() {\n        List<Account> accounts = [SELECT Id FROM Account LIMIT 1];\n        upsert accounts;\n    }\n}\n        "
    },
    {
      "description": "Apex class with inherited sharing doing a safe SOQL query",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic inherited sharing class MyClass {\n   public List<Contact> getAllTheSecrets() {\n       return [SELECT Name FROM Contact];\n   }\n}\n     "
    },
    {
      "description": "Apex test classes do not need a sharing declaration",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@isTest public class MyClass {\n   public List<Contact> getAllTheSecrets() {\n       return [SELECT Name FROM Contact];\n   }\n}\n     "
    },
    {
      "description": "Apex inner test classes do not need a sharing declaration",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@isTest public class Outer {\n   public List<Contact> getAllTheOuterSecrets() {\n       return [SELECT Name FROM Contact];\n   }\n   public class Inner {\n       public List<Contact> getAllTheInnerSecrets() {\n           return [SELECT Name FROM Contact];\n       }\n   }\n}\n     "
    },
    {
      "description": "Nested method calls are detected",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Dao {\n  static Map<String, List<SObject>> recordsMap = new Map<String, List<SObject>>();\n\n  public List<SObject> getRecords(String query) {\n    if (!recordsMap.containsKey(query)) {\n      recordsMap.put(query, Database.query(query));\n    }\n    return recordsMap.get(query);\n  }\n}\n     "
    },
    {
      "description": "Trigger does not require sharing",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\ntrigger MyTrigger on Account(after insert, after update) {\n    [SELECT Id,(SELECT Id FROM Opportunities) FROM Account WHERE Id IN :Trigger.New];\n}\n     "
    },
    {
      "description": "Issue #2774(false positive). Sharing correctly declared on inner class.",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Outer {\n   public with sharing class Inner {\n      public List<Contact> getAllInnerSoqlSecrets() { return [SELECT Name FROM Contact]; }\n   }\n}\n     "
    },
    {
      "description": "Issue #2774(false negative). Sharing incorrectly declared on outer class.",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic with sharing class Outer {\n   public class Inner {\n      public List<Contact> getAllInnerSoqlSecrets() { return [SELECT Name FROM Contact]; }\n   }\n}\n     "
    }
  ]
}