{
  "name": "ApexXSSFromURLParam",
  "language": "apex",
  "description": "\nMakes sure that all values obtained from URL parameters are properly escaped / sanitized\nto avoid XSS attacks.\n        ",
  "example": "public without sharing class Foo {\n    String unescapedstring = ApexPage.getCurrentPage().getParameters.get('url_param');\n    String usedLater = unescapedstring;\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 269,
  "branches": 63,
  "apis": 12,
  "test": [
    {
      "description": "URL parameter in return statement",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public String test1() {\n        return ApexPages.currentPage().getParameters().get('foo');\n    }\n}\n        "
    },
    {
      "description": "Safe cast to ID",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public ID test1() {\n        return ApexPages.currentPage().getParameters().get('foo');\n    }\n}\n        "
    },
    {
      "description": "Safe ID concatenation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public String test1() {\n        ID bas = ApexPages.currentPage().getParameters().get('foo');\n        return 'text' + bas;\n    }\n}\n        "
    },
    {
      "description": "Safe ID",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        ID bas = yoyo(ApexPages.currentPage().getParameters().get('foo'));\n    }\n}\n        "
    },
    {
      "description": "URL parameter in return statement concatenation",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public String test1() {\n        return 'text' + ApexPages.currentPage().getParameters().get('foo');\n    }\n}\n        "
    },
    {
      "description": "URL parameter used without being escaped in return statement",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public String test1() {\n        String bas = ApexPages.currentPage().getParameters().get('foo');\n        return bas;\n    }\n}\n        "
    },
    {
      "description": "URL parameter used without being escaped in return statement concatenation",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public String test1() {\n        String bas = ApexPages.currentPage().getParameters().get('foo');\n        return 'text' + bas;\n    }\n}\n        "
    },
    {
      "description": "URL parameter used without being escaped in return statement concatenation 2",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public String test1() {\n        String bas = ApexPages.currentPage().getParameters().get('foo');\n        return 'text' + bas + 'ttt';\n    }\n}\n        "
    },
    {
      "description": "Safe URL parameter cast to Integer",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Integer test1() {\n        return Integer.valueOf(ApexPages.currentPage().getParameters().get('foo'));\n    }\n}\n        "
    },
    {
      "description": "URL parameter used without being escaped 1",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        baz = bas;\n    }\n}\n        "
    },
    {
      "description": "URL parameter passed to escaping function",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        ESAPI.encoder().SFDC_HTMLENCODE(bas);\n    }\n}\n        "
    },
    {
      "description": "URL parameter passed to a function without being escaped",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        foo(bas);\n    }\n}\n        "
    },
    {
      "description": "URL parameter passed to escaping function and then assigned",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        baz = ESAPI.encoder().SFDC_HTMLENCODE(bas);\n    }\n}\n        "
    },
    {
      "description": "URL parameter passed to a function and then assigned",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        baz = foo(bas);\n    }\n}\n        "
    },
    {
      "description": "URL parameter used without being escaped 2",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String foo = ApexPages.currentPage().getParameters().get('foo');\n        String bar = foo;\n    }\n}\n        "
    },
    {
      "description": "URL parameter concatenation used without being escaped",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz = 'baz';\n        String foo = ApexPages.currentPage().getParameters().get('foo');\n        String bar = foo + baz;\n    }\n}\n        "
    },
    {
      "description": "URL parameter concatenation used without being escaped",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String foo = ApexPages.currentPage().getParameters().get('foo');\n        String bar = 'baz' + foo;\n    }\n}\n        "
    },
    {
      "description": "URL parameter passed to a function",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        foo(ApexPages.currentPage().getParameters().get('foo'));\n    }\n}\n        "
    },
    {
      "description": "Safe URL parameter passed to a function",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        foo(ESAPI.encoder().SFDC_HTMLENCODE(ApexPages.currentPage().getParameters().get('foo')));\n    }\n}\n        "
    },
    {
      "description": "URL parameter passed to a function with variable declaration",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz = foo(ApexPages.currentPage().getParameters().get('foo'));\n    }\n}\n        "
    },
    {
      "description": "Safe URL parameter passed to a function with variable declaration",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz = foo(ESAPI.encoder().SFDC_HTMLENCODE(ApexPages.currentPage().getParameters().get('foo')));\n    }\n}\n        "
    },
    {
      "description": "URL parameter concatenated with variable",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String bar = 'foo' + ApexPages.currentPage().getParameters().get('foo');\n    }\n}\n        "
    },
    {
      "description": "Safe URL parameter concatenated with variable",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String bar = 'foo' + ESAPI.encoder().SFDC_HTMLENCODE(ApexPages.currentPage().getParameters().get('foo'));\n    }\n}\n        "
    },
    {
      "description": "URL parameter type casting is a safety check",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        baz = Integer.valueOf(bas);\n    }\n}\n        "
    },
    {
      "description": "IsNotBlank check",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        boolean isNotBlank = String.isNotBlank(bas);\n    }\n}\n        "
    },
    {
      "description": "URL parameter type empty check",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        boolean isEmpty = String.isEmpty(bas);\n    }\n}\n        "
    },
    {
      "description": "URL parameter type empty check",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        boolean isEmpty = String.isEmpty(ApexPages.currentPage().getParameters().get('foo'));\n    }\n}\n        "
    },
    {
      "description": "URL parameter method passing",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        baz = incorrectEscaping(bas);\n    }\n}\n        "
    },
    {
      "description": "URL parameter var not getting confused with member var",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(Object obj) {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        baz = obj.bas;\n    }\n}\n        "
    },
    {
      "description": "Casting applied to a variable",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        ID baz = ID.valueOf(bas);\n        Boolean jj = Boolean.valueOf(bas);\n    }\n}\n        "
    },
    {
      "description": "Casting applied to a method call",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        ID baz = ID.valueOf(ApexPages.currentPage().getParameters().get('foo'));\n        Boolean jj = Boolean.valueOf(ApexPages.currentPage().getParameters().get('foo'));\n    }\n}\n        "
    },
    {
      "description": "URL parameter method passing",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String baz, bas;\n        bas = ApexPages.currentPage().getParameters().get('foo');\n        baz = String.escapeHtml4(bas);\n    }\n}\n        "
    }
  ]
}