{
  "name": "ApexSuggestUsingNamedCred",
  "language": "apex",
  "description": "\nDetects hardcoded credentials used in requests to an endpoint.\n\nYou should refrain from hardcoding credentials:\n  * They are hard to mantain by being mixed in application code\n  * Particularly hard to update them when used from different classes\n  * Granting a developer access to the codebase means granting knowledge\n     of credentials, keeping a two-level access is not possible.\n  * Using different credentials for different environments is troublesome\n     and error-prone.\n\nInstead, you should use *Named Credentials* and a callout endpoint.\n\nFor more information, you can check [this](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_callouts_named_credentials.htm)\n        ",
  "example": "public class Foo {\n    public void foo(String username, String password) {\n        Blob headerValue = Blob.valueOf(username + ':' + password);\n        String authorizationHeader = 'BASIC ' + EncodingUtil.base64Encode(headerValue);\n        req.setHeader('Authorization', authorizationHeader);\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 183,
  "branches": 45,
  "apis": 11,
  "test": [
    {
      "description": "Using basic auth with literal",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo(String username, String password) {\n        HttpRequest req = new HttpRequest();\n        Blob headerValue = Blob.valueOf(username + ':' + password);\n        String authorizationHeader = 'BASIC ' + EncodingUtil.base64Encode(headerValue);\n        req.setHeader('Authorization', authorizationHeader);\n    }\n}\n        "
    },
    {
      "description": "Using basic auth with variable",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public static String AUTH = 'Authorization';\n\n    public void foo(String username, String password) {\n        HttpRequest req = new HttpRequest();\n        Blob headerValue = Blob.valueOf(username + ':' + password);\n        String authorizationHeader = 'BASIC ' + EncodingUtil.base64Encode(headerValue);\n        req.setHeader(AUTH, authorizationHeader);\n    }\n}\n        "
    },
    {
      "description": "Using named credentials",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setEndpoint('callout:***My_Named_Credential***/some_path');\n        req.setMethod('GET');\n        Http http = new Http();\n        HTTPResponse res = http.send(req);\n    }\n}\n        "
    },
    {
      "description": "key Authorization as literal negative",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('NotAuth', 'SomeValue');\n    }\n}\n        "
    },
    {
      "description": "key Authorization as literal positive",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', 'SomeValue');\n    }\n}\n        "
    },
    {
      "description": "key Authorization as variable negative",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        String key = 'NotAuth';\n        req.setHeader(key, 'SomeValue');\n    }\n}\n        "
    },
    {
      "description": "key Authorization as variable positive",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        String key = 'Authorization';\n        req.setHeader(key, 'SomeValue');\n    }\n}\n        "
    },
    {
      "description": "key Authorization as field negative",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private String key = 'NotAuth';\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader(key, 'SomeValue');\n    }\n}\n        "
    },
    {
      "description": "key Authorization as field positive",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private String key = 'Authorization';\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader(key, 'SomeValue');\n    }\n}\n        "
    },
    {
      "description": "key Authorization as binary expression first negative",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Auth' + 'orization', 'SomeValue');   // we don't resolve binary expressions\n    }\n}\n        "
    },
    {
      "description": "key Authorization as binary expression nonfirst negative",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('SomethingElse' + 'Authorization', 'SomeValue');\n    }\n}\n        "
    },
    {
      "description": "key Authorization as binary expression positive",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization' + 'SomethingElse', 'SomeValue');\n    }\n}\n        "
    },
    {
      "description": "#3158 value as literal negative",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', 'Bearer {!$Credential.Password}');\n    }\n}\n        "
    },
    {
      "description": "value as literal positive",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', 'Bearer HardcodedToken');\n    }\n}\n        "
    },
    {
      "description": "#3158 value as variable negative",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        String value = 'Bearer {!$Credential.Password}';\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', value);\n    }\n}\n        "
    },
    {
      "description": "value as variable positive",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        String value = 'Bearer HardcodedToken';\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', value);\n    }\n}\n        "
    },
    {
      "description": "value as field negative",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private String value = 'Bearer {!$Credential.Password}';\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', value);\n    }\n}\n        "
    },
    {
      "description": "value as field positive",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private String value = 'Bearer HardCodedToken';\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', value);\n    }\n}\n        "
    },
    {
      "description": "value as binary expression literal negative",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', 'Bearer ' + '{!$Credential.Password}');\n    }\n}\n        "
    },
    {
      "description": "value as binary expression variable negative",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        String value = '{!$Credential.Password}';\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', 'Bearer ' + value);\n    }\n}\n        "
    },
    {
      "description": "value as binary expression literal positive",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', 'Bearer ' + 'HardCodedToken');\n    }\n}\n        "
    },
    {
      "description": "value as binary expression variable positive",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        String value = 'HardCodedToken';\n        HttpRequest req = new HttpRequest();\n        req.setHeader('Authorization', 'Bearer ' + value);\n    }\n}\n        "
    }
  ]
}