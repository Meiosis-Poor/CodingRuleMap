{
  "name": "ApexSOQLInjection",
  "language": "apex",
  "description": "\nDetects the usage of untrusted / unescaped variables in DML queries.\n        ",
  "example": "public class Foo {\n    public void test1(String t1) {\n        Database.query('SELECT Id FROM Account' + t1);\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 257,
  "branches": 58,
  "apis": 15,
  "test": [
    {
      "description": "Potentially unsafe SOQL on concatenation of variables 1",
      "expected-problems": 1,
      "expected-linenumbers": [
        5
      ],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = getSomeID();\n        String field2 = 'SELECT Id FROM Account WHERE Id =';\n        Database.query(field2 + field1);\n    }\n}\n        "
    },
    {
      "description": "Potentially unsafe SOQL on concatenation of variables 2",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = getSomeID();\n        String field2 = 'SELECT Id FROM Account WHERE Id =' + field1;\n        Database.query(field2);\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL concatenation of hardcoded variables",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = 'someIDhere';\n        String field2 = 'SELECT Id FROM Account WHERE Id =';\n        Database.query(field2 + field1);\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL on concatenation of variables",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = String.escapeSingleQuotes('yo');\n        String field2 = 'SELECT Id FROM Account WHERE Id =' + field1;\n        Database.query(field2);\n    }\n}\n        "
    },
    {
      "description": "SObjectType and Field as parameters are safe to use in SOQL query string building #4646",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic with sharing class Foo {\n    public void getUniqueValues(SObjectType type, SObjectField field) {\n        String query = 'SELECT ' + field + ' FROM ' + type;\n        Database.query(query);\n    }\n}\n        "
    },
    {
      "description": "SObjectType and Field as variables are safe to use in SOQL query string building #4646",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic with sharing class Foo {\n    public void getUniqueValues() {\n        SObjectType type = getSObjectType();\n        SObjectField field = getSObjectField();\n        String query = 'SELECT ' + field + ' FROM ' + type;\n        Database.query(query);\n    }\n}\n        "
    },
    {
      "description": "Schema.SObjectType and Field as parameters are safe to use in SOQL query string building #4646",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic with sharing class Foo {\n    public void getUniqueValues(Schema.SObjectType type, Schema.SObjectField field) {\n        String query = 'SELECT ' + field + ' FROM ' + type;\n        Database.query(query);\n    }\n}\n        "
    },
    {
      "description": "Schema.SObjectType and Field as variables are safe to use in SOQL query string building #4646",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic with sharing class Foo {\n    public void getUniqueValues() {\n        Schema.SObjectType type = getSObjectType();\n        Schema.SObjectField field = getSObjectField();\n        String query = 'SELECT ' + field + ' FROM ' + type;\n        Database.query(query);\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL + merged variable from a literal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = String.escapeSingleQuotes('yo');\n        Database.query('SELECT Id FROM Account WHERE Id =' + field1);\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL + merged variable",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n\n    public void test1(String field1) {\n        field2 = String.escapeSingleQuotes(field1);\n        Database.query('SELECT Id FROM Account WHERE Id =' + field2);\n    }\n}\n        "
    },
    {
      "description": "No issue when SOQL is called",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        Database.query('SELECT Id FROM Account');\n    }\n}\n        "
    },
    {
      "description": "Potentially unsafe SOQL with variable concatenation",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String t1) {\n        Database.query('SELECT Id FROM Account' + t1);\n    }\n}\n        "
    },
    {
      "description": "Potentially unsafe SOQL with multiple variable concatenation",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String t1, String t2) {\n        Database.query('SELECT Id FROM Account ' + t1 + ' WHERE ' + t2 + ';');\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL with List concatenation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(List<String> t1) {\n        Database.query('SELECT Id FROM Account ' + string.join(t1, ','));\n    }\n}\n        "
    },
    {
      "description": "SOQL + merged variable from literal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = 'yo';\n        Database.query('SELECT Id FROM Account WHERE Id =' + field1);\n    }\n}\n        "
    },
    {
      "description": "SOQL with merged with field variable",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public static String field1 = 'yo';\n    public void test1() {\n        Database.query('SELECT Id FROM Account WHERE Id =' + field1 + 'string');\n    }\n}\n        "
    },
    {
      "description": "SOQL with merged variable from literal 2",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = 'yo';\n        Database.query('SELECT Id FROM Account WHERE Id =' + field1 + 'string');\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL + merged variable",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String field1) {\n        Database.query('SELECT Id FROM Account WHERE Id =' + String.escapeSingleQuotes(field1) + 'string');\n    }\n}\n        "
    },
    {
      "description": "Dynamic SOQL with Integer",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        Integer field1 = 4;\n        Database.query('SELECT Id FROM Account LIMIT ' + field1);\n    }\n}\n        "
    },
    {
      "description": "Dynamic safe escaped SOQL with multipart",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String name = 'Name';\n        String someQuery = 'SELECT Id, ' + name + ' FROM ' + String.escapeSingleQuotes(objectName);\n        Database.query(someQuery);\n    }\n}\n        "
    },
    {
      "description": "Dynamic unsafe SOQL with multipart",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String objectName) {\n        String name = 'Name';\n        String someQuery = 'SELECT Id, ' + name + ' FROM ' + objectName;\n        Database.query(someQuery);\n    }\n}\n        "
    },
    {
      "description": "Unsafe SOQL merged from many variables",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n\n    public List<SObject> test1(String fieldNameQuery, String objName) {\n        String baseQuery = 'Select ';\n        String finalObjectQuery;\n        finalObjectQuery = baseQuery + fieldNameQuery + ' from ' + objName;\n        return Database.query(finalObjectQuery);\n    }\n}\n        "
    },
    {
      "description": "Literal concatenation in the query method is safe",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n\n    public List<SObject> test1(String objName) {\n        String baseQuery = 'Select Id, Name From ' + String.escapeSingleQuotes(objName);\n        return Database.query(baseQuery + ' LIMIT 1');\n    }\n}\n        "
    },
    {
      "description": "Integer is safe in query",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String objName, String lim) { // \"limit\" is a kw\n        Integer nLimit = Integer.valueOf(lim);\n        List<SObject> res = Database.query('Select Id, Name From ' + String.escapeSingleQuotes(objName) + ' LIMIT ' + nLimit);\n    }\n}\n        "
    },
    {
      "description": "ID var decl is safe in query",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        ID someId;\n        someId = getId();\n        List<SObject> res = Database.query('Select Id, Name From Account Where Id=' + someId);\n    }\n}\n        "
    },
    {
      "description": "Safe ID and unsafe String from method signature",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(ID someId, String name) {\n        List<SObject> res = Database.query('Select Id,' + name + ' From Account Where Id=' + someId);\n    }\n}\n        "
    },
    {
      "description": "Ternary operator condition var is safe but resulting type isn't",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String name) {\n        List<SObject> res = Database.query('Select Id,Name From ' + (name == 'Account' ? name : 'Cases'));\n    }\n}\n        "
    },
    {
      "description": "Potentially unsafe SOQL on concatenation of variables in nested class",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\npublic class Foo {\n    class MyNestedClass {\n        public void test1() {\n            String field1 = getSomeID();\n            String field2 = 'SELECT Id FROM Account WHERE Id =';\n            Database.query(field2 + field1);\n        }\n    }\n}\n        "
    },
    {
      "description": "Potentially unsafe SOQL on concatenation of variables 1",
      "expected-problems": 1,
      "expected-linenumbers": [
        5
      ],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = getSomeID();\n        String field2 = 'SELECT COUNT() FROM Account WHERE Id =';\n        Database.countQuery(field2 + field1);\n    }\n}\n        "
    },
    {
      "description": "Potentially unsafe SOQL on concatenation of variables 2",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = getSomeID();\n        String field2 = 'SELECT COUNT() FROM Account WHERE Id =' + field1;\n        Database.countQuery(field2);\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL concatenation of hardcoded variables",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = 'someIDhere';\n        String field2 = 'SELECT COUNT() FROM Account WHERE Id =';\n        Database.countQuery(field2 + field1);\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL on concatenation of variables",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = String.escapeSingleQuotes('yo');\n        String field2 = 'SELECT COUNT() FROM Account WHERE Id =' + field1;\n        Database.countQuery(field2);\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL + merged variable from a literal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = String.escapeSingleQuotes('yo');\n        Database.countQuery('SELECT COUNT() FROM Account WHERE Id =' + field1);\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL + merged variable",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n\n    public void test1(String field1) {\n        field2 = String.escapeSingleQuotes(field1);\n        Database.countQuery('SELECT COUNT() FROM Account WHERE Id =' + field2);\n    }\n}\n        "
    },
    {
      "description": "No issue when SOQL is called",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        Database.countQuery('SELECT COUNT() FROM Account');\n    }\n}\n        "
    },
    {
      "description": "Potentially unsafe SOQL with variable concatenation",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String t1) {\n        Database.countQuery('SELECT COUNT() FROM Account' + t1);\n    }\n}\n        "
    },
    {
      "description": "Potentially unsafe SOQL with multiple variable concatenation",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String t1, String t2) {\n        Database.countQuery('SELECT COUNT() FROM Account ' + t1 + ' WHERE ' + t2 + ';');\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL with List concatenation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(List<String> t1) {\n        Database.countQuery('SELECT COUNT() FROM Account ' + string.join(t1, ','));\n    }\n}\n        "
    },
    {
      "description": "SOQL + merged variable from literal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = 'yo';\n        Database.countQuery('SELECT COUNT() FROM Account WHERE Id =' + field1);\n    }\n}\n        "
    },
    {
      "description": "SOQL with merged with field variable",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public static String field1 = 'yo';\n    public void test1() {\n        Database.countQuery('SELECT COUNT() FROM Account WHERE Id =' + field1 + 'string');\n    }\n}\n        "
    },
    {
      "description": "SOQL with merged variable from literal 2",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String field1 = 'yo';\n        Database.countQuery('SELECT COUNT() FROM Account WHERE Id =' + field1 + 'string');\n    }\n}\n        "
    },
    {
      "description": "Safe SOQL + merged variable",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String field1) {\n        Database.countQuery('SELECT COUNT() FROM Account WHERE Id =' + String.escapeSingleQuotes(field1) + 'string');\n    }\n}\n        "
    },
    {
      "description": "Dynamic SOQL with Integer",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        Integer field1 = 4;\n        Database.countQuery('SELECT COUNT() FROM Account LIMIT ' + field1);\n    }\n}\n        "
    },
    {
      "description": "Dynamic safe escaped SOQL with multipart",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        String name = 'Name';\n        String someQuery = 'SELECT COUNT(' + name + ') FROM ' + String.escapeSingleQuotes(objectName);\n        Database.countQuery(someQuery);\n    }\n}\n        "
    },
    {
      "description": "Dynamic unsafe SOQL with multipart",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String objectName) {\n        String name = 'Name';\n        String someQuery = 'SELECT COUNT(' + name + ') FROM ' + objectName;\n        Database.countQuery(someQuery);\n    }\n}\n        "
    },
    {
      "description": "Unsafe SOQL merged from many variables",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n\n    public List<SObject> test1(String fieldNameQuery, String objName) {\n        String baseQuery = 'Select ';\n        String finalObjectQuery;\n        finalObjectQuery = baseQuery + fieldNameQuery + ' from ' + objName;\n        return Database.countQuery(finalObjectQuery);\n    }\n}\n        "
    },
    {
      "description": "Literal concatenation in the query method is safe",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n\n    public List<SObject> test1(String objName) {\n        String baseQuery = 'Select Count() From ' + String.escapeSingleQuotes(objName);\n        return Database.countQuery(baseQuery + ' LIMIT 1');\n    }\n}\n        "
    },
    {
      "description": "Integer is safe in query",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String objName, String lim) { // \"limit\" is a kw\n        Integer nLimit = Integer.valueOf(lim);\n        List<SObject> res = Database.countQuery('Select Count() From ' + String.escapeSingleQuotes(objName) + ' LIMIT ' + nLimit);\n    }\n}\n        "
    },
    {
      "description": "ID var decl is safe in query",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1() {\n        ID someId;\n        someId = getId();\n        List<SObject> res = Database.countQuery('Select Count() From Account Where Id=' + someId);\n    }\n}\n        "
    },
    {
      "description": "Safe ID and unsafe String from method signature",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(ID someId, String name) {\n        List<SObject> res = Database.countQuery('Select Count(' + name + ') From Account Where Id=' + someId);\n    }\n}\n        "
    },
    {
      "description": "Ternary operator condition var is safe but resulting type isn't",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void test1(String name) {\n        List<SObject> res = Database.countQuery('Select Count() From ' + (name == 'Account' ? name : 'Cases'));\n    }\n}\n        "
    },
    {
      "description": "Potentially unsafe SOQL on concatenation of variables in nested class",
      "expected-problems": 1,
      "expected-linenumbers": [
        6
      ],
      "code": "\npublic class Foo {\n    class MyNestedClass {\n        public void test1() {\n            String field1 = getSomeID();\n            String field2 = 'SELECT Count() FROM Account WHERE Id =';\n            Database.countQuery(field2 + field1);\n        }\n    }\n}\n        "
    }
  ]
}