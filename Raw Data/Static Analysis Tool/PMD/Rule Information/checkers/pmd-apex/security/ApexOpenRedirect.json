{
  "name": "ApexOpenRedirect",
  "language": "apex",
  "description": "\nChecks against redirects to user-controlled locations. This prevents attackers from\nredirecting users to phishing sites.\n        ",
  "example": "public without sharing class Foo {\n    String unsafeLocation = ApexPage.getCurrentPage().getParameters.get('url_param');\n    PageReference page() {\n       return new PageReference(unsafeLocation);\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 161,
  "branches": 32,
  "apis": 13,
  "test": [
    {
      "description": "Schedulable class doesn't need check for open redirect",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo implements Queueable {\n    public PageReference redirect() {\n        return new PageReference(test1 + 'something later');\n    }\n}\n        "
    },
    {
      "description": "PageReference open redirect with unsafe variable concatenation",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public PageReference redirect() {\n        return new PageReference(test1 + 'something later');\n    }\n}\n        "
    },
    {
      "description": "PageReference open redirect with variable",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public PageReference redirect() {\n        return new PageReference(test);\n    }\n}\n        "
    },
    {
      "description": "PageReference open redirect with variable that comes from a literal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public PageReference redirect() {\n        String test = 'hardcoded value here';\n        return new PageReference(test);\n    }\n}\n        "
    },
    {
      "description": "PageReference open redirect with variable concatenation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void redirect() {\n        PageReference newTestPage = new PageReference('https://www.apex.com/myVFPage' + test);\n    }\n}\n        "
    },
    {
      "description": "PageReference open redirect with variable concatenation obtained from a literal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void redirect() {\n        String test = 'hardcoded';\n        PageReference newTestPage = new PageReference(test + 'something later');\n    }\n}\n        "
    },
    {
      "description": "PageReference redirect to literal",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public PageReference redirect() {\n        return new PageReference('/apex/myVFPage');\n    }\n}\n        "
    },
    {
      "description": "PageReference redirect in test class should be ignored",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@isTest\npublic class Foo {\n    public PageReference redirect() {\n        return new PageReference(test);\n    }\n}\n        "
    },
    {
      "description": "PageReference redirect in test method should be ignored",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    static testMethod void redirect() {\n        PageReference pr = new PageReference(test1 + 'something later');\n    }\n}\n        "
    },
    {
      "description": "PageReference to a literal field",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    String test1 = 'string';\n    PageReference pr = new PageReference(test1);\n\n    static PageReference redirect() {\n        return pr;\n    }\n}\n        "
    },
    {
      "description": "Safe pageReference as a field",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    String test1 = '';\n    PageReference pr = new PageReference('/' + test1);\n\n    static PageReference redirect() {\n        return pr;\n    }\n}\n        "
    },
    {
      "description": "Unsafe pageReference object",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n\n    static PageReference redirect(String otherStuff) {\n        String test1 = otherStuff + '/';\n        PageReference pr = new PageReference(test1);\n        return pr;\n    }\n}\n        "
    },
    {
      "description": "Safe pageReference object",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n\n    static PageReference redirect(String otherStuff) {\n        String test1 = '/' + otherStuff;\n        PageReference pr = new PageReference(test1);\n        return pr;\n    }\n}\n        "
    },
    {
      "description": "Safe pageReference object concatenation",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n\n    static PageReference redirect(String otherStuff) {\n        String test1;\n        test1 = '/' + otherStuff;\n        PageReference pr = new PageReference(test1);\n        return pr;\n    }\n}\n        "
    },
    {
      "description": "Static link pageReference object",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    private static final String EMAILAUTHOR_URL = '/_ui/core/email/author/EmailAuthor';\n\n    static PageReference redirect() {\n        return new PageReference(EMAILAUTHOR_URL);\n    }\n}\n        "
    }
  ]
}