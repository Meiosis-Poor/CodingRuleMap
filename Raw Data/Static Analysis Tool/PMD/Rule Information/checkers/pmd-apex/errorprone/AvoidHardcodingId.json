{
  "name": "AvoidHardcodingId",
  "language": "apex",
  "description": "\n      When deploying Apex code between sandbox and production environments, or installing Force.com AppExchange packages,\n      it is essential to avoid hardcoding IDs in the Apex code. By doing so, if the record IDs change between environments,\n      the logic can dynamically identify the proper data to operate against and not fail.\n    ",
  "example": "public without sharing class Foo {\n    void foo() {\n        //Error - hardcoded the record type id\n        if (a.RecordTypeId == '012500000009WAr') {\n            //do some logic here.....\n        } else if (a.RecordTypeId == '0123000000095Km') {\n            //do some logic here for a different record type...\n        }\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 80,
  "branches": 13,
  "apis": 3,
  "test": [
    {
      "description": "Non compliant scenario: Hardcoded Id",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void method (ID newRecordID) {\n        for (Account current : listOfcounts){\n            if (current.getId == 'a002400000RG1nyAAD') {\n            }\n        }\n        method('3266sd35435sd6a');\n    }\n}\n        "
    },
    {
      "description": "Compliant scenario, getting ID dynamically",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void method (ID newRecordID) {\n        for (Account current : listOfcounts){\n            if (current.getId == newRecordID) {\n            }\n        }\n        otherMethod(newRecordID);\n    }\n}\n        "
    },
    {
      "description": "Test for random string combinations",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        return 'jatuatzbtazi124';\n    }\n}\n        "
    },
    {
      "description": "Test for random string combinations - more than 15, less than 18 digits",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        return 'jatua0tzbtazi1243';\n    }\n}\n        "
    },
    {
      "description": "Test for random string combinations - checksum doesn't match",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        return '001A0000006Vm9uIAE';\n    }\n}\n        "
    },
    {
      "description": "[apex] AvoidHardcodingId false positives #776",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {\n        // this is a false positive, we can't say, whether it's a salesforce id or not\n        @SuppressWarnings('PMD.AvoidHardcodingId')\n        String IMEI__c = '359040082913024';\n\n        // now the 6th character is non-0, definitive not a salesforce id\n        String IMEI2__c = '359041082913024';\n    }\n}\n        "
    }
  ]
}