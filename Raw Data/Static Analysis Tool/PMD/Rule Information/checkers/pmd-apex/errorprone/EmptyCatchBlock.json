{
  "name": "EmptyCatchBlock",
  "language": "apex",
  "description": "\n      Empty Catch Block finds instances where an exception is caught, but nothing is done.\n      In most circumstances, this swallows an exception which should either be acted on\n      or reported.\n    ",
  "example": "public void doSomething() {\n    ...\n    try {\n        insert accounts;\n    } catch (DmlException dmle) {\n        // not good\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 0,
  "branches": 0,
  "apis": 0,
  "test": [
    {
      "description": "Failure case: Empty Catch Block",
      "expected-problems": 1,
      "expected-linenumbers": [
        5
      ],
      "code": "\npublic class Foo {\n    public void bar() {\n        try {\n            system.debug(1);\n        } catch(Exception e) {\n        }\n    }\n}\n        "
    },
    {
      "description": "Success case: Empty Catch Block",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public void foo() {\n        try {\n            system.debug(1);\n        } catch(Exception e) {\n            system.debug(e);\n        }\n    }\n}\n        "
    },
    {
      "description": "#3569 - Verify use of allowExceptionNameRegex, negative test unspecified",
      "expected-problems": 2,
      "expected-linenumbers": [
        7,
        16
      ],
      "code": "\n@IsTest\nprivate class FunctionalityTest {\n    static testMethod void testWithModifier() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception e) {\n        }\n    }\n\n    @IsTest\n    static void testWithAnnotation() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception e) {\n        }\n    }\n}\n"
    },
    {
      "description": "#3569 - Verify use of allowExceptionNameRegex, negative test specified",
      "expected-problems": 2,
      "expected-linenumbers": [
        7,
        16
      ],
      "code": "\n@IsTest\nprivate class FunctionalityTest {\n    static testMethod void testWithModifier() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception expected) {\n        }\n    }\n\n    @IsTest\n    static void testWithAnnotation() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception ignored) {\n        }\n    }\n}\n"
    },
    {
      "description": "#3569 - Verify use of allowExceptionNameRegex, positive test unspecified",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@IsTest\nprivate class FunctionalityTest {\n    static testMethod void testWithModifier() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception expected) {\n        }\n    }\n\n    @IsTest\n    static void testWithAnnotation() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception ignored) {\n        }\n    }\n}\n"
    },
    {
      "description": "#3569 - Verify use of allowExceptionNameRegex, positive test specified",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@IsTest\nprivate class FunctionalityTest {\n    static testMethod void testWithModifier() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception ignoreMe) {\n        }\n    }\n\n    @IsTest\n    static void testWithAnnotation() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception ignoreMe) {\n        }\n    }\n}\n"
    },
    {
      "description": "#3569 - Verify use of allowCommentedBlocks, negative test unspecified/default",
      "expected-problems": 2,
      "expected-linenumbers": [
        7,
        17
      ],
      "code": "\n@IsTest\nprivate class FunctionalityTest {\n    static testMethod void testWithModifier() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception e) {\n            // Expected\n        }\n    }\n\n    @IsTest\n    static void testWithAnnotation() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception e) {\n            // Expected\n        }\n    }\n}\n"
    },
    {
      "description": "#3569 - Verify use of allowCommentedBlocks, negative test specified",
      "expected-problems": 2,
      "expected-linenumbers": [
        7,
        17
      ],
      "code": "\n@IsTest\nprivate class FunctionalityTest {\n    static testMethod void testWithModifier() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception e) {\n            // Expected\n        }\n    }\n\n    @IsTest\n    static void testWithAnnotation() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception e) {\n            // Expected\n        }\n    }\n}\n"
    },
    {
      "description": "#3569 - Verify use of allowCommentedBlocks, positive test",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@IsTest\nprivate class FunctionalityTest {\n    static testMethod void testWithModifier() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception e) { // Expected\n        }\n    }\n\n    @IsTest\n    static void testWithAnnotation() {\n        try {\n            doSomethingThatShouldThrowAnException();\n            System.assert(false, 'Expected an exception to be thrown.');\n        } catch (Exception e) {\n            // Expected\n        }\n    }\n}\n"
    },
    {
      "description": "#3569 - Verify use of allowCommentedBlocks=false",
      "expected-problems": 16,
      "expected-linenumbers": [
        8,
        13,
        19,
        23,
        30,
        35,
        43,
        47,
        51,
        54,
        58,
        65,
        70,
        78,
        82,
        86
      ],
      "code": null
    },
    {
      "description": "#3569 - Verify use of allowCommentedBlocks=true, binary search boundaries verification",
      "expected-problems": 4,
      "expected-linenumbers": [
        19,
        23,
        54,
        58
      ],
      "code": null
    }
  ]
}