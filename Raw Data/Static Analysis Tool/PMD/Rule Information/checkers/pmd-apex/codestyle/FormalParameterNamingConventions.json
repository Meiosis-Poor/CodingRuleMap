{
  "name": "FormalParameterNamingConventions",
  "language": "apex",
  "description": "\n            Configurable naming conventions for formal parameters of methods.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. method parameter, or final method parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Apex naming convention (Camel case).\n        ",
  "example": "public class Foo {\n    public bar(Integer methodParameter) { } // This is in camel case, so it's ok\n\n    public baz(Integer METHOD_PARAMETER) { } // This will be reported unless you change the regex\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 57,
  "branches": 6,
  "apis": 3,
  "test": [
    {
      "description": "all is well",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo(final Integer finalMethodParameter, Integer methodParameter) { }\n}\n        "
    },
    {
      "description": "default is camel case",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo(final Integer FINAL_METHOD_PARAMETER, Integer METHOD_PARAMETER) { }\n}\n        "
    },
    {
      "description": "custom final method parameter pattern",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo(final Integer FINAL_METHOD_PARAMETER, Integer METHOD_PARAMETER) { }\n}\n        "
    },
    {
      "description": "custom method parameter pattern",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo(final Integer FINAL_METHOD_PARAMETER, Integer METHOD_PARAMETER) { }\n}\n        "
    },
    {
      "description": "ignores null parameter names",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic with sharing class MyException extends Exception { }\n        "
    }
  ]
}