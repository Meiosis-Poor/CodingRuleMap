{
  "name": "MethodNamingConventions",
  "language": "apex",
  "description": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. static method, or test method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Apex naming convention (Camel case).\n        ",
  "example": "public class Foo {\n    public void instanceMethod() { } // This is in camel case, so it's ok\n\n    public void INSTANCE_METHOD() { } // This will be reported unless you change the regex",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 86,
  "branches": 14,
  "apis": 5,
  "test": [
    {
      "description": "method names should start with lowercase character",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void Bar() {}\n}\n        "
    },
    {
      "description": "method names should not contain underscores",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void bar_foo() {}\n}\n        "
    },
    {
      "description": "all is well",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    void foo() {}\n}\n        "
    },
    {
      "description": "#1343 MethodNamingConventions for overridden methods",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class MethodNamingConventions implements SomeInterface {\n    public override void _foo() {}\n}\n        "
    },
    {
      "description": "#25 Method rules should ignore Property Getter/Setter",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Integer property { get; private set; }\n}\n        "
    },
    {
      "description": "#26 Constructors should not trigger \"Method names should not start with capital letters\" issue",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Foo() {}\n}\n        "
    },
    {
      "description": "all is well",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    @isTest\n    public static void testMethod1() { } // \"testmethod\" is a keyword in apex\n    public static void staticMethod() { }\n    public void instanceMethod() { }\n}\n        "
    },
    {
      "description": "default is camel case",
      "expected-problems": 3,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    @isTest\n    public static void TEST_METHOD() { }\n    public static void STATIC_METHOD() { }\n    public void INSTANCE_METHOD() { }\n}\n        "
    },
    {
      "description": "ignores overrides",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public override Integer BAR() { }\n}\n        "
    },
    {
      "description": "ignores properties",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public Integer BAR { get; set; }\n}\n        "
    },
    {
      "description": "ignores constructors",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class FOO {\n    public FOO() { }\n}\n        "
    },
    {
      "description": "ignores enum methods",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    enum Bar {\n    }\n}\n        "
    },
    {
      "description": "custom test method pattern",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    @isTest\n    public static void TEST_METHOD() { }\n    public static void STATIC_METHOD() { }\n    public void INSTANCE_METHOD() { }\n}\n        "
    },
    {
      "description": "custom static method pattern",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    @isTest\n    public static void TEST_METHOD() { }\n    public static void STATIC_METHOD() { }\n    public void INSTANCE_METHOD() { }\n}\n        "
    },
    {
      "description": "custom instance method pattern",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    @isTest\n    public static void TEST_METHOD() { }\n    public static void STATIC_METHOD() { }\n    public void INSTANCE_METHOD() { }\n}\n        "
    },
    {
      "description": "static initializer",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    static {\n        String s = 'a';\n    }\n}\n"
    }
  ]
}