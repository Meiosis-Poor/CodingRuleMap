{
  "name": "ClassNamingConventions",
  "language": "apex",
  "description": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Apex naming convention (Pascal case).\n        ",
  "example": "public class FooClass { } // This is in pascal case, so it's ok\n\npublic class fooClass { } // This will be reported unless you change the regex",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 95,
  "branches": 10,
  "apis": 5,
  "test": [
    {
      "description": "class names should not start with lowercase character",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class foo {}\n        "
    },
    {
      "description": "all is well",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class FooBar {}\n        "
    },
    {
      "description": "test class all is well",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@isTest\npublic class TestClass { }\n        "
    },
    {
      "description": "abstract class all is well",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic abstract class AbstractClass { }\n        "
    },
    {
      "description": "class all is well",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class FooClass { }\n        "
    },
    {
      "description": "interface all is well",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic interface FooInterface { }\n        "
    },
    {
      "description": "enum all is well",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public enum FooEnum { }\n}\n        "
    },
    {
      "description": "top-level enum all is well",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic enum FooEnum { }\n        "
    },
    {
      "description": "test class default is title case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\n@isTest\npublic class testClass { }\n        "
    },
    {
      "description": "abstract class default is title case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic abstract class abstractClass { }\n        "
    },
    {
      "description": "class default is title case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class fooClass { }\n        "
    },
    {
      "description": "interface default is title case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic interface fooInterface { }\n        "
    },
    {
      "description": "enum default is title case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic class Foo {\n    public enum fooEnum { }\n}\n        "
    },
    {
      "description": "top-level enum default is title case",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic enum fooEnum { }\n        "
    },
    {
      "description": "custom test class pattern",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n@isTest\npublic class TEST_CLASS { }\n        "
    },
    {
      "description": "custom abstract class pattern",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic abstract class ABSTRACT_CLASS { }\n        "
    },
    {
      "description": "custom class pattern",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic class FOO_CLASS { }\n        "
    },
    {
      "description": "custom interface pattern",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic interface FOO_INTERFACE { }\n        "
    },
    {
      "description": "custom enum pattern",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\npublic enum EFOO_ENUM { }\n        "
    },
    {
      "description": "custom enum pattern",
      "expected-problems": 1,
      "expected-linenumbers": [],
      "code": "\npublic enum FooEnum { }\n        "
    },
    {
      "description": "#4800 #5048 Inner class/interface naming convention, names fail to match RegEx",
      "expected-problems": 2,
      "expected-linenumbers": [],
      "code": "\n            \npublic class Outer {\n    public class inner_class_with_a_weird_name_1 { }\n    public interface inner_interface_with_a_weird_name_2 { }\n}\n            \n        "
    },
    {
      "description": "\n            #4800 #5048 Inner class/interface has one standard, outer class has another,\n            and an inner enum has another (should pass.)\n            * Inner class should be camel case.\n            * Outer class should have a prefix (one character, all caps), underscore, then camel case.\n            * Enum name should be all caps (not best practice!)\n        ",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\n            \npublic class C_Outer {\n    public class InnerClass {}\n    public interface InnerInterface {}\n\n    public enum SOMEVALUES {\n        VALUE1,\n        VALUE2\n    }\n}\n            \n        "
    }
  ]
}