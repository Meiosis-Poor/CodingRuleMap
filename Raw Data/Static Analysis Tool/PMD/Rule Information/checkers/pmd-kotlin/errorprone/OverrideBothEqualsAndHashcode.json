{
  "name": "OverrideBothEqualsAndHashcode",
  "language": "kotlin",
  "description": "\nOverride both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.\n        ",
  "example": "class Bar {        // poor, missing a hashCode() method\n    override fun equals(o: Any?): Boolean {\n      // do some comparison\n    }\n}\n\nclass Baz {        // poor, missing an equals() method\n    override fun hashCode(): Int {\n      // return some hash value\n    }\n}\n\nclass Foo {        // perfect, both methods provided\n    override fun equals(other: Any?): Boolean {\n      // do some comparison\n    }\n    override fun hashCode(): Int {\n      // return some hash value\n    }\n}",
  "cwe": null,
  "cwe-description": null,
  "checker-language": "java",
  "loc": 82,
  "branches": 13,
  "apis": 11,
  "test": [
    {
      "description": "Good example #1",
      "expected-problems": 0,
      "expected-linenumbers": [],
      "code": "\nclass Foo {        // perfect, both methods provided\n    override fun equals(other: Any?): Boolean {\n      // do some comparison\n    }\n    override fun hashCode(): Int {\n      // return some hash value\n    }\n}\n     "
    },
    {
      "description": "Bad example #1 - missing hashCode",
      "expected-problems": 1,
      "expected-linenumbers": [
        1
      ],
      "code": "\nclass Bar {        // poor, missing a hashCode() method\n    override fun equals(o: Any?): Boolean {\n      // do some comparison\n    }\n}\n     "
    },
    {
      "description": "Bad example #2 - missing equals",
      "expected-problems": 1,
      "expected-linenumbers": [
        1
      ],
      "code": "\nclass Baz {        // poor, missing an equals() method\n    override fun hashCode(): Int {\n      // return some hash value\n    }\n}\n     "
    }
  ]
}