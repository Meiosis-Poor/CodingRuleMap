{
  "name": "InefficientKeysetIterator",
  "language": [
    "java"
  ],
  "description": "Check for inefficient uses of iterators that iterate on keys then lookup their values, \\\n           instead of iterating on key-value pairs directly.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "OCaml",
  "loc": 114,
  "branches": 13,
  "apis": 13,
  "test": [
    {
      "testname": "Test.java",
      "testlanguage": "java",
      "expected-problems": 21,
      "code": "/*\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport android.os.Bundle;\nimport androidx.collection.ArrayMap;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Set;\n\nclass Test {\n\n  void inefficient_loop_bad(HashMap<String, Integer> testMap) {\n    for (String key : testMap.keySet()) {\n      testMap.get(key);\n    }\n  }\n\n  void inefficient_loop_itr_bad(HashMap<String, Integer> testMap) {\n\n    Iterator itr2 = testMap.keySet().iterator();\n    while (itr2.hasNext()) {\n      String key = (String) itr2.next();\n      testMap.get(key);\n    }\n  }\n\n  void inefficient_loop_itr_heur_bad_FN(HashMap<String, Integer> testMap) {\n\n    Iterator itr2 = testMap.keySet().iterator();\n    int i = 0;\n    int j = 1;\n    int k = 2;\n    int l = 3;\n    while (itr2.hasNext()) {\n      String key = (String) itr2.next();\n      testMap.get(key);\n    }\n  }\n\n  void inefficient_loop_itr_heur_bad(HashMap<String, Integer> testMap) {\n\n    Iterator itr2 = testMap.keySet().iterator();\n    int i = 0;\n    while (itr2.hasNext()) {\n      String key = (String) itr2.next();\n      testMap.get(key);\n    }\n  }\n\n  void inefficient_loop_itr_heur_btw_bad(HashMap<String, Integer> testMap) {\n\n    Set<String> keySet = testMap.keySet();\n    int i = 0;\n    int j = 1;\n    int l = 3;\n    Iterator itr2 = keySet.iterator();\n    while (itr2.hasNext()) {\n      String key = (String) itr2.next();\n      testMap.get(key);\n    }\n  }\n\n  void efficient_loop_itr_ok(HashMap<String, Integer> testMap) {\n\n    Iterator<Map.Entry<String, Integer>> itr1 = testMap.entrySet().iterator();\n    while (itr1.hasNext()) {\n      Map.Entry<String, Integer> entry = itr1.next();\n      entry.getKey();\n      entry.getValue();\n    }\n  }\n\n  void efficient_loop_ok(HashMap<String, Integer> testMap) {\n    for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n      entry.getKey();\n      entry.getValue();\n    }\n  }\n\n  void negative_loop_ok(HashMap<String, Integer> testMap1, HashMap<String, Integer> testMap2) {\n    for (String key : testMap1.keySet()) {\n      testMap2.get(key);\n    }\n  }\n\n  // Bundle doesn't implement Map hence have any entrySet\n  public void from_bundle_ok(Bundle extras) {\n    for (String key : extras.keySet()) {\n      Object t = extras.get(key);\n    }\n  }\n\n  // ArrayMap extends SimpleMap.\n  void inefficient_arraymap_loop_bad(ArrayMap<String, Integer> arrayMap) {\n    for (String key : arrayMap.keySet()) {\n      arrayMap.get(key);\n    }\n  }\n\n  void independent_itr_loop_ok(\n      HashMap<String, Integer> testMap, HashMap<Integer, String> otherMap) {\n    Set<Integer> s = otherMap.keySet(); // irrelevant\n    for (Map.Entry<String, Integer> entry : testMap.entrySet()) {\n      String elem =\n          otherMap.get(entry.getKey()); // getter is not coming from the one we are iterating over\n    }\n  }\n}\n"
    }
  ]
}