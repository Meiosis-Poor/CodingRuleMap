{
  "name": "AnnotationReachability",
  "language": [
    "clang",
    "java",
    "erlang"
  ],
  "description": "Given pairs of source and sink annotations, e.g. `@A` and `@B`, this checker will warn \\\n           whenever some method annotated with `@A` calls, directly or indirectly, another method \\\n           annotated with `@B`. Besides the custom pairs, it is also possible to enable some \\\n           built-in checks, such as `@PerformanceCritical` reaching `@Expensive` or \\\n           `@NoAllocation` reaching `new`. It is also possible to model methods as if they were \\\n           annotated, using regular expressions. This should also work in languages where there \\\n           are no annotations. See flags starting with `--annotation-reachability`.",
  "example": null,
  "cwe": null,
  "cwe-description": null,
  "checker-language": "OCaml",
  "loc": 510,
  "branches": 66,
  "apis": 102,
  "test": []
}